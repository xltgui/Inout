{import: io_contabil.Database};
        {import: io_contabil.RegrasSemCartoes};
        {import: io_contabil.Duplicatas};
        {import: io_contabil.Util};
        {import: io_contabil.RunExtratosECartoes};
        {import: io_contabil.Ottimizza_MeuCaixa};
        {import: io_contabil.Lancamentos};
        {import: io_contabil.TemplateUtils};
        {import: io_contabil.OICUtils};


// TEMPLATE 15.03.2023
// Colocado tipoPlanilha no Lote Encerrado
// colocado para trocar XLSX por CSV se marcado no roteiro

public JSONArray run(InoutLogger logger) throws Exception {

    JSONArray  records  = new JSONArray();
    JSONObject ultimoJS = new JSONObject();

    // gera seguranca nas conexoes com Heroku
    // Create a trust manager that does not validate certificate chains
    javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[] {
            new javax.net.ssl.X509TrustManager(){
                public java.security.cert.X509Certificate[] getAcceptedIssuers(){ return null; }

                public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) { }

                public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) { }
            }
    };

    // Install the all-trusting trust manager
    try {
        javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext.getInstance("TLS");
        sc.init(null, trustAllCerts, new java.security.SecureRandom());
        javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
    } catch (Exception e) {
        //
    }


    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    SysProperties propsEmp = SysProperties.getInstance();
    JSONObject roteiroCRMPrincipal = getRoteiro();
    JSONObject roteiroCRM = getRoteiro();
    JSONObject jStatus = new JSONObject();


    props.load("contabil/" + roteiroCRM.optString("contabilidade") + "/contabil.properties");
    propsEmp.load("contabil/" + roteiroCRM.optString("contabilidade") + "/empresa.properties");

    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
    //Contectar na Base de Dados depara do heroku(nuvem)
    DBPostgreSQL dbIODepara = null;

    String empresa = getNomeEmpresa();


    String codEmpresa = props.get(empresa + "_COD_EMPRESA");

    if (codEmpresa == null) {
        empresa = propsEmp.get("NOME_EMPRESA").toUpperCase();
        codEmpresa = props.get(empresa + "_COD_EMPRESA");
    }

    //#2303-002125
    //codEmpresa que sera utilizado para consultar o plano de contas
    String codEmpresaPlanoContas = codEmpresa;
    if (roteiroCRM.optString("contabilidade").toUpperCase().contains("CONTIBEMASSESSORIA")) {
        codEmpresaPlanoContas = "000";
    }
    //2312-024058
    if (roteiroCRM.optString("contabilidade").toUpperCase().contains("SETEC")) {
        codEmpresaPlanoContas = "000";
    }

    String tipoProduto = "";
    try {
        tipoProduto = props.get(empresa + "_TIPO_PRODUTO");
    } catch (Exception xx) {tipoProduto = "OIC_PACOTE";}


    if (tipoProduto.equals("")) tipoProduto = "OIC_PACOTE";
    if (tipoProduto.contains("IMPLANTA")) tipoProduto = "OIC_PACOTE";
    if (tipoProduto.contains("AVULSO")) tipoProduto = "OIC_PACOTE";


    String processaOud = "";
    try {
        processaOud = props.get("PROCESSA_OUD");
    } catch (Exception e) {processaOud = "FALSE";}
    if (processaOud.equals("")) processaOud = "FALSE";

    String ERPContabil = props.get("ERP_CONTABILIDADE");
    String nomeEmpresa = props.get(empresa + "_NOME_EMPRESA");
    String cnpjEmpresa = props.get(empresa + "_CNPJ_EMPRESA");
    String emailResponsavel = props.get(empresa + "_EMAIL_RESPONSAVEL");
    String emailCanal = props.get("EMAIL_CANAL");
    String statusCRM = props.get(empresa + "_STATUS_CRM");
    String fornecedorUnico = props.get("FORNECEDOR_UNICO");

    String fazLcdpr = "";

    try {
        fazLcdpr = props.get(empresa+"_EQUIPE_FECHAMENTO");
    } catch (Exception e) {fazLcdpr = "FALSE";}

    if (fazLcdpr.toUpperCase().contains("LCDPR")) fazLcdpr = "TRUE";
    if (fazLcdpr.equals("")) fazLcdpr = "FALSE";

    String mantemArquivo = propsEmp.get("MANTEM_ARQUIVO");
    if (mantemArquivo == null) mantemArquivo = "";

    String tipoLancamento = getNomeRota();
    if (tipoLancamento.toUpperCase().contains("PAGAS"))    tipoLancamento = "PAGAR";
    if (tipoLancamento.toUpperCase().contains("RECEBIDA")) tipoLancamento = "RECEBER";


    String compDirName = nomeEmpresa + "_#" + codEmpresa;
    String dirName = "";
    if (tipoLancamento.contains("PAGAR"))   dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/APagar";
    if (tipoLancamento.contains("RECEBER")) dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/AReceber";

    String backupDirName = dirName + "/Processado";

    boolean erroShrink = false;
    boolean geraCabecalhoCordilheira = true;
    boolean cabecalhoNaoEncontrada        = true;
    boolean apagaExtrato        = false;
    boolean apagaContaT         = false;
    boolean geraRegraPortador   = false;
    boolean comparaRazao        = false;
    boolean fazConciliacao		= false;
    boolean encontrouComplemento = true;
    boolean criaCabecalhoConciliacao = true;

    String tipoEmail            = "";
    String arquivoAgora         = tipoLancamento + "-" + DateUtil.dateToString(new Date(),"yyyyMMddhhmm");
    int    contadorArquivo      = 0;

    HashMap mapaLote			= new HashMap();
    HashMap mapaJuros   		= new HashMap();
    HashMap mapaPlano   		= new HashMap();
    HashMap mapaDePara			= new HashMap();
    HashMap mapaArquivo 		= new HashMap();
    HashMap mapaOficial			= new HashMap();
    HashMap mapaDesconto		= new HashMap();
    HashMap mapaVariavel		= new HashMap();
    HashMap mapaDocumento 		= new HashMap();
    HashMap mapaPartPlano 		= new HashMap();
    HashMap mapaFornecedor 		= new HashMap();
    HashMap mapaParticipante	= new HashMap();
    HashMap mapaParcelaDominio	= new HashMap();
    HashMap mapaConciliacao 	= new HashMap();

    JSONObject recordF = new JSONObject();


    String cruzaExtrato			= "";
    String Cruza_Extrato_com_Extrato = "";
    String mesAnoAnterior		= "";
    String mesAno2Anterior		= "";
    String mesAnoAtual			= "";
    int mesRef					= 0;
    int anoRef					= 0;
    String contaJuros			= "";
    String contaDesconto		= "";
    String contaMulta			= "";
    String contaTransitoria		= "";
    String contaEmpresaBranco	= "";
    String movimentoPortador	= "";
    String contaFixaDebito		= "";
    String contaFixaCredito		= "";
    String contaPortador		= "";		//pg - cred | rec - deb
    String contaMovimento		= "";		//pg - deb | rec - cred
    String tabelaContabil       = "";
    String dataMovimento        = "";
    String classificaPlano      = "";
    String classificaFornec     = "";
    String loteConciliacao 		= "";

    boolean geraFiscal			= false;
    String [] loteFiscal		= new String[20];
    boolean apagaStatus         = false;

    String Conta_Fixa_Cruzamento_Extrato = "";
    String contaInvertida	= "";
    String contaBuscaPlano	= "";
    String nomeArquivo      = "";
    String chave			= "";
    String classificacao	= "";
    String dataLote			= DateUtil.dateToString(new Date(),"yyyy-MM");
    String lote						= "";
    String regraContaMovimento 		= "";
    String regraHistorico 			= "";
    String separadorCsv				= ";";
    String separadorTxt				= "";
    String tipoPlanilha				= "";
    String contaTemp				= "";
    String mesesdoAno			    = "JAN;FEV;MAR;ABR;MAI;JUN;JUL;AGO;SET;OUT;NOV;DEZ";
    boolean primeiroArquivo 		= true;
    boolean primeiraVezDuplicata	= true;
    boolean acumulouAntes			= false;
    boolean leuFinanceiro			= false;
    boolean dupliNaoEncontContabil	= false;
    boolean forcarPartidaDobrada	= false;
    boolean temOFX					= false;
    boolean temFiltro				= false;
    boolean temFiscal  				= false;
    boolean temLinhas               = false;
    boolean temIgnorar              = false;
    boolean logs = false;
    StringBuilder logsTxt = new StringBuilder();

    int abaConvertida = 0;

    String retornaPadroes = "";

    String zerarColAlternativo		= "";
    JSONObject deParaObj 			= new JSONObject();
    logger.logInfo("Templatetemp Empresa -> " + nomeEmpresa);
    //logger.logInfo("Padrao empresa " + mantemArquivo);
    try {

        // #DOCUMENTACAO
        // FOR leitura dos arquivos das extensoes abaixo
        // altera-se aqui para NAO LER xlsx por exemplo

        // liberado em 25/11/2020 @DiMaz
        // se precisar alterar somente as quantidades qX e qY
        // cada unidade processa cerca de 3 arquivos ou seja 3 no qY processa uns 9 arquivos excel e uns 9 pdf por vez.
        // aumentar muito o XLSX pode causar TRAVAMENTOS
        int qX	= 9;	//ofx,csv,txt
        int qY	= 3;	//xlsx,pdf
        int qTotal = (qX*3)+(qY*2);
        String extensao = "";
        for(int extArquivo = 0; extArquivo < qTotal; extArquivo++) {
            if (extArquivo < qX)									extensao = ".ofx,.OFX,.omc,.OMC,.html,.HTML,.ret,.RET";
            if (extArquivo >= qX && extArquivo < (2*qX))			extensao = ".pdf,.PDF";
            if (extArquivo >= (2*qX) && extArquivo < (2*qX+qY))		extensao = ".xlsx,.XLSX";
            if (extArquivo >= (2*qX+qY) && extArquivo < (3*qX+qY))	extensao = ".txt,.TXT,.ret,.RET";
            if (extArquivo >= (3*qX+qY))							extensao = ".csv,.CSV";

            if (roteiroCRMPrincipal.has("ignoraExel") && roteiroCRMPrincipal.optString("ignoraExel").toUpperCase().equals("TRUE")) {
                extensao = extensao.replace(".XLSX",".CSV").replace(".xlsx",".csv");
            }
            boolean ignoraAbas = false;

            // ------------------------------------------------------------------------------------------
            // colocado para nao ler pelo template mais de 3 planilhas xlsx por rodada
            // Motivo: quando tem planilha grande em excel para ler na personalizada
            // o sistema roda varias vezes a leitura da planilha no template e depois tudo de novo na personalizada.
            if (mantemArquivo.equals("SIM") && extensao.contains(".XLSX") && extArquivo > 20) continue;
            // ------------------------------------------------------------------------------------------

            for (int porAba = 0; porAba < 60; porAba++) {

                // #DOCUMENTACAO
                // tratamento de abas vindas do CRM

                String apagaArquivo		= backupDirName;
                String abasEspecificas	= roteiroCRMPrincipal.optString("Abas_Especificas");
                abasEspecificas 		= abasEspecificas.replace(",",";");

                if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1;2;3;4;5;6;7;8;9;10";
                // if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1";
                if (!extensao.contains("XLSX") || ignoraAbas)  abasEspecificas = "";

                // liberado em 25/11/2020 @DiMaz
                // tratar js.put("Abas_Especificas", "0-60");
                // grande numero de abas pode travar o nosso sistema
                String abasFor = "";
                if (!abasEspecificas.contains(";") && abasEspecificas.contains("-") && abasEspecificas.length() <= 7) {
                    try {
                        int a = Integer.parseInt(abasEspecificas.substring(0,abasEspecificas.indexOf("-")));
                        int b = Integer.parseInt(abasEspecificas.substring(abasEspecificas.indexOf("-")+1));
                        for (int k = a; k <= b; k++){
                            if (k < b) abasFor += k+";";
                            else abasFor += k;
                        }
                    } catch (Exception fr) {}
                    if(!abasFor.equals("")) abasEspecificas = abasFor;
                }


                if (abasEspecificas.equals("")) {
                    if (porAba > 0) break;
                }
                if (!abasEspecificas.equals("")) {
                    if (!abasEspecificas.contains(String.valueOf(porAba))) {
                        continue;
                    }

                    String ultimaAba = abasEspecificas;
                    if (ultimaAba.contains(";")) ultimaAba = ultimaAba.substring(ultimaAba.lastIndexOf(";")+1).trim();
                    if (!ultimaAba.equals(String.valueOf(porAba)) && extensao.contains(".XLSX")) apagaArquivo = null;
                }

                // #DOCUMENTACAO
                // auto ajuste do separador de CSV e TXt


                if(extensao.contains("CSV"))  separadorCsv = verificaSeparador(separadorCsv, dirName, extensao, props, logger);
                if(extensao.contains("TXT"))  separadorTxt = verificaSeparador(separadorTxt, dirName, extensao, props, logger);



                // #DOCUMENTACAO
                // carregamento do arquivo

                if (mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) apagaArquivo = null;
                // salva arquivo no hasmap para posterior eliminacao


                FilesLoader fileLoader = new FilesLoader(dirName, extensao, apagaArquivo, true, logger);
                int[] abas = {porAba};
                fileLoader.setSheetsToRead(abas);
                try {
                    fileLoader.loadFiles();
                } catch (Exception e) {
                    // logger.logInfo("NAO CONVERTEU PDF " + e.getMessage());
                    File file2 = new File(dirName);

                    File []  arquivoParaConverter = file2.listFiles();
                    if (FileUtil.dirHasFiles(dirName)) {
                        for (File fl: arquivoParaConverter) {
                            if (fl.getName().toUpperCase().contains(".PDF")) {
                                LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                // String idConversor  = TemplateUtils.getIdLote(fl.getName());
                                // logger.logInfo("FOI PRO CONVERSORANTES " + fl.getName());
                                boolean deubom = false;
                                deubom = buscaProtocoloConversor("", apiWeb, tipoLancamento.toLowerCase(), fl.getName(), logger);
                                try {
                                    FileUtil.deleteFile(fl);
                                } catch (Exception XX) {}

                                if (deubom) break;
                            }
                        }
                    }
                }
                try { forcarPartidaDobrada	= Boolean.parseBoolean(roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toLowerCase().trim()); }
                catch (Exception bl) {forcarPartidaDobrada = false;}

                //2304-003551. Quando utiliza esse ERP ? obrigado a sem em partida dobrada.
                if (roteiroCRMPrincipal.optString("erpContabilidade").equals("DOMINIO2") || roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA") || roteiroCRMPrincipal.optString("erpContabilidade").equals("CORDILHEIRA") || roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE")) {
                    forcarPartidaDobrada = true;
                }

                for (MemoryFile memFile: fileLoader.getMemFiles()) {

                    // caso arquivo tenha mais de 250.000 linhas sera ignorado  . Xavier e Mello em 07.06.2023
                    if (memFile.getTotalLines() > 250000 ){
                        temLinhas = true;
                        break;
                    }

                    nomeArquivo = memFile.getFilename().replace("%","");

                    if (nomeArquivo.toUpperCase().startsWith("ABA_")) {

                        abaConvertida = TemplateUtils.verificaAba(nomeArquivo);
                        abasEspecificas = roteiroCRMPrincipal.optString("Abas_Especificas");

                        // logger.logInfo("ACE " + nomeArquivo + " | " + abaConvertida + " | " + abasEspecificas);

                        if (!abasEspecificas.equals("")) {
                            if (!abasEspecificas.contains(String.valueOf(abaConvertida))) continue;
                        }
                    } else abaConvertida = porAba;

                    contadorArquivo++;


                    // =======================  =================   =======================
                    // =======================  VARIAVEIS PADROES   =======================
                    // =======================  =================   =======================
                    String historico      = "";

                    String codCcOrigem    = "";
                    String cpfCnpj        = "";
                    String nomeOrigem     = "";
                    String nomePortador   = "";
                    String nomePortador2  = "";
                    String documento      = "";
                    int    parcelaDoc     = 1;
                    double valorDocumento = 0.00;
                    double valorPagamento = 0.00;
                    double valorDesconto  = 0.00;
                    double valorJuros     = 0.00;
                    double valorMulta     = 0.00;
                    double valorAlternativo = 0;

                    int icodCcOrigem    = -1;
                    int icpfCnpj        = -1;
                    int inomeOrigem     = -1;
                    int inomePortador   = -1;
                    int idocumento      = -1;
                    int idataMovimento  = -1;
                    int ivalorDocumento = -1;
                    int ivalorAlternativo = -1;
                    int ivalorPagamento = -1;
                    int ivalorDesconto  = -1;
                    int ivalorJuros     = -1;
                    int ivalorMulta     = -1;
                    int icomplemento01  = -1;
                    int icomplemento02  = -1;
                    int icomplemento03	= -1;
                    int icomplemento04  = -1;
                    int icomplemento05	= -1;
                    int icomplemento06	= -1;
                    int icomplemento07	= -1;
                    int icomplemento08	= -1;
                    int icomplemento09	= -1;
                    int icomplemento10	= -1;
                    int idataFake		= -1;

                    String contaGetConta	= "";
                    contaPortador	= "";		//pg - cred | rec - deb
                    contaMovimento	= "";		//pg - deb | rec - cred

                    String complemento01	= "";
                    String complemento02	= "";
                    String complemento03	= "";
                    String complemento04	= "";
                    String complemento05	= "";
                    String complemento06	= "";
                    String complemento07	= "";
                    String complemento08	= "";
                    String complemento09	= "";
                    String complemento10	= "";
                    String codCentroCusto	= "";
                    String codFilial        = "";

                    double valorTotalDoc	= 0.0;
                    double valorTotalJuros	= 0.0;
                    double valorTotalDesc	= 0.0;

                    double [] valorDocumentoArray = {0,0,0,0,0,0,0,0,0,0};

                    String classJur			= "";
                    String classDes			= "";
                    String classMul			= "";

                    String codErroString	= "";
                    int cont				= 0;
                    String linhasProblema	= "";
                    String idEmpresa        = "";
                    String idRoteiro  	    = "";

                    String histAux			= "";
                    String anoData			= "";
                    boolean zerar			= true;
                    boolean filtro			= true;


                    String lerAposPrincipal   = "";
                    boolean isLinhaPrincipal  = false;
                    boolean ignorarAntes	  = false;
                    boolean tratarComoExtrato = false;
                    boolean tratarComoDesconto = false;
                    boolean tratarComoJuros = false;

                    dataMovimento        = "";

                    double partidaDobradaJuros		= 0;
                    double partidaDobradaDesconto	= 0;
                    double partidaDobradaMulta		= 0;
                    double valorSomaArray			= 0;

                    String numSeparadorDuplicata = ""; //convertido em int depois

                    StringBuilder cabecalhoPlanilha = new StringBuilder();
                    StringBuilder cabecalhoRegra    = new StringBuilder(); // quarda pemanente as 9 primeiras linhas de cada planilha / aba

                    int  	      contadorCabecalho = 0;

                    // #DOCUMENTACAO
                    // definicao de separador do arquivo
                    // se ouver separador em TXT deve ser tratado caso a caso
                    // evitar usar tabulacao como separador

                    if(extensao.contains(".xlsx,.XLSX")) memFile.setFieldSeparator("\\|");
                    if(extensao.contains(".pdf,.PDF"))   memFile.setFieldSeparator("\\|");
                    if(extensao.contains(".csv,.CSV"))	 memFile.setFieldSeparator(separadorCsv);
                    if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(separadorTxt);

                    // if (codEmpresa.equals("9999")) memFile.setFieldSeparator(";");

                    if (nomeArquivo.toUpperCase().contains(".PDF")) {

                        // logger.logInfo("ARREPENDE " + nomeArquivo /*memFile.getLines().toString().contains("##$%#&") +*/  + " | " +  memFile.getLines().toString().toUpperCase());
                        boolean rodaConversorNovo = TemplateUtils.verificaConversorNovo(StringUtil.removeSpecialCharsToUC(memFile.getLines().toString()).toUpperCase());

                        if (rodaConversorNovo) {
                            LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                            String idConversor  = TemplateUtils.getIdLote(nomeArquivo);
                            // logger.logInfo("FOI PRO CONVERSOR1 " + nomeArquivo);
                            boolean deubom = false;
                            deubom = buscaProtocoloConversor(idConversor, apiWeb, tipoLancamento.toLowerCase(), nomeArquivo, logger);

                            if (deubom) {
                                File file2 = new File(dirName);

                                File []  arquivoParaConverter = file2.listFiles();
                                if (FileUtil.dirHasFiles(dirName)) {
                                    for (File fl: arquivoParaConverter) {
                                        if (fl.getName().toUpperCase().contains(".PDF")) {
                                            try {
                                                FileUtil.deleteFile(fl);
                                            } catch (Exception XX) {}

                                            break;
                                        }
                                    }
                                }
                            }
                            continue;
                        }
                    }


                    if(roteiroCRMPrincipal.has("delimitadorDoArquivo") && !roteiroCRMPrincipal.optString("delimitadorDoArquivo").equals("")) {
                        if(extensao.contains(".txt,.TXT")) memFile.setFieldSeparator(roteiroCRMPrincipal.optString("delimitadorDoArquivo"));
                    }

                    //nao pode usar o line contem  ';' pois nao existe line neste ponto ainda.
                    if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO")) {
                        if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(";");
                    }

                    String abaArquivo = String.valueOf(abaConvertida);
                    if (abaConvertida == 0) abaArquivo = "0";

                    // colocado para nao importar 2x o mesmo arquivo e mesma aba
                    ttArquivo ttArq    = (ttArquivo)mapaArquivo.get(abaArquivo+"-"+nomeArquivo+"-"+abaArquivo);
                    if (ttArq          == null) {
                        ttArq          = new ttArquivo();
                        ttArq.arquivo  = abaArquivo+"-"+nomeArquivo+"-"+abaArquivo;

                    } else continue;
                    mapaArquivo.put(abaArquivo+"-"+nomeArquivo+"-"+abaArquivo,ttArq);

                    // putStatus(dirName, "01--Etapa 1 de 4--" + tipoLancamento + ".status", jStatus, logger);
                    // logger.logInfo("NAAQ " + nomeArquivo.toUpperCase() + " | " + extensao + " | " + separadorCsv);

                    // #DOCUMENTACAO
                    // conecta ao BANCO DE DADOS
                    if (dbIOCont == null) {
                        dbIOCont = connectIOContabil(props, logger);
                    }

                    if (dbIODepara == null) {
                        dbIODepara = connectDeParaDb(logger);
                    }

                    if(primeiroArquivo) {
                        limparIORoteiro(codEmpresa, tipoLancamento, dbIOCont, logger);
                        primeiroArquivo = false;
                    }

                    //########################################################################

                    contaJuros		    = roteiroCRM.optString("contaFixaJuros");
                    contaFixaCredito    = roteiroCRM.optString("contaFixaCredito");
                    contaFixaDebito     = roteiroCRM.optString("contaFixaDebito");
                    contaDesconto 	    = roteiroCRM.optString("contaFixaDesconto");
                    contaMulta		    = roteiroCRM.optString("contaFixaMulta");
                    idEmpresa      	    = roteiroCRM.optString("idEmpresa");
                    idRoteiro   	    = roteiroCRM.optString("idRoteiro");
                    movimentoPortador   = roteiroCRM.optString("movimentoPortador");
                    classificaPlano     = roteiroCRM.optString("classificaPlano");
                    classificaFornec    = roteiroCRM.optString("classificaFornec");
                    cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
                    Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
                    numSeparadorDuplicata   = roteiroCRM.optString("Coluna_Valor_Duplicata_Dominio");

                    tipoPlanilha = "MOVIMENTO";
                    boolean enviaEmailExtrato = false;
                    boolean naoLeMais = false;

                    tipoEmail = "CLIENTE";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZA"))  tipoEmail = "CANAL";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZAF")) tipoEmail = "SUPORTE";

                    String debitoCredito   		 = "";
                    String chaveExtrato    		 = "";

                    //if(roteiroCRM.has("contaBuscaPlano"))contaBuscaPlano = roteiroCRM.optString("contaBuscaPlano");

                    // =======================  ========================   =======================
                    // =======================  VARIAVEIS PERSONALIZADAS   =======================
                    // =======================  ========================   =======================


                    JSONObject objetoParametro = new JSONObject();

                    // #DOCUMENTACAO
                    // busca de indices da planilha principal
                    if (tipoPlanilha.equals("MOVIMENTO")) {
                        roteiroCRM = getRoteiro();

                        inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
                        idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
                        inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
                        idocumento      = getIndice("documento", idocumento, roteiroCRM);
                        ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
                        ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
                        ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
                        ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
                        icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
                        ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
                        ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
                        icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
                        icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
                        icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
                        icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
                        icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
                        icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
                        icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
                        icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
                        icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
                        icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
                        idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
                        icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);

                        zerar 			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
                    }
                    jStatus = new JSONObject();
                    // logger.logInfo("PUTSTATUS 524 " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba + " | " + memFile.getTotalValidLines());
                    if (memFile.getTotalValidLines() > 0) {
                        // logger.logInfo("PUTSTATUS 527 " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba + " | " + memFile.getTotalValidLines());
                        putStatus(dirName, "", jStatus, logger);
                    }
                    try{
                        // #DOCUMENTACAO
                        // leitura linha a linha
                        while (memFile.hasNextLine()) {
                            // logger.logInfo("PUTSTATUS WHILE " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba);
                            try {
                                String line = memFile.nextLine();
                                line = StringUtil.removeSpecialCharsToUC(line);

                                // logger.logInfo("Line -> "+tipoPlanilha + "<<>>" + porAba + "<<>>" + cutString(line,0,30));
                                // logger.logInfo("TP = "+tipoPlanilha+" | LN = "+line);

                                contadorCabecalho++;
                                if (contadorCabecalho<15) {
                                    cabecalhoPlanilha.append(line).append(" ");
                                    cabecalhoRegra.append(stringNormalizer(line.replaceAll("\\|","").replaceAll("\"","").replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replaceAll("  ", " "), true)).append(" ");
                                }
                                else {
                                    cabecalhoPlanilha = new StringBuilder();

                                    // ganha performance nao tendo que ler a planilha vezes pelo template se nao for roteiro secundario
                                    if (mantemArquivo.equals("SIM") && tipoPlanilha.equals("MOVIMENTO") && abaConvertida > 2) ignoraAbas = true;
                                }
                                // logger.logInfo("PUTSTATUS 550");
                                if (cont < 10)   putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + "-" + cont + ".status", jStatus, logger);


                                ////////////////////////////////////////////////////////////////////////////////
                                ///////////////////////////////////////////////////////////// INICIO DOS PADROES
                                ////////////////////////////////////////////////////////////////////////////////

                                JSONObject jDadosPadrao = new JSONObject();
                                jDadosPadrao.put("TIPOLANCAMENTO", tipoLancamento).put("NOMEEMPRESA",nomeEmpresa)
                                        .put("CODEMPRESA", codEmpresa).put("CONTABILIDADE", roteiroCRM.optString("contabilidade"))
                                        .put("NOMEARQUIVO", nomeArquivo);
                                //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
                                //LEITURA PADRAO ARQUIVOS .OMC
                                //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
                                if (nomeArquivo.toUpperCase().contains(".OMC")) {

                                    tipoPlanilha = "OTT-MEUCAIXA";
                                    jDadosPadrao.put("TIPOPLANILHA",   tipoPlanilha);

                                    mapaVariavel = readOttimizzaMeuCaixa(memFile, dbIOCont, jDadosPadrao, mapaVariavel, logger);
                                    jStatus = new JSONObject();
                                    putStatus(dirName, "",  new JSONObject(), logger);
                                    // salva arquivo no hasmap para posterior eliminacao
                                    ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
                                    if (ttArq          == null) {
                                        ttArq          = new ttArquivo();
                                        ttArq.arquivo  = nomeArquivo;

                                    }
                                    mapaArquivo.put(nomeArquivo,ttArq);
                                    // double tempoInicio1 = System.currentTimeMillis();
                                    // logger.logInfo("Tempo Rota2; " + String.format("%.2f", (System.currentTimeMillis() - tempoInicio1) / 1000));
                                    break;
                                }

                                //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
                                //LEITURA PADRAO ARQUIVOS .OFX
                                //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--

                                // quando se mantem o arquivo, somente devem ser processados arquivos padroes
                                // planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
                                // logger.logInfo("NAOFX NO TEMPLATES " + nomeArquivo.toUpperCase() + " | " + mantemArquivo + " | " +tipoProduto);
                                if (nomeArquivo.toUpperCase().contains(".OFX")) {

                                    if (!mantemArquivo.equals("SIM") || !tipoProduto.equals("OIC_PACOTE")) {
                                        tipoPlanilha = "EXTRATO-OFX";


                                        // quando o OFX vem em apenas 1 linha todas as informacoes
                                        // quebramos linha e geramos um novo arquivo para gerar como um ofx normal
                                        if (line.contains("ACCTID")) {
                                            String fileOfx = dirName + "/" + nomeArquivo.toLowerCase().replaceAll(".ofx","_2.ofx");
                                            FileWriter writer = new FileWriter(fileOfx);
                                            writer.writeNewFile(line.replaceAll("><",">\r\n<"));
                                        }
                                        putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", new JSONObject(), logger);     putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", jStatus, logger);
                                        jDadosPadrao.put("CODEMPRESA", codEmpresa).put("TIPOLANCAMENTO", tipoLancamento)
                                                .put("NOMEEMPRESA", nomeEmpresa).put("NOMEARQUIVO", nomeArquivo);
                                        if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) jDadosPadrao.put("CHECKNUM", "CHECKNUM");	//usar para retornar o documento do OFX no complemento02
                                        readOFXDefault(memFile, jDadosPadrao, dbIOCont, logger);
                                        jStatus = new JSONObject();
                                        // logger.logInfo("PUTSTATUS 615");
                                        putStatus(dirName, "",  new JSONObject(), logger);
                                        temOFX = true;
                                        break;
                                    }

                                    // quando FOR OFX e estiver rodando pelo template
                                    // e a empresa for OIC pacote rodar pela especifica, entao foi dado um break para agili
                                    if (mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
                                        break;
                                    }

                                }

                                // quando se mantem o arquivo, somente devem ser processados arquivos padroes
                                // planilhas do roteiro movimento (principal), OFX e demais devem ficar para a rota normal
                                // if(codEmpresa.equals("3673")){
                                // logger.logInfo("mAATEMPLATE " + mantemArquivo + " | " + tipoProduto + " | " + apagaArquivo + " | " + roteiroCRM.optString("Planilhas_Padroes") + " | " + tipoPlanilha + " | " + tipoProduto);
                                // }
 								/*if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  || (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE"))) {
								// if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && abaConvertida == 0)  // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!


									JSONObject variaveis = new JSONObject();
									variaveis.put("line", 			line);
									variaveis.put("anoData", 		anoData);
									variaveis.put("dirName", 		dirName);
									variaveis.put("jStatus", 		jStatus);
									variaveis.put("extensao", 		extensao);
									variaveis.put("codEmpresa", 	codEmpresa);
									variaveis.put("nomeArquivo", 	nomeArquivo);
									variaveis.put("nomeEmpresa", 	nomeEmpresa);
									variaveis.put("nomePortador", 	nomePortador);
									variaveis.put("tipoPlanilha", 	tipoPlanilha);
									variaveis.put("complemento01", 	complemento01);
									variaveis.put("complemento02", 	complemento02);
									variaveis.put("nomePortador2", 	nomePortador2);
									variaveis.put("tipoLancamento", tipoLancamento);
									variaveis.put("cabecalhoPlanilha", cabecalhoPlanilha.toString());

									String retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);

									//logger.logInfo("CHAMOU O TEMPLATE " + retornaPadroes);

									JSONObject objRetorno = new JSONObject(retornaPadroes);
									if (objRetorno.has("tipoRetorno")) {
										anoData        = objRetorno.optString("anoData");
										retornaPadroes = objRetorno.optString("tipoRetorno");
										nomePortador   = objRetorno.optString("nomePortador").trim();
										complemento01  = objRetorno.optString("complemento01").trim();
										nomePortador2  = objRetorno.optString("nomePortador2").trim();
									}
									// logger.logInfo("NP2 == "+nomePortador2);
									if (retornaPadroes.equals("continue")) continue;
									if (retornaPadroes.equals("break"))   {
										jStatus = new JSONObject();
										logger.logInfo("PUTSTATUS 657");
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								}*/

                                if (!cabecalhoPlanilha.toString().equals("") && (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  || (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")))) {
                                    // if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && abaConvertida == 0)  // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

                                    JSONObject variaveis = new JSONObject();
                                    variaveis.put("line", line).put("anoData", anoData).put("dirName", dirName).put("jStatus", jStatus)
                                            .put("extensao", extensao).put("codEmpresa", codEmpresa).put("nomeArquivo", nomeArquivo)
                                            .put("nomeEmpresa", nomeEmpresa).put("nomePortador", nomePortador).put("tipoPlanilha", tipoPlanilha)
                                            .put("complemento01", complemento01).put("complemento02", complemento02)
                                            .put("nomePortador2", nomePortador2).put("tipoLancamento", tipoLancamento)
                                            .put("cabecalhoPlanilha", cabecalhoPlanilha.toString());

                                    // if (codEmpresa.contains("104")) {
                                    // roteiroCRM.put("Planilhas_Padroes", "Extrato_C6Bank_PDF");
                                    // }

                                    // logger.logInfo("nome do arquivo " + nomeArquivo);

                                    retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);


                                    // logger.logInfo("retorna padroes -> " + retornaPadroes);


                                    // logger.logInfo("CHAMOU O TEMPLATE " + retornaPadroes);

                                    JSONObject objRetorno = new JSONObject(retornaPadroes);
                                    if (objRetorno.has("tipoRetorno")) {
                                        anoData        = objRetorno.optString("anoData");
                                        retornaPadroes = objRetorno.optString("tipoRetorno");
                                        nomePortador   = objRetorno.optString("nomePortador").trim();
                                        complemento01  = objRetorno.optString("complemento01").trim();
                                        nomePortador2  = objRetorno.optString("nomePortador2").trim();
                                    }

                                    // logger.logInfo("NP23 " + nomePortador + " | " + nomePortador2);

                                    // logger.logInfo("NP2 ==== "+nomePortador2);
                                    if (retornaPadroes.equals("continue")) continue;
                                    if (retornaPadroes.equals("break"))   {
                                        jStatus = new JSONObject();
                                        putStatus(dirName, "", jStatus, logger);
                                        break;
                                    }
                                }

                                //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~-
                                //                      LEITURA PADRAO DE DUPLICATAS
                                //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~-
                                if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && !mantemArquivo.equals("SIM")){


                                    jDadosPadrao.put("erpContabilidade", roteiroCRMPrincipal.optString("erpContabilidade"))
                                            .put("LINE", line).put("PRIMEIRAVEZ", primeiraVezDuplicata).put("DIRNAME", dirName)
                                            .put("TIPOPLANILHA", tipoPlanilha).put("TIPOLANCAMENTO", tipoLancamento);

                                    if (!numSeparadorDuplicata.equals("")) jDadosPadrao.put("NUMSEPARADOR", numSeparadorDuplicata);

                                    if (!roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("NAO USAR")) {
                                        jDadosPadrao.put("CONTROLAPARCELA",  true);

                                    }

                                    primeiraVezDuplicata = leituraDuplicataPadrao(jDadosPadrao, memFile, mapaVariavel, dbIOCont, logger);

                                    if(!primeiraVezDuplicata){
                                        jStatus = new JSONObject();
                                        // logger.logInfo("PUTSTATUS 687");
                                        putStatus(dirName, "", jStatus, logger);
                                        break;
                                    }
                                }

                                if (cont < 2) {
                                    // logger.logInfo(StringUtil.removeSpecialCharsToUC(memFile.getLines().toString()));
                                    if (TemplateUtils.verificaConciliacao(StringUtil.removeSpecialCharsToUC(memFile.getLines().toString()))) {
                                        mapaConciliacao = leituraConciliacao(mapaConciliacao, memFile, logger);
                                        fazConciliacao = true;
                                        break;
                                    }
                                }

                                //implementa leitura do arquivo de participantes lcdpr
                                if (roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO") && !mantemArquivo.equals("SIM")) {
                                    if (fazLcdpr.equals("TRUE") && cont < 2) {
                                        if (memFile.getLines().toString().toUpperCase().contains("RELACAO DE PARTICIPANTES DA ATIVIDADE RURAL")){
                                            mapaParticipante = leituraLivroCaixaDigitalProdutorRural(mapaParticipante, memFile, logger);
                                            break;
                                        }
                                    }
                                    /// BUSCA COTNRATOS EM ABERTO (RECEBIMENTOS) PARA BAIXA DE CONTRATOS IMOBILIARIOS
                                    if(roteiroCRM.optString("Integracao_contratos").toUpperCase().contains("TRUE")) {

                                        if (line.contains("DOCUMENTO") &&
                                                line.contains("EMISSAO") &&
                                                line.contains("V. PARCELA") &&
                                                line.contains("DEVOLUCAO") &&
                                                line.contains("SALDO") &&
                                                line.contains("SITUACAO")) {


                                            tipoPlanilha = "DUPLICATA-DOMINIO";

                                            if(primeiraVezDuplicata) limparIODuplicataTipoPlanilha(codEmpresa, dbIOCont, tipoPlanilha, logger);

                                            JSONObject jIndices = new JSONObject();

                                            jIndices.put("IVENCIMENTO", 9).put("INOMEORIGEM", 4).put("IDUPLICATA", 4).put("IVALORPARCELA", 12)
                                                    .put("CODEMPRESA", codEmpresa).put("TIPOPLANILHA", tipoPlanilha);

                                            primeiraVezDuplicata = inserirIODuplicata_DominioPlanilha02(jIndices, memFile, dbIOCont, logger);
                                            primeiraVezDuplicata = false;
                                            jStatus = new JSONObject();
                                            // logger.logInfo("PUTSTATUS 730");
                                            putStatus(dirName, "", jStatus, logger);

                                            break;
                                        }
                                    }
                                }



                                ////////////////////////////////////////////////////////////////////////////////
                                //////////////////////////////////////////////////////////////// FIM DOS PADROES
                                ////////////////////////////////////////////////////////////////////////////////

                                // #DOCUMENTACAO
                                // lipeza de variaveis e de indices ao mudar de TIPOPLANILHA
                                // logger.logInfo("CPTS " + cabecalhoPlanilha.toString());
                                JSONObject jDadosObj = new JSONObject();
                                if(!tipoPlanilha.equals(getTipoPlanilha(cabecalhoPlanilha.toString() + " " + line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj))){
                                    inomeOrigem			= -1;		nomeOrigem		= "";
                                    idataMovimento		= -1;		dataMovimento	= "";
                                    inomePortador		= -1;		nomePortador	= "";
                                    idocumento			= -1;		documento		= "";
                                    icpfCnpj			= -1;		cpfCnpj			= "";
                                    icodCcOrigem		= -1;       codCcOrigem		= "";
                                    icomplemento01		= -1;      	complemento01	= "";
                                    icomplemento02		= -1;      	complemento02	= "";
                                    icomplemento03		= -1;      	complemento03	= "";
                                    icomplemento04		= -1;      	complemento04	= "";
                                    icomplemento05		= -1;      	complemento05	= "";
                                    icomplemento06		= -1;      	complemento06	= "";
                                    ivalorDocumento		= -1;		complemento07	= "";
                                    ivalorAlternativo	= -1;		complemento08	= "";
                                    ivalorJuros			= -1;		complemento09	= "";
                                    ivalorDesconto		= -1;		complemento10	= "";
                                    ivalorMulta			= -1;
                                    ivalorPagamento		= -1;
                                    idataFake			= -1;
                                }
                                // #DOCUMENTACAO
                                // busca tipoplanilha e indices da planilhas secundarias

                                tipoPlanilha = getTipoPlanilha(cabecalhoPlanilha.toString() + " " + line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj);
                                // if(codEmpresa.equals("214")){
                                // logger.logInfo("214 = TP -> "+tipoPlanilha+" | LN = "+line);
                                // }

                                if (nomeArquivo.toUpperCase().contains(".PDF") && !nomeArquivo.toUpperCase().contains(".CSV")) {
                                    if (TemplateUtils.verificaConversorNovoTipoPlanilha(tipoPlanilha)) {
                                        LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                        String idConversor  = TemplateUtils.getIdLote(nomeArquivo);
                                        // logger.logInfo("FOI PRO CONVERSOR1 " + nomeArquivo);
                                        boolean deubom = false;
                                        deubom = buscaProtocoloConversor(idConversor, apiWeb, tipoLancamento.toLowerCase(), nomeArquivo, logger);

                                        if (deubom) {
                                            File file2 = new File(dirName);

                                            File []  arquivoParaConverter = file2.listFiles();
                                            if (FileUtil.dirHasFiles(dirName)) {
                                                for (File fl: arquivoParaConverter) {
                                                    if (fl.getName().toUpperCase().contains(".PDF")) {
                                                        try {
                                                            FileUtil.deleteFile(fl);
                                                        } catch (Exception XX) {}
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        continue;
                                    }
                                }

                                //#2306-007459
                                if(tipoPlanilha.contains("CARTAO_SIPAG7") && extensao.contains("CSV")){
                                    memFile.setFieldSeparator(";");
                                }

                                if(!tipoPlanilha.equals("MOVIMENTO")){
                                    roteiroCRM = buscaRoteiro("getRoteiro"+tipoPlanilha, logger);
                                    inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
                                    idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
                                    inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
                                    idocumento      = getIndice("documento", idocumento, roteiroCRM);
                                    ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
                                    ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
                                    ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
                                    ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
                                    icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
                                    ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
                                    ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
                                    icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
                                    icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
                                    icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
                                    icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
                                    icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
                                    icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
                                    icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
                                    icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
                                    icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
                                    icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
                                    idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
                                    icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);

                                    zerar			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());


                                    // Em casos onde a planilha secund?ria precisa de uma aba espec?fica descomentar essa linha
                                    if(!roteiroCRM.optString("Abas_Especificas").equals("") && !roteiroCRM.optString("Abas_Especificas").contains(String.valueOf(abaConvertida))) continue;

                                }

                                if(nomeArquivo.toUpperCase().contains("OTTIMIZZA")){
                                    if(!logsTxt.toString().contains("MANTEMARQUIVO"))logsTxt.append("STATUS;DATA;VALOR;DOCUMENTO;CLIENTE/FORNECEDOR;PORTADOR;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;COMPLEMENTO06;TIPOPLANILHA;MANTEMARQUIVO;PROCESSAOUD;LINHA;");
                                    logs = true;
                                }

                                // #DOCUMENTACAO
                                // tratamento de "Agrupar Colunas Excel" e "Agrupar a partir da coluna"
                                try {
                                    fazerShrinkDelimitandoPosicoes(roteiroCRM, memFile);
                                } catch (IllegalArgumentException e) {
                                    //TODO: handle exception
                                    erroShrink = true;
                                    logger.logError("Deu ruim no shrink \n"+e);
                                    break;
                                }
                                /////////////////////////////
                                // VALIDACAO POR CABECALHO //
                                /////////////////////////////


                                inomeOrigem		= getIndiceCabecalho("nomeOrigem", inomeOrigem, memFile, roteiroCRM);
                                idataMovimento	= getIndiceCabecalho("dataMovimento", idataMovimento, memFile, roteiroCRM);
                                inomePortador	= getIndiceCabecalho("nomePortador", inomePortador, memFile, roteiroCRM);
                                idocumento		= getIndiceCabecalho("documento", idocumento, memFile, roteiroCRM);
                                ivalorDocumento	= getIndiceCabecalho("valorDocumento", ivalorDocumento, memFile, roteiroCRM);
                                ivalorJuros		= getIndiceCabecalho("valorJuros", ivalorJuros, memFile, roteiroCRM);
                                ivalorDesconto	= getIndiceCabecalho("valorDesconto", ivalorDesconto, memFile, roteiroCRM);
                                ivalorMulta		= getIndiceCabecalho("valorMulta", ivalorMulta, memFile, roteiroCRM);
                                ivalorAlternativo = getIndiceCabecalho("valorAlternativo", ivalorAlternativo, memFile, roteiroCRM);
                                ivalorPagamento	= getIndiceCabecalho("valorPagamento", ivalorPagamento, memFile, roteiroCRM);
                                icodCcOrigem	= getIndiceCabecalho("codCcOrigem", icodCcOrigem, memFile, roteiroCRM);

                                icomplemento01	= getIndiceCabecalho("complemento01", icomplemento01, memFile, roteiroCRM);
                                icomplemento02	= getIndiceCabecalho("complemento02", icomplemento02, memFile, roteiroCRM);
                                icomplemento03	= getIndiceCabecalho("complemento03", icomplemento03, memFile, roteiroCRM);
                                icomplemento04	= getIndiceCabecalho("complemento04", icomplemento04, memFile, roteiroCRM);
                                icomplemento05	= getIndiceCabecalho("complemento05", icomplemento05, memFile, roteiroCRM);
                                icomplemento06	= getIndiceCabecalho("complemento06", icomplemento06, memFile, roteiroCRM);
                                icomplemento07	= getIndiceCabecalho("complemento07", icomplemento07, memFile, roteiroCRM);
                                icomplemento08	= getIndiceCabecalho("complemento08", icomplemento08, memFile, roteiroCRM);
                                icomplemento09	= getIndiceCabecalho("complemento09", icomplemento09, memFile, roteiroCRM);
                                icomplemento10	= getIndiceCabecalho("complemento10", icomplemento10, memFile, roteiroCRM);
                                idataFake		= getIndiceCabecalho("dataFake", idataFake, memFile, roteiroCRM);
                                icpfCnpj		= getIndiceCabecalho("cpfCnpj", icpfCnpj, memFile, roteiroCRM);

                                isLinhaPrincipal = false;
                                ignorarAntes = false;

                                JSONObject histobj = new JSONObject();
                                lerAposPrincipal = roteiroCRM.optString("lerAposPrincipal").toUpperCase();

                                // #DOCUMENTACAO
                                // ignorar antes
                                if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO")) {

                                    histobj.put("nomeOrigem", getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger));
                                    histobj.put("documento", getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger));
                                    histobj.put("complemento01", getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger));
                                    histobj.put("complemento02", getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger));
                                    histobj.put("complemento03", getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger));
                                    histobj.put("complemento04", getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger));
                                    histobj.put("complemento05", getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger));
                                    histobj.put("complemento06", getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger));
                                    histobj.put("nomePortador", getCampoString(nomePortador,	inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger));
                                    histobj.put("dataMovimento", "").put("mesAnoAnterior", "").put("mesAno2Anterior", "")
                                            .put("mesAnoAtual", "").put("contaMovimento", "").put("contaPortador", "").put("contaDebito", "")
                                            .put("contaCredito", "").put("contaJuros", contaJuros).put("contaDesconto", contaDesconto)
                                            .put("contaMulta", contaMulta).put("valorDocumento", "").put("valorJuros", "")
                                            .put("valorDesconto", "").put("valorMulta","").put("codFilial", "")
                                            .put("numeroAba", String.valueOf(abaConvertida)).put("tipoPlanilha", tipoPlanilha)
                                            .put("nomeArquivo", nomeArquivo.toUpperCase());

                                    ignorarAntes = getTratarLinhaIgnorar(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento,
                                            getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger),
                                            getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger), histobj);

                                    if (ignorarAntes) continue;

                                    double valorValido = 0;
                                    try{valorValido = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                                    catch (Exception vlrd) { valorValido = 0; }

                                    if(ivalorDocumento < 0 && ivalorPagamento >= 0){
                                        try{valorValido = Math.abs(memFile.getDoubleField(ivalorPagamento));}
                                        catch (Exception vlrd) { valorValido = 0; }
                                    }


                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&  valorValido > 0) isLinhaPrincipal = true;
                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !histobj.optString("nomeOrigem").equals("")) isLinhaPrincipal = true;

                                }

                                if (naoLeMais) continue;
                                if (tipoPlanilha.equals("")) continue;


                                // #DOCUMENTACAO
                                // leitura de xlsx e csv
                                if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || (!roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA ("))) {
                                    zerar 			  = !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());

                                    // #Fabrica(2019-05-20)
                                    if (tipoPlanilha.contains("OTTCARTAO")) {
                                        try{
                                            String auxMes 	  = getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "));
                                            if(auxMes.length() == 2 && !auxMes.equals(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "))){
                                                dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "), auxMes).replaceAll(" ", "/");
                                            }else if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).length() > 11
                                                    && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains("/")
                                                    && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains(",")
                                                    && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains(":")){
                                                dataMovimento     = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), 0, memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).lastIndexOf("/")+5);
                                            }else{
                                                dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
                                            }

                                            dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                        }catch(Exception e){
                                            // dataMovimento   = "";
                                            // dataLote        = "";
                                        }
                                    }

                                    if (!tipoPlanilha.contains("OTTCARTAO")) {
                                        // #Fabrica(2019-05-20)
                                        try{
                                            dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);

                                            dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                        }catch(Exception e){
                                            // dataMovimento   = "";
                                            // dataLote        = "";
                                        }
                                    }
                                    if (tipoLancamento.contains("PAGAR")&& memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA RECEBIMENTO") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("DOCUMENTO")
                                            && memFile.getStringFieldRemoveEspCharsUpper(2).contains("CLIENTE /  DESCRICAO RECEITA") && memFile.getStringFieldRemoveEspCharsUpper(3).contains("DETALHES DO RECEBIMENTO")
                                            && memFile.getStringFieldRemoveEspCharsUpper(4).contains("VALOR ORIGINAL") && memFile.getStringFieldRemoveEspCharsUpper(5).contains("VALOR RECEBIDO")
                                            && memFile.getStringFieldRemoveEspCharsUpper(6).contains("BANCO (PORTADOR)") && memFile.getStringFieldRemoveEspCharsUpper(7).contains("CATEGORIA (RECEITA)")){
                                        break;
                                    }

                                    // logger.logInfo("TP -> "+tipoPlanilha+" - Empresa -> "+nomeEmpresa+" - DM -> "+line);



                                    // leitura de data mantida por seguranca
                                    // String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger).trim();
                                    // if (!dataString.equals("")) {
                                    // 	String dataMovimentoAux	  = getCampoDate(dataString);
                                    // 	if (dataMovimentoAux.contains("/")) {
                                    // 		dataMovimento     = getCampoDate(dataString);
                                    // 		dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                    // 	}
                                    // }

                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals("")) isLinhaPrincipal = true;


                                    if (!zerarColAlternativo.equals("")) {
                                        if (zerarColAlternativo.contains("documento"))		documento		= "";
                                        if (zerarColAlternativo.contains("nomeOrigem"))		nomeOrigem		= "";
                                        if (zerarColAlternativo.contains("nomePortador"))   nomePortador	= "";
                                        if (zerarColAlternativo.contains("complemento01"))  complemento01	= "";
                                        if (zerarColAlternativo.contains("complemento02"))  complemento02	= "";
                                        if (zerarColAlternativo.contains("complemento03"))  complemento03   = "";
                                        if (zerarColAlternativo.contains("complemento04"))  complemento04   = "";
                                        if (zerarColAlternativo.contains("complemento05"))  complemento05   = "";
                                        if (zerarColAlternativo.contains("complemento06"))  complemento06   = "";
                                        if (zerarColAlternativo.contains("complemento07"))  complemento07   = "";
                                        if (zerarColAlternativo.contains("complemento08"))  complemento08   = "";
                                        if (zerarColAlternativo.contains("complemento09"))  complemento09   = "";
                                        if (zerarColAlternativo.contains("complemento10"))  complemento10   = "";
                                    }

                                    nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger);
                                    nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger);
                                    documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger);

                                    complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);
                                    complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);
                                    complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);
                                    complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);
                                    complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);

                                    complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);
                                    complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, logger);
                                    complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, logger);
                                    complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, logger);
                                    complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, logger);

                                    if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
                                        if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) {
                                            try{complemento01     = getDate(complemento01, icomplemento01, line, false, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);}
                                            catch(Exception e){}
                                        }
                                        if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) {
                                            try{complemento02     = getDate(complemento02, icomplemento02, line, false, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);}
                                            catch(Exception e){}
                                        }
                                        if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) {
                                            try{complemento03     = getDate(complemento03, icomplemento03, line, false, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);}
                                            catch(Exception e){}
                                        }
                                        if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) {
                                            try{complemento04     = getDate(complemento04, icomplemento04, line, false, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);}
                                            catch(Exception e){}
                                        }
                                        if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) {
                                            try{complemento05     = getDate(complemento05, icomplemento05, line, false, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);}
                                            catch(Exception e){}
                                        }
                                        if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) {
                                            try{complemento06     = getDate(complemento06, icomplemento06, line, false, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);}
                                            catch(Exception e){}
                                        }
                                    }

                                    cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, logger);
                                    codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, logger);

                                    historico		= "";
                                    parcelaDoc      = 1;

                                    valorDocumento	= 0;
                                    valorDocumentoArray[0] = 0;
                                    valorDocumentoArray[1] = 0;
                                    valorDocumentoArray[2] = 0;
                                    valorDocumentoArray[3] = 0;
                                    valorDocumentoArray[4] = 0;
                                    valorDocumentoArray[5] = 0;
                                    valorDocumentoArray[6] = 0;
                                    valorDocumentoArray[7] = 0;
                                    valorDocumentoArray[8] = 0;
                                    valorDocumentoArray[9] = 0;

                                    valorJuros		= 0;
                                    valorDesconto	= 0;
                                    valorMulta		= 0;
                                    valorPagamento	= 0;

                                    debitoCredito 	= "";
                                    valorAlternativo = 0;

                                    if(ivalorJuros >=0){
                                        try{valorJuros = Math.abs(memFile.getDoubleField(ivalorJuros));}
                                        catch (Exception vlrj) { valorJuros = 0;}
                                    }

                                    if(ivalorDesconto >=0){
                                        try{valorDesconto = Math.abs(memFile.getDoubleField(ivalorDesconto));}
                                        catch(Exception vlrd) {valorDesconto = 0;}
                                    }

                                    // quando no CRM colocarmos que a coluna de juros eh a mesma de valor desconto
                                    // no caso do valor ser negativo, jogaremos zero para juros, ficando o valor absoluto da coluna como desconto
                                    // no caso do valor ser positivo, jogamos zero em valor desconto, ficando apenas com o valor dos juros
                                    if((ivalorDesconto == ivalorJuros) && valorJuros > 0 && ivalorJuros > 0){
                                        try{
                                            if(memFile.getDoubleField(ivalorDesconto) < 0) valorJuros = 0;
                                            else valorDesconto = 0;
                                        } catch(Exception vlrd) {}
                                    }

                                    if(ivalorMulta >=0){
                                        try{valorMulta = Math.abs(memFile.getDoubleField(ivalorMulta));}
                                        catch(Exception vlrm) {valorMulta = 0;}
                                    }

                                    //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
                                    if(ivalorDocumento >=0){
                                        try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                                        catch (Exception vlrd) { valorDocumento = 0; }
                                    }

                                    // if(codEmpresa.contains("191")) logger.logInfo("V = "+valorDocumento+" | DT = "+dataMovimento+" | NO = "+nomeOrigem);

                                    // logger.logInfo("TP -> "+ ivalorDocumento + " | " + idataMovimento + " TREM " +
                                    // tipoPlanilha+" - Empresa -> "+valorDocumento+" - DM -> "+dataMovimento + " | " + memFile.getStringFieldRemoveEspCharsUpper(0));

                                    if(logs && cont <= 200){

                                        logsTxt.append("\r\n");
                                        logsTxt.append("ANALISTA AUX").append(";").append(dataMovimento).append(";").append(valorDocumento).append(";")
                                                .append(documento).append(";").append(nomeOrigem).append(";").append(nomePortador).append(";").append(complemento01)
                                                .append(";").append(complemento02).append(";").append(complemento03).append(";").append(complemento04).append(";")
                                                .append(complemento05).append(";").append(complemento06).append(";").append(tipoPlanilha).append(";")
                                                .append(mantemArquivo.equals("SIM") ? "LENDO PELO TEMPLATE (SIM)" : "LENDO ESPECIFICO (NAO)").append(";")
                                                .append(line).append(";");

                                    }

                                    // logger.logInfo("ROTEIRO coluna Extra => " + roteiroCRM.optString("Colunas_de_Valores_Extras") + " |TP => " + tipoPlanilha);
                                    if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {
                                        String [] indiceValores = roteiroCRM.optString("Colunas_de_Valores_Extras").split(";");
                                        valorSomaArray = 0;
                                        for(int iv = 0; iv < indiceValores.length; iv++) {
                                            // try{
                                            // logger.logInfo("IDValores -> " + indiceValores[iv].toString());
                                            // if(!indiceValores[iv].contains("*") && !indiceValores[iv].contains("/") && !indiceValores[iv].contains("+") && !indiceValores[iv].contains("-") && !indiceValores[iv].contains("#")){
                                            // logger.logInfo("ENTROU IF");
                                            // String rotuloColuna = "";
                                            // String [] rotuloArray  = roteiroCRM.optString("Rotulos_Para_Valores_Extras").split(";");
                                            // logger.logInfo("ROTULO ARRAY => " +rotuloArray[iv].toString());
                                            // indiceValores[iv]	= getIndiceCabecalhoExtra(rotuloArray[iv], memFile);
                                            // logger.logInfo("INDICE dps => " +indiceValores[iv].toString());
                                            // }
                                            // }catch(Exception xx){
                                            // logger.logInfo("CAIU CATCH");
                                            // }

                                            //ssss
                                            double denomidador = 0;
                                            int indiceDenominador = -1;
                                            String sinal = "";
                                            boolean multiplica100 = false;
                                            boolean divide100 = false;

                                            if (indiceValores[iv].contains("*100")) multiplica100 = true;
                                            if (indiceValores[iv].contains("/100")) divide100 = true;
                                            indiceValores[iv] = indiceValores[iv].replace("*100","").replace("/100","");

                                            if (indiceValores[iv].contains("*")) sinal = "*";
                                            if (indiceValores[iv].contains("/")) sinal = "/";
                                            if (indiceValores[iv].contains("+")) sinal = "+";
                                            if (indiceValores[iv].contains("-")) sinal = "-";


                                            if (!sinal.equals("") && indiceValores[iv].contains(sinal)) {
                                                try {
                                                    if (!indiceValores[iv].contains("#")) {
                                                        denomidador = Math.abs(memFile.getDoubleField(Integer.parseInt(cutString(indiceValores[iv], sinal))));
                                                    }
                                                    else {
                                                        denomidador = DecimalUtil.toDecimal(cutString(indiceValores[iv], "#"));
                                                    }
                                                } catch (Exception xx) {denomidador = 0;}
                                                indiceValores[iv] = cutString(indiceValores[iv], 0, sinal);
                                            }


                                            try{

                                                valorDocumentoArray[iv] = Math.abs(memFile.getDoubleField(Integer.parseInt(indiceValores[iv])));
                                                if (sinal.equals("*") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] * denomidador;
                                                if (sinal.equals("/") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] / denomidador;
                                                if (sinal.equals("+") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] + denomidador;
                                                if (sinal.equals("-") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] - denomidador;
                                                if (multiplica100) valorDocumentoArray[iv] = valorDocumentoArray[iv] * 100;
                                                if (divide100)     valorDocumentoArray[iv] = valorDocumentoArray[iv] / 100;



                                            }
                                            catch (Exception vlrd) {



                                                valorDocumentoArray[iv] = 0;
                                            }

                                            if(valorDocumentoArray[iv] < 0){
                                                valorDocumentoArray[iv] = 0;
                                            }

                                            valorSomaArray += valorDocumentoArray[iv];
                                        }
                                    }


                                    if(ivalorPagamento >=0){
                                        try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
                                        catch(Exception vlrp) {valorPagamento = 0;}
                                    }

                                    if(ivalorAlternativo >= 0){
                                        try{valorAlternativo = memFile.getDoubleField(ivalorAlternativo);}
                                        catch (Exception vlrd) { valorAlternativo = 0; }
                                    }

                                    if (tipoLancamento.equals("PAGAR"))
                                        debitoCredito = "EXTRATO-DEBITO";

                                    if (tipoLancamento.equals("RECEBER"))
                                        debitoCredito = "EXTRATO-CREDITO";


                                    ////////////////////////////////////////////////
                                    ////	busca Coluna Alternativa
                                    JSONObject obj1 = new JSONObject();
                                    String validar	= "dataMovimento;nomeOrigem;documento;complemento01;complemento02;complemento03;complemento04;complemento05;complemento06;complemento07;complemento08;complemento09;complemento10;nomePortador;valorDocumento;valorPagamento;valorJuros;valorDesconto;valorMulta";
                                    obj1.put("validar",			validar);
                                    obj1.put("documento",		documento);
                                    obj1.put("nomeOrigem",		nomeOrigem);
                                    obj1.put("nomePortador",	nomePortador);
                                    obj1.put("dataMovimento",	dataMovimento);
                                    obj1.put("complemento01",	complemento01);
                                    obj1.put("complemento02",	complemento02);
                                    obj1.put("complemento03",	complemento03);
                                    obj1.put("complemento04",	complemento04);
                                    obj1.put("complemento05",	complemento05);
                                    obj1.put("complemento06",	complemento06);
                                    obj1.put("complemento07",	complemento07);
                                    obj1.put("complemento08",	complemento08);
                                    obj1.put("complemento09",	complemento09);
                                    obj1.put("complemento10",	complemento10);
                                    obj1.put("codCentroCusto",	codCcOrigem);
                                    obj1.put("tipoPlanilha",	tipoPlanilha);
                                    obj1.put("numeroAba",		String.valueOf(abaConvertida));
                                    obj1.put("nomeArquivo",		nomeArquivo.toUpperCase());
                                    JSONObject alternativeObj = getAlternativeDataInt (obj1, memFile);
                                    String changed = alternativeObj.optString("changeIt");

                                    if(!changed.equals("")) {
                                        zerarColAlternativo = changed;
                                        if (changed.contains("dataMovimento")) {
                                            dataMovimento	= alternativeObj.optString("dataMovimento");
                                            dataLote		= alternativeObj.optString("dataLote");
                                        }
                                        if (changed.contains("documento"))		documento		= alternativeObj.optString("documento");
                                        if (changed.contains("nomeOrigem"))		nomeOrigem		= alternativeObj.optString("nomeOrigem");
                                        if (changed.contains("nomePortador"))   nomePortador	= alternativeObj.optString("nomePortador");

                                        if (changed.contains("complemento01"))  complemento01	= alternativeObj.optString("complemento01");
                                        if (changed.contains("complemento02"))  complemento02	= alternativeObj.optString("complemento02");
                                        if (changed.contains("complemento03"))  complemento03   = alternativeObj.optString("complemento03");
                                        if (changed.contains("complemento04"))  complemento04   = alternativeObj.optString("complemento04");
                                        if (changed.contains("complemento05"))  complemento05   = alternativeObj.optString("complemento05");
                                        if (changed.contains("complemento06"))  complemento06   = alternativeObj.optString("complemento06");
                                        if (changed.contains("complemento07"))  complemento07   = alternativeObj.optString("complemento07");
                                        if (changed.contains("complemento08"))  complemento08   = alternativeObj.optString("complemento08");
                                        if (changed.contains("complemento09"))  complemento09   = alternativeObj.optString("complemento09");
                                        if (changed.contains("complemento10"))  complemento10   = alternativeObj.optString("complemento10");

                                        if (changed.contains("valorDocumento"))	valorDocumento	= alternativeObj.optDouble("valorDocumento");

                                        if (changed.contains("valorPagamento"))	valorPagamento  = alternativeObj.optDouble("valorPagamento");
                                        if (changed.contains("valorDesconto"))	valorDesconto	= alternativeObj.optDouble("valorDesconto");
                                        if (changed.contains("valorJuros"))		valorJuros		= alternativeObj.optDouble("valorJuros");
                                        if (changed.contains("valorMulta"))		valorMulta		= alternativeObj.optDouble("valorMulta");
                                    }


                                    // fazer regra quando tiver valor documento e alternativo na mesma coluna
                                    String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
                                    if (!tratarComoValorAlternativo.equals("")) {
                                        if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                        if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                        if(ivalorAlternativo >= 0) valorDocumento = valorAlternativo;
                                    }else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes
                                        if(valorDocumento == 0 && ivalorAlternativo >= 0){
                                            if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                            if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                            valorDocumento = valorAlternativo;
                                        }
                                    }
                                    // ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
                                    if((ivalorDocumento < 0 || tipoPlanilha.contains("PADRAOOTTIMIZZA")) && valorDocumento == 0){
                                        if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
                                        else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
                                    }
                                    if(valorDocumento>0 && ivalorJuros < 0 && ivalorDesconto < 0 && valorPagamento > 0){
                                        if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
                                        if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
                                    }

                                    valorDocumento = Math.abs(valorDocumento);



                                    // ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && (valorDocumento > 0 || valorSomaArray > 0)) isLinhaPrincipal = true;

                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&
                                            lerAposPrincipal.equals("") && (valorDocumento == 0 && valorSomaArray == 0)) {

                                        continue;
                                    }
                                }



                                // #DOCUMENTACAO
                                // leitura de TXT
                                if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && roteiroCRM.optString("dataMovimento").replaceAll(" ", "").toUpperCase().startsWith("COLUNA(") && roteiroCRM.optString("dataMovimento").endsWith(")")) {

                                    String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, roteiroCRM, logger).trim();


                                    if (!dataString.equals("") && dataString.contains("/")) {
                                        String dataMovimentoAux	  = getCampoDate(dataString);
                                        if (dataMovimentoAux.contains("/")) {
                                            dataMovimento     = getCampoDate(dataString);
                                            dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                        }
                                    }


                                    // ajusta data quando vem no formato 01012021
                                    if (!dataString.equals("") && !dataString.contains("/") && dataString.contains("20")) {
                                        try {
                                            Date dts = DateUtil.stringToDate(dataString, "ddMMyyyy");
                                            dataMovimento = DateUtil.dateToString(dts, "dd/MM/yyyy");
                                            dataLote = DateUtil.dateToString(dts, "yyyy-MM");
                                            if (!dataMovimento.contains("/20")) {   // data bichada sera ignorada
                                                dataMovimento = "";
                                                continue;
                                            }
                                        } catch (Exception dt1) {
                                            continue;
                                        }
                                    }


                                    nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, roteiroCRM, logger);
                                    nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, roteiroCRM, logger);
                                    documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, roteiroCRM, logger);

                                    complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, roteiroCRM, logger);

                                    complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, roteiroCRM, logger);
                                    cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, roteiroCRM, logger);
                                    codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, 	line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, roteiroCRM, logger);


                                    valorDocumento = getDoubleTXT2020(roteiroCRM.optString("valorDocumento").toUpperCase(), line, objetoParametro);

                                    if (tipoPlanilha.contains("OTTCARTAO")) {
                                        String valorStr = getCampoString("", -1, 	line, false, roteiroCRM.optString("valorDocumento").toUpperCase(), memFile, roteiroCRM, logger);
                                        if (!valorStr.contains(".") && !valorStr.contains(",")) valorDocumento = valorDocumento / 100;
                                    }

                                    valorJuros	   = getDoubleTXT2020(roteiroCRM.optString("valorJuros").toUpperCase(), line, objetoParametro);
                                    valorDesconto  = getDoubleTXT2020(roteiroCRM.optString("valorDesconto").toUpperCase(), line, objetoParametro);
                                    valorMulta 	   = getDoubleTXT2020(roteiroCRM.optString("valorMulta").toUpperCase(), line, objetoParametro);
                                    valorPagamento = getDoubleTXT2020(roteiroCRM.optString("valorPagamento").toUpperCase(), line, objetoParametro);

                                    if (tipoLancamento.equals("PAGAR"))
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
                                            debitoCredito = "EXTRATO-DEBITO";

                                    if (tipoLancamento.equals("RECEBER"))
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
                                            debitoCredito = "EXTRATO-CREDITO";

                                    // fazer regra quando tiver valor documento e alternativo na mesma coluna
                                    String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
                                    if (!tratarComoValorAlternativo.equals("")) {
                                        if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                        if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")) valorDocumento = valorAlternativo;
                                    }else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes
                                        if(valorDocumento == 0 && roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")){
                                            if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                            if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                            valorDocumento = valorAlternativo;
                                        }
                                    }

                                    if(!roteiroCRM.optString("valorDocumento").toUpperCase().contains("COLUNA") && valorDocumento == 0){
                                        if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
                                        else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
                                    }
                                    if(valorDocumento > 0 && !roteiroCRM.optString("valorJuros").toUpperCase().contains("COLUNA") && !roteiroCRM.optString("valorDesconto").toUpperCase().contains("COLUNA") && valorPagamento > 0){
                                        if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
                                        if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
                                    }

                                    //#2305-0004328. Coluna de valor extra para o formato txt
                                    if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {
                                        valorSomaArray = TemplateUtils.lerValoresExtrasArquivoTxt(valorDocumentoArray, line, roteiroCRM, null);
                                    }
                                    valorDocumento = Math.abs(valorDocumento);

                                    // if(logs && cont <= 200){
                                    // logsTxt.append("\r\n");

                                    // logsTxt.append("ANALISTA AUX");												logsTxt.append(";");
                                    // logsTxt.append(dataMovimento); 												logsTxt.append(";");
                                    // logsTxt.append(valorDocumento);												logsTxt.append(";");
                                    // logsTxt.append(documento);													logsTxt.append(";");
                                    // logsTxt.append(nomeOrigem);													logsTxt.append(";");
                                    // logsTxt.append(nomePortador);												logsTxt.append(";");
                                    // logsTxt.append(complemento01);												logsTxt.append(";");
                                    // logsTxt.append(complemento02);												logsTxt.append(";");
                                    // logsTxt.append(complemento03);												logsTxt.append(";");
                                    // logsTxt.append(complemento04);												logsTxt.append(";");
                                    // logsTxt.append(complemento05);												logsTxt.append(";");
                                    // logsTxt.append(complemento06);												logsTxt.append(";");
                                    // logsTxt.append(tipoPlanilha);
                                    // if(mantemArquivo.equals("SIM"))logsTxt.append("LENDO PELO TEMPLATE");		logsTxt.append(";");
                                    // if(mantemArquivo.equals("NAO"))logsTxt.append("LENDO ESPECIFICO");			logsTxt.append(";");
                                    // logsTxt.append(line);														logsTxt.append(";");

                                    // }

                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals(""))  isLinhaPrincipal = true;
                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && (valorDocumento > 0 || valorSomaArray > 0))		  isLinhaPrincipal = true;
                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !nomeOrigem.equals("")) isLinhaPrincipal = true;
                                }


                                // #DOCUMENTACAO
                                // mes ano anterior
                                if(dataMovimento.length() > 9){
                                    mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
                                    anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
                                    mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                                    mesRef	= mesRef - 1;
                                    if (mesRef	== 0) {
                                        mesRef	= 12;
                                        anoRef	= anoRef - 1;
                                    }
                                    mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                    mesRef	= mesRef - 1;
                                    if (mesRef	== 0) {
                                        mesRef	= 12;
                                        anoRef	= anoRef - 1;
                                    }
                                    mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                }

                                // #DOCUMENTACAO
                                // filtro de datas (parametro definido por integracao no CRM, e informado a cada processamento de arquivos)
                                //if (nomeArquivo.toUpperCase().contains("FILTRO_")) filtro = validaFiltro(nomeArquivo, dataMovimento);
                                if (nomeArquivo.toUpperCase().contains("FILTRO_")) {
                                    temFiltro = true;
                                    filtro = validaFiltro(nomeArquivo, dataMovimento);
                                }
                                if (!filtro) continue;

                                valorTotalDoc   += valorDocumento;
                                valorTotalJuros += valorJuros;
                                valorTotalDesc  += valorDesconto;

                                if (documento.contains(".") && documento.contains("E")) {
                                    documento = removerNotacaoCientificaExcel(documento);
                                }

                                // #DOCUMENTACAO
                                // cpfCnpj
                                boolean aceitaCpf			= true;
                                boolean cnpjSomenteNumeros	= Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim());

                                if(!cpfCnpj.equals("")) cpfCnpj = trataCpfCnpj(cpfCnpj, cnpjSomenteNumeros, aceitaCpf);

                                // #DOCUMENTACAO
                                // ajustes fornecedor/cliente e portador
                                if (nomeOrigem.equals("") && !roteiroCRM.optString("lerAposPrincipal").toUpperCase().contains("FORNECEDOR")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
                                nomeOrigem = nomeOrigem.trim();

                                //Removemos o replace de AMP por conta de um efeito colateral #202212-0022861
                                //nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").replaceAll("AMP","").trim();
                                nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
                                // nomeOrigem = stringNormalizer(nomeOrigem, true);
                                nomeOrigem = StringUtil.removeSpecialCharsToUC(nomeOrigem);

                                // 202301-0023496 JWR Coloquei esse balde com o X para remontar o nomeOrigem
                                // Descomentar caso d? problema com caracteres especiais
								/*String letrasPermitidas = "ABCDEFGHIJKLMNOPRSTUVWXYZ 0123456789.-/&";
								String nomeOrigemNovo = "";
								for (int xx = 0; xx < nomeOrigem.length(); xx++) {
									if (nomeOrigem.length() > xx) {
										if (letrasPermitidas.contains(nomeOrigem.substring(xx, xx+1))) {
											nomeOrigemNovo = nomeOrigemNovo + nomeOrigem.substring(xx, xx+1);
										}
									}
								}
								nomeOrigem = nomeOrigemNovo;*/


                                if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();
                                nomePortador = nomePortador.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").replaceAll("\\?", "").trim();
                                nomePortador = stringNormalizer(nomePortador, true);

                                complemento01 = complemento01.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
                                complemento02 = complemento02.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
                                complemento03 = complemento03.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
                                complemento04 = complemento04.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
                                complemento05 = complemento05.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
                                complemento06 = complemento06.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();

                                // logger.logInfo("DAMA " + dataMovimento + " | " + valorDocumento + " | " + isLinhaPrincipal);
                                if(dataMovimento.equals("")) continue;
                                // quando for ler linha principal zerar as variaveis que vem depois da principal para nao sobrepor campos.
                                if(isLinhaPrincipal) {
                                    // #DOCUMENTACAO
                                    // cont define que eh um novo lancamento (normalmente uma nova linha)
                                    cont++;

                                    if (lerAposPrincipal.contains("FORNECEDOR"))	nomeOrigem = "";
                                    if (lerAposPrincipal.contains("DOCUMENTO"))		documento = "";
                                    if (lerAposPrincipal.contains("PORTADOR")) 		nomePortador = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO01")) complemento01 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO02")) complemento02 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO03")) complemento03 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO04")) complemento04 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO05")) complemento05 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO06")) complemento06 = "";

                                }

                                if(cont == 0) continue;

                                histobj.put("nomeOrigem", nomeOrigem);					histobj.put("documento", documento);
                                histobj.put("complemento01", complemento01);			histobj.put("complemento02", complemento02);
                                histobj.put("complemento03", complemento03);			histobj.put("complemento04", complemento04);
                                histobj.put("complemento05", complemento05);			histobj.put("complemento06", complemento06);
                                histobj.put("complemento07", complemento07);			histobj.put("complemento08", complemento08);
                                histobj.put("complemento09", complemento09);			histobj.put("complemento10", complemento10);
                                histobj.put("dataMovimento", dataMovimento);			histobj.put("mesAnoAnterior", mesAnoAnterior);
                                histobj.put("mesAno2Anterior", mesAno2Anterior);		histobj.put("mesAnoAtual", mesAnoAtual);
                                histobj.put("nomePortador", nomePortador);				histobj.put("contaMovimento", contaMovimento);
                                histobj.put("contaPortador", contaPortador);	   		histobj.put("contaDebito", "");
                                histobj.put("contaCredito", "");						histobj.put("contaJuros", contaJuros);
                                histobj.put("contaDesconto", contaDesconto);			histobj.put("contaMulta", contaMulta);
                                histobj.put("valorDocumento", valorDocumento);			histobj.put("tipoPlanilha", tipoPlanilha);
                                histobj.put("valorJuros", valorJuros);   				histobj.put("valorDesconto", valorDesconto);
                                histobj.put("valorMulta", valorMulta); 				    histobj.put("codFilial", codFilial);
                                histobj.put("nomeArquivo", nomeArquivo.toUpperCase()); // foi ajustado

                                //feita limpeza de campo para poder pegar melhor os juros e descontos.
                                documento     = getLimpaCamposAvancado("documento", documento, histobj);


                                // #DOCUMENTACAO
                                // TRATA PLANILHA OU LANCAMENTO EXPECIFICO COMO EXTRATO
                                tratarComoExtrato = getTratarComoExtrato(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
                                nomeOrigem = nomeOrigem.replaceAll("  ", " ").trim();
                                if (tratarComoExtrato) {
                                    if (nomeOrigem.length() > 199) nomeOrigem = cutString(nomeOrigem, 0, 180); // #Fabrica(2019-10-03) @Becker
                                    JSONObject jDados = new JSONObject();
                                    jDados.put("PORTADOR",    		nomePortador);
                                    jDados.put("EMPRESA",     		codEmpresa);
                                    jDados.put("DATAMOVIMENTO",	 	dataMovimento);
                                    jDados.put("NOMEARQUIVO",       debitoCredito+nomeArquivo.toUpperCase()); // #DOCUMENTACAO EVITA PROBLEMA DE TRANSFERENCIAS NO MESMO ARQUIVO
                                    jDados.put("NOMEORIGEM",    	nomeOrigem);
                                    jDados.put("VALORDOCUMENTO",    valorDocumento);
                                    jDados.put("COMPLEMENTO01",     complemento02);
                                    jDados.put("DEBITO-CREDITO",    debitoCredito);
                                    jDados.put("CONT",  			String.valueOf(cont));
                                    // logger.logInfo("nomePortador -> " + nomePortador);
                                    boolean primExtrato = insertIOExtrato(jDados, dbIOCont, logger );
                                    jStatus = new JSONObject();
                                    putStatus(dirName, "", jStatus, logger);
                                    continue;
                                }

                                debitoCredito = ""; // zera aqui para n?o confundir com extratos bancarios.


                                // #DOCUMENTACAO
                                // trata lancamento como juros (de outro lancamento)
                                complemento10 = "";
                                tratarComoJuros = getTratarComoJuros(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
                                if (tratarComoJuros) {
                                    complemento10 = dataMovimento + "-" + documento + "-JUROS";
                                    ttJuros ttJ    = (ttJuros)mapaJuros.get(complemento10);
                                    if (ttJ == null) {
                                        ttJ  = new ttJuros();
                                        ttJ.documento  = documento;
                                        ttJ.valorJur   = valorDocumento;
                                        ttJ.valorLido  = 0;
                                    }
                                    mapaJuros.put(complemento10,ttJ);
                                    continue;
                                }

                                // #DOCUMENTACAO
                                // trata lancamento como desconto (de outro lancamento)
                                tratarComoDesconto = getTratarComoDesconto(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
                                if (tratarComoDesconto) {
                                    complemento10  = dataMovimento + "-" + documento + "-DESCONTO";
                                    ttDesconto ttD    = (ttDesconto)mapaDesconto.get(complemento10);

                                    if(valorDocumento == 0) continue;

                                    if (ttD == null) {
                                        ttD  = new ttDesconto();
                                        ttD.documento  = documento;
                                        ttD.valorDesc  = valorDocumento;
                                        ttD.valorLido  = 0;
                                    }
                                    mapaDesconto.put(complemento10,ttD);
                                    continue;
                                }

                                int restoLinha = 0;
                                restoLinha = (cont % 100);

                                // logger.logInfo("PUTSTATUS 1591");
                                if (restoLinha == 0) putStatus(dirName, "02--Etapa 2 de 4 - " + String.valueOf(cont) + "--" + tipoLancamento + ".status", jStatus, logger);


                                String contLinhaTexto = String.valueOf(cont);
                                contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
                                String consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

                                classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;


                                // quando usa o getColunaAlternativa tem que refatorar o datalote
                                dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");

                                //alterado para evitar problemas de lote (maiusculo)
                                lote = (nomeEmpresa + "_" + codEmpresa + "__" + nomeArquivo  + "__" + dataLote + "_" + tipoLancamento).replaceAll("\\." , "");
                                chave = lote + "-" + String.valueOf(abaConvertida) + String.valueOf(contadorArquivo) + "-" + contLinhaTexto;

                                // if(codEmpresa.equals("987789")) logger.logInfo("DATA == "+dataMovimento+" | LOTEEE == "+lote.replace("_rodaconversor", "")+" | TP === "+tipoPlanilha+" | COD ROT == "+roteiroCRMPrincipal.optString("codigo"));

                                if(chave.length() > 200)  chave = chave.substring(0, 199);

                                // #DOCUMENTACAO
                                ////////////////////////////////////////////////////////////// ACUMULA ANTES
                                histobj.put("nomeOrigem", nomeOrigem);
                                histobj.put("documento", documento);
                                histobj.put("complemento01", complemento01);
                                histobj.put("complemento02", complemento02);
                                histobj.put("complemento03", complemento03);
                                histobj.put("complemento04", complemento04);
                                histobj.put("complemento05", complemento05);
                                histobj.put("complemento06", complemento06);
                                histobj.put("nomePortador", nomePortador);
                                histobj.put("dataMovimento", dataMovimento);
                                histobj.put("mesAnoAnterior", mesAnoAnterior);
                                histobj.put("mesAno2Anterior", mesAno2Anterior);
                                histobj.put("mesAnoAtual", mesAnoAtual);
                                histobj.put("valorDocumento", valorDocumento);
                                histobj.put("valorJuros", valorJuros);
                                histobj.put("valorDesconto", valorDesconto);
                                histobj.put("valorMulta",valorMulta);
                                histobj.put("tipoPlanilha", tipoPlanilha);
                                histobj.put("nomeArquivo", nomeArquivo.toUpperCase());
                                histobj.put("line", line.toUpperCase());
                                histobj.put("cabecalhoRegra", cabecalhoRegra.toString());

                                String modificaData = getModificaData(histobj);

                                if (modificaData.startsWith("01"))  dataMovimento = getNextDay(dataMovimento, 1, true);
                                if (modificaData.startsWith("02"))  dataMovimento = getNextDay(dataMovimento, 2, true);
                                if (modificaData.startsWith("03"))  dataMovimento = getNextDay(dataMovimento, 1, false);
                                if (modificaData.startsWith("04"))  dataMovimento = getNextDay(dataMovimento, 2, false);
                                if (modificaData.startsWith("05"))  dataMovimento = "01/" + cutString(dataMovimento, "/");
                                if (modificaData.startsWith("06"))  dataMovimento = getLastDayOfMonth(dataMovimento, true);


                                // METODO QUE REFATORA OS CAMPOS COM BASE NO CABECALHO DO CRM
                                // EXEMPLO QUANDO ENCONTRAR #LINE NO CAMPO COMPLEMENTO03, VAMOS JOGAR O LINE NESTE COMPLEMENTO
                                // UM COMPLEMENTO02 POR EXEMPLO PODE RECEBER DADOS DE TIPOPLANILHA
                                nomeOrigem       = getRefatoraCampo(nomeOrigem, roteiroCRM.optString("fornecedor"), histobj);
                                nomePortador     = getRefatoraCampo(nomePortador, roteiroCRM.optString("portador"), histobj);
                                logger.logInfo("nomeport: " + nomePortador);
                                documento        = getRefatoraCampo(documento, roteiroCRM.optString("documentoNF"), histobj);
                                complemento01    = getRefatoraCampo(complemento01, roteiroCRM.optString("complemento01"), histobj);
                                complemento02    = getRefatoraCampo(complemento02, roteiroCRM.optString("complemento02"), histobj);
                                complemento03    = getRefatoraCampo(complemento03, roteiroCRM.optString("complemento03"), histobj);
                                complemento04    = getRefatoraCampo(complemento04, roteiroCRM.optString("complemento04"), histobj);
                                complemento05    = getRefatoraCampo(complemento05, roteiroCRM.optString("complemento05"), histobj);
                                complemento06    = getRefatoraCampo(complemento06, roteiroCRM.optString("complemento06"), histobj);
                                complemento07    = getRefatoraCampo(complemento07, roteiroCRM.optString("complemento07"), histobj);
                                complemento08    = getRefatoraCampo(complemento08, roteiroCRM.optString("complemento08"), histobj);
                                complemento09    = getRefatoraCampo(complemento09, roteiroCRM.optString("complemento09"), histobj);
                                complemento10    = getRefatoraCampo(complemento10, roteiroCRM.optString("complemento10"), histobj);



                                String testeChave = getRegrasParaAcumular(lote, chave, tipoLancamento, documento, nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
                                if(testeChave.toUpperCase().contains("ACUMULAANTES") || testeChave.toUpperCase().contains("ACUMULARANTES")) {
                                    chave = testeChave;
                                    if(chave.length() > 180) chave = cutString(chave, 0, 179);
                                    acumulouAntes = true;
                                }
                                ////////////////////////////////////////////////////////////////////////////////////
                                String key = chave  + "-CTB";
                                nomeOrigem = nomeOrigem.replaceAll("  "," ").trim();

                                partidaDobradaJuros		= 0;
                                partidaDobradaDesconto	= 0;
                                partidaDobradaMulta		= 0;

                                if (forcarPartidaDobrada) {
                                    partidaDobradaJuros		= valorJuros;
                                    partidaDobradaDesconto	= valorDesconto;
                                    partidaDobradaMulta		= valorMulta;
                                    valorJuros				= 0;
                                    valorDesconto			= 0;
                                    valorMulta				= 0;
                                }

                                if (tipoPlanilha.contains("OTTCARTAO")) {

                                    if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("")) continue;
                                    if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && dataMovimento.equals("")) continue;
                                    complemento01 = tipoPlanilha;
                                    complemento02 = "VENDA";

                                    nomePortador = tipoPlanilha;

                                    // salva arquivo no hasmap para posterior eliminacao
                                    ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
                                    if (ttArq          == null) {
                                        ttArq          = new ttArquivo();
                                        ttArq.arquivo  = nomeArquivo;

                                    }
                                    mapaArquivo.put(nomeArquivo,ttArq);

                                } else {

                                    // quando se mantem o arquivo, somente devem ser processados arquivos padroes
                                    // planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
                                    // Trocado para validar se a planilha comeca como movimento - importante por causa da iguacu, Onnegestao, confialtiva que tinham movimento no roteiro secundario e estavam sendo bloqueados
                                    if (mantemArquivo.equals("SIM") && !tipoPlanilha.contains("PADRAOOTTIMIZZA") &&
                                            !roteiroCRM.optString("nomeRelatorioRef").equals("PLANILHA_SIMPLES") &&
                                            (tipoPlanilha.contains("SECUNDARIO") || tipoPlanilha.startsWith("MOVIMENTO"))) { //#Soares esteve aqui -> chamado referente a mudan?a: 202210-0019668
                                        // Colocado este IF para dar mais performance, ou seja, se ja tiver lido mais de 15 linhas
                                        // e planilha for para ser rodada na personalizada
                                        // break agiliza a saida da leitura da planilha. Xavier em 19.08
                                        if (contadorCabecalho < 15) continue;
                                        logs = false;
                                        // logger.logInfo("FB");
                                        break;
                                    }

                                    // definido que as planilhas simples que rodam pelo template leem apenas a aba 0
                                    if (tipoPlanilha.equals("MOVIMENTO") && mantemArquivo.equals("SIM") &&
                                            porAba > 0 && roteiroCRM.optString("nomeRelatorioRef").equals("PLANILHA_SIMPLES")) { //#Soares esteve aqui -> chamado referente a mudan?a: 202210-0019668

                                        logs = false;
                                        // logger.logInfo("SB");
                                        break;
                                    }

                                }
                                //#FABRICA 31/08/2022 - @sergio - 202208-0017778
                                //Estavamos processando as planilhas padroes sem apaga-las no processo
                                //O if abaixo faz com que paguemos a planilha, ap?s processar pelo padrao

                                // logger.logInfo("TPAQ " + tipoPlanilha);

                                if(tipoPlanilha.contains("PADRAOOTTIMIZZA")){
                                    ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
                                    if (ttArq          == null) {
                                        ttArq          = new ttArquivo();
                                        ttArq.arquivo  = nomeArquivo;

                                    }
                                    mapaArquivo.put(nomeArquivo,ttArq);

                                }

                                // logger.logInfo("ANTES ttMov2");
                                // #DOCUMENTACAO
                                // insere numa tabela temporaria
                                ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                if (ttMov2 == null) {
                                    ttMov2 = new ttMovimentoPadrao();
                                    ttMov2.lote              = lote;
                                    ttMov2.codEmpresa        = codEmpresa;
                                    ttMov2.nomeEmpresa       = nomeEmpresa;
                                    ttMov2.dataMovimento     = dataMovimento;
                                    ttMov2.tipoMovimento     = "CTB";
                                    ttMov2.tipoLancamento    = tipoLancamento;
                                    ttMov2.historico         = historico;
                                    ttMov2.contaJuros        = contaJuros;
                                    ttMov2.contaMulta        = contaMulta;
                                    ttMov2.contaDesconto     = contaDesconto;
                                    ttMov2.centroCusto       = codCcOrigem;
                                    ttMov2.cpfCnpj           = cpfCnpj;
                                    ttMov2.chave             = chave + "-CTB";
                                    ttMov2.classificacao     = classificacao;
                                    ttMov2.codFilial         = codFilial;
                                    ttMov2.complemento07     = complemento07;
                                    ttMov2.complemento08     = complemento08;
                                    ttMov2.complemento09     = complemento09;
                                    ttMov2.complemento10     = complemento10;
                                    ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                    ttMov2.tipoPlanilha      = tipoPlanilha;
                                    ttMov2.chaveExtrato      = chaveExtrato;
                                    ttMov2.debitoCredito     = debitoCredito;
                                    ttMov2.contLinha         = contLinhaTexto;
                                    ttMov2.historicoMulta    = "";
                                    ttMov2.historicoJuros    = "";
                                    ttMov2.historicoDesconto = "";
                                    ttMov2.contaDebito       = "";
                                    ttMov2.contaCredito      = "";
                                    ttMov2.naturezaContabil  = "";
                                    ttMov2.contador 		 = 0;
                                    ttMov2.parcelaDoc        = parcelaDoc;
                                    ttMov2.abaPlanilha       = String.valueOf(abaConvertida);

                                    if(!lerAposPrincipal.contains("FORNECEDOR"))	ttMov2.nomeOrigem    = nomeOrigem;
                                    if(!lerAposPrincipal.contains("DOCUMENTO")) 	ttMov2.documento 	 = documento;
                                    if(!lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06;

                                    // logger.logInfo("TTMOVTP -> "+tipoPlanilha);


                                }

                                ///  -------------------------------------------------------------------------------------------------------
                                ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                ///  if (!complemento02.equals("")) ttMov2.complemento02 = complemento02;
                                ///  -------------------------------------------------------------------------------------------------------

                                // #DOCUMENTACAO
                                // acumula linhas secundarias ou apenas l? as secundarias
                                boolean acumulaSegundaLinha = true;

                                if(acumulaSegundaLinha){
                                    logger.logInfo("entrou1");
                                    if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = (ttMov2.nomeOrigem    + " " + nomeOrigem).trim();
                                    if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = (ttMov2.documento + " " + documento).trim();
                                    if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = (ttMov2.nomePortador  + " " + nomePortador).trim();
                                    if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = (ttMov2.complemento01 + " " + complemento01).trim();
                                    if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = (ttMov2.complemento02 + " " + complemento02).trim();
                                    if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = (ttMov2.complemento03 + " " + complemento03).trim();
                                    if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = (ttMov2.complemento04 + " " + complemento04).trim();
                                    if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = (ttMov2.complemento05 + " " + complemento05).trim();
                                    if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = (ttMov2.complemento06 + " " + complemento06).trim();
                                }
                                if(!acumulaSegundaLinha){
                                    logger.logInfo("entrou2");
                                    if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = nomeOrigem.trim();
                                    if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = documento.trim();
                                    if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador.trim();
                                    if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01.trim();
                                    if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02.trim();
                                    if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03.trim();
                                    if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04.trim();
                                    if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05.trim();
                                    if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06.trim();
                                }

                                ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
                                ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
                                ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
                                ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

                                leuFinanceiro = true;
                                mapaVariavel.put(key,ttMov2);

                                // logger.logInfo("TEPE " + tipoPlanilha + " | " + roteiroCRM.optString("Colunas_de_Valores_Extras") + " | " + ttMov2.valorDocumento + " | " + ttMov2.dataMovimento);

                                if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {

                                    for (int iv =0; iv < 10; iv++) {

                                        if (valorDocumentoArray[iv] == 0) continue;

                                        String rotuloColuna = "";
                                        String [] rotuloArray  = roteiroCRM.optString("Rotulos_Para_Valores_Extras").split(";");

                                        try {
                                            rotuloColuna = rotuloArray[iv];
                                            logger.logInfo("rotuloArray: " + rotuloArray);
                                        }
                                        catch (Exception xx) {
                                            continue;
                                        }

                                        if(rotuloColuna.contains("EXTRABAIXA")) {
                                            ttMov2.nomePortador = ttMov2.nomeOrigem;
                                        }


                                        cont++;
                                        contLinhaTexto = String.valueOf(cont);
                                        contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
                                        consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

                                        classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

                                        chave = lote + "-" + String.valueOf(abaConvertida) + rotuloColuna + contLinhaTexto;
                                        key = chave  + "-CTB";
                                        ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
                                        ttTemp.dataMovimento = dataMovimento;
                                        histobj.put("dataMovimento", dataMovimento);

                                        ttTemp.complemento05 = rotuloColuna;
                                        histobj.put("complemento05", rotuloColuna);

                                        if(complemento05.equals("")) ttMov2.nomePortador = ttMov2.nomeArquivo;

                                        String modificaData2 = getModificaData(histobj);

                                        if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
                                        if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
                                        if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
                                        if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
                                        if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
                                        if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);

                                        ttTemp.valorDocumento   = valorDocumentoArray[iv] ;
                                        ttTemp.valorDesconto    = 0;
                                        ttTemp.valorMulta       = 0;
                                        ttTemp.valorJuros       = 0;

                                        if (tipoPlanilha.contains("OTTCARTAO")) {
                                            ttTemp.complemento01 = tipoPlanilha;
                                            ttTemp.complemento02 = rotuloColuna;
                                        }
                                        mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, rotuloColuna, classificacao);
                                    }
                                }

                                // Para cartoes, criamos o modelo de gerar tafifa por regra
                                if (tipoPlanilha.contains("OTTCARTAO")) {

                                    histobj.put("complemento02", "TARIFA");
                                    histobj.put("complemento03", complemento03);
                                    histobj.put("dataMovimento", dataMovimento);
                                    histobj.put("complemento05", "TARIFA");

                                    double taxaTarifa = getTaxaTarifa("", tipoLancamento, documento, nomeOrigem, histobj);


                                    if (taxaTarifa > 0) {
                                        cont++;
                                        contLinhaTexto = String.valueOf(cont);
                                        contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
                                        consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

                                        classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

                                        chave = lote + "-" + String.valueOf(abaConvertida) + "TARIFA" + contLinhaTexto;
                                        key = chave  + "-CTB";
                                        ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
                                        ttTemp.dataMovimento = dataMovimento;


                                        ttTemp.complemento05 = "TARIFA";
                                        String modificaData2 = getModificaData(histobj);

                                        if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
                                        if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
                                        if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
                                        if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
                                        if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
                                        if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);
                                        ttTemp.valorDocumento   = ttTemp.valorDocumento * taxaTarifa;
                                        ttTemp.valorDesconto    = 0;
                                        ttTemp.valorMulta       = 0;
                                        ttTemp.valorJuros       = 0;

                                        ttTemp.complemento01 = tipoPlanilha;
                                        ttTemp.complemento02 = "TARIFA";

                                        mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "TARIFA", classificacao);
                                    }
                                }




                                if (forcarPartidaDobrada) {
                                    if (partidaDobradaJuros		> 0) {
                                        cont++;
                                        contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
                                        consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
                                        classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

                                        chave = lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_JUR-" + contLinhaTexto;
                                        key = chave  + "-CTB";
                                        ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
                                        ttTemp.valorDocumento = partidaDobradaJuros;
                                        ttTemp.cpfCnpj = "";

                                        mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "JUROS", classificacao);
                                    }

                                    if (partidaDobradaDesconto	> 0) {
                                        cont++;
                                        contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
                                        consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
                                        classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

                                        chave	= lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_DES-" + contLinhaTexto;
                                        key		= chave  + "-CTB";
                                        ttMovimentoPadrao ttTemp	= new ttMovimentoPadrao(ttMov2);
                                        ttTemp.valorDocumento		= partidaDobradaDesconto;
                                        ttTemp.cpfCnpj = "";

                                        mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "DESCONTO", classificacao);
                                    }

                                    if (partidaDobradaMulta		> 0) {
                                        cont++;
                                        contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
                                        consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
                                        classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

                                        chave	= lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_MUL-" + contLinhaTexto;
                                        key		= chave  + "-CTB";
                                        ttMovimentoPadrao ttTemp	= new ttMovimentoPadrao(ttMov2);
                                        ttTemp.valorDocumento		= partidaDobradaMulta;
                                        ttTemp.cpfCnpj = "";

                                        mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "MULTA", classificacao);
                                    }
                                }
                            } catch (Exception e) {
                            }
                        } // while
                    }finally {

						/*if (memFile != null) { //closeFile
							try {memFile.closeFile(); }
							catch (Exception ex) { }
						}*/ //closeFile

                    }
                }

            }
            try {
                Iterator itArquivo = mapaArquivo.keySet().iterator();
                while (itArquivo.hasNext()) {
                    String key = (String)itArquivo.next();
                    ttArquivo ttArq = (ttArquivo)mapaArquivo.get(key);

                    try {

                        FileUtil.moveToDir(dirName+"/"+ttArq.arquivo, backupDirName);
                    } catch (Exception xx) {}
                }
            } catch (Exception xx) {}



        }
    } catch (Exception ee) {
        putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
        logger.logError("EndpointA: ", ee);
    }



    try {
        Iterator itArquivo = mapaArquivo.keySet().iterator();
        while (itArquivo.hasNext()) {
            String key = (String)itArquivo.next();
            ttArquivo ttArq = (ttArquivo)mapaArquivo.get(key);

            try {

                FileUtil.moveToDir(dirName+"/"+ttArq.arquivo, backupDirName);
            } catch (Exception xx) {}
        }
    } catch (Exception xx) {}


    if(erroShrink){
        putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
        throw new Exception();
    }
    // --------------------------------------------------------------------------------------------------------------------
    // #DOCUMENTACAO
    // BUSCA INFORMACAO DE EXTRATOS SALVOS
    if (leuFinanceiro && cruzaExtrato.contains("TRUE") || (tipoPlanilha.contains("EXTRATO") && cruzaExtrato.contains("FALSE")) ||
            (Cruza_Extrato_com_Extrato.contains("TRUE") && cruzaExtrato.contains("FALSE")) ||
            (Cruza_Extrato_com_Extrato.contains("FALSE") && cruzaExtrato.contains("FALSE"))) {


        try {
            JSONArray extratoEmpresa = getExtratosEmpresa(codEmpresa, dbIOCont, logger);

            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                for (int t=0; t<extratoEmpresa.length(); t++) {

                    JSONObject recMov = extratoEmpresa.optJSONObject(t);

                    recMov.put("CODEMPRESA", codEmpresa);
                    recMov.put("NOMEEMPRESA", nomeEmpresa);

                    //QUANDO FOR CRUZAMENTO DE EXTRATO, MANTER NOME UNICO NO ARQUIVO FINAL.
                    if (leuFinanceiro && cruzaExtrato.contains("TRUE")) {
                        recMov.put("NOMEARQUIVO", nomeArquivo);
                    }
                    else {
                        recMov.put("NOMEARQUIVO", "");
                    }

                    recMov.put("TIPOLANCAMENTO", tipoLancamento).put("CONTAMOVIMENTO", "").put("CONTAPORTADOR", "").put("CONTLINHATEXTO", String.valueOf(t));

                    ttMovimentoPadrao ttMovExtrato = getMovimentoExtrato(recMov, logger);
                    if (nomeArquivo.toUpperCase().contains("FILTRO_")){
                        boolean filtro = validaFiltro(nomeArquivo, ttMovExtrato.dataMovimento);
                        temFiltro = true;
                        if(!filtro) continue;
                    }


                    String consolidaClass = StringUtil.leftPad(String.valueOf(t), 06, "0");
                    ttMovExtrato.classificacao = ttMovExtrato.dataMovimento.replace("/","").trim() + "5" + consolidaClass;

                    String leuCnpj = "";
                    if (ttMovExtrato.nomeOrigem.contains(".") && ttMovExtrato.nomeOrigem.contains("-")) {
                        leuCnpj = getCpfCnpj(ttMovExtrato.nomeOrigem);

                        if (!leuCnpj.equals("")) {
                            ttMovExtrato.nomeOrigem = ttMovExtrato.nomeOrigem.replaceAll(leuCnpj, leuCnpj.replaceAll("\\.","").replaceAll("/","").replaceAll(" ","").replaceAll("-",""));
                        }
                    }
                    if (ttMovExtrato.complemento01.contains(".") && ttMovExtrato.complemento01.contains("-")) {
                        leuCnpj = getCpfCnpj(ttMovExtrato.complemento01);
                        if (!leuCnpj.equals("")) {
                            ttMovExtrato.complemento01 = ttMovExtrato.complemento01.replaceAll(leuCnpj, leuCnpj.replaceAll("\\.","").replaceAll(" ","").replaceAll("/","").replaceAll("-",""));
                        }
                    }
                    mapaVariavel.put(ttMovExtrato.chave, ttMovExtrato);
                    apagaExtrato    = true;

                }
            }
        }
        catch (Exception xx) {
            // logger.logInfo("ATENCAO - PROBLEMA NA LEITURA DE EXTRATO - BANCO");
        }

    } // if tipo planilha nao igual extrato

    // logger.logInfo("ETAPA 03 TEMPLATE ");

    // --------------------------------------------------------------------------------------------------------------------
    // #DOCUMENTACAO
    // INICIO DAS ITERACOES
    StringBuilder[] txtFiscal = new StringBuilder[20];
    for (int i= 0; i < 20; i++) {
        txtFiscal[i] = new StringBuilder("");
        loteFiscal[i] = "";
    }

    StringBuilder txtFornecedor = new StringBuilder();
    StringBuilder txtPortador   = new StringBuilder();
    StringBuilder txtConciliacao= new StringBuilder();
    String nomePortadorAnterior = "";

    // if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB")) txtFiscal[0].append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // #Fabrica(2019-08-13) @Vini
    if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB") && tipoLancamento.contains("PAGAR")) txtFiscal[0].append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // JWR 01022021
    if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB") && tipoLancamento.contains("RECEBER")) txtFiscal[0].append("PGTOCLI").append(cnpjEmpresa).append("\r\n"); // JWR 01022021

    StringBuilder ResumoTxt = new StringBuilder();
    String rn = "\r\n";
    ResumoTxt = new StringBuilder();
    ResumoTxt.append("").append(rn).append(rn);

    ResumoTxt.append("STATUS;DATA;TIPO DATA;VALOR;DOCUMENTO;CLIENTE/FORNECEDOR;PORTADOR;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;COMPLEMENTO06;;CTA DEBITO ENCONTRADA;CTA CREDITO ENCONTRADA;REGRA CONTA CRM;HISTORICO;REGRA HISTORICO;;DATA;DEBITO;CLASS DEB;NOME CONTA;CREDITO;CLASS CRED;NOME CONTA;VALOR;HISTORICO;");
    ResumoTxt.append("ORIGEM");

    StringBuilder txtDePara = new StringBuilder();

    txtDePara.append("DATA;VALOR;FORNECEDOR/CLIENTE;PORTADOR;CONTA DEBITO;CONTACREDITO;DOCUMENTO;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;C.CUSTO;ARQUIVO");
    txtDePara.append("\r\n");


    // logger.logInfo("DIRNAME " + dirName);
    if (mantemArquivo.equals("SIM")) {
        File fileDepoisLista = new File(dirName);
        File [] filesDepois = fileDepoisLista.listFiles();

        if (filesDepois.length > 1) putStatus(dirName, "", jStatus, logger);
    }
    // logger.logInfo("TEMPLATE ETAPA 03 ");


    int contRegra = -1;

    String loteEtapaTres = "";


    try {
        Iterator itExtrato = mapaVariavel.keySet().iterator();
        while (itExtrato.hasNext()) {
            String chaveExtrato     = "";

            String key = (String)itExtrato.next();
            ttMovimentoPadrao ttMov = (ttMovimentoPadrao)mapaVariavel.get(key);

            if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
                roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
            }else{
                roteiroCRM = getRoteiro();
            }

            loteEtapaTres = ttMov.lote;


            // #DOCUMENTACAO
            // TRATA LOTES (MAIUSCULO e MINUSCULO)

            if(ttMov.lote.lastIndexOf("__") > ttMov.lote.indexOf("__")){
                ttMov.lote = nomeEmpresa +"_"+ codEmpresa +"_"+
                        cutString(ttMov.lote, ttMov.lote.indexOf("__"), ttMov.lote.lastIndexOf("__")).toLowerCase() +"_"+ ttMov.lote.substring(ttMov.lote.lastIndexOf("__"));
            }


            // #DOCUMENTACAO
            // EVITA GERAR 2 ARQUIVOS QUANDO TEM TRATAR COMO EXTRATO
            // ajusta o ott_oud__ para poder reprocessar o arquivo automaticamnete pelo portal
            ttMov.lote = ttMov.lote.replace(ttMov.debitoCredito,"").replace("extrato-debito","").replace("extrato-credito","").replace("___","_").replace("__","_");
            if (!ttMov.lote.toLowerCase().contains("ott_oud__") && ttMov.lote.toLowerCase().contains("ott_oud_")) {
                ttMov.lote = ttMov.lote.replace("ott_oud_","ott_oud__");
            }

            // #DOCUMENTACAO
            // JUNCAO DOS LANCAMENTOS COM OS JUROS E DESCONTOS (TRATAR COMO JUROS OU DESCONTO)
            String chaveJuros = ttMov.dataMovimento + "-" + ttMov.documento + "-JUROS";
            ttJuros ttJ  = (ttJuros)mapaJuros.get(chaveJuros);
            if (ttJ != null && ttJ.valorLido == 0) {
                ttMov.valorJuros  = ttJ.valorJur;
                ttJ.valorLido     = 1;
                mapaJuros.put(chaveJuros,ttJ);

            }

            String chaveDesconto = ttMov.dataMovimento + "-" + ttMov.documento + "-DESCONTO";
            ttDesconto ttD  = (ttDesconto)mapaDesconto.get(chaveDesconto);
            if (ttD != null && ttD.valorLido == 0) {
                ttMov.valorDesconto  = ttD.valorDesc;
                ttD.valorLido     = 1;
                mapaDesconto.put(chaveDesconto,ttD);

            }
            contRegra++;
            int restoLinha = 0;
            restoLinha = (contRegra % 100);
            //logger.logInfo("ANTES 3 DE 4");

            // if (codEmpresa.contains("277")) logger.logInfo("TRESDEQUATRO " + " | " + ttMov.tipoP + ttMov.debitoCredito + " | " +  ttMov.dataMovimento + " | " + ttMov.valorDocumento);

            if (restoLinha == 0) putStatus(dirName, "03--Etapa 3 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);


            // if (codEmpresa.contains("1722"))
            logger.logInfo("TPPORTTEMPLATE " + ttMov.tipoPlanilha + " | " + ttMov.lote + " | " + ttMov.dataMovimento + " | " + ttMov.tipoLancamento + " | " + ttMov.debitoCredito + " | " + ttMov.dataMovimento + " | " + ttMov.valorDocumento);
            // if (codEmpresa.contains("244")) logger.logInfo("TPPORTTEMPLATE " + ttMov.tipoPlanilha + " | " + ttMov.nomeOrigem);


            // if(codEmpresa.equals("987789")) logger.logInfo("DATA == "+ttMov.dataMovimento+" | LOTEEE == "+ttMov.lote.replace("rodaconversor", "")+" | TP === "+ttMov.tipoPlanilha);
            if (ttMov.tipoPlanilha.contains("CARTAO")) ttMov.tipoPlanilha = ttMov.tipoPlanilha.replaceAll("[0-9]", "").trim(); //JWR

            ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("\'","");
            ttMov.complemento01 = ttMov.complemento01.replaceAll("\'","");
            ttMov.complemento02 = ttMov.complemento02.replaceAll("\'","");
            ttMov.complemento03 = ttMov.complemento03.replaceAll("\'","");
            ttMov.complemento04 = ttMov.complemento04.replaceAll("\'","");
            ttMov.complemento05 = ttMov.complemento05.replaceAll("\'","");

            ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
            ttMov.nomePortador = ttMov.nomePortador.replaceAll("\\|","");
            ttMov.complemento01 = ttMov.complemento01.replaceAll("\\|","");

            classificaPlano     = roteiroCRM.optString("classificaPlano");
            classificaFornec    = roteiroCRM.optString("classificaFornec");
            cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
            Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
            String integraFiscal = roteiroCRM.optString("Integracao_fiscal").toUpperCase();
            String integraContrato = roteiroCRM.optString("Integracao_contratos").toUpperCase();

            // if (codEmpresa.contains("856")) logger.logInfo("PORTADOR " + ttMov.nomeOrigem);

            if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) continue;
            if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-DEBITO")) continue;
            // logger.logInfo("PORTAS1 " + cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_"));
            // logger.logInfo("PORTAS2 " + ttMov.nomePortador);
            if (ttMov.nomePortador.toUpperCase().contains("OTT_OUD") && ttMov.nomePortador.toUpperCase().contains("CEF")) ttMov.nomePortador = cutString(ttMov.nomePortador.toUpperCase(), 0, "OTT_") + " " + cutString(ttMov.nomePortador.toUpperCase(), ttMov.nomePortador.toUpperCase().indexOf(cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_"))+cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_").length()+1);

            // logger.logInfo("TIPOS " + tipoPlanilha);

            if (ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("FRANCESINHA")) {
                JSONObject histobj = new JSONObject();
                histobj.put("nomeOrigem", ttMov.nomeOrigem).put("documento", ttMov.documento).put("complemento01", ttMov.complemento01).put("complemento02", ttMov.complemento02)
                        .put("complemento03", ttMov.complemento03).put("complemento04", ttMov.complemento04).put("complemento05", ttMov.complemento05)
                        .put("complemento06", ttMov.complemento06).put("nomePortador", ttMov.nomePortador).put("dataMovimento", ttMov.dataMovimento)
                        .put("valorDocumento", ttMov.valorDocumento).put("valorJuros", ttMov.valorJuros).put("valorDesconto", ttMov.valorDesconto)
                        .put("valorMulta",ttMov.valorMulta).put("tipoPlanilha", ttMov.tipoPlanilha);

                String modificaData = getModificaData(histobj);

                if (modificaData.startsWith("01"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 1, true);
                if (modificaData.startsWith("02"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 2, true);
                if (modificaData.startsWith("03"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 1, false);
                if (modificaData.startsWith("04"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 2, false);
                if (modificaData.startsWith("05"))  ttMov.dataMovimento = "01/" + cutString(ttMov.dataMovimento, "/");
                if (modificaData.startsWith("06"))  ttMov.dataMovimento = getLastDayOfMonth(ttMov.dataMovimento, true);
            }


            // ------------------------------------------------------------------------------------------------------------------
            // 	 		INICIA PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------
            String DATAMOVIMENTO   = "";
            String PORTADOR        = "";
            String CHAVE           = "";
            boolean jaCruzou       = false;

            ttMov.valorJuros = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));
            ttMov.valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
            ttMov.valorMulta = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorMulta));
            ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
            // ajuste 11/2020 @DiMaz
            if (ttMov.valorDocumento == 0) continue;


            // #DOCUMENTACAO
            // EXTRATO COM EXTRATO
            if (Cruza_Extrato_com_Extrato.contains("TRUE") && ttMov.tipoPlanilha.contains("EXTRATO")) {

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);
                if (ttMov.valorDocumento == 0) continue;


                JSONArray extratoEmpresa = new JSONArray();
                String transferencia = "NAO";

                if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-DEBITO"))  transferencia = "SIM";
                if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) transferencia = "SIM";

                if (transferencia.equals("SIM")) {
                    for (int xx = 0;xx<1;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;

                            if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                    .param(chaveExtrato + "%")
                                    .param(0)
                                    .param(ttMov.nomeArquivo.toUpperCase())
                                    .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
                    PORTADOR        = recMov.optString("PORTADOR");
                    CHAVE           = recMov.optString("CHAVE");

                    ttMov.complemento04 = ttMov.nomeOrigem;
                    ttMov.nomeOrigem    = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;
                    ttMov.tipoPlanilha  = "EXTRATO-TRANSFERENCIA";

                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(1)
                            .param(CHAVE)
                            .execute();
                    jaCruzou = true;

                }
            }

            // #DOCUMENTACAO
            // EXTRATO COM PLANILHA
            if (cruzaExtrato.contains("TRUE")  && !jaCruzou) {

                Conta_Fixa_Cruzamento_Extrato  = roteiroCRMPrincipal.optString("Conta_Fixa_Cruzamento_Extrato");

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm   = new Date();
                Date dataMovimentoDateMenosDois = new Date();
                Date dataMovimentoDateMenosTres = new Date();
                Date dataMovimentoDateMaisUm    = new Date();
                Date dataMovimentoDateMaisDois  = new Date();
                Date dataMovimentoDateMaisTres  = new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm   = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm    = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois  = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres  = cal.getTime();

                if (ttMov.valorDocumento == 0) continue;


                JSONArray extratoEmpresa = new JSONArray();

                String transferencia = "NAO";

                if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
                    for (int xx = 0;xx<7;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;
                            if (xx ==1) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisUm, "dd/MM/yyyy");
                            if (xx ==2) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosUm, "dd/MM/yyyy");
                            if (xx ==3) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisDois, "dd/MM/yyyy");
                            if (xx ==4) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosDois, "dd/MM/yyyy");
                            if (xx ==5) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisTres, "dd/MM/yyyy");
                            if (xx ==6) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosTres, "dd/MM/yyyy");


                            if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                    .param(chaveExtrato + "%")
                                    .param(0)
                                    .param(ttMov.nomeArquivo.toUpperCase())
                                    .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
                    PORTADOR        = recMov.optString("PORTADOR");
                    CHAVE           = recMov.optString("CHAVE");
                    if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) ttMov.complemento02 = recMov.optString("COMPLEMENTO"); //checknum

                    ttMov.nomePortador  = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;

                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(1)
                            .param(CHAVE)
                            .execute();

                }

            }

            if (ttMov.lote.contains("_ancora_")) {
                ttMov.lote = ttMov.lote.replace("_ancora_", "");
            }

            if (ttMov.lote.contains("_ANCORA_")) {
                ttMov.lote = ttMov.lote.replace("_ANCORA_", "");
            }


            // ------------------------------------------------------------------------------------------------------------------
            // 	 		FINALO DO PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------




            classificacao = "";

            String key2 = ttMov.chave;

            if(ttMov.dataMovimento.length() > 9){
                mesRef  = Integer.parseInt(ttMov.dataMovimento.substring(3,5));
                anoRef  = Integer.parseInt(ttMov.dataMovimento.substring(6,10));
                mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                mesRef  = mesRef - 1;
                if (mesRef  == 0) {
                    mesRef  = 12;
                    anoRef  = anoRef - 1;
                }
                mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                mesRef  = mesRef - 1;
                if (mesRef  == 0) {
                    mesRef  = 12;
                    anoRef  = anoRef - 1;
                }
                mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
            }

            String trimestreMesAnoAnterior	    = "";
            String trimestreMesAnoAtual   	    = "";
            String descricaoPlanoContaPortador  = "";
            String descricaoPlanoContaMovimento = "";

            // #DOCUMENTACAO
            // TRIMESTRE
            if (mesAnoAnterior.startsWith("01") || mesAnoAnterior.startsWith("02") || mesAnoAnterior.startsWith("03")) trimestreMesAnoAnterior = "1. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("04") || mesAnoAnterior.startsWith("05") || mesAnoAnterior.startsWith("06")) trimestreMesAnoAnterior = "2. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("07") || mesAnoAnterior.startsWith("08") || mesAnoAnterior.startsWith("09")) trimestreMesAnoAnterior = "3. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("10") || mesAnoAnterior.startsWith("11") || mesAnoAnterior.startsWith("12")) trimestreMesAnoAnterior = "4. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAtual.startsWith("01") || mesAnoAtual.startsWith("02") || mesAnoAtual.startsWith("03")) trimestreMesAnoAtual = "1. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("04") || mesAnoAtual.startsWith("05") || mesAnoAtual.startsWith("06")) trimestreMesAnoAtual = "2. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("07") || mesAnoAtual.startsWith("08") || mesAnoAtual.startsWith("09")) trimestreMesAnoAtual = "3. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("10") || mesAnoAtual.startsWith("11") || mesAnoAtual.startsWith("12")) trimestreMesAnoAtual = "4. Trimestre/" + mesAnoAtual.substring(3);


            if (ttMov.nomeOrigem.equals("")) ttMov.nomeOrigem = ttMov.complemento01 + " " + ttMov.dataMovimento + " R$" + String.valueOf(ttMov.documento);
            ttMov.nomeOrigem = ttMov.nomeOrigem.trim();
            if (ttMov.nomePortador.equals("")) ttMov.nomePortador = "EM BRANCO";
            if (ttMov.nomePortador.equals("_")) ttMov.nomePortador = "EM BRANCO";
            if (ttMov.nomePortador.equals("-")) ttMov.nomePortador = "EM BRANCO";
            if (ttMov.nomePortador.replaceAll("\\$", "").equals("")) ttMov.nomePortador = "EM BRANCO";


            contaJuros        = roteiroCRM.optString("contaFixaJuros");
            contaFixaCredito  = roteiroCRM.optString("contaFixaCredito");
            contaFixaDebito   = roteiroCRM.optString("contaFixaDebito");
            contaDesconto     = roteiroCRM.optString("contaFixaDesconto");
            contaMulta        = roteiroCRM.optString("contaFixaMulta");

            // if(codEmpresa.equals("13")) logger.logInfo("ValorJuros -> " + ttMov.valorJuros + " |contaJuros -> " + contaJuros + " |VAlorMulta -> " + ttMov.valorMulta + " | contaMulta -> " + contaMulta + " |TTMovNO -> " + ttMov.nomeOrigem +  " | ValorDoc -> " + ttMov.valorDocumento);


            contaMovimento = "";
            contaPortador  = "";


            if(ttMov.tipoLancamento.contains("PAGAR")) {
                contaMovimento = contaFixaDebito;
                contaPortador  = contaFixaCredito;
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                contaPortador  = contaFixaDebito;
                contaMovimento = contaFixaCredito;
            }



            // exemplo de como vem um registro do complemento_lancaments
            // 54999667000179-PAG-ANTONIO FLAVIO DE ARAUJO JUNIOR-2021-05-21-180.0

            if (contaMovimento.equals("") && encontrouComplemento){
                try {

                    String chaveComplemento = cnpjEmpresa.replaceAll("[^0-9]","").trim() + "-" + cutString(ttMov.tipoLancamento, 0, 3) + "-" + ttMov.nomeOrigem + "-" +
                            cutString(ttMov.dataMovimento, 6) + "-" + cutString(ttMov.dataMovimento, "/", "/") + "-" + cutString(ttMov.dataMovimento, 0, "/") + "-" +
                            ttMov.valorDocumento;



                    ttPlano ttP  = (ttPlano)mapaDePara.get(chaveComplemento);
                    if (ttP == null) {
                        ttP  = new ttPlano();
                        ttP.descricaoPlano = chaveComplemento;
                        ttP.contaAnalitica = "";
                        ttP.contaContabil     = "";
                        mapaDePara.put(chaveComplemento,ttP);

                        try{
                            deParaObj = findComplementoLancamento(dbIODepara, chaveComplemento);
                        }
                        catch (Exception e) {
                        }
                        if (deParaObj != null && !deParaObj.toString().equals("{}")) {
                            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                                ttMov.complemento02 = deParaObj.optString("complemento");
                            } else {
                                ttMov.complemento01 = deParaObj.optString("complemento");
                            }


                        } else {

                            //	 verifica se banco de dados possui ao menos algum lancamento de complemento
                            //   se nao encontrar, joga false na encontrouComplemento para ter mais performance e nao buscar no
                            //   banco  de dados a toa
                            chaveComplemento = cnpjEmpresa.replaceAll("[^0-9]","").trim() + "-" + cutString(ttMov.tipoLancamento, 0, 2);
                            try{
                                deParaObj = findComplementoLancamento(dbIODepara, chaveComplemento);
                            }
                            catch (Exception e) {
                            }
                            if (deParaObj == null || deParaObj.toString().equals("{}"))  encontrouComplemento = false;

                        }


                    }
                } catch  (Exception Ee) {}
            }


            // Quando pede para cruzar extrato e nao encontra relacionamento com o extrato
            // joga conta fixa de extrato em DEBITO quando for extato e CREDITO quando for planilha
            if ((cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) && PORTADOR.equals("")) {
                if (ttMov.tipoPlanilha.contains("EXTRATO"))  contaMovimento  = Conta_Fixa_Cruzamento_Extrato;
                if (!ttMov.tipoPlanilha.contains("EXTRATO")) contaPortador   = Conta_Fixa_Cruzamento_Extrato;
            }


            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

            contaMovimento    = getConta09(contaMovimento, ttMov.nomeOrigem,  ttMov.documento, "", ttMov.complemento01,  ttMov.complemento02,  ttMov.complemento03, "",  ttMov.centroCusto);
            contaPortador     = getConta09(contaPortador, "", "", ttMov.nomePortador, "", "", "", ttMov.nomeArquivo, "");
            //ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, "", ttMov.centroCusto);
            //2310-017917 - As regras de centro custo tem validacao com o nome do arquivo e n?o funcionava porque nomeArquivo nao estava sendo passado no getCentroCusto
            ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, nomeArquivo, ttMov.centroCusto);
            ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                    ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                    ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);
            if (!ttMov.codFilial.equals("") && roteiroCRMPrincipal.optString("erpContabilidade").equals("CUCA-FRESCA")) ttMov.cpfCnpj = ttMov.codFilial;

            ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

            JSONObject histobj = new JSONObject();

            histobj.put("nomeOrigem", ttMov.nomeOrigem).put("documento", ttMov.documento).put("complemento01", ttMov.complemento01).put("complemento02", ttMov.complemento02)
                    .put("complemento03", ttMov.complemento03).put("complemento04", ttMov.complemento04).put("complemento05", ttMov.complemento05)
                    .put("complemento06", ttMov.complemento06).put("complemento07", ttMov.complemento07).put("complemento08", ttMov.complemento08)
                    .put("complemento09", ttMov.complemento09).put("complemento10", ttMov.complemento10).put("dataMovimento", ttMov.dataMovimento)
                    .put("mesAnoAnterior", mesAnoAnterior).put("mesAno2Anterior", mesAno2Anterior).put("mesAnoAtual", mesAnoAtual).put("nomePortador", ttMov.nomePortador)
                    .put("contaMovimento", contaMovimento).put("contaPortador", contaPortador).put("contaDebito", "").put("contaCredito", "").put("contaJuros", ttMov.contaJuros)
                    .put("contaDesconto", ttMov.contaDesconto).put("contaMulta", ttMov.contaMulta).put("centroCusto", ttMov.centroCusto)
                    .put("valorDocumento", ttMov.valorDocumento).put("valorJuros", ttMov.valorJuros).put("valorDesconto", ttMov.valorDesconto).put("valorMulta", ttMov.valorMulta)
                    .put("codFilial", ttMov.codFilial).put("tipoPlanilha", ttMov.tipoPlanilha).put("numeroAba", ttMov.abaPlanilha).put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

            ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getReplaceTermos("complemento08", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getReplaceTermos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getReplaceTermos("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getReplaceTermos("nomePortador",  ttMov.nomePortador,   histobj);

            ttMov.complemento01 = getLimpaCampos("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getLimpaCampos("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getLimpaCampos("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getLimpaCampos("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getLimpaCampos("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getLimpaCampos("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getLimpaCampos("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getLimpaCampos("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getLimpaCampos("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getLimpaCampos("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getLimpaCampos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getLimpaCampos("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getLimpaCampos("nomePortador",  ttMov.nomePortador,   histobj);

            histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
            histobj.put("nomePortador", ttMov.nomePortador);

            ttMov.complemento01 = getLimpaCamposAvancado("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getLimpaCamposAvancado("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getLimpaCamposAvancado("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getLimpaCamposAvancado("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getLimpaCamposAvancado("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getLimpaCamposAvancado("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getLimpaCamposAvancado("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getLimpaCamposAvancado("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getLimpaCamposAvancado("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getLimpaCamposAvancado("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getLimpaCamposAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getLimpaCamposAvancado("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getLimpaCamposAvancado("nomePortador",  ttMov.nomePortador,   histobj);

            ttMov.complemento01 = getReplaceTermosAvancado("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getReplaceTermosAvancado("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getReplaceTermosAvancado("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getReplaceTermosAvancado("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getReplaceTermosAvancado("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getReplaceTermosAvancado("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getReplaceTermosAvancado("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getReplaceTermosAvancado("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getReplaceTermosAvancado("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getReplaceTermosAvancado("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getReplaceTermosAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getReplaceTermosAvancado("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getReplaceTermosAvancado("nomePortador",  ttMov.nomePortador,   histobj);

            histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
            histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
            histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
            histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
            histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
            histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
            histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
            histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
            histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());


            // Quando selecionado para controlar parcela, buscar complemento apos a limpeza para poder jogar em parcela
            String parcelaString = "1";
            if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO01")) parcelaString = ttMov.complemento01;
            if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO02")) parcelaString = ttMov.complemento02;
            if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO03")) parcelaString = ttMov.complemento03;
            if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO04")) parcelaString = ttMov.complemento04;
            if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO05")) parcelaString = ttMov.complemento05;

            try {
                ttMov.parcelaDoc = Integer.parseInt(parcelaString);
            }
            catch (Exception xx) { ttMov.parcelaDoc = 1;}

            //Feito para retirar os indices apos o tipoPlanilha, estavam impactando nas regras do oud
            if(!ttMov.tipoPlanilha.equals("")){
                String sequencia = "";
                try{
                    sequencia = cutString(ttMov.tipoPlanilha, ttMov.tipoPlanilha.length()-4).replaceAll("[^0-9]", "");
                }catch(Exception s1){}
                if(ttMov.tipoPlanilha.contains(sequencia)){
                    try{
                        ttMov.tipoPlanilha = cutString(ttMov.tipoPlanilha, 0, sequencia);

                    }catch(Exception s2){}
                }
            }

            // logger.logInfo("TTMS " + ttMov.tipoPlanilha + " | " + ttMov.complemento01 + " | " + ttMov.nomeOrigem + " | " + ttMov.complemento02);


            contaMovimento = getContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaMovimento = getContaMovimento2(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaMovimento = getContaMovimento3(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador  = getContaPortador(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            //#2305-004914. Carrega a chamadas das rotinas getContaMovimento e getContaPortador caso n?o tenha ainda.
            // Classe Principal SC
            Class<?> sc = this.getClass();
            // Instancia da Classe Principal
            Object scInstance = sc.newInstance();
            // Get all Methods from superclass 'SC'.
            java.lang.reflect.Method[] methods = sc.getDeclaredMethods();
            boolean methodFoundPortador = false;
            boolean methodFoundMovimento = false;
            for(java.lang.reflect.Method method : methods) {
                String methodName = method.getName();
                methodFoundPortador = false;
                methodFoundMovimento = false;
                if(methodName.toUpperCase().equals("GETCONTAMOVIMENTO4")) {
                    methodFoundMovimento = true;
                }
                if(methodName.toUpperCase().equals("GETCONTAMOVIMENTO5")) {
                    methodFoundMovimento = true;
                }

                if(methodName.toUpperCase().equals("GETCONTAPORTADOR2")) {
                    methodFoundPortador = true;
                }
                if(methodName.toUpperCase().equals("GETCONTAPORTADOR3")) {
                    methodFoundPortador = true;
                }
                if(methodName.toUpperCase().equals("GETCONTAPORTADOR4")) {
                    methodFoundPortador = true;
                }

                if(methodFoundMovimento) {
                    // Invoca metodo de getContaMovimento.
                    contaMovimento = (String) method.invoke(scInstance, contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                }
                if(methodFoundPortador) {
                    // Invoca metodo de getContaPortador.
                    contaPortador = (String) method.invoke(scInstance, contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                }
            }

            // Soares - Mudanca no template referente a uma parte do chamado =>> 202208-0017982

            if(roteiroCRM.optString("gravaCnpjMovimento").toUpperCase().contains("TRUE")){
                if(contaMovimento.equals("")) {
                    if(!ttMov.cpfCnpj.equals("")){
                        contaMovimento = ttMov.cpfCnpj;
                        if((roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().startsWith("SCI") || roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("PROSOFT")) && !ttMov.cpfCnpj.equals(""))
                            contaMovimento = ttMov.cpfCnpj + "P";
                    }
                }
                else {ttMov.cpfCnpj = "";}
            }

            regraContaMovimento  = getRegraContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            // logger.logInfo("CONTINHA "  + contaMovimento + " | " + regraContaMovimento);
            // logger.logInfo("CONTA MOV == "+contaMovimento+" | NO == "+ttMov.nomeOrigem+" | TP = "+ttMov.tipoPlanilha);

            double valorPrincipal 	 = getValorPrincipal("", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            if (valorPrincipal> 0 && ttMov.valorDocumento > valorPrincipal) {
                ttMov.valorJuros     = ttMov.valorDocumento - valorPrincipal;
                ttMov.valorDocumento = valorPrincipal;
            }

            ttMov.complemento03 	= ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";
            ttMov.contaJuros        = getContaJuros(contaJuros,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaDesconto     = getContaDesconto(contaDesconto,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaMulta        = getContaMulta(contaMulta,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            tabelaContabil   		= getTabelaContabil("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);
            ttMov.complemento03  	= ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();
            // if(roteiroCRM.optString("empresa").toUpperCase().contains("FARMAGIL")){
            // logger.logInfo("TIPO PLANILHINHA == "+ttMov.tipoPlanilha+" | ttMov.contaDesconto - "+ttMov.contaDesconto+" - contaDesconto - "+contaDesconto+" | "+roteiroCRM.optString("contaFixaDesconto"));
            // }
            // logger.logInfo("Contabilidade - "+roteiroCRM.optString("contabilidade")+" - empresa => "+roteiroCRM.optString("empresa"));
            // logger.logInfo("TP - "+tipoPlanilha+" - conta fixa => "+roteiroCRM.optString("contaFixaJuros")+""+roteiroCRM.optString("contaFixaMulta")+""+roteiroCRM.optString("contaFixaDesconto")+"");
            // logger.logInfo("ttMov.contaJuros - "+ttMov.contaJuros+" - ttMov.contaDesconto - "+ttMov.contaDesconto+" - ttMov.contaMulta - "+ttMov.contaMulta);

            // quando for forcada partida dobrada , vamos jogar a conta de juros automaticamente na conta movimento
            if (!contaMovimento.contains("IGNORA")) { // colocado para ignorar os lancamentos de partida dobrada quando o lancamento principal eh ignorado 20122022 JWR
                if (ttMov.chave.contains("DOBRADA_JUR") && !ttMov.contaJuros.equals("")) contaMovimento = ttMov.contaJuros;//#2304-002846
                if (ttMov.chave.contains("DOBRADA_DES")) {
                    // invers?o de contas em desconto.
                    contaMovimento = contaPortador;
                    if (!ttMov.contaDesconto.equals("")) contaPortador = ttMov.contaDesconto;
                }
                if (ttMov.chave.contains("DOBRADA_MUL") && !ttMov.contaMulta.equals("")) contaMovimento = ttMov.contaMulta;
            }


            boolean regraCRM = false;
            // logger.logInfo("contaMovimento F -> " + contaMovimento);
            if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;

            //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---

            if (!contaMovimento.equals("")){

                ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
                if (ttP == null) {
                    ttP  = new ttPlano();
                    ttP.descricaoPlano = "";
                    ttP.contaAnalitica = "";


                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                            .fields("DESCRICAOPLANO,CONTAANALITICA")
                            .param(codEmpresaPlanoContas)
                            .param(cutString(contaMovimento,0, 20))
                            .queryUnique();

                    if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
                        dbIOCont.insert("IO_PLANOCONTA")
                                .fields("CODEMPRESA,CONTACONTABIL")
                                .param(codEmpresaPlanoContas)
                                .param(cutString(contaMovimento,0, 20))
                                .execute();
                    } else {
                        ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
                        ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
                    }
                    ttP.contaContabil     = cutString(contaMovimento,0, 20);
                    mapaPlano.put(contaMovimento,ttP);
                }
            }



            regraCRM = false;
            if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;


            if (contaMovimento.equals("")){
                // logger.logInfo("Chegou 2");
                try {
                    String classificacaoPlanoContas = getCodigoClassificacao(ttMov.nomeOrigem, histobj); // exemplo: 2.1.1.01.
                    JSONObject futureObject = new JSONObject();
                    //JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
                    futureObject.put("codEmpresaPlano", codEmpresaPlanoContas);
                    futureObject.put("fazLcdpr", fazLcdpr);
                    JSONObject ret = new JSONObject();
                    try {
                        ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
                    } catch (Exception e) {
                        // logger.logInfo("XABU RET " + e.getMessage());
                    }
                    if (ret != null) {
                        if(ttMov.tipoLancamento.contains("PAGAR") && ret.has("contaDebito")) contaMovimento = ret.optString("contaDebito");
                        if(ttMov.tipoLancamento.contains("RECEBER") && ret.has("contaCredito")) contaMovimento = ret.optString("contaCredito");
                    }
                    //JWR 30012024
                    // logger.logInfo("PEGOU PELO PARTICIPAS " + contaMovimento);
                    if (roteiroCRMPrincipal.optString("erpContabilidade").equals("JBSOFTWARE") && contaMovimento.contains("P")) contaMovimento = contaMovimento.replaceAll("P", "");

                    if (contaMovimento == null || contaMovimento.trim().length() == 0) {
                        contaMovimento = "";

                        // CASO NAO ACHOU CONTA EM REGRAS NEM NO DEPARA ATUAL
                        // VERIFICA SE E A PRIMEIRA VEZ QUE BUSCA A DESCRICAO NA NUVEM
                        // INSERIDO PARA TRATGAR O BUSSOLA 3.0

                        ttPlano ttP  = (ttPlano)mapaDePara.get(ttMov.nomeOrigem);
                        if (ttP == null) {
                            ttP  = new ttPlano();
                            ttP.descricaoPlano = ttMov.nomeOrigem;
                            ttP.contaAnalitica = "";

                            ttP.contaContabil     = "";
                            mapaDePara.put(ttMov.nomeOrigem,ttP);

                            // BUSCA DEPARA PREENCHIDO PELO CONTADOR NO BUSSOLA 3.0
                            String cnpjEmpresaRequest = cnpjEmpresa.replaceAll("[^0-9]","").trim();
                            String cnpjContabilidadeRequest = roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/","");
                            // logger.logInfo("SUJANDO "  + cnpjEmpresaRequest + " | " + cnpjContabilidadeRequest + " | " + ttMov.nomeOrigem);
                            // logger.logInfo("SUJANDO 2 = "  + ttMov.valorDocumento + " | " + ttMov.nomeOrigem);
                            try{
                                // logger.logInfo("ttMov.nomeOrigem -> " + ttMov.nomeOrigem);
                                deParaObj = findDeParaDescricao(dbIODepara, cnpjEmpresaRequest, cnpjContabilidadeRequest, ttMov.nomeOrigem);

                            }
                            catch (Exception e) {
                            }
                            if (deParaObj != null ) {
                                if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = deParaObj.optString("conta_debito");
                                if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = deParaObj.optString("conta_credito");
                                // logger.logInfo("contaMovimento -> " + contaMovimento);
                                if (contaMovimento == null) contaMovimento = "";
                                // logger.logInfo("CONTS " + contaMovimento);
                                // Quando cliente inserir a contaT no DEpara Nuvem, vamos apagar no final da rota
                                if (contaMovimento.contains("T")) {
                                    apagaContaT    = true;
                                }

                                // logger.logInfo("CMM " + contaMovimento + " | " + apagaContaT);


                            }else contaMovimento = "";


                            // SE ENCONTROU DAPARA NA NUVEM GRAVA NO H2 PARA NA PROXIMA VEZ// ACHAR LOCALMENTE O DEPARA
							/*if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("PAGAR")) {
									if (!hasPessoaPag(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("PAGAR")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "",
															contaMovimento, "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "", contaMovimento, "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}
							if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("RECEBER")) {
									if (!hasPessoaRec(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("RECEBER")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento,
													"", "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento, "", "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}*/

                            // RETIRA  T DA CONTA MOVIMENTO
                            contaMovimento = contaMovimento.replaceAll("T", "").replaceAll("t","");
                            ttP.contaContabil     = contaMovimento;
                            mapaDePara.put(ttMov.nomeOrigem,ttP);

                        }
                        else {
                            contaMovimento = ttP.contaContabil;
                        }


                    }
                } catch  (Exception Ee) {}
            }

            if (fazLcdpr.equals("TRUE")) {
                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO") && !contaMovimento.contains("R")) {
                    ObjParticipante objParticipante = (ObjParticipante)mapaParticipante.get(ttMov.nomeOrigem);
                    if (objParticipante != null) {
                        contaMovimento = contaMovimento + "R" + objParticipante.codigoParticipante;
                    }
                }

            }




            if(roteiroCRMPrincipal.optString("erpContabilidade").contains("DEXION")){
                if (contaMovimento.equals("")) {
                    JSONObject descricaoPlano = dbIOCont.sql("SELECT CONTACONTABIL FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOPLANO LIKE ?")
                            .fields("CONTACONTABIL")
                            .param(codEmpresaPlanoContas)
                            .param(ttMov.cpfCnpj + "%")
                            .queryUnique();
                    contaMovimento = descricaoPlano.optString("CONTACONTABIL").trim();
                }
            }

            if (contaPortador.equals("")) {
                try {
                    ttFornecedor ttF  = (ttFornecedor)mapaFornecedor.get(ttMov.nomePortador+"PORT");
                    if (ttF == null) {
                        ttF  = new ttFornecedor();

                        JSONArray portadorDePara =  findPortador(dbIOCont, codEmpresa, ttMov.nomePortador);
                        if (portadorDePara != null && portadorDePara.length() > 0) {
                            JSONObject ret = portadorDePara.optJSONObject(0);
                            contaPortador = ret.optString("CONTACONTABIL").trim();
                        }

                        ttF.contaMovimento = contaPortador;
                        ttF.nomeOrigem     = ttMov.nomePortador + "PORT";
                        mapaFornecedor.put(ttMov.nomePortador + "PORT",ttF);
                    } else {
                        contaPortador = ttF.contaMovimento;
                    }
                }
                catch  (Exception Ee) {}
            }

            String contaTipoFornecedor = "999333";

            boolean eFornecedor = false;
            String  razaoSocial = ttMov.nomeOrigem;
            String  razaoSocialDuplicata = ttMov.nomeOrigem;
            if (contaMovimento.toUpperCase().contains("FISCAL"))  eFornecedor = true;

            if (!contaMovimento.equals("")){
                ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
                if (ttP == null) {
                    ttP  = new ttPlano();
                    ttP.descricaoPlano = "";
                    ttP.contaAnalitica = "";

                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                            .fields("DESCRICAOPLANO,CONTAANALITICA")
                            .param(codEmpresaPlanoContas)
                            .param(contaMovimento)
                            .queryUnique();

                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO") && descricaoPlano.has("CONTAANALITICA") ) {
                        ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
                        ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
                    }
                    ttP.contaContabil     = contaMovimento;
                    mapaPlano.put(contaMovimento,ttP);
                }

                descricaoPlanoContaMovimento = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
                if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
                    razaoSocial = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
                }

                // Joga no nome do fornecedor o que esta no plano de contas
                if (!classificaPlano.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaPlano))) {
                    ttMov.nomeOrigem = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
                }
                if (ttP.descricaoPlano.length() < 2 || ttP.descricaoPlano.equals("") || ttP.descricaoPlano == null) {
                    eFornecedor = true;
                }

                if (razaoSocial.length() < 4) razaoSocial = ttMov.nomeOrigem;

                if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
                    eFornecedor = true;
                }
            }

            if (!contaPortador.equals("")){
                ttPlano ttP  = (ttPlano)mapaPlano.get(contaPortador);
                if (ttP == null) {
                    ttP  = new ttPlano();
                    ttP.descricaoPlano = "";
                    ttP.contaAnalitica = "";
                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                            .fields("DESCRICAOPLANO,CONTAANALITICA")
                            .param(codEmpresaPlanoContas)
                            .param(cutString(contaPortador,0, 20))
                            .queryUnique();

                    if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
                        dbIOCont.insert("IO_PLANOCONTA")
                                .fields("CODEMPRESA,CONTACONTABIL")
                                .param(codEmpresaPlanoContas)
                                .param(cutString(contaPortador,0, 20))
                                .execute();
                    } else {
                        ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
                        ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
                    }
                    ttP.contaContabil     = cutString(contaPortador,0, 20);
                    mapaPlano.put(contaPortador,ttP);
                }
                descricaoPlanoContaPortador = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
            }

            if(ttMov.tipoLancamento.contains("PAGAR")) {
                ttMov.contaDebito  = cutString(contaMovimento,0, 20);
                ttMov.contaCredito = cutString(contaPortador,0, 20);
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                ttMov.contaCredito  = cutString(contaMovimento,0, 20);
                ttMov.contaDebito   = cutString(contaPortador,0, 20);
            }

            // logger.logInfo("CONTASTEMP " + ttMov.contaDebito + " | " + ttMov.contaCredito);

            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
                temIgnorar = true;
                ResumoTxt.append("\r\n");
                comparaRazao = true;


                ResumoTxt.append("REGRA DE IGNORAR CONTA MOVIMENTO;");
                ResumoTxt.append(ttMov.dataMovimento).append(";").append(ttMov.dataMovimento).append(";")
                        .append(ttMov.valorDocumento).append(";").append(ttMov.documento).append(";")
                        .append(ttMov.nomeOrigem).append(";").append(ttMov.nomePortador).append(";")
                        .append(ttMov.complemento01).append(";").append(ttMov.complemento02).append(";")
                        .append(ttMov.complemento03).append(";").append(ttMov.complemento04).append(";")
                        .append(ttMov.complemento05).append(";").append(ttMov.complemento06).append(";;")
                        .append(ttMov.contaDebito).append(";").append(ttMov.contaCredito).append(";")
                        .append(regraContaMovimento).append(";").append(ttMov.historico).append(";");

                mapaVariavel.put(key,ttMov);

                continue;
            }
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
                temIgnorar = true;

                ResumoTxt.append("\r\n");
                comparaRazao = true;


                ResumoTxt.append("REGRA DE IGNORAR CONTA MOVIMENTO;").append(ttMov.dataMovimento).append(";").append(ttMov.dataMovimento).append(";")
                        .append(ttMov.valorDocumento).append(";").append(ttMov.documento).append(";").append(ttMov.nomeOrigem).append(";")
                        .append(ttMov.nomePortador).append(";").append(ttMov.complemento01).append(";").append(ttMov.complemento02).append(";")
                        .append(ttMov.complemento03).append(";").append(ttMov.complemento04).append(";").append(ttMov.complemento05).append(";")
                        .append(ttMov.complemento06).append(";;").append(ttMov.contaDebito).append(";").append(ttMov.contaCredito).append(";")
                        .append(regraContaMovimento).append(";").append(ttMov.historico).append(";");

                mapaVariavel.put(key,ttMov);

                continue;
            }
            String parcelaAtualeFinal = "";
            String parcelaAtual       = "";

            int parcelaBase = getParcelaBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            int totalParcelas = getTotalParcelas(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            String mesAnoBase = getMesAnoBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!mesAnoBase.equals("") && parcelaBase > 0) parcelaAtual       = String.valueOf(getParcelaFinanciamento(mesAnoAtual, mesAnoBase,parcelaBase, totalParcelas));
            if (!mesAnoBase.equals("")) parcelaAtualeFinal = parcelaAtual.trim() + "/" + String.valueOf(totalParcelas).trim();

            ttMov.historico = getHistorico(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);

            histobj.put("contaMovimento", contaMovimento).put("contaPortador", contaPortador).put("contaDebito", ttMov.contaDebito)
                    .put("contaCredito", ttMov.contaCredito).put("contaJuros", ttMov.contaJuros).put("contaMulta", ttMov.contaMulta)
                    .put("contaDesconto", ttMov.contaDesconto).put("parcelaAtual", parcelaAtual).put("parcelaAtualeFinal", parcelaAtualeFinal)
                    .put("trimestreMesAnoAnterior", trimestreMesAnoAnterior).put("trimestreMesAnoAtual", trimestreMesAnoAtual).put("descricaoPlanoMovimento", descricaoPlanoContaMovimento.toUpperCase())
                    .put("descricaoPlanoPortador", descricaoPlanoContaPortador.toUpperCase());

            if(roteiroCRM.optString("Realizar_Busca_Plano").equals("TRUE")){

                // #Fabrica(2019-08-27) @Vini
                JSONObject fornecFilial = new JSONObject();
                String cAnalitica = "";
                String auxNomeOrig = "";
                auxNomeOrig = ttMov.nomeOrigem.replaceAll("-","").replaceAll("/","").replaceAll("\\.","").replaceAll("[0-9]*", "").replaceAll("\\s+","").replaceAll("ME","").replaceAll("EPP","").replaceAll("LTDA","").replaceAll("EIRELI","").replaceAll("SA","").trim();
                if (auxNomeOrig.length()> 11) auxNomeOrig = cutString(auxNomeOrig,0,10);
                //pesquisa no banco de dados pela descricao continua para pegar a classifica??o usada na nova regra
                fornecFilial = dbIOCont.sql("SELECT CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOCONTINUA LIKE ?")
                        .fields("CONTAANALITICA")
                        .param(codEmpresaPlanoContas)
                        .param(auxNomeOrig+"%")
                        .queryUnique();
                cAnalitica = fornecFilial.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim();
                histobj.put("classificacao", cAnalitica); // classificacao para criacao de regra
            }

            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

            ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            //yuri - 2309-016305
            boolean methodFoundHistorico = false;
            for(java.lang.reflect.Method method : methods) {
                String methodName = method.getName();
                methodFoundHistorico = false;
                if(methodName.toUpperCase().equals("GETHISTORICOREGRA2")) {
                    methodFoundHistorico = true;
                }

                if(methodName.toUpperCase().equals("GETHISTORICOREGRA3")) {
                    methodFoundHistorico = true;
                }

                if(methodName.toUpperCase().equals("GETHISTORICOREGRA4")) {
                    methodFoundHistorico = true;
                }

                if(methodFoundHistorico) {
                    // Invoca metodo de getHistoricoRegra
                    ttMov.historico = (String) method.invoke(scInstance, contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                }
            }
            // if(codEmpresa.equals("244")) logger.logInfo("HST == "+ttMov.historico+" | VLR == "+ttMov.valorDocumento);

            regraHistorico = getRegraHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!ttMov.historicoJuros.contains("JUROS")) ttMov.historicoJuros = "JUROS REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoJuros = getHistorico(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoJuros = getHistoricoJuros(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!ttMov.historicoDesconto.contains("DESCONTO")) ttMov.historicoDesconto = "DESCONTO REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoDesconto = getHistorico(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoDesconto = getHistoricoDesconto(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (ttMov.historicoMulta.equals("")) ttMov.historicoMulta = "MULTA REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoMulta = getHistorico(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoMulta = getHistoricoMulta(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            // quando for forcada partida dobrada , vamos jogar o historico  de juros automaticamente no historico  movimento
            if (ttMov.chave.contains("DOBRADA_JUR")) ttMov.historico = ttMov.historicoJuros;
            if (ttMov.chave.contains("DOBRADA_DES")) ttMov.historico = ttMov.historicoDesconto;
            if (ttMov.chave.contains("DOBRADA_MUL")) ttMov.historico = ttMov.historicoMulta;

            ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                    ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                    ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);

            if(!ttMov.codFilial.equals("") && (roteiroCRMPrincipal.optString("erpContabilidade").contains("SCI") || roteiroCRMPrincipal.optString("erpContabilidade").contains("PROSOFT"))){
                ttMov.lote = ttMov.codFilial+"_"+ttMov.lote;
            }

            String codParticipante   = getParticipante("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                    ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                    ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);

            ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

            if (!ttMov.codFilial.equals("")) {
                ttMov.historico 		= ttMov.historico 			 + " Filial:" + ttMov.codFilial;
                ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Filial:" + ttMov.codFilial;
                ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Filial:" + ttMov.codFilial;
                ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Filial:" + ttMov.codFilial;
            }

            if (!codParticipante.equals("")) {
                ttMov.historico 		= ttMov.historico			 + " Participante:" + codParticipante;
                ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Participante:" + codParticipante;
                ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Participante:" + codParticipante;
                ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Participante:" + codParticipante;
            }

            ttMov.historico 		= ttMov.historico.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoJuros 	= ttMov.historicoJuros.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoDesconto = ttMov.historicoDesconto.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoMulta 	= ttMov.historicoMulta.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();

            if(roteiroCRMPrincipal.optString("erpContabilidade").equals("JBSOFTWARE")){
                ttMov.historico += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoJuros += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoDesconto += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoMulta += "GPLCTO:" + ttMov.contLinha;
            }

            // ------------------------------------------------
            //           GERA ARQUIVO PARA O FISCAL
            // ------------------------------------------------
            ttMov.documento = ttMov.documento.trim();
            if (ttMov.documento.startsWith("0")) {
                for (int xx=0;xx<10;xx++) {
                    if (ttMov.documento.length() > 1 && ttMov.documento.startsWith("0")) ttMov.documento = ttMov.documento.substring(1);
                }
            }

            JSONObject jDescricaoDupl = new JSONObject();
            if (eFornecedor)   jDescricaoDupl.put("TIPO","FORNECEDOR");

            // Teste 64 kb
            if (fazConciliacao && ttMov.complemento06.contains("PRODUCAO")) {
                if (criaCabecalhoConciliacao) {
                    txtConciliacao.append("NF;PARC;DIVERGENTE;VALOR A PAGAR;VALOR RAZAO").append("\r\n");
                    criaCabecalhoConciliacao = false;
                }

                String chaveConciliacao = ttMov.documento + "-" + cutString(ttMov.complemento01, 0, "/").replaceAll("0","") + "-" + cutString(ttMov.nomeOrigem, 0, 5);
                //000014184-4-INDUS
                // logger.logInfo("CHAVINHA " + chaveConciliacao);
                ObjConciliacao ttConciliacao = (ObjConciliacao) mapaConciliacao.get(chaveConciliacao);

                if (ttConciliacao != null) {
                    txtConciliacao.append(ttMov.documento).append(";").append(cutString(ttMov.complemento01, 0, "/").replaceAll("0","")).append(";")
                            .append(ttConciliacao.valorConciliacao == ttMov.valorDocumento ? "CONCILIADO" : "NAO CONCILIADO").append(";")
                            .append(ttMov.valorDocumento).append(";").append(ttConciliacao.valorConciliacao).append("\r\n");

                } else {
                    txtConciliacao.append(ttMov.documento).append(";").append(cutString(ttMov.complemento01, 0, "/").replaceAll("0","")).append(";")
                            .append("NAO CONCILIADO").append(";")
                            .append(ttMov.valorDocumento).append(";").append(0).append("\r\n");
                }
                loteConciliacao = nomeEmpresa + "_" + codEmpresa + "_" + "_CONCILIACAO_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + ttMov.tipoLancamento;
            }

            if(integraFiscal.contains("TRUE") && ttMov.tipoPlanilha.contains("MOVIMENTO") && !razaoSocial.equals("") && !ttMov.documento.equals("") && !regraCRM && !contaMovimento.equals("")){
                //Atendimento: 2308-013102 -> Problema ao gerar os relatorios de PELO_FISCAL e Duplicatas nao encontradas
                // eFornecedor = true;
                temFiscal = true;
                apagaStatus = true;

                //JWR 02022021 - estava adicionando a parcela no documento para a busca de duplicata em roteiros secundarios.
                //Adicionada a validacao "roteiroCRM.has("usarComplementoParcela")"
                if (roteiroCRM.has("usarComplementoParcela") && !roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("NAO USAR")) {
                    ttMov.documento = ttMov.documento + "-" + ttMov.parcelaDoc;
                }

                String dataVencimentoTTMov = "";

                if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
                    if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) dataVencimentoTTMov = ttMov.complemento01;
                    if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) dataVencimentoTTMov = ttMov.complemento02;
                    if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) dataVencimentoTTMov = ttMov.complemento03;
                    if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) dataVencimentoTTMov = ttMov.complemento04;
                    if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) dataVencimentoTTMov = ttMov.complemento05;
                    if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) dataVencimentoTTMov = ttMov.complemento06;
                }


                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("QUESTOR")) {

                    JSONObject jDadosAux = new JSONObject();
                    jDadosAux.put("CODEMPRESA", codEmpresa).put("DATAVENCTTMOV", dataVencimentoTTMov).put("RAZAOSOCIAL",razaoSocial)
                            .put("TABELACONTABIL", tabelaContabil);

                    TemplateUtils templateUtil = new TemplateUtils();
                    jDescricaoDupl = templateUtil.geraFiscalQuestor(roteiroCRMPrincipal, jDadosAux, jDescricaoDupl, dbIOCont, ttMov, logger);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

                    double valorSaldoDuplicata2 = 0;
                    if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

                    valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
                    ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {

                        if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){

                            jDescricaoDupl.put("USAFILIAL", roteiroCRMPrincipal.optString("Usa_Filial_Questor").toUpperCase());

                            txtFiscal[0].append(TemplateUtils.geraLinhaFiscalQuestor(jDescricaoDupl).toString());

                            geraFiscal = true;

                            loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

                            if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                            continue;
                        } else { //Add dia 02/03/2021 - > Enviar dupli n encontradas p/ contabil questor
                            dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
                            contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");

                            if(dupliNaoEncontContabil){
                                contaMovimento = contaTemp;
                                if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
                                if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

                                histobj.put("contaMovimento", contaMovimento);
                                ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                            }else {
                                if(cabecalhoNaoEncontrada){
                                    txtFornecedor.append("Codigo;Fornecedor/Cliente;Duplicata;Data;Valor bruto;Valor liquido;Banco;Obs:").append("\r\n");
                                    cabecalhoNaoEncontrada = false;
                                }
                                String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
                                jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                                txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA")).append(";").append(razaoSocialDuplicata).append(";")
                                        .append(ttMov.documento).append(";").append(ttMov.dataMovimento).append(";").append(String.format("%.2f", ttMov.valorDocumento))
                                        .append(";").append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",",")).append(";").append(ttMov.nomePortador).append(";")
                                        .append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2))
                                        .append("\r\n");

                                jDescricaoDupl.put("TIPO","FORNECEDOR");

                                geraFiscal = true;
                                loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

                                if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

                                if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

                                ttMov.tipoPlanilha = "NAO LER";
                                mapaVariavel.put(key,ttMov);
                                continue;
                            }
                        }
                    }
                }

				/*if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("MAKROWEB")) {
					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("VALORMULTA",  ttMov.valorMulta);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
						ttMov.parcelaDoc     = jDescricaoDupl.optInt("PARCELADOC");
						ttMov.valorDesconto  = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
						ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
						ttMov.valorJuros 	 = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));

						String valorDescontoAux  = preparaDoublePrecisao(String.valueOf(ttMov.valorDesconto));
						String valorDocumentoAux = preparaDoublePrecisao(String.valueOf(ttMov.valorDocumento));
						String valorAcrecimoAux 	 = preparaDoublePrecisao(String.valueOf(ttMov.valorJuros+ttMov.valorMulta));

						//#2309-015394
						//double valorAux = ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta;
						//String valorCalcAux = "";
						// #Fabrica(2019-08-06) @Vini
						//valorCalcAux = preparaDoublePrecisao(String.valueOf(DecimalUtil.toDecimal(String.format("%.2f", valorAux))));

						// if (!String.format("%.2f", ttMov.valorDocumento).equals(jDescricaoDupl.optString("VALORPARCELA"))) { //<--- antigo
						if (ttMov.valorDocumento > jDescricaoDupl.optDouble("VALORPARCELA")) {
							jDescricaoDupl.put("TIPO", "FORNECEDOR");
						} else {

							txtFiscal[0].append(StringUtil.leftPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 14,  "0"));
							txtFiscal[0].append(StringUtil.leftPad(cutString(ttMov.documento, 0, "-"), 8, "0"));
							txtFiscal[0].append(StringUtil.leftPad(String.valueOf(ttMov.parcelaDoc), 2, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(ttMov.dataMovimento.replaceAll("/",""));
							txtFiscal[0].append(StringUtil.leftPad(valorDescontoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorAcrecimoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							//#2309-015394
							//txtFiscal[0].append(StringUtil.leftPad(valorCalcAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(contaPortador, 9,  "0"));
							txtFiscal[0].append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}*/

				/*if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) {
					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);

					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}

					 jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {

						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){

							txtFiscal[0].append(TemplateUtils.geraLinhaFiscalCordilheira(jDescricaoDupl, ttMov, geraCabecalhoCordilheira).toString());

							geraCabecalhoCordilheira = false;

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
							txtFornecedor.append("\r\n");

							jDescricaoDupl.put("TIPO","FORNECEDOR");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}*/

                // if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CUCA-FRESCA")) {

                // JSONObject jDados = new JSONObject();
                // jDados.put("CODEMPRESA",     codEmpresa);

                // //usando a filial do questor em duplicatas em aberto

                // jDados.put("RAZAOSOCIAL",    razaoSocial);
                // jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                // jDados.put("DOCUMENTO",      ttMov.documento);
                // jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                // jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
                // jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                // jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                // jDados.put("VALORJUROS",     ttMov.valorJuros);
                // jDados.put("VALORMULTA",     ttMov.valorMulta);
                // jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                // jDados.put("TABELACONTABIL", tabelaContabil);
                // jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                // Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                // dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

                // double valorSaldoDuplicata2 = 0;
                // if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

                // valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
                // ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                // if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {

                // if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
                // String separadorFiscal = "";
                // String dataVencimento  = "";
                // //String parcela		   = "1";
                // String duplicataParcela = jDescricaoDupl.optString("DUPLICATA")+"/"+String.valueOf(ttMov.parcelaDoc);

                // txtFiscal[0].append(cnpjEmpresa);
                // txtFiscal[0].append("    ");

                // if(tipoLancamento.contains("PAGAR"))	txtFiscal[0].append("E");
                // if(tipoLancamento.contains("RECEBER"))	txtFiscal[0].append("S");

                // txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("DATAVENCIMENTO"), 10, " ")); //lendo do duplicatasem aberto
                // txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("SITUACAO"), 5, " ")); //especie
                // txtFiscal[0].append(StringUtil.rightPad("", 3, " ")); //serie

                // txtFiscal[0].append(StringUtil.rightPad("", 2, " ")); //sub-serie
                // txtFiscal[0].append(StringUtil.leftPad(cutString(ttMov.documento, 0, "-"), 9, "0"));
                // txtFiscal[0].append(StringUtil.leftPad("", 9, "0"));

                // txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 18, " ")); // preciso criar a leitura do CNPJ do cliente, est? sendo usado o objeto "CODIGOFORNECEDOR" para guardar essa informa??o
                // txtFiscal[0].append(StringUtil.leftPad(duplicataParcela, 21, "0"));
                // txtFiscal[0].append(StringUtil.leftPad(dataVencimento, 10, " ")); //data do vencimento

                // txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0")); //? preciso criar a leitura do valor ? baixar, est? sendo usado o objeto "VALORPARCELA" para guardar no banco

                // if(contaPortador.length() > 1){
                // contaPortador = contaPortador.substring(0, contaPortador.length()-1) + "-" + contaPortador.substring(contaPortador.length()-1);
                // if(contaPortador.length() > 5) contaPortador = contaPortador.substring(0, contaPortador.length()-5) + "." + contaPortador.substring(contaPortador.length()-5);
                // }

                // txtFiscal[0].append(StringUtil.leftPad(contaPortador, 9, "0")); //a conta do banco
                // txtFiscal[0].append(StringUtil.rightPad(ttMov.centroCusto, 4, " "));

                // //txtFiscal[0].append(StringUtil.rightPad(ttMov.historico, 3, ""));
                // if(tipoLancamento.contains("PAGAR"))	txtFiscal[0].append(StringUtil.rightPad("10", 3, " ")); //10 pagamento fornecedor
                // if(tipoLancamento.contains("RECEBER"))	txtFiscal[0].append(StringUtil.rightPad("11", 3, " ")); // 11 recebimento duplicata

                // txtFiscal[0].append(StringUtil.leftPad("", 15, " "));	//numero do cheque na planilha
                // txtFiscal[0].append(StringUtil.rightPad(ttMov.dataMovimento, 10, " "));

                // txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0"));
                // txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorJuros), 13, "0"));
                // txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDesconto), 13, "0"));

                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // correcao monetaria
                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // despesas/receitas
                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // Base de Calculo Retencao

                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // IRRF Retido
                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // PIS Retido
                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido

                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // CSLL Retido
                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido
                // txtFiscal[0].append("    "); //n?o encontrado o c?digo da receita

                // txtFiscal[0].append("\r\n");

                // geraFiscal = true;
                // loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                // if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

                // ttMov.tipoPlanilha = "NAO LER";
                // mapaVariavel.put(key,ttMov);
                // continue;
                // } else {
                // if(cabecalhoNaoEncontrada){
                // txtFornecedor.append("Codigo");
                // txtFornecedor.append(";");
                // txtFornecedor.append("Fornecedor/Cliente");
                // txtFornecedor.append(";");
                // txtFornecedor.append("Duplicata");
                // txtFornecedor.append(";");
                // txtFornecedor.append("Data");
                // txtFornecedor.append(";");
                // txtFornecedor.append("Valor bruto");
                // txtFornecedor.append(";");
                // txtFornecedor.append("Valor liquido");
                // txtFornecedor.append(";");
                // txtFornecedor.append("Banco");
                // txtFornecedor.append(";");
                // txtFornecedor.append("Obs:");
                // txtFornecedor.append("\r\n");
                // cabecalhoNaoEncontrada = false;
                // }
                // String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
                // jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                // txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                // txtFornecedor.append(";");
                // txtFornecedor.append(razaoSocialDuplicata);
                // txtFornecedor.append(";");
                // txtFornecedor.append(ttMov.documento);
                // txtFornecedor.append(";");
                // txtFornecedor.append(ttMov.dataMovimento);
                // txtFornecedor.append(";");
                // txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                // txtFornecedor.append(";");
                // txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
                // txtFornecedor.append(";");
                // txtFornecedor.append(ttMov.nomePortador);
                // txtFornecedor.append(";");
                // txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
                // txtFornecedor.append("\r\n");

                // jDescricaoDupl.put("TIPO","FORNECEDOR");

                // geraFiscal = true;
                // loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

                // if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

                // if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

                // ttMov.tipoPlanilha = "NAO LER";
                // mapaVariavel.put(key,ttMov);
                // continue;
                // }
                // }
                // }

                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
                    JSONObject jDados = new JSONObject();

                    if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("LER DA DUPLICATA MAIS ANTIGA"))  {


                        if (dataVencimentoTTMov.equals("")) {

                            JSONObject recordsDupVenc = new JSONObject();
                            try {
                                String sql = "SELECT VENCIMENTO FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.DUPLICATA = ? ORDER BY VENCIMENTO LIMIT 1";
                                recordsDupVenc = dbIOCont.sql(sql)
                                        .setFields("VENCIMENTO")
                                        .param(codEmpresa)
                                        .param(ttMov.documento)
                                        .debug(logger)
                                        .queryUnique();

                            } catch (Exception e1) {
                                // logger.logInfo("ERROR: " + e1.getMessage());
                            }

                            if(recordsDupVenc != null && recordsDupVenc.has("VENCIMENTO")){
                                dataVencimentoTTMov = cutString(recordsDupVenc.optString("VENCIMENTO"), 8, 10) + "/" +cutString(recordsDupVenc.optString("VENCIMENTO"), "-", "-") + "/" + cutString(recordsDupVenc.optString("VENCIMENTO"), 0, "-") ;
                            }
                        }


                        jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
                    }else if(!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO")){
                        jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
                    }else if(roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO")){
                        jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
                    }



                    jDados.put("CODEMPRESA",     codEmpresa);
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     99);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORMULTA",     ttMov.valorMulta);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);

                    // Descomentar a proxima linha para testar data de vencimento  a jDescricaoDupl.optString("DATAVENCIMENTO") que vem das duplicatas em aberto! OBS: Complemento06, deve estar lendo a data de vencimento da planilha financeira
                    if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
                        if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorDataVencimento(jDescricaoDupl, dataVencimentoTTMov);
                    }

                    String chaveParcela = ttMov.documento + "-PARCELA";
                    ttParcelaDominio ttP    = (ttParcelaDominio)mapaParcelaDominio.get(chaveParcela);
                    if (ttP == null) {
                        ttP  			= new ttParcelaDominio();
                        ttP.documento   = ttMov.documento;
                        ttP.ultimaParcela = 0;
                    }
                    ttP.ultimaParcela++;

                    mapaParcelaDominio.put(chaveParcela,ttP);

                    jDados.put("PARCELADOC", ttP.ultimaParcela);
                    jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

                    String chaveDuplicata = "";
                    if (jDescricaoDupl.has("CODIGOFORNECEDOR")) chaveDuplicata = ttMov.codEmpresa + "-ESPECIAL-" + jDescricaoDupl.optString("CODIGOFORNECEDOR") + "-" + ttMov.documento + "-SEG-";

                    String serie = "";
                    String subSerie = "";
                    String especie = "";
                    double valorSegmento = 0;

                    JSONArray recordsDup = new JSONArray();

					/*
					DESCOMENTAR ESSA LINHA QUANDO TIVER DATA DE VENCIMENTO
					VAI SEPARAR QUANDO ENCONTRAR A DATA DE VENCIMENTO NO BANCO
					COLOCAR O COMPLEMENTO QUE TIVER A DATA DE VENCIMENTO : ttMov.complemento06
					*/
                    // if (ttMov.tipoPlanilha.equals("MOVIMENTO")) {
                    if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {

                        boolean isData = false;
                        Date dtV = new Date();
                        try{
                            dtV = DateUtil.stringToDate(jDescricaoDupl.optString("DATAVENCIMENTO"), "dd/MM/yyyy");
                            isData = true;
                            if(!getCampoDate(DateUtil.dateToString(dtV, "dd/MM/yyyy")).equals(getCampoDate(dataVencimentoTTMov))) isData = false;
                        } catch(Exception ii){
                            isData = false;
                        }
                        if(!chaveDuplicata.equals("")){
                            if(isData){
                                try {
                                    String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.CHAVE LIKE ? AND VENCIMENTO = ? ";
                                    recordsDup = dbIOCont.sql(sql)
                                            .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
                                            .param(codEmpresa)
                                            .param(chaveDuplicata + "%")
                                            .param(dtV)
                                            .debug(logger)
                                            .query();
                                } catch (Exception e1) {
                                    // logger.logInfo("ERROR: " + e1.getMessage());
                                }
                            }
                            // if(!isData){
                            // try {
                            // String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? ";
                            // recordsDup = dbIOCont.sql(sql)
                            // .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
                            // .param(chaveDuplicata + "%")
                            // .debug(logger)
                            // .query();
                            // } catch (Exception e1) {
                            // logger.logInfo("ERROR: " + e1.getMessage());
                            // }
                            // }
                        }
                    }

                    else  {
                        if(!chaveDuplicata.equals("")){
                            try {
                                // INSERIDO O WHERE CODEMPRESA = ? PARA CORRE??O DO CHAMADO 202301-0023064.
                                String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.CHAVE LIKE ? ";
                                recordsDup = dbIOCont.sql(sql)
                                        .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
                                        .param(codEmpresa)
                                        .param(chaveDuplicata + "%")
                                        .debug(logger)
                                        .query();

                            } catch (Exception e1) {
                                logger.logInfo("ERROR: " + e1.getMessage());
                            }
                        }
                    }
					/* EXEMPLO DE COMO TEM QUE SAIR

					|0000|07701892000105|
					|5100|39||0|21338|15/08/2017|14/08/2017|0|||180,00|||||||||||||
					|5110|15/08/2017|3612|434|180,00|5|21338 ATLANTA ALARMES -  MONITOL MONIT. TOLEDO LTDA.||418|
					*/

                    JSONObject recordsDupSeg = new JSONObject();
                    if (recordsDup.length() > 0) recordsDupSeg = recordsDup.optJSONObject(0);

                    if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
                        serie   = recordsDupSeg.optString("SERIE");
                        especie = recordsDupSeg.optString("CHAVEDUPLICATA");
                    }

                    double valorSaldoDuplicata = 0;
                    double valorSomaSegmentos  = 0;

                    // soma os segmentos pois eles nao sao baixados. Ou seja, se pago um valor parcial no dominio soma dos segmentos
                    // continua sendo o valor origial (total) da nota fiscal
                    // utilizado para achar a proporcao do valor para cada segmento
                    for (int seg =0; seg<recordsDup.length(); seg ++) {
                        recordsDupSeg =  recordsDup.optJSONObject(seg);
                        if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
                            valorSomaSegmentos = valorSomaSegmentos + DecimalUtil.toDecimal(String.format("%.2f", recordsDupSeg.optDouble("VALORPARCELA")));
                        }
                    }

                    boolean leuDuplicata = false;

                    // valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
                    if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

                    if (jDescricaoDupl.optString("TIPO").equals("FISCAL") && !roteiroCRMPrincipal.optString("validaFornecedorFiscal").equals("")) {
                        jDescricaoDupl.put("VALIDAFORNECEDORFISCAL", roteiroCRMPrincipal.optInt("validaFornecedorFiscal"));
                        jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem);
                    }

                    if (valorSomaSegmentos > 0) valorSaldoDuplicata = valorSomaSegmentos;

                    valorSaldoDuplicata  = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata));
                    ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    double diferencaParcela = DecimalUtil.toDecimal(String.format("%.2f", DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento )) - valorSomaSegmentos));

                    if (!especie.equals("") || !serie.equals("")) {
                        if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) {
                            double valorTotalBaixado = 0;
                            for (int seg =0; seg<recordsDup.length(); seg ++) {

                                recordsDupSeg =  recordsDup.optJSONObject(seg);
                                String segmento = "";

                                if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
                                    serie   	  = recordsDupSeg.optString("SERIE");
                                    subSerie   	  = recordsDupSeg.optString("SITUACAO");      // GUARDA SUB SERIE
                                    especie 	  = recordsDupSeg.optString("CHAVEDUPLICATA");
                                    valorSegmento = recordsDupSeg.optDouble("VALORPARCELA");
                                    segmento      = recordsDupSeg.optString("CHAVE");
                                    if (segmento.contains("-SEG-")) {
                                        segmento = cutString(segmento, "-SEG-");
                                        segmento = cutString(segmento, 0, "-");
                                    }
                                }

                                if(segmento.equals("0")){
                                    if(seg>0) continue;
                                    valorSomaSegmentos = DecimalUtil.toDecimal(String.format("%.2f",valorSegmento));
                                    diferencaParcela = 0;
                                }

                                // (zerado para validacao)
                                diferencaParcela = 0;

                                //if (subSerie.equals("")) subSerie = "0";

                                String codContabil = "";
                                if(ttMov.tipoLancamento.contains("PAGAR")) {
                                    ttMov.contaDebito  = contaMovimento;
                                    ttMov.contaCredito = contaPortador;
                                    codContabil = "5100";
                                }
                                if(ttMov.tipoLancamento.contains("RECEBER")) {
                                    ttMov.contaDebito   = contaPortador;
                                    ttMov.contaCredito  = contaMovimento;
                                    codContabil = "5200";
                                    if(especie.equals("39")) codContabil = "5300";

                                    histobj.put("especie", especie);
                                    String codigoFiscalNovo = getCampoFiscal("", histobj);
                                    if (!codigoFiscalNovo.equals("")) codContabil = codigoFiscalNovo;
                                }

                                String delimitador = "|";
                                String tipoSerie = delimitador + codContabil + delimitador + especie + delimitador + serie + delimitador + subSerie + delimitador;

                                // if(ttMov.codEmpresa.contains("351")) logger.logInfo("Fiscal pelo Template");

                                if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                                    txtFiscal[0].append(tipoSerie);
                                    //txtFiscal[0].append(jDescricaoDupl.optString("DUPLICATA"));
                                    if(ttMov.tipoLancamento.contains("PAGAR")) { //2311-020947
                                        txtFiscal[0].append(cutString(jDescricaoDupl.optString("DUPLICATA"), 0, "-"));
                                    }
                                    if(ttMov.tipoLancamento.contains("RECEBER")) {
                                        txtFiscal[0].append(jDescricaoDupl.optString("DUPLICATA"));
                                    }
                                    txtFiscal[0].append(delimitador).append(jDescricaoDupl.optString("DATAVENCIMENTO")).append(delimitador)
                                            .append(ttMov.dataMovimento).append(delimitador);



                                    ttDocumento ttDoc    = (ttDocumento)mapaDocumento.get(ttMov.documento+"-"+seg);
                                    if (ttDoc == null) {
                                        ttDoc  = new ttDocumento();
                                        ttDoc.documento  = ttMov.documento;
                                        ttDoc.valorDocumento  = 0;
                                    }

                                    double valorBaixar = 0;

                                    ttDoc.valorDocumento   = ttDoc.valorDocumento + DecimalUtil.toDecimal(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))));
                                    valorBaixar = DecimalUtil.toDecimal(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))));


                                    if ((valorSegmento - ttDoc.valorDocumento) <= 0.02 && (valorSegmento - ttDoc.valorDocumento) > 0) valorBaixar = valorBaixar  + (valorSegmento - ttDoc.valorDocumento);
                                    if ((ttDoc.valorDocumento - valorSegmento) <= 0.02 && (ttDoc.valorDocumento - valorSegmento) > 0) valorBaixar = valorBaixar  - (ttDoc.valorDocumento - valorSegmento);

                                    valorTotalBaixado += valorBaixar;



                                    // calcula se o valor a ser baixado somando os segmentos eh maior que o valor pago pelo cliente
                                    // quando isto ocorrer, deve-se ajustar no ultimo segmento o valor
                                    if ((valorTotalBaixado - ttMov.valorDocumento) <= 0.02 && (valorTotalBaixado - ttMov.valorDocumento) > 0) {
                                        valorBaixar = valorBaixar  - (valorTotalBaixado - ttMov.valorDocumento);
                                        ttDoc.valorDocumento = ttDoc.valorDocumento  - (valorTotalBaixado - ttMov.valorDocumento);
                                    }

                                    if ((ttMov.valorDocumento - valorTotalBaixado) <= 0.02 && (ttMov.valorDocumento - valorTotalBaixado) > 0) {
                                        valorBaixar = valorBaixar  - (ttMov.valorDocumento - valorTotalBaixado);
                                        ttDoc.valorDocumento = ttDoc.valorDocumento  - (ttMov.valorDocumento - valorTotalBaixado);
                                    }


                                    mapaDocumento.put(ttMov.documento+"-"+seg,ttDoc);

                                    txtFiscal[0].append(String.format("%.2f", (valorBaixar)).replaceAll("\\.",","));

                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALJUROS").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALMULTA").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALDESCONTO").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    // txtFiscal[0].append("||||||||||");
                                    // if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal[0].append("||");
                                    txtFiscal[0].append("||||||||");
                                    if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal[0].append("||||");

                                    if(ttMov.tipoLancamento.contains("PAGAR")) {
                                        txtFiscal[0].append(delimitador).append(jDescricaoDupl.optString("CPFCNPJ")).append(delimitador);
                                    }
                                    txtFiscal[0].append(segmento).append(delimitador);
                                    //txtFiscal[0].append(jDescricaoDupl.optString("OBSERVACAO"));	// FEITO PARA SPEROTO VANZELLA
                                    //txtFiscal[0].append(delimitador);
                                    txtFiscal[0].append("\r\n");


                                    if (ttMov.valorDocumento > ttMov.valorDesconto) {
                                        codContabil = codContabil.replaceAll("00","10");

                                        txtFiscal[0].append(delimitador).append(codContabil).append(delimitador).append(ttMov.dataMovimento).append(delimitador)
                                                .append(cutString(ttMov.contaDebito.toUpperCase(), 0, "R")).append(delimitador).append(cutString(ttMov.contaCredito.toUpperCase(), 0, "R")).append(delimitador);

                                        txtFiscal[0].append(String.format("%.2f", (valorBaixar)).replaceAll("\\.",","));

                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append("");
                                        if(ttMov.historico.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historico, "CodigoHistorico:", " "));
                                        txtFiscal[0].append(delimitador).append(cutString(cutString(ttMov.historico, 0, "Filial:"), 0 ,"Codigo"))
                                                .append(delimitador).append("").append(delimitador + codEmpresa + delimitador).append("\r\n");
                                    }

                                    if (ttMov.valorDesconto > 0 && seg == 0) {

                                        txtFiscal[0].append(delimitador).append(codContabil).append(delimitador).append(ttMov.dataMovimento)
                                                .append(delimitador);
                                        if(ttMov.tipoLancamento.contains("PAGAR")) {
                                            txtFiscal[0].append(ttMov.contaDebito).append(delimitador).append(contaDesconto);
                                        }
                                        if(ttMov.tipoLancamento.contains("RECEBER")) {
                                            txtFiscal[0].append(contaDesconto).append(delimitador).append(ttMov.contaCredito);
                                        }
                                        txtFiscal[0].append(delimitador).append(String.format("%.2f", ttMov.valorDesconto).replaceAll("\\.",","))
                                                .append(delimitador).append("");
                                        if(ttMov.historicoDesconto.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoDesconto, "CodigoHistorico:", " "));

                                        txtFiscal[0].append(delimitador).append(cutString(cutString(ttMov.historicoDesconto, 0, "Filial:"), 0 ,"Codigo"))
                                                .append(delimitador).append("").append(delimitador + codEmpresa + delimitador).append("\r\n");
                                    }

                                    if (ttMov.valorJuros > 0  && seg == 0) {
                                        txtFiscal[0].append(delimitador).append(codContabil).append(delimitador).append(ttMov.dataMovimento).append(delimitador);
                                        if(ttMov.tipoLancamento.contains("PAGAR")) {
                                            txtFiscal[0].append(contaJuros).append(delimitador).append(ttMov.contaDebito);
                                        }
                                        if(ttMov.tipoLancamento.contains("RECEBER")) {
                                            txtFiscal[0].append(ttMov.contaCredito).append(delimitador).append(contaJuros);
                                        }
                                        txtFiscal[0].append(delimitador).append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","))
                                                .append(delimitador).append("");

                                        if(ttMov.historicoJuros.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoJuros, "CodigoHistorico:", " "));

                                        txtFiscal[0].append(delimitador).append(cutString(cutString(ttMov.historicoJuros, 0, "Filial:"), 0 ,"Codigo"))
                                                .append(delimitador).append("").append(delimitador + codEmpresa + delimitador).append("\r\n");
                                    }

                                    if (ttMov.valorMulta > 0 && seg == 0) {
                                        txtFiscal[0].append(delimitador).append(codContabil).append(delimitador).append(ttMov.dataMovimento)
                                                .append(delimitador);
                                        if(ttMov.tipoLancamento.contains("PAGAR")) {
                                            txtFiscal[0].append(contaMulta).append(delimitador).append(ttMov.contaDebito);
                                        }
                                        if(ttMov.tipoLancamento.contains("RECEBER")) {
                                            txtFiscal[0].append(ttMov.contaCredito).append(delimitador).append(contaMulta);
                                        }

                                        txtFiscal[0].append(delimitador).append(String.format("%.2f", ttMov.valorMulta).replaceAll("\\.",","))
                                                .append(delimitador).append("");

                                        if(ttMov.historicoMulta.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoMulta, "CodigoHistorico:", " "));

                                        txtFiscal[0].append(delimitador).append(cutString(cutString(ttMov.historicoMulta, 0, "Filial:"), 0 ,"Codigo"))
                                                .append(delimitador).append("").append(delimitador + codEmpresa + delimitador).append("\r\n");
                                    }

                                    diferencaParcela = 0;

                                    geraFiscal = true;
                                    loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

                                    if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

                                    eFornecedor = false;
                                    leuDuplicata = true;

                                }
                            }
                            if (leuDuplicata) continue;
                        } else {
                            if(cabecalhoNaoEncontrada){
                                txtFornecedor.append("Codigo;Fornecedor/Cliente;Duplicata;Data;Valor bruto;Valor liquido;Banco;Obs:")
                                        .append("\r\n");
                                cabecalhoNaoEncontrada = false;
                            }
                            String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
                            jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA")).append(";").append(razaoSocialDuplicata).append(";").append(ttMov.documento).append(";")
                                    .append(ttMov.dataMovimento).append(";").append(String.format("%.2f", ttMov.valorDocumento)).append(";")
                                    .append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",",")).append(";").append(ttMov.nomePortador).append(";")
                                    .append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata))
                                    .append("\r\n");

                            geraFiscal = true;
                            loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

                            if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                        }
                    }
                    else {
                        if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                            jDescricaoDupl.put("TIPO","FORNECEDOR"); // se nao acha serie vai para duplicatas nao encontradas
                            eFornecedor = true;
                        }
                    }
                }


                if (eFornecedor) {

                    dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
                    contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");


                    if(dupliNaoEncontContabil){
                        contaMovimento = contaTemp;
                        if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
                        if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

                        histobj.put("contaMovimento", contaMovimento);
                        ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


                    }else{
                        if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FORNECEDOR")) {
                            if(cabecalhoNaoEncontrada){
                                txtFornecedor.append("Codigo;Fornecedor/Cliente;Duplicata;Data;Valor bruto;Valor liquido;Banco;Obs:")
                                        .append("\r\n");
                                cabecalhoNaoEncontrada = false;
                            }
                            String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                            String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);


                            jDescricaoDupl.put("NOMEORIGEM", ttMov.nomeOrigem).put("DOCUMENTO", ttMov.documento)
                                    .put("DATAMOVIMENTO", ttMov.dataMovimento).put("VALORFINAL", valorFinal)
                                    .put("VALORLIQUIDO",  valorLiquido);

                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA")).append(";")
                                    .append(jDescricaoDupl.optString("NOMEORIGEM")).append(";")
                                    .append(jDescricaoDupl.optString("DOCUMENTO")).append(";")
                                    .append(jDescricaoDupl.optString("DATAMOVIMENTO")).append(";")
                                    .append(jDescricaoDupl.optString("VALORFINAL").replaceAll("\\.",",")).append(";")
                                    .append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",",")).append(";")
                                    .append(ttMov.nomePortador).append(";");

                            if (jDescricaoDupl.has("FORNECEDORESNAOBATEM")) {
                                txtFornecedor.append("Nome do Fornecedor/Cliente nao confere com a duplicata aberta no fiscal ");
                            }
                            else {
                                txtFornecedor.append("Duplicata nao encontrada no Fiscal ");

                            }
                            txtFornecedor.append("\r\n");


                            geraFiscal = true;
                            loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

                            if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                            continue;

                        }
                    }
                }
            }

			/*
			if (integraContrato.toUpperCase().equals("TRUE")) {
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
					String dataVencimentoTTMov = "";


					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) dataVencimentoTTMov = ttMov.complemento01;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) dataVencimentoTTMov = ttMov.complemento02;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) dataVencimentoTTMov = ttMov.complemento03;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) dataVencimentoTTMov = ttMov.complemento04;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) dataVencimentoTTMov = ttMov.complemento05;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) dataVencimentoTTMov = ttMov.complemento06;
					}


					JSONObject jDados = new JSONObject();

					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					else {
						jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					}

					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
					jDados.put("PARCELADOC",     99);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);

 					try {
						Date dtvenc = DateUtil.stringToDate(dataVencimentoTTMov, "dd/MM/yyyy");

						jDescricaoDupl = dbIOCont.sql("SELECT CPFCNPJ,CODEMPRESA,RAZAOSOCIAL,CODIGOFORNECEDOR,CHAVE,CHAVEDUPLICATA,DUPLICATA,PARCELA,SERIE,VENCIMENTO,VALORPARCELA,SITUACAO,VALORJUROS,VALORDESCONTO,VALORMULTA,VALORPAGO,VALORTARIFA,OBSERVACAO FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND DUPLICATA = ? AND VALORPARCELA >= ? and VENCIMENTO = ? order by VENCIMENTO   limit 1 ")
						.fields("CPFCNPJ,CODEMPRESA,RAZAOSOCIAL,CODIGOFORNECEDOR,CHAVE,CHAVEDUPLICATA,DUPLICATA,PARCELA,SERIE,VENCIMENTO,VALORPARCELA,SITUACAO,VALORJUROS,VALORDESCONTO,VALORMULTA,VALORPAGO,VALORTARIFA,OBSERVACAO")
						.param(codEmpresa)
						.param(ttMov.documento)
						.param(ttMov.valorDocumento)
						.param(dtvenc)
						.queryUnique();
					} catch (Exception e2) {
						logger.logInfo("ERROR: " + e2.getMessage());
						continue;
					}


					if (jDescricaoDupl != null && jDescricaoDupl.has("VALORPARCELA")) {

 						Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
						dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

						boolean leuDuplicata = false;
						double valorSaldoDuplicata = 0;

						// valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
						if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

 						if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) {

							String codContabil = "5700";
							// |5700|1875|57593981053| | |1|25/02/2021|01/03/2021|5527,28|1649,16||||||

							String delimitador = "|";
							String tipoSerie = delimitador + codContabil + delimitador + ttMov.documento + delimitador + ttMov.complemento01 + delimitador + delimitador + delimitador + ttMov.complemento02  + delimitador;


						 try {
								String dataVencimento = jDescricaoDupl.optString("VENCIMENTO");
								Date dt        = DateUtil.stringToDate(dataVencimento, "yyyy-MM-dd HH:mm:ss");
								dataVencimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
								dataVencimentoTTMov = dataVencimento;
							} catch (Exception e4) {
 							}


							if(jDescricaoDupl.has("VALORPARCELA")) {
								txtFiscal[0].append(tipoSerie);
								txtFiscal[0].append(dataVencimentoTTMov);
								txtFiscal[0].append(delimitador);
								txtFiscal[0].append(ttMov.dataMovimento);
								txtFiscal[0].append(delimitador);
								txtFiscal[0].append(String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta)).replaceAll("\\.",","));
 								txtFiscal[0].append(delimitador);
							    txtFiscal[0].append(String.format("%.2f", (ttMov.valorJuros)).replaceAll("\\.",","));
								txtFiscal[0].append("||||||");
								txtFiscal[0].append("\r\n");

								geraFiscal = true;
								loteFiscal[0]= nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
								eFornecedor = false;
								leuDuplicata = true;

							}

 						} else { //Add dia 02/03/2021 - > Enviar dupli n encontradas p/ contabil Dominio

							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Contrato " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata));
							txtFornecedor.append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
 							mapaVariavel.put(key,ttMov);

						}
					}
					else {
						if(cabecalhoNaoEncontrada){
							txtFornecedor.append("Codigo");
							txtFornecedor.append(";");
							txtFornecedor.append("Fornecedor/Cliente");
							txtFornecedor.append(";");
							txtFornecedor.append("Duplicata");
							txtFornecedor.append(";");
							txtFornecedor.append("Data");
							txtFornecedor.append(";");
							txtFornecedor.append("Valor bruto");
							txtFornecedor.append(";");
							txtFornecedor.append("Valor liquido");
							txtFornecedor.append(";");
							txtFornecedor.append("Banco");
							txtFornecedor.append(";");
							txtFornecedor.append("Obs:");
							txtFornecedor.append("\r\n");
							cabecalhoNaoEncontrada = false;
						}
						String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
						jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
						txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
						txtFornecedor.append(";");
						txtFornecedor.append(razaoSocialDuplicata);
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.documento);
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.dataMovimento);
						txtFornecedor.append(";");
						txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
						txtFornecedor.append(";");
						txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.nomePortador);
						txtFornecedor.append(";");
						txtFornecedor.append("Contrato " + ttMov.documento + " nao encontrado no Dominio ");
						txtFornecedor.append("\r\n");

						geraFiscal = true;
						loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
						if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
 						mapaVariavel.put(key,ttMov);
					}
 				}

			}

			*/

            boolean ctFiscal = false;
            if(ttMov.tipoLancamento.contains("PAGAR")	&& ttMov.contaDebito.toUpperCase().contains("FISCAL")) ctFiscal = true;
            if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.contaCredito.toUpperCase().contains("FISCAL")) ctFiscal = true;

            dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
            contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");

            if(contaMovimento.toUpperCase().contains("FISCAL") || ctFiscal) {
                contaMovimento = contaTemp;
                if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
                if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

                histobj.put("contaMovimento", contaMovimento);
                ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            }

            if (!contaMovimento.equals("")){

                ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
                if (ttP == null) {

                    ttP  = new ttPlano();
                    ttP.descricaoPlano = "";
                    ttP.contaAnalitica = "";

                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO,CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                            .fields("DESCRICAOPLANO,CONTAANALITICA")
                            .param(codEmpresaPlanoContas)
                            .param(cutString(contaMovimento,0, 20))
                            .queryUnique();

                    if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
                        dbIOCont.insert("IO_PLANOCONTA")
                                .fields("CODEMPRESA,CONTACONTABIL")
                                .param(codEmpresaPlanoContas)
                                .param(cutString(contaMovimento,0, 20))
                                .execute();
                    } else {
                        ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
                        ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
                    }
                    ttP.contaContabil     = cutString(contaMovimento,0, 20);
                    mapaPlano.put(contaMovimento,ttP);


                }
            }
            //Tratamento para inverter conta em lencamento simples feito para JBSOFTWARE
            if (roteiroCRMPrincipal.optString("erpContabilidade").contains("JBSOFTWARE") ||
                    roteiroCRMPrincipal.optString("erpContabilidade").contains("TRON") ||
                    roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET") ||
                    roteiroCRMPrincipal.optString("erpContabilidade").contains("MICROSYSTEM")){
                if(ttMov.contaDebito.contains("INVERTE") && !ttMov.contaCredito.contains("INVERTE")) ttMov.contaCredito = ttMov.contaCredito+ "INVERTE";
                if(!ttMov.contaDebito.contains("INVERTE") && ttMov.contaCredito.contains("INVERTE")) ttMov.contaDebito = ttMov.contaDebito+ "INVERTE";
            }

            chave = ttMov.chave;
            //chave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            String testeChave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
            if(!testeChave.toUpperCase().contains("ACUMULAANTES") && !testeChave.toUpperCase().contains("ACUMULARANTES")) chave = testeChave;

            if(chave.length() > 180) chave = cutString(chave, 0, 179);

            chave = chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";
            ttMov.chave = ttMov.chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";

            apagaStatus = true;
            String keyAc = chave;

            // logger.logInfo("EMPR " + nomeEmpresa + " | " + tipoProduto + " | " + mantemArquivo + " | " + processaOud);

            if (((!tipoProduto.equals("OIC_PACOTE") && mantemArquivo.equals("SIM"))  || processaOud.equals("TRUE")) && !ttMov.lote.toUpperCase().contains("_OUD_")) {
                ttMov.lote = ttMov.lote.replace(codEmpresa +"_",codEmpresa +"_oud_");
            }
            else {
                if (ttMov.nomeArquivo.contains(".omc")) {
                    ttMov.lote = ttMov.lote.replace(codEmpresa +"_",codEmpresa +"_oud_");
                }
            }

            // logger.logInfo("LOTEE " + ttMov.lote);



            ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
            if (ttLot       == null) {
                ttLot       = new ttLote();
                ttLot.lote  = ttMov.lote;
                ttLot.tipoPlanilha  = ttMov.tipoPlanilha;
            }
            mapaLote.put(ttMov.lote,ttLot);


            ttMovimentoPadrao ttMov3       = (ttMovimentoPadrao)mapaOficial.get(keyAc);
            if (ttMov3  == null) {
                ttMov3                = new ttMovimentoPadrao(ttMov);
                ttMov3.valorDesconto   = 0;
                ttMov3.valorJuros      = 0;
                ttMov3.valorDocumento  = 0;
                ttMov3.valorMulta      = 0;
                ttMov3.documento       = "";
            }
            if (ttMov3.documento.equals("")) {
                ttMov3.documento         = ttMov.documento;
            } else { if (!ttMov3.documento.contains(ttMov.documento)) ttMov3.documento = ttMov3.documento + ", " + ttMov.documento; }


            ttMov3.valorDesconto     = ttMov3.valorDesconto   + ttMov.valorDesconto;
            ttMov3.valorDocumento    = ttMov3.valorDocumento  + ttMov.valorDocumento;
            ttMov3.valorMulta        = ttMov3.valorMulta      + ttMov.valorMulta;
            ttMov3.valorJuros        = ttMov3.valorJuros      + ttMov.valorJuros;
            ttMov3.chave = chave;


            // logger.logInfo("ERP =>> "+roteiroCRM.optString("erpContabilidade")+" - ttMov3.contador =>> "+ttMov3.contador);
            String testeChavePortador = getRegrasParaAcumularPortador("", "", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
            if (!testeChavePortador.equals("")) ttMov3.contador = 3;

            if (!ttMov.chave.equals(chave)) ttMov3.contador = 3;

            // for?a lancamento aberto no FB software
            if (roteiroCRMPrincipal.optString("erpContabilidade").contains("JBSOFTWARE") ||
                    roteiroCRMPrincipal.optString("erpContabilidade").contains("TRON") ||
                    roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET") ||
                    roteiroCRMPrincipal.optString("erpContabilidade").contains("DYAD") ||//removido o erp FORTES dessa valida??o - 202301-0023113
                    roteiroCRMPrincipal.optString("erpContabilidade").contains("MICROSYSTEM")) ttMov3.contador = 3;

            //logger.logInfo("ERP =>> "+roteiroCRM.optString("erpContabilidade")+" - ttMov3.contador =>> "+ttMov3.contador+" - AGORA E AGORA -> "+roteiroCRMPrincipal.optString("erpContabilidade"));

            mapaVariavel.put(key,ttMov);
            mapaOficial.put(keyAc,ttMov3);

            if(ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("CARTAO")){
                if(roteiroCRMPrincipal.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
            }else if(roteiroCRM.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;

            //#2305-005880
            //if (ttMov.tipoPlanilha.contains("OTTCARTAO")) ttMov3.contador = 0;
            if (ttMov.tipoPlanilha.contains("OTTCARTAO") && !roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET")) ttMov3.contador = 0;

            // if(ttMov.codEmpresa.contains("68345")) logger.logInfo("VALOR = "+ttMov.valorDocumento+" | DT == "+ttMov.dataMovimento+" | CONT = "+ttMov3.contador+" | CHAVE == "+chave);


            if  ((ttMov.valorJuros > 0 || ttMov.valorDesconto > 0 || ttMov.valorMulta > 0 || ttMov3.contador == 3) && !ttMov.tipoPlanilha.equals("NAO LER")) {
                chave = chave.replaceAll("CTB","CTBPORT");
                if (!testeChavePortador.equals("")) chave = testeChavePortador;

                key = chave;
                ttMovimentoPadrao ttMov2       = (ttMovimentoPadrao)mapaOficial.get(key);
                if (ttMov2  == null) {
                    ttMov2                = new ttMovimentoPadrao(ttMov);
                    ttMov2.contador        = 0;
                    ttMov2.valorDesconto   = 0;
                    ttMov2.valorJuros      = 0;
                    ttMov2.valorDocumento  = 0;
                    ttMov2.valorMulta      = 0;
                    ttMov2.classificacao     = ttMov.classificacao;

                }
                ttMov2.tipoMovimento     = "CTBPORT";
                ttMov2.valorDesconto     = ttMov2.valorDesconto   + ttMov.valorDesconto;
                ttMov2.valorMulta        = ttMov2.valorMulta      + ttMov.valorMulta;
                ttMov2.valorJuros        = ttMov2.valorJuros      + ttMov.valorJuros;
                ttMov2.chave             = chave;
                ttMov2.chaveExtrato      = "";
                ttMov2.documento         = ttMov3.documento;
                ttMov2.valorDocumento    = ttMov2.valorDocumento + ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta;
                ttMov2.contador          = ttMov2.contador + ttMov3.contador;
                if(tipoLancamento.contains("PAGAR") && !ttMov2.tipoPlanilha.contains("OTTCARTAO")) {
                    ttMov2.naturezaContabil  = "C";
                    ttMov2.contaDebito       = "";
                    ttMov2.contaCredito      = ttMov.contaCredito;
                }
                if(tipoLancamento.contains("RECEBER") && !ttMov2.tipoPlanilha.contains("OTTCARTAO")){
                    ttMov2.naturezaContabil  = "D";
                    ttMov2.contaDebito       = ttMov.contaDebito;
                    ttMov2.contaCredito      = "";
                }
                if (ttMov2.valorDocumento == 0) continue; //JWR
                ttMov2.historico = getHistoricoPortador(contaPortador, ttMov2.historico, ttMov2.tipoLancamento, ttMov2.documento, ttMov2.nomeOrigem, histobj);

                //Descomentar caso haja problema com a perna de portador do lancamento
                if (!ttMov2.codFilial.equals("") && !ttMov2.historico.contains("Filial:")) ttMov2.historico = ttMov2.historico + " Filial:" + ttMov2.codFilial;

                String tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV FORNECEDOR", histobj);
                if(!tratarDiv.equals("")){
                    String filial = "";
                    filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                    if(tratarDiv.contains("FORNECEDOR"))    ttMov3.historico = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                    if(tratarDiv.contains("PORTADOR"))      ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
                    ttMov3.historicoJuros	 = cutString(ttMov3.historicoJuros,0," Filial:") + " Filial:"+filial;
                    ttMov3.historicoMulta 	 = cutString(ttMov3.historicoMulta,0," Filial:") + " Filial:"+filial;
                    ttMov3.historicoDesconto = cutString(ttMov3.historicoDesconto,0," Filial:") + " Filial:"+filial;
                }

                tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV DESCONTO", histobj);
                if(!tratarDiv.equals("")){
                    String filial = "";
                    filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                    if(tratarDiv.contains("DESCONTO"))    ttMov3.historicoDesconto = cutString(ttMov3.historicoDesconto,0," Filial:") + " Filial:"+filial;
                }
                tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV JUROS", histobj);
                if(!tratarDiv.equals("")){
                    String filial = "";
                    filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                    if(tratarDiv.contains("JUROS"))    ttMov3.historicoJuros = cutString(ttMov3.historicoJuros,0," Filial:") + " Filial:"+filial;
                }
                tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV MULTA", histobj);
                if(!tratarDiv.equals("")){
                    String filial = "";
                    filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                    if(tratarDiv.contains("MULTA"))    ttMov3.historicoMulta = cutString(ttMov3.historicoMulta,0," Filial:") + " Filial:"+filial;
                }
                tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV PORTADOR", histobj);
                if(!tratarDiv.equals("")){
                    String filial = "";
                    filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                    if(tratarDiv.contains("PORTADOR"))    ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
                }

                mapaOficial.put(key,ttMov2);
                ttMov3.classificacao = ttMov2.classificacao;
                mapaOficial.put(keyAc,ttMov3);
            }
        }
        if(contRegra == -1){
            String codEmp = props.get(empresa + "_COD_EMPRESA");
            String nomeEmp = props.get(empresa + "_NOME_EMPRESA");

            String info = tipoPlanilha + ";" + roteiroCRM.optString("codigo");
            compDirName = nomeEmp + "_#" + codEmp;
            String tipoPlanilhaDirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/" + compDirName + "/DePara/Processado/";
            String tipoPlanilhaPath = tipoPlanilhaDirName + "TIPOPLANILHA" + ".txt";
            // inout/contabil/Depaula/vektor_#123/Depara/TIPOPLANILHA.txt
            FileWriter 	arquivoTp = new FileWriter(tipoPlanilhaPath);
            arquivoTp.writeNewFile(info);
            //sssssss
        }


        //-------------------------------------------------------------------------
        // GERA OS ARQUICOS PARA BAIXA DE DUPLICATAS -- FISCAL
        //-------------------------------------------------------------------------
        if (geraFiscal) {

            String auxExtencao = ".txt";
            if(roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) auxExtencao = ".csv";
            String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[0] + auxExtencao;
            FileWriter writer = new FileWriter(filename);
            writer.writeNewFile(txtFiscal[0].toString());

            if (nomeArquivo.toUpperCase().contains("_ID") && !loteFiscal[0].contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + tipoLancamento;

            loteFiscal[0] = loteFiscal[0].replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");

            filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[0] + ".csv";
            writer = new FileWriter(filename);
            writer.writeNewFile(txtFornecedor.toString());

            //JWR 2303-000613 Descomentar para quando utilizar arquivos fiscais separados por filial
			/*if (!loteFiscal[i].equals("") && geraNaoEncontradas) {
				loteFiscal[i] = loteFiscal[i].replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");
				filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[i] + ".csv";
				writer = new FileWriter(filename);
				writer.writeNewFile(txtFornecedor.toString());
				geraNaoEncontradas = false;
			}*/


        }

        // Teste 64 kb
        if (fazConciliacao) {
            String auxExtencao = ".csv";
            String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteConciliacao+auxExtencao;
            FileWriter writer = new FileWriter(filename);
            writer.writeNewFile(txtConciliacao.toString());
        }


        //-------------------------------------------------------------------------
        //--- DESABILITAR AQUI SOMENTE SE O BANCO DE DADOS CONTIVER TABELA IO_RAZAO
        //-------------------------------------------------------------------------



        mapaVariavel		= new HashMap();

        if (apagaStatus) {
            jStatus = new JSONObject();
            // logger.logInfo("PUTSTATUS 4745");
            putStatus(dirName, "", jStatus, logger);
        }

        // =======================================================================================
        // * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base
        // =======================================================================================


        Iterator itLote = mapaLote.keySet().iterator();
        while (itLote.hasNext()) {

            String key = (String)itLote.next();
            ttLote ttLot = (ttLote)mapaLote.get(key);
            lote = ttLot.lote;

            try {
                if (dbIOCont != null) {
                    dbIOCont.closeConnection();
                    dbIOCont = null;
                }
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                        .where("LOTE=?")
                        .param(lote)
                        .execute();

                if (mantemArquivo.equals("SIM")) {

                    dbIOCont.delete("IO_MOVIMENTO")
                            .where("LOTE LIKE ? AND LOTE LIKE ? ")
                            .param("%" + tipoLancamento + "%")
                            .param(nomeEmpresa + "_" + "%")

                            .execute();

                }

                if (mantemArquivo.equals("SIM")) {

                    dbIOCont.delete("IO_ARQUIVOS")
                            .where("LOTE LIKE ? AND LOTE LIKE ? ")
                            .param(cutString(lote, 0, "_") + "%")
                            .param("%" + tipoLancamento + "%")
                            .execute();

                }


            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }
        }
        // logger.logInfo("ETAPA 04 TEMPLATE ");


        contRegra = -1;
        Iterator it = mapaOficial.keySet().iterator();
        while (it.hasNext()) {

            String chaveExtrato     = "";

            String key = (String)it.next();
            ttMovimentoPadrao ttMov = new ttMovimentoPadrao();
            try {
                ttMov = (ttMovimentoPadrao)mapaOficial.get(key);
            }
            catch (Exception xx) { continue;}


            if (ttMov.tipoPlanilha.equals("NAO LER")) continue;


            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                if(tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.equals("EXTRATO-CREDITO")) continue;
                if(tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.equals("EXTRATO-DEBITO"))  continue;

            }
            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
                temIgnorar = true;
                continue;
            }
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
                temIgnorar = true;
                continue;
            }
            ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

            contRegra++;
            int restoLinha = 0;
            restoLinha = (contRegra % 100);
            if (restoLinha == 0) putStatus(dirName, "04--Etapa 4 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
            // quando cliente escolhe para agrupar tudo em um unico lote, mudamos o nome do arquivo.

            if (ttMov.valorDocumento == 0) continue;

            // logger.logInfo("TPPORTTEMPLATE " + ttMov.tipoPlanilha + " | " + ttMov.lote + " | " + ttMov.dataMovimento + " | " + ttMov.tipoLancamento + " | " + ttMov.debitoCredito);
            // logger.logInfo("PORTAS2 " + ttMov.nomePortador);
            String idLote = cutString(ttMov.lote, "ott_oud", ttMov.lote.indexOf("ott_oud") + 16);//202302-0025707

            if (ttMov.lote.contains("ott_oud__id")) idLote = cutString(ttMov.lote, "ott_oud__id", "_");//2308-011361
            if (ttMov.lote.contains("ott_oud_id")) idLote = cutString(ttMov.lote, "ott_oud_id", "_");//2308-011361

            if (roteiroCRMPrincipal.optString("agrupaArquivos").toUpperCase().contains("TRUE")) {
                if (ttMov.lote.contains("_CORA_")) {
                    ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_CORA_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
                }

                else {
                    if (ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) {

                        ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_OTTIMIZZA_PROJETO_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
                    }
                    else {
                        if (ttMov.lote.toUpperCase().contains("_OUD_")) {

                            ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_ott_oud__id" + idLote + "_" + arquivoAgora  + "_OUD_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
                        }

                        else {
                            ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");

                        }
                    }
                }


            }

            if (ttMov.lote.toLowerCase().contains("ott_oud_")) ttMov.lote = ttMov.lote.replaceAll("__", "_");

            // logger.logInfo("LOTIZIN " + nomeEmpresa + " | " + ttMov.lote);

            ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
            if (ttLot       == null) {
                ttLot       = new ttLote();
                ttLot.lote  = ttMov.lote;
                ttLot.tipoPlanilha  = ttMov.tipoPlanilha;
            }
            mapaLote.put(ttMov.lote,ttLot);


            if(tipoLancamento.contains("PAGAR")){
                ttMov.naturezaContabil = "D";
                if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "C";
            }
            if(tipoLancamento.contains("RECEBER")){
                ttMov.naturezaContabil = "C";
                if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "D";
            }

            JSONObject extratoEmpresa = new JSONObject();

            // CASO A LINHA DO EXTATO JA TENHA SIDO LIDA PELA PLANILHA DE PAGAMENTOS, DEVE SER IGNORADA
            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                chaveExtrato = ttMov.chaveExtrato;

                extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? ")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato + "%")
                        .queryUnique();

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    if (extratoEmpresa.has("EXTRATOLIDO")) {

                        double extratoLido = extratoEmpresa.optDouble("EXTRATOLIDO");

                        if (extratoLido == 1) continue;

                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(1)
                                .param(chaveExtrato)
                                .execute();

                    }
                }

            }


            // -----------------------------------------------------------------------------------------------------------
            // COMPARA COM RAZAO APENAS QUANDO O NOME DO ARQUIVO CONTIVER OTTIMIZZA, ASSIM FICA MAIS RAPIDA A INTEGRACAO
            // QUANDO O CLIENTE FINAL ESTIVER RODANDO.
            // -----------------------------------------------------------------------------------------------------------

            if (!ttMov.tipoMovimento.equals("CTBPORT") && ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) {

                String tipoData = "MOVIMENTO";

                comparaRazao = true;


                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm= new Date();
                Date dataMovimentoDateMenosDois= new Date();
                Date dataMovimentoDateMenosTres= new Date();
                Date dataMovimentoDateMaisUm= new Date();
                Date dataMovimentoDateMaisDois= new Date();
                Date dataMovimentoDateMaisTres= new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres = cal.getTime();

                if (ttMov.valorDocumento == 0) continue;

                String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                valorFinal = valorFinal.replaceAll("\\.",",");

                JSONArray registro = new JSONArray();



                JSONObject histobj = new JSONObject();
                ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01, histobj);
                ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02, histobj);
                ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03, histobj);
                ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04, histobj);
                ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05, histobj);
                ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06, histobj);
                ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07, histobj);
                ttMov.complemento08 = getReplaceTermos("complemento09", ttMov.complemento08, histobj);
                ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09, histobj);
                ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10, histobj);
                ttMov.nomeOrigem = getReplaceTermos("nomeOrigem", ttMov.nomeOrigem, histobj);
                ttMov.documento = getReplaceTermos("documento", ttMov.documento, histobj);
                ttMov.nomePortador = getReplaceTermos("nomePortador", ttMov.nomePortador, histobj);

                histobj.put("nomeOrigem", ttMov.nomeOrigem); histobj.put("documento", ttMov.documento);
                histobj.put("complemento01", ttMov.complemento01); histobj.put("complemento02", ttMov.complemento02);
                histobj.put("complemento03", ttMov.complemento03); histobj.put("complemento04", ttMov.complemento04);
                histobj.put("complemento05", ttMov.complemento05); histobj.put("complemento06", ttMov.complemento06);
                histobj.put("complemento07", ttMov.complemento07); histobj.put("complemento08", ttMov.complemento08);
                histobj.put("complemento09", ttMov.complemento09); histobj.put("complemento10", ttMov.complemento10);
                histobj.put("dataMovimento", ttMov.dataMovimento); histobj.put("mesAnoAnterior", mesAnoAnterior);
                histobj.put("mesAno2Anterior", mesAno2Anterior); histobj.put("mesAnoAtual", mesAnoAtual);
                histobj.put("nomePortador", ttMov.nomePortador); histobj.put("contaMovimento", contaMovimento);
                histobj.put("contaPortador", contaPortador); histobj.put("contaDebito", "");
                histobj.put("contaCredito", ""); histobj.put("contaJuros", ttMov.contaJuros);
                histobj.put("contaDesconto", ttMov.contaDesconto); histobj.put("contaMulta", ttMov.contaMulta);
                histobj.put("centroCusto", ttMov.centroCusto); histobj.put("valorDocumento", ttMov.valorDocumento);
                histobj.put("valorJuros", ttMov.valorJuros); histobj.put("valorDesconto", ttMov.valorDesconto);
                histobj.put("valorMulta", ttMov.valorMulta); histobj.put("codFilial", ttMov.codFilial);
                histobj.put("tipoPlanilha", ttMov.tipoPlanilha); histobj.put("numeroAba", ttMov.abaPlanilha);

                String contaPrincipal = "";
                String contraSecundaria = "";

                if (tipoLancamento.contains("PAGAR")) {
                    contaPrincipal = ttMov.contaDebito;
                    contraSecundaria = ttMov.contaCredito;

                }
                if (tipoLancamento.contains("RECEBER")) {
                    contaPrincipal = ttMov.contaCredito;
                    contraSecundaria = ttMov.contaDebito;
                }

                regraContaMovimento = getRegraContaMovimento(contaPrincipal, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                regraHistorico = getRegraHistoricoRegra(contaPrincipal, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


                ResumoTxt.append("\r\n").append("NAO ENCONTRADO;").append(ttMov.dataMovimento).append(";").append(tipoData).append(";")
                        .append(valorFinal).append(";").append(ttMov.documento).append(";").append(ttMov.nomeOrigem).append(";")
                        .append(ttMov.nomePortador).append(";").append(ttMov.complemento01).append(";").append(ttMov.complemento02).append(";")
                        .append(ttMov.complemento03).append(";").append(ttMov.complemento04).append(";").append(ttMov.complemento05).append(";")
                        .append(ttMov.complemento06).append(";;").append(ttMov.contaDebito).append(";").append(ttMov.contaCredito).append(";")
                        .append(regraContaMovimento).append(";").append(ttMov.historico).append(";").append(regraHistorico).append(";;")
                        .append(ttMov.nomeArquivo).append(";");

            }

            if(tipoLancamento.contains("PAGAR")){

                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "C";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "D";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "C";
                if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
            }
            if(tipoLancamento.contains("RECEBER")){
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "D";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "C";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "D";
                if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
            }

            if (roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO")) {
                if(tipoLancamento.contains("PAGAR")){

                    if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
                    if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
                    if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
                    if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

                    if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
                    if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
                }
                if(tipoLancamento.contains("RECEBER")){
                    if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
                    if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
                    if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
                    if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

                    if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
                    if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
                }
            }

            String classificacaoFinal = classificacao + ttMov.classificacao + "01";


            if ((classificacao.startsWith("X") || roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) && ttMov.tipoMovimento.equals("CTBPORT")) { continue;}

            if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
                roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
            }else{
                roteiroCRM = getRoteiro();
            }
            // if(ttMov.codEmpresa.contains("68345")) logger.logInfo("QUATRO " + ttMov.valorDocumento + " | " + ttMov.dataMovimento + " | " + ttMov.tipoPlanilha + " | " + ttMov.tipoMovimento + " | " + roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase());
            // logger.logInfo("AQQQQ " + roteiroCRM.optString("erpContabilidade") + " | " + roteiroCRMPrincipal.optString("erpContabilidade") + " | " + ttMov.complemento05 + " | " + roteiroCRM.optString("Forcar_Partida_Dobrada").toUpperCase() + " | " + roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase() + " | " + ttMov.contaJuros + " | " + ttMov.contaDebito + " | " + ttMov.contaCredito + " | " + classificacao);


            if (classificacao.startsWith("X")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", ttMov.tipoMovimento);
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("CONTADEBITO", ttMov.contaDebito);
                js.put("CONTACREDITO", ttMov.contaCredito);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave  + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);


                if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
                        ttMov.lote.toUpperCase().contains("_OUD") ||
                        (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
                    js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
                    js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
                    js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
                    js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
                    // 2307-010554
                    if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
                        js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
                        js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
                        js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
                        js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
                        js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
                    }
                }



                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) {
                        if (roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE")
                                || roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA")
                                || roteiroCRMPrincipal.optString("erpContabilidade").equals("CONTMATIC")) {
                            if (ttMov.complemento05.equals("JUROS") && !ttMov.contaJuros.equals("")) {
                                js.put("CONTADEBITO", ttMov.contaJuros);
                                //#2303-000922
                                //js.put("CONTACREDITO", ttMov.contaDebito);
                                js.put("CONTACREDITO", ttMov.contaCredito);
                            }
                            if (ttMov.complemento05.equals("MULTA") && !ttMov.contaMulta.equals("")) {
                                js.put("CONTADEBITO", ttMov.contaMulta);
                                //#2303-000922
                                //js.put("CONTACREDITO", ttMov.contaDebito);
                                js.put("CONTACREDITO", ttMov.contaCredito);
                            }
                            if (ttMov.complemento05.equals("DESCONTO") && !ttMov.contaDesconto.equals("")) {
                                js.put("CONTADEBITO", ttMov.contaDebito);
                                js.put("CONTACREDITO", ttMov.contaDesconto);
                            }
                        }

                    }
                }
                if(tipoLancamento.contains("RECEBER")){
                    if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) {
                        if (roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE")
                                || roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA")
                                || roteiroCRMPrincipal.optString("erpContabilidade").equals("CONTMATIC")) {
                            if (ttMov.complemento05.equals("JUROS") && !ttMov.contaJuros.equals("")) {
                                js.put("CONTADEBITO", ttMov.contaDebito);
                                js.put("CONTACREDITO", ttMov.contaJuros);
                            }
                            if (ttMov.complemento05.equals("MULTA") && !ttMov.contaMulta.equals("")) {
                                js.put("CONTADEBITO", ttMov.contaDebito);
                                js.put("CONTACREDITO", ttMov.contaMulta);
                            }
                            if (ttMov.complemento05.equals("DESCONTO") && !ttMov.contaDesconto.equals("")) {
                                js.put("CONTADEBITO", ttMov.contaDesconto);
                                //#2303-000922
                                //js.put("CONTACREDITO", ttMov.contaCredito);
                                js.put("CONTACREDITO", ttMov.contaDebito);
                            }
                        }
                    }
                }

                recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");

                if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
                if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
                criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);


                //records.put(js);
                if (!ttMov.centroCusto.equals("")) {

                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("CONTADEBITO", ttMov.contaDebito);
                    rec3.put("CONTACREDITO", ttMov.contaCredito);
                    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");

                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);

                    //records.put(rec3);
                }
                continue;
            }

            String classJur = "";
            String classDes = "";
            String classMul = "";

            if(tipoLancamento.contains("PAGAR")){
                if(roteiroCRMPrincipal.optString("erpContabilidade").equals("DYAD")){
                    if(classificacao.startsWith("C") || classificacao.startsWith("V")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "03";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        classDes = classificacao + ttMov.classificacao + "02";
                        classJur = classificacao + ttMov.classificacao + "04";
                        classMul = classificacao + ttMov.classificacao + "05";
                    }
                    if(classificacao.startsWith("D")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        classDes = classificacao + ttMov.classificacao + "05";
                        classJur = classificacao + ttMov.classificacao + "02";
                        classMul = classificacao + ttMov.classificacao + "03";
                    }
                }else{
                    if(classificacao.startsWith("C") || classificacao.startsWith("V")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
                        classDes = classificacao + ttMov.classificacao + "02";
                        classJur = classificacao + ttMov.classificacao + "04";
                        classMul = classificacao + ttMov.classificacao + "05";
                    }
                    if(classificacao.startsWith("D")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        classDes = classificacao + ttMov.classificacao + "05";
                        classJur = classificacao + ttMov.classificacao + "02";
                        classMul = classificacao + ttMov.classificacao + "03";
                    }
                }
            }


            if(tipoLancamento.contains("RECEBER")){
                if(roteiroCRMPrincipal.optString("erpContabilidade").equals("DYAD")){
                    if(classificacao.startsWith("D") || classificacao.startsWith("V")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "03";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        classDes = classificacao + ttMov.classificacao + "02";
                        classJur = classificacao + ttMov.classificacao + "04";
                        classMul = classificacao + ttMov.classificacao + "05";
                    }
                    if(classificacao.startsWith("C")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        classDes = classificacao + ttMov.classificacao + "05";
                        classJur = classificacao + ttMov.classificacao + "02";
                        classMul = classificacao + ttMov.classificacao + "03";
                    }
                }else{
                    if(classificacao.startsWith("D") || classificacao.startsWith("V")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
                        classDes = classificacao + ttMov.classificacao + "02";
                        classJur = classificacao + ttMov.classificacao + "04";
                        classMul = classificacao + ttMov.classificacao + "05";
                    }
                    if(classificacao.startsWith("C")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        classDes = classificacao + ttMov.classificacao + "05";
                        classJur = classificacao + ttMov.classificacao + "02";
                        classMul = classificacao + ttMov.classificacao + "03";
                    }

                }
            }



            if (ttMov.tipoMovimento.equals("CTBPORT")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTBPORT");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTBPORT");
                js.put("CLASSIFICACAO", classificacaoFinal);

                if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
                        ttMov.lote.toUpperCase().contains("_OUD") ||
                        (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
                    js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
                    js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
                    js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
                    js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
                    // 2307-010554
                    if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
                        js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
                        js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
                        js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
                        js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
                        js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
                    }
                }

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                }

                recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBPORT");
                if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
                if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
                criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBPORT", js);

                //records.put(js);
            }
            if (ttMov.tipoMovimento.equals("CTB")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTB");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);

                if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
                        ttMov.lote.toUpperCase().contains("_OUD") ||
                        (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
                    js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
                    js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
                    js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
                    js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
                    // 2307-010554
                    if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
                        js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
                        js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
                        js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
                        js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
                        js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
                    }
                }

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                    if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTACREDITO", ttMov.contaCredito);
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                    if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTADEBITO", ttMov.contaDebito);
                }

                recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");
                if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
                if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
                criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);

                //records.put(js);
                if (!ttMov.centroCusto.equals("")) {
                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("CONTADEBITO", ttMov.contaDebito);
                    rec3.put("CONTACREDITO", ttMov.contaCredito);
                    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");

                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);
                    //records.put(rec3);
                }


                if (ttMov.valorJuros > 0)  {
                    classificacaoFinal = classJur;
                    JSONObject jsJUR = new JSONObject(js.toString());
                    jsJUR.put("LOTE", ttMov.lote);
                    jsJUR.put("CNPJEMPRESA", cnpjEmpresa);
                    jsJUR.put("DOCUMENTO", ttMov.documento);
                    jsJUR.put("CODEMPRESA", ttMov.codEmpresa);
                    jsJUR.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsJUR.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsJUR.put("TIPOMOVIMENTO", "CTBJUR");
                    jsJUR.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsJUR.put("HISTORICO", ttMov.historicoJuros);
                    jsJUR.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsJUR.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsJUR.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsJUR.put("VALORJUROS", ttMov.valorJuros);
                    jsJUR.put("VALORMULTA", ttMov.valorMulta);
                    jsJUR.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsJUR.put("CENTROCUSTO", ttMov.centroCusto);
                    jsJUR.put("NATUREZACONTABIL", "D");
                    jsJUR.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsJUR.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsJUR.put("SERIE", ttMov.serie);
                    jsJUR.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsJUR.put("CHAVE", ttMov.chave + "-CTBJUR");
                    jsJUR.put("CLASSIFICACAO", classificacaoFinal);

                    jsJUR.put("COMPLEMENTO01", ttMov.complemento01);
                    jsJUR.put("COMPLEMENTO02", ttMov.complemento02);
                    jsJUR.put("COMPLEMENTO03", ttMov.complemento03);
                    jsJUR.put("COMPLEMENTO04", ttMov.complemento04);
                    jsJUR.put("COMPLEMENTO05", ttMov.complemento05);
                    jsJUR.put("COMPLEMENTO06", ttMov.complemento06);
                    jsJUR.put("COMPLEMENTO07", ttMov.complemento07);
                    jsJUR.put("COMPLEMENTO08", ttMov.complemento08);
                    jsJUR.put("COMPLEMENTO09", ttMov.complemento09);
                    jsJUR.put("COMPLEMENTO10", ttMov.complemento10);
                    jsJUR.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsJUR.put("CONTADEBITO",  ttMov.contaJuros);
                        jsJUR.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTACREDITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsJUR.put("CONTADEBITO",  "");
                        jsJUR.put("CONTACREDITO", ttMov.contaJuros);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTADEBITO", ttMov.contaDebito);

                    }


                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJUR");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJUR", jsJUR);


                    //records.put(jsJUR);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsJUR.toString());
                        rec3.put("CONTADEBITO", ttMov.contaDebito);
                        rec3.put("CONTACREDITO", ttMov.contaCredito);
                        rec3.put("TIPOMOVIMENTO", "CTBJURCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBJURCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBJURCC");
                        recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJURCC");
                        criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJURCC", rec3);
                        // records.put(rec3);
                    }
                }
                if (ttMov.valorDesconto > 0)  {
                    classificacaoFinal = classDes;
                    JSONObject jsDES = new JSONObject(js.toString());
                    jsDES.put("LOTE", ttMov.lote);
                    jsDES.put("CNPJEMPRESA", cnpjEmpresa);
                    jsDES.put("DOCUMENTO", ttMov.documento);
                    jsDES.put("CODEMPRESA", ttMov.codEmpresa);
                    jsDES.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsDES.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsDES.put("TIPOMOVIMENTO", "CTBDES");
                    jsDES.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsDES.put("HISTORICO", ttMov.historicoDesconto);
                    jsDES.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsDES.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsDES.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsDES.put("VALORJUROS", ttMov.valorJuros);
                    jsDES.put("VALORMULTA", ttMov.valorMulta);
                    jsDES.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsDES.put("CENTROCUSTO", ttMov.centroCusto);
                    jsDES.put("NATUREZACONTABIL", "C");
                    jsDES.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsDES.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsDES.put("SERIE", ttMov.serie);
                    jsDES.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsDES.put("CHAVE", ttMov.chave + "-CTBDES");
                    jsDES.put("CLASSIFICACAO", classificacaoFinal);

                    jsDES.put("COMPLEMENTO01", ttMov.complemento01);
                    jsDES.put("COMPLEMENTO02", ttMov.complemento02);
                    jsDES.put("COMPLEMENTO03", ttMov.complemento03);
                    jsDES.put("COMPLEMENTO04", ttMov.complemento04);
                    jsDES.put("COMPLEMENTO05", ttMov.complemento05);
                    jsDES.put("COMPLEMENTO06", ttMov.complemento06);
                    jsDES.put("COMPLEMENTO07", ttMov.complemento07);
                    jsDES.put("COMPLEMENTO08", ttMov.complemento08);
                    jsDES.put("COMPLEMENTO09", ttMov.complemento09);
                    jsDES.put("COMPLEMENTO10", ttMov.complemento10);
                    jsDES.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsDES.put("CONTADEBITO", "");
                        jsDES.put("CONTACREDITO", ttMov.contaDesconto);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTADEBITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsDES.put("CONTADEBITO",  ttMov.contaDesconto);
                        jsDES.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTACREDITO", ttMov.contaDebito);

                    }


                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDES");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDES", jsDES);

                    //records.put(jsDES);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsDES.toString());
                        rec3.put("CONTADEBITO", ttMov.contaDebito);
                        rec3.put("CONTACREDITO", ttMov.contaCredito);
                        rec3.put("TIPOMOVIMENTO", "CTBDESCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBDESCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBDESCC");
                        recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDESCC");
                        criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDESCC", rec3);
                        // records.put(rec3);
                    }
                }
                if (ttMov.valorMulta > 0)  {
                    classificacaoFinal = classMul;
                    JSONObject jsMUL = new JSONObject(js.toString());
                    jsMUL.put("LOTE", ttMov.lote);
                    jsMUL.put("CNPJEMPRESA", cnpjEmpresa);
                    jsMUL.put("DOCUMENTO", ttMov.documento);
                    jsMUL.put("CODEMPRESA", ttMov.codEmpresa);
                    jsMUL.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsMUL.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsMUL.put("TIPOMOVIMENTO", "CTBMUL");
                    jsMUL.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsMUL.put("HISTORICO", ttMov.historicoMulta);
                    jsMUL.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsMUL.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsMUL.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsMUL.put("VALORJUROS", ttMov.valorJuros);
                    jsMUL.put("VALORMULTA", ttMov.valorMulta);
                    jsMUL.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsMUL.put("CENTROCUSTO", ttMov.centroCusto);
                    jsMUL.put("NATUREZACONTABIL", "D");
                    jsMUL.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsMUL.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsMUL.put("SERIE", ttMov.serie);
                    jsMUL.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsMUL.put("CHAVE", ttMov.chave + "-CTBMUL");
                    jsMUL.put("CLASSIFICACAO", classificacaoFinal);

                    jsMUL.put("COMPLEMENTO01", ttMov.complemento01);
                    jsMUL.put("COMPLEMENTO02", ttMov.complemento02);
                    jsMUL.put("COMPLEMENTO03", ttMov.complemento03);
                    jsMUL.put("COMPLEMENTO04", ttMov.complemento04);
                    jsMUL.put("COMPLEMENTO05", ttMov.complemento05);
                    jsMUL.put("COMPLEMENTO06", ttMov.complemento06);
                    jsMUL.put("COMPLEMENTO07", ttMov.complemento07);
                    jsMUL.put("COMPLEMENTO08", ttMov.complemento08);
                    jsMUL.put("COMPLEMENTO09", ttMov.complemento09);
                    jsMUL.put("COMPLEMENTO10", ttMov.complemento10);
                    jsMUL.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsMUL.put("CONTADEBITO",  ttMov.contaMulta);
                        jsMUL.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTACREDITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsMUL.put("CONTADEBITO",  "");
                        jsMUL.put("CONTACREDITO", ttMov.contaMulta);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTADEBITO", ttMov.contaDebito);

                    }


                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMUL");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMUL", jsMUL);

                    //records.put(jsMUL);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsMUL.toString());
                        rec3.put("CONTADEBITO", ttMov.contaDebito);
                        rec3.put("CONTACREDITO", ttMov.contaCredito);
                        rec3.put("TIPOMOVIMENTO", "CTBMULCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBMULCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBMULCC");
                        recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMULCC");
                        criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMULCC", rec3);
                        //records.put(rec3);
                    }
                }
            }
        }
        // JWR adicionamos essa parte para mandar uma mensagem personalizada para o cliente, no caso de apenas nao conseguir ler os movimentos e nao um erro de layout
        // vamos descomentar depois de adicionar todas as validacoes sobre fiscal e afins
        // logger.logInfo("contRegra -> " + contRegra + " | temFiltro -> " + temFiltro);

        /*if (roteiroCRMPrincipal.optString("contabilidade").toUpperCase().contains("MICALI")) */

		/*if (contRegra > 0 && nomeArquivo.toUpperCase().contains("_ID") && nomeArquivo.toUpperCase().contains(".PDF")) {
			// logger.logInfo("ENTROU 34");
			putStatus(dirName, "03--Etapa 3 de 4 LEUCONVERSORANTIGO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
		}*/

        //#2304-002843. Melhorias no feedback
        if (contRegra < 0 && nomeArquivo.toUpperCase().contains("_ID") && !nomeArquivo.toUpperCase().startsWith("OK_DEPARACONTA") && ((roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && !temFiscal && !mantemArquivo.equals("SIM")) || !roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE"))) {
            if (temFiltro) {
                if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEUFILTRO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
                if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEUFILTRO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
            } else if (temIgnorar) {
                if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEUIGNORAR- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
                if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEUIGNORAR- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
            } else if (temLinhas) {
                if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEULINHAS- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
                if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEULINHAS- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
            } else if (temOFX || retornaPadroes.equals("break")) {
                if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEU- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
                if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEU- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
            } else {
                if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEUMOVIMENTO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
                if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEUMOVIMENTO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
            }

        }

        if (apagaExtrato) {
            try {

                if (dbIOCont != null) {
                    dbIOCont.closeConnection();
                    dbIOCont = null;
                }
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_EXTRATO")
                        .where("CODEMPRESA=?")
                        .param(codEmpresa)
                        .execute();
            } catch (Exception e) {
                logger.logInfo("PROBLEMA APAGAR EXTRATO " + e.getMessage());
            }
        }

        // Apaga as Contas T quando sao informadas pelos contadore no Conf. REfras
        if (apagaContaT) {
            try {

                if (dbIOCont != null) {
                    dbIOCont.closeConnection();
                    dbIOCont = null;
                }
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                if (tipoLancamento.contains("PAGAR")) {
                    dbIOCont.delete("IO_PESSOA")
                            .where("CODEMPRESA = ? 	AND CONTACTBFOR LIKE '%T%'")
                            .param(codEmpresa)
                            .execute();
                }
                else {
                    dbIOCont.delete("IO_PESSOA")
                            .where("CODEMPRESA = ? 	AND CONTACTBCLI LIKE '%T%'")
                            .param(codEmpresa)
                            .execute();
                }
            } catch (Exception e) {
                logger.logInfo("PROBLEMA APAGAR IO_PESSOA  " + e.getMessage());
            }
        }
        // resumo comparativo com razao
        String idLoteResumo = "";
        if (comparaRazao) {
            if(loteEtapaTres.toUpperCase().contains("_ID") && fornecedorUnico.contains("EXIBE_RESUMO")){
                idLoteResumo = "_ID"+cutString(loteEtapaTres.toUpperCase(), "_ID", "_")+"_";
            }
            String filenameRazao = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_APOS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +idLoteResumo+".csv";
            FileWriter writerRazao = new FileWriter(filenameRazao);
            // writerRazao.writeNewFile(ResumoTxt.toString());
            writerRazao.writeNewFile(ResumoTxt.toString());
        }

        if(logs){
            String filenameLogs = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_LOGS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +idLoteResumo+".csv";
            FileWriter writerLogs = new FileWriter(filenameLogs);
            // writerRazao.writeNewFile(ResumoTxt.toString());
            writerLogs.writeNewFile(logsTxt.toString());
        }

        //-------------------------------------------------------------------------------------
        // GERA ARQUIVO COM CONTAS NAO ENCONTRADAS
        //-------------------------------------------------------------------------------------
        String filename = backupDirName + "/ARQUIVO_APOIO_" + tipoLancamento + ".csv";
        // Cria o arquivo de DE-PARA FORNECEDOR
        FileWriter writer = new FileWriter(filename);
        writer.writeNewFile(txtDePara.toString());

        Iterator ite = mapaLote.keySet().iterator();
        while (ite.hasNext()) {
            String key = (String)ite.next();
            ttLote ttLot = (ttLote)mapaLote.get(key);
            // =======================================================================================
            // * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base *
            // =======================================================================================
            lote = ttLot.lote;


            ultimoJS = new JSONObject();
            ultimoJS.put("LOTE", lote);
            ultimoJS.put("DOCUMENTO", "");
            ultimoJS.put("CODEMPRESA", codEmpresa);
            ultimoJS.put("NOMEEMPRESA", nomeEmpresa);
            ultimoJS.put("DATAMOVIMENTO", "");
            ultimoJS.put("TIPOMOVIMENTO", "");
            ultimoJS.put("TIPOLANCAMENTO", "");
            ultimoJS.put("CONTADEBITO", "LOTE_ENCERRADO");
            ultimoJS.put("CONTACREDITO", "LOTE_ENCERRADO");
            ultimoJS.put("HISTORICO", ttLot.tipoPlanilha);
            ultimoJS.put("VALORLIQUIDACAO", 0);
            ultimoJS.put("VALORDOCUMENTO", 0);
            ultimoJS.put("VALORDESCONTO", 0);
            ultimoJS.put("VALORJUROS", 0);
            ultimoJS.put("VALORMULTA", 0);
            ultimoJS.put("NOMEPORTADOR", "");
            ultimoJS.put("CENTROCUSTO", "");
            ultimoJS.put("NATUREZACONTABIL", "");
            ultimoJS.put("NOMEORIGEM", "");
            ultimoJS.put("CPFCNPJ", "");
            ultimoJS.put("SERIE", "");
            ultimoJS.put("STATUSMOVIMENTO", 0);
            ultimoJS.put("CHAVE","LOTE_ENCERRADO " + lote );
            ultimoJS.put("CLASSIFICACAO", "LOTE_ENCERRADO");
            ultimoJS.put("STATUSMOVIMENTO", 1);
            records.put(ultimoJS);
            // Resumo Planilha
            try {
                String dirName1 = dirName.substring(0, dirName.lastIndexOf("/"))+"/DePara/";
                File file = new File(dirName1);
                try {
                    String diretorio = dirName1;
                    File file2 = new File(diretorio);
                    File[] files = file2.listFiles();
                    if (FileUtil.dirHasFiles(diretorio)) {
                        for (File fl: files) {
                            if (fl.isFile()){
                                if(fl.getName().contains(lote) && fl.getName().toLowerCase().endsWith(".csv") && !fl.getName().startsWith("OK_") ){
                                    // ELIMINA ARQUIVO IMPORTADO
                                    file = new File(dirName1);
                                    if (file.exists()){
                                        FileUtil.deleteFile(dirName1+fl.getName());
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception ee) {
                    logger.logError(ee);
                }
            }catch (Exception e) {
                logger.logError(e);
            }
        }
    } catch (Exception ee) {
        logger.logError("EndpointA: ", ee);
    } finally {

        try {
            if (dbIOCont != null) {
                dbIOCont.closeConnection();
            }
            if (dbIODepara != null) {
                dbIODepara.closeConnection();
            }
        } catch (Exception ee) {}
    }
    return records;
}

class ttLote {
    public String lote;
    public String tipoPlanilha;
    public ttLote(){}
    public ttLote(ttLote tt){
        lote=tt.lote;
        tipoPlanilha=tt.tipoPlanilha;
    }
}

class ttArquivo {
    public String arquivo;
    public String abas;
    public ttArquivo(){}
    public ttArquivo(ttArquivo tt){
        arquivo=tt.arquivo;
        abas=tt.abas;
    }
}

class ttDocumento {
    public String documento;
    public double valorDocumento;
    public ttDocumento(){}
    public ttDocumento(ttDocumento ttD){
        documento = ttD.documento;
        valorDocumento  = ttD.valorDocumento;
    }
}
class ttJuros {
    public String documento;
    public double valorJur;
    public int valorLido;
    public ttJuros(){}
    public ttJuros(ttJuros ttJ){
        documento = ttJ.documento;
        valorLido = ttJ.valorLido;
        valorJur  = ttJ.valorJur;
    }
}

class ttDesconto {
    public String documento;
    public double valorDesc;
    public int valorLido;
    public ttDesconto(){}
    public ttDesconto(ttDesconto ttD){
        documento  = ttD.documento;
        valorDesc  = ttD.valorDesc;
        valorLido  = ttD.valorLido;
    }
}

class ttPlano {
    public String contaContabil;
    public String descricaoPlano;
    public String contaAnalitica;
    public ttPlano(){}
    public ttPlano(ttPlano ttP){
        contaContabil = ttP.contaContabil;
        descricaoPlano = ttP.descricaoPlano;
        contaAnalitica = ttP.contaAnalitica;
    }
}

class ttFornecedor {
    public String nomeOrigem;
    public String contaMovimento;
    public ttFornecedor(){}
    public ttFornecedor(ttFornecedor ttF){
        nomeOrigem 	 = ttF.nomeOrigem;
        contaMovimento = ttF.contaMovimento;
    }
}



public String verificaSeparador(String separadorCsv, String dirName, String extensao, SysProperties props, InoutLogger logger) {

    try {
        if(extensao.contains("CSV")) {

            FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
            fileLoader2.loadFiles();
            for (MemoryFile memFile: fileLoader2.getMemFiles()) {
                if(memFile.getFilename().startsWith("OK_DeParaConta__")) importaDePara(memFile, dirName, extensao, logger, props);
                if (memFile.getFilename().toUpperCase().contains("CSV")) {
                    while (memFile.hasNextLine()) {
                        try {
                            String line = memFile.nextLine();
                            line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
                            if (line.length() < 10) return separadorCsv;
                            String [] fields1 = line.split(";");
                            String [] fields2 = line.split(",");
                            if(fields1.length > 0 && fields2.length > 0){
                                if(fields1.length < fields2.length) { separadorCsv = ","; break; }
                                if(fields1.length > fields2.length) { separadorCsv = ";"; break; }
                            }
                        }
                        catch(Exception xx) {}
                    }
                    return separadorCsv;
                }
            }
        }



        if(extensao.contains("TXT")) {
            FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
            fileLoader2.loadFiles();
            for (MemoryFile memFile: fileLoader2.getMemFiles()) {
                if (memFile.getFilename().toUpperCase().endsWith(".TXT")) {
                    while (memFile.hasNextLine()) {
                        try {
                            String line = memFile.nextLine();
                            line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
                            if (line.length() < 10) return separadorCsv;
                            String [] fields1 = line.split(";");
                            String [] fields2 = line.split(",");
                            String [] fields3 = line.split("\t");
                            if(fields1.length > 0 && fields2.length > 0){
                                if(fields1.length > fields2.length && fields1.length > fields3.length) { separadorCsv = ";"; break; }
                                if(fields2.length > fields1.length && fields2.length > fields3.length) { separadorCsv = ","; break; }
                                if(fields3.length > fields1.length && fields3.length > fields2.length) { separadorCsv = "\t"; break; }
                            }
                        }
                        catch(Exception xx) {}
                    }
                    return separadorCsv;
                }
            }
        }

    }
    catch(Exception xx) {}

    return separadorCsv;


}

public void criaMovimento(DataBase dbIO, JSONObject recordRec, String chave, JSONObject js) {
    if (recordRec != null)  {
        try {
            updateMovimento(dbIO, js);
			/*if (js.has("idRoteiro")) {
				try {
					updateArquivo(dbIO, js);
				} catch(Exception ex){}
			}*/
        } catch (Exception eUpdateMovimento) {
            logger.logError("EndpointB: Erro ao Atualizar Movimento", eUpdateMovimento);
        }
    } else {
        try {
            insertMovimento(dbIO, js);
			/*if (js.has("idRoteiro")) {
				try {
					insertArquivo(dbIO, js);
				} catch(Exception ex) {}
			}*/

        } catch (Exception eInsertMovimento) {
            logger.logError("EndpointB: Erro ao fazer insert no Movimento", eInsertMovimento);
        }
    }
}

public int getIndiceRoteiro(String nomeCampo, JSONObject roteiroIndice) {
    int validaCampo = -1;
    try {
        if (!roteiroIndice.optString(nomeCampo).equals("")) {
            try {
                validaCampo = Integer.parseInt(roteiroIndice.optString(nomeCampo).replaceAll("@","").trim());
            }
            catch (Exception xx) { validaCampo = -1;}
        }
    }
    catch (Exception xx) {validaCampo = -1;}
    return  validaCampo;
}


public HashMap geralancamentoExtraInterno(HashMap mapaVariavel, ttMovimentoPadrao ttMov2, String chave,boolean gerarApenasValorDocumento, int complemento , String textoComplemento, String classificacao){
    ttMovimentoPadrao ttMov4      = (ttMovimentoPadrao)mapaVariavel.get(chave);
    if (ttMov4 == null) {
        ttMov4 = new ttMovimentoPadrao(ttMov2);
        ttMov4.chave                    = chave;
        if(gerarApenasValorDocumento){
            ttMov4.valorDesconto            = 0;
            ttMov4.valorMulta               = 0;
            ttMov4.valorJuros               = 0;
        }
        ttMov4.classificacao            = classificacao;
        switch(complemento){
            case 1: ttMov4.complemento01 = textoComplemento; break;
            case 2: ttMov4.complemento02 = textoComplemento; break;
            case 3: ttMov4.complemento03 = textoComplemento; break;
            case 4: ttMov4.complemento04 = textoComplemento; break;
            case 5: ttMov4.complemento05 = textoComplemento; break;
            case 6: ttMov4.complemento06 = textoComplemento; break;
        }
        mapaVariavel.put(chave, ttMov4);
    }
    return mapaVariavel;
}


public JSONObject getAlternativeDataInt (JSONObject objIn, MemoryFile memFile) throws Exception {
    JSONObject response	= new JSONObject();
    String validar		= objIn.optString("validar");
    String [] validaArr	= validar.split(";");
    String changeIt		= "";
    String changeText	= "nomeOrigem;documento;complemento01;complemento02;complemento03;complemento04;complemento05;complemento06;complemento07;complemento08;complemento09;complemento10;nomePortador";
    String changeDate	= "dataMovimento";
    String changeValue	= "valorDocumento;valorPagamento;valorJuros;valorDesconto;valorMulta";

    for (String parameter : validaArr) {
        response.put(parameter,	"");

        // String indiceAux = "";
        String indiceAux = getColunaAlternativa(parameter,	objIn);
        if (!indiceAux.equals("")) {
            if (changeDate.contains(parameter)) {
                if(!indiceAux.contains(";")) {
                    try {
                        int iAux = Integer.parseInt(indiceAux);
                        String dataStrAux = memFile.getStringFieldRemoveEspCharsUpper(iAux);
                        if (!dataStrAux.equals("")) {
                            String dataMovAux = getCampoDate(dataStrAux);
                            if (dataMovAux.contains("/")) {
                                String dataAlternativa = getCampoDate(dataStrAux);
                                response.put(parameter,	dataAlternativa);
                                response.put("dataLote", dataAlternativa);
                                changeIt = changeIt+";"+parameter;

                                //feito pra que as proximas iteracoes ja tenham o dado atualizado
                                objIn.put(parameter, dataAlternativa);
                            }
                        }
                    } catch (Exception ee) { logger.logInfo("Erro getColunaAlternativa 'Data'! "+ee.getMessage()); }
                }

            } else if (changeValue.contains(parameter)) {
                if(!indiceAux.contains(";")) {
                    try {
                        int iAux  = Integer.parseInt(indiceAux);
                        if(iAux >=0){
                            double valorAlternativo = memFile.getDoubleField(iAux);
                            response.put(parameter, valorAlternativo);
                            changeIt = changeIt+";"+parameter;

                            //feito pra que as proximas iteracoes ja tenham o dado atualizado
                            objIn.put(parameter, valorAlternativo);
                        }
                    } catch (Exception ee) { logger.logInfo("Erro getColunaAlternativa 'Valor'! "+ee.getMessage()); }

                }
                if (indiceAux.contains(";")) {
                    double valorAlternativo = 0;
                    try {
                        String [] izis = indiceAux.split(";");
                        for (String k : izis) {
                            int iAux = Integer.parseInt(k);
                            valorAlternativo = valorAlternativo + memFile.getDoubleField(iAux);
                        }
                    } catch (Exception ee) {logger.logInfo("Erro getColunaAlternativa 'Valor 02'! "+ee.getMessage());  }

                    if (valorAlternativo != 0) {
                        response.put(parameter, valorAlternativo);
                        changeIt = changeIt+";"+parameter;

                        //feito pra que as proximas iteracoes ja tenham o dado atualizado
                        objIn.put(parameter, valorAlternativo);
                    }
                }
            } else if (changeText.contains(parameter)) {
                if(!indiceAux.contains(";")) {
                    try {
                        int iAux = Integer.parseInt(indiceAux);
                        String textoAlternativo = memFile.getStringFieldRemoveEspCharsUpper(iAux);
                        response.put(parameter, textoAlternativo);
                        changeIt = changeIt+";"+parameter;

                        //feito pra que as proximas iteracoes ja tenham o dado atualizado
                        objIn.put(parameter, textoAlternativo);
                    } catch (Exception ee) { logger.logInfo("Erro getColunaAlternativa 'Texto'! "+ee.getMessage()); }
                }
                if (indiceAux.contains(";")) {
                    String textoAlternativo = "";

                    try {
                        String [] izis = indiceAux.split(";");
                        for (String k : izis) {
                            int iAux	 = Integer.parseInt(k);
                            textoAlternativo = textoAlternativo+" - "+memFile.getStringFieldRemoveEspCharsUpper(iAux).trim();
                            textoAlternativo = textoAlternativo.trim();
                        }
                        if (textoAlternativo.startsWith("-")) textoAlternativo = cutString(textoAlternativo, 1).trim();

                    } catch (Exception ee) {logger.logInfo("Erro getColunaAlternativa 'Texto 02'! "+ee.getMessage());  }

                    if (!textoAlternativo.equals("")) {
                        response.put(parameter, textoAlternativo);
                        changeIt = changeIt+";"+parameter;

                        //feito pra que as proximas iteracoes ja tenham o dado atualizado
                        objIn.put(parameter, textoAlternativo);
                    }
                }
            } else {
                response.put(parameter, "");
                objIn.put(parameter, "");
            }
        }
    }

    response.put("changeIt",	changeIt);
    return response;
}




public String getRefatoraCampo(String valorOriginal, String conteudoRoteiro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String line            = objHistorico.optString("line");
    String cabecalhoRegra  = objHistorico.optString("cabecalhoRegra");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    nomeArquivo = StringUtil.removeSpecialCharsToUC(nomeArquivo);


    if (conteudoRoteiro.toUpperCase().contains("#CABECALHO"))      return cabecalhoRegra;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO01"))  return complemento01;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO02"))  return complemento02;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO03"))  return complemento03;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO04"))  return complemento04;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO05"))  return complemento05;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO06"))  return complemento06;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO07"))  return complemento07;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO08"))  return complemento08;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO09"))  return complemento09;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO10"))  return complemento10;
    if (conteudoRoteiro.toUpperCase().contains("#TIPOPLANILHA"))   return tipoPlanilha;
    if (conteudoRoteiro.toUpperCase().contains("#NOMEDOARQUIVO"))   return nomeArquivo;
    if (conteudoRoteiro.toUpperCase().contains("#LINE"))  		   return line;
    if (conteudoRoteiro.toUpperCase().contains("#NUMEROABA"))      return ("ABA:" + String.valueOf(numeroAba));


    return valorOriginal;
}

public boolean buscaProtocoloConversor(String protocolo_id, LancamentosApi apiWeb, String tipoLancamento, String nomeArquivo, InoutLogger logger) throws Exception {
    logger.logInfo("ENTROU PROTOCOLOCONV");
    String diretorio = "C:/Conversor/Pdf";
    File file2 = new File(diretorio);

    File [] files = file2.listFiles();
    nomeArquivo = cutString(nomeArquivo, 0, ".pdf");

    if (FileUtil.dirHasFiles(diretorio)) {

        boolean notificouProtocolo = false;
        for (File fl: files) {
            // logger.logInfo("FL " + fl.getAbsolutePath()+ " | " + nomeArquivo + " | " + tipoLancamento);
            if (fl.getAbsolutePath().contains(tipoLancamento) && fl.getAbsolutePath().contains(nomeArquivo)) {
                // logger.logInfo("AQ FOI " + fl.getAbsolutePath());
                if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".CSV") && fl.getAbsolutePath().contains("_ancora_") && fl.length() > 0){
                    String diretorioArquivoCsv = "C:/inout/contabil/";
                    String testeCsv = "";
                    String contabilidadeCsv = "";
                    String empresaCsv = "";

                    // logger.logInfo("ENTROU NOS PDFFFFFF");

                    if (fl.getAbsolutePath().contains("pagar_")) {
                        try {
                            testeCsv = cutString(fl.getAbsolutePath(), "pagar_");
                            contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
                            empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
                            empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
                            diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/APagar";
                        } catch (Exception e) {
                            logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
                        }
                    }
                    else if (fl.getAbsolutePath().contains("receber_")) {
                        try {
                            testeCsv = cutString(fl.getAbsolutePath(), "receber_");
                            contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
                            empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
                            empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
                            diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/AReceber";
                        } catch (Exception e) {
                            logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
                        }
                    }
                    String arquivoDeployStr = "";
                    try {
                        // mantivemos o ancora no nome do arquivo para saber que foi convertido e usado nos extratos
                        arquivoDeployStr = fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_"));
                    } catch (Exception e) {
                        logger.logInfo("NAOCRIOURODACONVERSOR " + e.getMessage());
                    }
                    logger.logInfo("DIRETORIOS " + diretorioArquivoCsv + " | " + arquivoDeployStr);
                    if (!arquivoDeployStr.equals("")) {
                        File arquivoDeploy  = new File(diretorioArquivoCsv + "/" + arquivoDeployStr);
                        //logger.logInfo("COPIOUARQUIVO " + arquivoDeploy.getName());
                        FileUtil.copyFolder(fl, arquivoDeploy);

                        try {
                            FileUtil.deleteFile(fl);
                        } catch (Exception XX) {}
                    }
                    if (!notificouProtocolo) {
                        notificouProtocolo = true;
                        String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "0", "Estamos convertendo os PDFs.",  logger);
                    }
                    continue;
                }
            }
        }
        if (notificouProtocolo) return true;
    }
    return false;
}

public String atualizaStatusProtocoloOic(LancamentosApi apiWeb, File fl,  String statusProtocolo, String mensagem, InoutLogger logger) throws Exception {

    try {
        String protocolo_id = cutString(fl.getName().toUpperCase(), fl.getName().toUpperCase().lastIndexOf("_ID")+3, "_");
        if (fl.getName().toUpperCase().contains("OUD_ID"))  protocolo_id = cutString(fl.getName().toUpperCase(), "OUD_ID", "_");
        if (fl.getName().toUpperCase().contains("OUD__ID")) protocolo_id = cutString(fl.getName().toUpperCase(), "OUD__ID", "_");
        // roda requisicao para atualizar o satus do protocolo
        JSONObject bodyProtocolo = new JSONObject();
        bodyProtocolo.put("status", statusProtocolo).put("mensagem", mensagem);
        String atualizaStatus = apiWeb.atualizaStatusProtocolo("https://integrador-contabil.herokuapp.com", protocolo_id, bodyProtocolo);
        return atualizaStatus;
    } catch (Exception xx) {
        logger.logInfo(" Erro ao Atualizar Status " + xx);
        return "";
    }

}















































//## CODIGO GERADO A PARTIR DAS REGRAS NO SALESFORCE ##
//## NAO ALTERAR DAQUI ATE O FINAL DO SCRIPT!!!!     ##
public JSONObject getRoteiro() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-12110081");
    js.put("idRoteiro", "a0ASG000001aWs1");
    js.put("idEmpresa", "a0qSG000001G2N5YAK");
    js.put("idContabilidade", "a09SG000000KlXR");
    js.put("CnpjContabilidade", "27.305.393/0001-06");
    js.put("CnpjEmpresa", "29.144.051/0001-79");
    js.put("fornecedor", "6");
    js.put("dataMovimento", "1");
    js.put("portador", "#NOMEDOARQUIVO");
    js.put("documentoNF", "4");
    js.put("valorDocumento", "9");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "3");
    js.put("complemento02", "5");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("valorAlternativo", "");
    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("dataFake", "");

    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Eficazcontabilidade");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "TRUE");
    js.put("cruzaExtrato", "FALSE");
    js.put("empresa", "Jardimpantanalempreendimentos");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "CORDILHEIRA");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "FALSE");
    js.put("ValidaFornecedorFiscal", "0");
    js.put("Integracao_contratos", "false");
    js.put("Usa_Filial_Questor", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "PRINCIPAL");
    js.put("Planilhas_Padroes", "Extrato_Bradesco_Excel;Extrato_Sicredi_Excel;Extrato_Bradesco_TXT;Extrato_Sicredi_TXT;Extrato_Sicredi_PDF;Extrato_Bradesco2_PDF");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");

    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("especiaisBaixaFiscal", "");
    js.put("Arredonda", "false");
    js.put("Colunas_de_Valores_Extras", "9");
    js.put("Rotulos_Para_Valores_Extras", "EXTRABAIXA");
    js.put("Colunas_de_Portadores_Extras", "");
    js.put("Coluna_Valor_Duplicata_Dominio", "9");
    js.put("delimitadorDoArquivo", "");
    js.put("agrupaArquivos", "FALSE");

    js.put("X001_ROB", "");
    js.put("X002_Despesas", "");
    js.put("X003_Despesas_Detalhe", "");
    js.put("X004_Geracao_Caixa_Mes", "");
    js.put("X005_Geracao_Caixa_Acumulado", "");
    js.put("X006_Despesas_sobre_Faturamento", "");
    js.put("X007_Lucro", "");
    js.put("X008_Deducoes_Receitas", "");
    js.put("X009_CMV", "");
    js.put("X010_CPV", "");
    js.put("X011_CSP", "");
    js.put("X012_Indicador", "");
    js.put("X013_Indicador", "");
    js.put("X014_Indicador", "");
    js.put("X015_Indicador", "");
    js.put("X016_Indicador", "");
    js.put("X017_Indicador", "");
    js.put("X018_Indicador", "");
    js.put("X019_Indicador", "");
    js.put("X020_Indicador", "");
    js.put("X021_Indicador", "");

    js.put("X015_Label", "");
    js.put("X016_Label", "");
    js.put("X017_Label", "");
    js.put("X018_Label", "");
    js.put("X019_Label", "");
    js.put("X020_Label", "");
    js.put("Email_Logo", "");
    js.put("BuscaCnpjCRM", "FALSE");
    js.put("Idioma", "PORTUGUES");
    js.put("Ordem_dos_Indicadores", "7, 12, 21, 1, 8, 9, 10, 11, 13, 2, 3, 6, 4, 5, 15, 16, 18, 14, 17, 19, 20");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Gera_LOG", "false");
    js.put("Gera_LOG_PARAMETROS", "");

    return js;
}

public JSONObject getRoteiroMOVIMENTO_ADIANTAMENTO1() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2024-02121881");
    js.put("idRoteiro", "a0ASG000001aWs1");
    js.put("idEmpresa", "a0qSG000001G2N5YAK");
    js.put("idContabilidade", "a09SG000000KlXR");
    js.put("CnpjContabilidade", "27.305.393/0001-06");
    js.put("CnpjEmpresa", "29.144.051/0001-79");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "6");
    js.put("dataMovimento", "1");
    js.put("portador", "6");
    js.put("documentoNF", "4");
    js.put("valorDocumento", "9");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "3");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Eficazcontabilidade");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Jardimpantanalempreendimentos");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "CORDILHEIRA");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "ARQUIVO ADIANTAMENTO");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS RECEBIDAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public String getTipoPlanilha(String line, String tipoPlanilha, String nomeArquivo, JSONObject jDadosObj) {
    boolean achouTipo = true;
    achouTipo = false;
    if (nomeArquivo.toUpperCase().contains("ADIANTAMENTO")) achouTipo = true;
    if (achouTipo) return "MOVIMENTO_ADIANTAMENTO1";
    achouTipo = true;
    return tipoPlanilha;
}
public String getConta(String nomeOrigem, String documento, String nomePortador,
                       String complemento01, String complemento02, String complemento03,
                       String nomeArquivo, String codCentroCusto) {
    String conta = "";
    String complemento04 = "";
    String complemento05 = "";
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getConta09(String contaMovimento, String nomeOrigem, String documento,
                         String nomePortador, String complemento01, String complemento02,
                         String complemento03, String nomeArquivo, String codCentroCusto) {
    String conta = contaMovimento;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ADEMIR VARGAS")) {
        conta = "23817";
        contaMovimento = "23817";
    }
    if (nomeOrigem.contains("ELOIZA PEREIRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24422";
        contaMovimento = "24422";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EVANDRO BARTH")) {
        conta = "26646";
        contaMovimento = "26646";
    }
    if (nomeOrigem.contains("JAISON ZAMINHAN") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "2374";
        contaMovimento = "2374";
    }
    if (nomeOrigem.contains("JURACI MACHADO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "27960";
        contaMovimento = "27960";
    }
    if (nomeOrigem.contains("RODRIGO MARCHESINI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25410";
        contaMovimento = "25410";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ROSA KIHARA")) {
        conta = "28690";
        contaMovimento = "28690";
    }
    if (nomeOrigem.contains("VANDERLEI ODERDENGE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25593";
        contaMovimento = "25593";
    }
    if (nomeOrigem.contains("VANESSA BANASZEWSKI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "28444";
        contaMovimento = "28444";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EMIKO SATO")) {
        conta = "24430";
        contaMovimento = "24430";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FERNANDA SEBEN")) {
        conta = "24503";
        contaMovimento = "24503";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("IVONETE SORDI")) {
        conta = "28531";
        contaMovimento = "28531";
    }
    if (nomeOrigem.contains("ADEMIR VARGAS") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "23817";
        contaMovimento = "23817";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("ELOIZA PEREIRA")) {
        conta = "24422";
        contaMovimento = "24422";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("EVANDRO BARTH")) {
        conta = "26646";
        contaMovimento = "26646";
    }
    if (nomeOrigem.contains("JAISON ZAMINHAN") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "2374";
        contaMovimento = "2374";
    }
    if (nomeOrigem.contains("JURACI MACHADO") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "27960";
        contaMovimento = "27960";
    }
    if (nomeOrigem.contains("PEDRO HENRIQUE ARROIO")) {
        conta = "25291";
        contaMovimento = "25291";
    }
    if (nomeOrigem.contains("RODRIGO MARCHESINI") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "25410";
        contaMovimento = "25410";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("VANESSA BANASZEWSKI")) {
        conta = "28444";
        contaMovimento = "28444";
    }
    if (nomeOrigem.contains("GUSTAVO ARROIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24562";
        contaMovimento = "24562";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("GIVALDO SANTOS")) {
        conta = "27065";
        contaMovimento = "27065";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("IONARA CONTI")) {
        conta = "28835";
        contaMovimento = "28835";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ADRIANA MANFROI MENDES")) {
        conta = "28169";
        contaMovimento = "28169";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALDRIENE SANTOS PIMENTA")) {
        conta = "23833";
        contaMovimento = "23833";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ANTONIO REIS SANCHES")) {
        conta = "28002";
        contaMovimento = "28002";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("BRENDA VITORIA FOGACA")) {
        conta = "24058";
        contaMovimento = "24058";
    }
    if (nomeOrigem.contains("CAMILA BRITO GONCALVES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24104";
        contaMovimento = "24104";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CAMILA MARTA PETRI")) {
        conta = "27944";
        contaMovimento = "27944";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DARLENE DE LIMA")) {
        conta = "27880";
        contaMovimento = "27880";
    }
    if (nomeOrigem.contains("DIEGO BACARIN GARCIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26034";
        contaMovimento = "26034";
    }
    if (nomeOrigem.contains("DIESSICA GOMES MARTINS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "28770";
        contaMovimento = "28770";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DIOGGO MORAIS BORGES")) {
        conta = "24252";
        contaMovimento = "24252";
    }
    if (nomeOrigem.contains("DOMINGOS MOURAO BARROS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "28215";
        contaMovimento = "28215";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EDUARDO CESAR CRISTANI")) {
        conta = "2371";
        contaMovimento = "2371";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ELISANGELA DE AZEVEDO")) {
        conta = "28029";
        contaMovimento = "28029";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EZEQUIEL FELISBINO PEREIRA")) {
        conta = "24465";
        contaMovimento = "24465";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("FELIPE NERI MOURA")) {
        conta = "24490";
        contaMovimento = "24490";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("GILVALDO TRINDADE NOGUEIRA")) {
        conta = "2375";
        contaMovimento = "2375";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("GLEICIANE FERREIRA MAIA")) {
        conta = "27898";
        contaMovimento = "27898";
    }
    if (nomeOrigem.contains("IDENILDE ANDRADE MACHADO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26042";
        contaMovimento = "26042";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("IRACY CAMPOS SOARES")) {
        conta = "24619";
        contaMovimento = "24619";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JOAO BATISTA BORGES")) {
        conta = "24686";
        contaMovimento = "24686";
    }
    if (nomeOrigem.contains("LAERCIO FERREIRA MUNIZ") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24856";
        contaMovimento = "24856";
    }
    if (nomeOrigem.contains("LEONILDO LOPES SANTANA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "28681";
        contaMovimento = "28681";
    }
    if (nomeOrigem.contains("LORIEN DALPRA MAZER") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "27324";
        contaMovimento = "27324";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MARIA CREUSA PEREIRA")) {
        conta = "24996";
        contaMovimento = "24996";
    }
    if (nomeOrigem.contains("MILTON ADRIANO ROSSI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26832";
        contaMovimento = "26832";
    }
    if (nomeOrigem.contains("MADEIRAS") && nomeOrigem.contains("MOGNO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LTDA")) {
        conta = "25143";
        contaMovimento = "25143";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MURILLO HENRIQUE CALDEIRA")) {
        conta = "26875";
        contaMovimento = "26875";
    }
    if (nomeOrigem.contains("NAHARA SCHEIBEL GOMES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25160";
        contaMovimento = "25160";
    }
    if (nomeOrigem.contains("NATIELI ROSA XAVIER") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25194";
        contaMovimento = "25194";
    }
    if (nomeOrigem.contains("OLEVINO ANTONIO MARIANO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25224";
        contaMovimento = "25224";
    }
    if (nomeOrigem.contains("PEDRO PAULO ANDRADE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25305";
        contaMovimento = "25305";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ROBERTO CARLOS RAMOS")) {
        conta = "25372";
        contaMovimento = "25372";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ROBERTO TONELLI JUNIOR")) {
        conta = "25399";
        contaMovimento = "25399";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SILVEIRA") && nomeOrigem.contains("E") && nomeOrigem.contains("ROCKENBACH")) {
        conta = "25402";
        contaMovimento = "25402";
    }
    if (nomeOrigem.contains("ROGERIO DAMIRO COSTA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26964";
        contaMovimento = "26964";
    }
    if (nomeOrigem.contains("ROSINEIA PEREIRA LIMA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25470";
        contaMovimento = "25470";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ZILDA PEREIRA CALDEIRA")) {
        conta = "27049";
        contaMovimento = "27049";
    }
    if (nomeOrigem.contains("APARECIDO ARROIO CANABASSE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24023";
        contaMovimento = "24023";
    }
    if (nomeOrigem.contains("CLAUDEMIR CORREIA RIBAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "28789";
        contaMovimento = "28789";
    }
    if (nomeOrigem.contains("GUILHERME FERREIRA COSTA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "28673";
        contaMovimento = "28673";
    }
    if (nomeOrigem.contains("JUCEIA VENTURIM GABURRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24767";
        contaMovimento = "24767";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("L") && nomeOrigem.contains("E") && nomeOrigem.contains(".")) {
        conta = "28356";
        contaMovimento = "28356";
    }
    if (nomeOrigem.contains("LIAMAR MONTEIRO CASSIANO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "27260";
        contaMovimento = "27260";
    }
    if (nomeOrigem.contains("PEDRO HENRIQUE ARROIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25291";
        contaMovimento = "25291";
    }
    if (nomeOrigem.contains("ROBERTO APARECIDO DIAS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25364";
        contaMovimento = "25364";
    }
    if (nomeOrigem.contains("ALCIONE PEREIRA FIALHO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "23825";
        contaMovimento = "23825";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ANA PAULA VERONA")) {
        conta = "23965";
        contaMovimento = "23965";
    }
    if (nomeOrigem.contains("DAIMI LABANINO NOA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "27308";
        contaMovimento = "27308";
    }
    if (nomeOrigem.contains("FERNANDA MAIRA ZANDONA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25992";
        contaMovimento = "25992";
    }
    if (nomeOrigem.contains("LEANDRO CRUZ PINHEIRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25739";
        contaMovimento = "25739";
    }
    if (nomeOrigem.contains("LEONILDO LOPES SANTAN") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "28681";
        contaMovimento = "28681";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RANIEL NASCIMENTO PEREIRA")) {
        conta = "26000";
        contaMovimento = "26000";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALEX GOMES AMO")) {
        conta = "23876";
        contaMovimento = "23876";
    }
    if (nomeOrigem.contains("LUIZ RODRIGO AMARILLA ANASTACIO")) {
        conta = "28584";
        contaMovimento = "28584";
    }
    if (nomeOrigem.contains("ALDRIENE SANTOS PIMENTA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "23833";
        contaMovimento = "23833";
    }
    if (nomeOrigem.contains("ALEX GOMES AMO") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "23876";
        contaMovimento = "23876";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("ANA PAULA VERONA")) {
        conta = "23965";
        contaMovimento = "23965";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("APARECIDO ARROIO CANABASSE")) {
        conta = "24023";
        contaMovimento = "24023";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("BRENDA VITORIA FOGACA")) {
        conta = "24058";
        contaMovimento = "24058";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("CAMILA BRITO GONCALVES")) {
        conta = "24104";
        contaMovimento = "24104";
    }
    if (nomeOrigem.contains("CAMILA MARTA PETRI") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "27944";
        contaMovimento = "27944";
    }
    if (nomeOrigem.contains("CLAUDEMIR CORREIA RIBAS") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "28789";
        contaMovimento = "28789";
    }
    if (nomeOrigem.contains("CLEIDE PEREIRA DOMINGUES") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "24163";
        contaMovimento = "24163";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("DARLENE DE LIMA")) {
        conta = "27880";
        contaMovimento = "27880";
    }
    if (nomeOrigem.contains("DIESSICA GOMES MARTINS") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "28770";
        contaMovimento = "28770";
    }
    if (nomeOrigem.contains("DIOGGO MORAIS BORGES") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "24252";
        contaMovimento = "24252";
    }
    if (nomeOrigem.contains("DOMINGOS MOURAO BARROS") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "28215";
        contaMovimento = "28215";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("EDIVALDO KIHARA ANTEVERE")) {
        conta = "28150";
        contaMovimento = "28150";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("ELISANGELA DE AZEVEDO")) {
        conta = "28029";
        contaMovimento = "28029";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("DE") && nomeOrigem.contains("EVANDRO") && nomeOrigem.contains("AMORIM")) {
        conta = "28037";
        contaMovimento = "28037";
    }
    if (nomeOrigem.contains("FELIPE NERI MOURA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "24490";
        contaMovimento = "24490";
    }
    if (nomeOrigem.contains("GIOVANA MARCONDES CALDEIRA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "26697";
        contaMovimento = "26697";
    }
    if (nomeOrigem.contains("GLEICIANE FERREIRA MAIA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "27898";
        contaMovimento = "27898";
    }
    if (nomeOrigem.contains("GOLBERI DUTRA RIBEIRO") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "24546";
        contaMovimento = "24546";
    }
    if (nomeOrigem.contains("IDENILDE ANDRADE MACHADO") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "26042";
        contaMovimento = "26042";
    }
    if (nomeOrigem.contains("DO") && tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("IGREJA") && nomeOrigem.contains("EVANGELHO")) {
        conta = "2373";
        contaMovimento = "2373";
    }
    if (nomeOrigem.contains("IRACY CAMPOS SOARES") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "24619";
        contaMovimento = "24619";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("JOAO BATISTA BORGES")) {
        conta = "24686";
        contaMovimento = "24686";
    }
    if (nomeOrigem.contains("JUCEIA VENTURIM GABURRO") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "24767";
        contaMovimento = "24767";
    }
    if (nomeOrigem.contains("LAERCIO FERREIRA MUNIZ") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "24856";
        contaMovimento = "24856";
    }
    if (nomeOrigem.contains("LEANDRO CRUZ PINHEIRO") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "25739";
        contaMovimento = "25739";
    }
    if (nomeOrigem.contains("E") && tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains(".") && nomeOrigem.contains("L")) {
        conta = "28356";
        contaMovimento = "28356";
    }
    if (nomeOrigem.contains("LEONILDO LOPES SANTANA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "28681";
        contaMovimento = "28681";
    }
    if (nomeOrigem.contains("LIAMAR MONTEIRO CASSIANO") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "27260";
        contaMovimento = "27260";
    }
    if (nomeOrigem.contains("LORIEN DALPRA MAZER") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "27324";
        contaMovimento = "27324";
    }
    if (nomeOrigem.contains("MARIA CREUSA PEREIRA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "24996";
        contaMovimento = "24996";
    }
    if (nomeOrigem.contains("MARIA DIVINA MOREIRA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "25038";
        contaMovimento = "25038";
    }
    if (nomeOrigem.contains("MILTON ADRIANO ROSSI") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "26832";
        contaMovimento = "26832";
    }
    if (nomeOrigem.contains("MOGNO") && tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("LTDA") && nomeOrigem.contains("MADEIRAS")) {
        conta = "25143";
        contaMovimento = "25143";
    }
    if (nomeOrigem.contains("NAHARA SCHEIBEL GOMES") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "25160";
        contaMovimento = "25160";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("NATIELI ROSA XAVIER")) {
        conta = "25194";
        contaMovimento = "25194";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("OLEVINO ANTONIO MARIANO")) {
        conta = "25224";
        contaMovimento = "25224";
    }
    if (nomeOrigem.contains("ROBERTO APARECIDO DIAS") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "25364";
        contaMovimento = "25364";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("ROBERTO CARLOS RAMOS")) {
        conta = "25372";
        contaMovimento = "25372";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("ROBERTO TONELLI JUNIOR")) {
        conta = "25399";
        contaMovimento = "25399";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("ROCKENBACH") && nomeOrigem.contains("E") && nomeOrigem.contains("SILVEIRA")) {
        conta = "25402";
        contaMovimento = "25402";
    }
    if (nomeOrigem.contains("ROGERIO DAMIRO COSTA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "26964";
        contaMovimento = "26964";
    }
    if (nomeOrigem.contains("ROSINEIA PEREIRA LIMA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "25470";
        contaMovimento = "25470";
    }
    if (nomeOrigem.contains("GOLBERI DUTRA RIBEIRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24546";
        contaMovimento = "24546";
    }
    if (nomeOrigem.contains("LEONILSON LOPES SANTANA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "28681";
        contaMovimento = "28681";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LESLIE HOFFMANN RODRIGUES")) {
        conta = "24872";
        contaMovimento = "24872";
    }
    if (nomeOrigem.contains("NANCY FARIAS RIBEIRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "27901";
        contaMovimento = "27901";
    }
    if (nomeOrigem.contains("HERIBERT MAURICIO BARRETO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26727";
        contaMovimento = "26727";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("YANIS SOARES FREITAS")) {
        conta = "25704";
        contaMovimento = "25704";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("CRISTIANE CALDEIRA BOAVENTURA")) {
        conta = "27294";
        contaMovimento = "27294";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MARIA DIVINA MOREIRA")) {
        conta = "25038";
        contaMovimento = "25038";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DANIELE NERES PEREIRA")) {
        conta = "24201";
        contaMovimento = "24201";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JUCYCARLA PEREIRA OLIVEIRA")) {
        conta = "27359";
        contaMovimento = "27359";
    }
    if (nomeOrigem.contains("NAYARA") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LIMA") && nomeOrigem.contains("MARQUES")) {
        conta = "28371";
        contaMovimento = "28371";
    }
    if (nomeOrigem.contains("WILLIAN DALLAGNOL REIS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25666";
        contaMovimento = "25666";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ADAILSON KRUGER DA SILVA")) {
        conta = "27979";
        contaMovimento = "27979";
    }
    if (nomeOrigem.contains("ALZENIRA MARIA DA SILVA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26565";
        contaMovimento = "26565";
    }
    if (nomeOrigem.contains("CARLA GOMES BECHARA TEIXEIRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24120";
        contaMovimento = "24120";
    }
    if (nomeOrigem.contains("BASTIANI") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("DOGLAS") && nomeOrigem.contains("ILARIO") && nomeOrigem.contains("PINTO")) {
        conta = "24287";
        contaMovimento = "24287";
    }
    if (nomeOrigem.contains("DOMINGO FONSECA DE OLIVEIRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "28010";
        contaMovimento = "28010";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EDNA MARIA COSTA VEADO")) {
        conta = "24325";
        contaMovimento = "24325";
    }
    if (nomeOrigem.contains("EDUARDO BEZERRA DA SILVA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24333";
        contaMovimento = "24333";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("EULA TAVARES DA SILVA")) {
        conta = "26620";
        contaMovimento = "26620";
    }
    if (nomeOrigem.contains("EVANDRO DE AMORIM MARANGON") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "28037";
        contaMovimento = "28037";
    }
    if (nomeOrigem.contains("FRANCISCA APARECIDA MENDES FERREIRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26654";
        contaMovimento = "26654";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("GRACIELI REGINA SHNEIDER LANDGRAF")) {
        conta = "26719";
        contaMovimento = "26719";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("IGREJA DO EVANGELHO QUADRANGULAR")) {
        conta = "2373";
        contaMovimento = "2373";
    }
    if (nomeOrigem.contains("ILDA PAULA DA SILVA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26760";
        contaMovimento = "26760";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JOAO NETO DA SILVA")) {
        conta = "24694";
        contaMovimento = "24694";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JOSE ANTONIO RIBEIRO FERREIRA")) {
        conta = "27928";
        contaMovimento = "27928";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JOSINEIDE ROSA DOS SANTOS")) {
        conta = "24740";
        contaMovimento = "24740";
    }
    if (nomeOrigem.contains("JULIANA RODRIGUES DE LIMA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24783";
        contaMovimento = "24783";
    }
    if (nomeOrigem.contains("LEANDRO DE AZEVEDO GENEROSO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26069";
        contaMovimento = "26069";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LUIZ RODRIGO AMARILLA ANASTACIO")) {
        conta = "28584";
        contaMovimento = "28584";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MAIDEL LESYANIS BENITEZ FONSECA")) {
        conta = "24937";
        contaMovimento = "24937";
    }
    if (nomeOrigem.contains("MARCIANO MARQUES DA SILVA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26786";
        contaMovimento = "26786";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MARCOS DE ASSIS CUNHA")) {
        conta = "24970";
        contaMovimento = "24970";
    }
    if (nomeOrigem.contains("MARIA GENILDA ALVES BERNARDO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25062";
        contaMovimento = "25062";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MARIA ROSIVALDA DA SILVA")) {
        conta = "26816";
        contaMovimento = "26816";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MAYSA RIBEIRO DE SOUSA")) {
        conta = "25119";
        contaMovimento = "25119";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MONICA GRACIELA ALVES BEZERRA")) {
        conta = "25151";
        contaMovimento = "25151";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("NILTON ELES MOREIRA DIAS")) {
        conta = "25216";
        contaMovimento = "25216";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("PATRICIA RODRIGUES DE MELLO")) {
        conta = "2372";
        contaMovimento = "2372";
    }
    if (nomeOrigem.contains("POLYANA MOREIRA DE ALMEIDA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26921";
        contaMovimento = "26921";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RAQUEL DE OLIVEIRA CANTUARIA")) {
        conta = "26948";
        contaMovimento = "26948";
    }
    if (nomeOrigem.contains("REBERTI WILIAN NOGUEIRA BOSCARI") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25330";
        contaMovimento = "25330";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RONNIE PETERSON PIRES STANOGA")) {
        conta = "26980";
        contaMovimento = "26980";
    }
    if (nomeOrigem.contains("ROSANE FATIMA DAL MAGRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "2370";
        contaMovimento = "2370";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SILVANIRA GOMES DA SILVA")) {
        conta = "25526";
        contaMovimento = "25526";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SIRLEI DE FATIMA MENDONCA")) {
        conta = "25534";
        contaMovimento = "25534";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("SONIA CRISTINA DELAI TONELLI")) {
        conta = "25542";
        contaMovimento = "25542";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("TALIA FARIAS DE BRITO")) {
        conta = "27952";
        contaMovimento = "27952";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("WILLIAN DE SOUZA ALMEIDA")) {
        conta = "22632";
        contaMovimento = "22632";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ZENITA DE CAMPOS GATO")) {
        conta = "27030";
        contaMovimento = "27030";
    }
    if (nomeOrigem.contains("ALEX JUNIOR DO NASCIMENTO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "23884";
        contaMovimento = "23884";
    }
    if (nomeOrigem.contains("ALINE SANCHES DA SILVA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "27987";
        contaMovimento = "27987";
    }
    if (nomeOrigem.contains("LIMA") && nomeOrigem.contains("JESUS") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("GABRIELA") && nomeOrigem.contains("DE")) {
        conta = "26670";
        contaMovimento = "26670";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JACKSON DOS SANTOS LEAL")) {
        conta = "24643";
        contaMovimento = "24643";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("JHENNIFER EDYELLEN BARRA DICHETI")) {
        conta = "2376";
        contaMovimento = "2376";
    }
    if (nomeOrigem.contains("JOERTA DE SOUSA LIMA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24716";
        contaMovimento = "24716";
    }
    if (nomeOrigem.contains("SILVA") && nomeOrigem.contains("KESLEN") && nomeOrigem.contains("DA") && nomeOrigem.contains("KEYTYANE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24830";
        contaMovimento = "24830";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LUCIA WANNIELY FELIX FERREIRA")) {
        conta = "26778";
        contaMovimento = "26778";
    }
    if (nomeOrigem.contains("RAIMUNDO") && nomeOrigem.contains("NONATO") && nomeOrigem.contains("ALVES") && nomeOrigem.contains("DE") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "28347";
        contaMovimento = "28347";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ROSIANE SOUSA DE ANDRADE")) {
        conta = "25453";
        contaMovimento = "25453";
    }
    if (nomeOrigem.contains("SINEIDE GONCALVES DOS SANTOS") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "27006";
        contaMovimento = "27006";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("WILLIAN MACIMO DA FONSECA")) {
        conta = "25674";
        contaMovimento = "25674";
    }
    if (nomeOrigem.contains("MACHADO") && nomeOrigem.contains("CUNHA") && nomeOrigem.contains("DA") && nomeOrigem.contains("ANTONIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24007";
        contaMovimento = "24007";
    }
    if (nomeOrigem.contains("ANDRADE") && nomeOrigem.contains("CARVALHO") && nomeOrigem.contains("DE") && nomeOrigem.contains("KAIO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24813";
        contaMovimento = "24813";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LAIR BARROS DE CARVALHO")) {
        conta = "2873";
        contaMovimento = "2873";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("ALEX JUNIOR DO NASCIMENTO")) {
        conta = "23884";
        contaMovimento = "23884";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("ALINE SANCHES DA SILVA")) {
        conta = "27987";
        contaMovimento = "27987";
    }
    if (nomeOrigem.contains("ALZENIRA MARIA DA SILVA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "26565";
        contaMovimento = "26565";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("ANTONIO") && nomeOrigem.contains("ALVES") && nomeOrigem.contains("DA") && nomeOrigem.contains("COSTA")) {
        conta = "26603";
        contaMovimento = "26603";
    }
    if (nomeOrigem.contains("CARLA GOMES BECHARA TEIXEIRA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "24120";
        contaMovimento = "24120";
    }
    if (nomeOrigem.contains("PINTO") && tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("DOGLAS") && nomeOrigem.contains("ILARIO") && nomeOrigem.contains("BASTIANI")) {
        conta = "24287";
        contaMovimento = "24287";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("EDNA MARIA COSTA VEADO")) {
        conta = "24325";
        contaMovimento = "24325";
    }
    if (nomeOrigem.contains("EDUARDO BEZERRA DA SILVA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "24333";
        contaMovimento = "24333";
    }
    if (nomeOrigem.contains("MOREIRA") && nomeOrigem.contains("ELIGIANE") && tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("DA") && nomeOrigem.contains("CRISTINA")) {
        conta = "24368";
        contaMovimento = "24368";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("FRANCISCA APARECIDA MENDES FERREIRA")) {
        conta = "26654";
        contaMovimento = "26654";
    }
    if (nomeOrigem.contains("GRACIELI REGINA SHNEIDER LANDGRAF") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "26719";
        contaMovimento = "26719";
    }
    if (nomeOrigem.contains("MINEIRO") && nomeOrigem.contains("DE") && nomeOrigem.contains("JESUS") && tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("GREGORIA")) {
        conta = "24554";
        contaMovimento = "24554";
    }
    if (nomeOrigem.contains("ILDA PAULA DA SILVA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "26760";
        contaMovimento = "26760";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("JOAO NETO DA SILVA")) {
        conta = "24694";
        contaMovimento = "24694";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("JOERTA DE SOUSA LIMA")) {
        conta = "24716";
        contaMovimento = "24716";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("JOSE ANTONIO RIBEIRO FERREIRA")) {
        conta = "27928";
        contaMovimento = "27928";
    }
    if (nomeOrigem.contains("JOSINEIDE ROSA DOS SANTOS") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "24740";
        contaMovimento = "24740";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("JULIANA RODRIGUES DE LIMA")) {
        conta = "24783";
        contaMovimento = "24783";
    }
    if (nomeOrigem.contains("KEYTYANE") && nomeOrigem.contains("SILVA") && nomeOrigem.contains("DA") && nomeOrigem.contains("KESLEN") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "24830";
        contaMovimento = "24830";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("LEANDRO DE AZEVEDO GENEROSO")) {
        conta = "26069";
        contaMovimento = "26069";
    }
    if (nomeOrigem.contains("MARCIANO MARQUES DA SILVA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "26786";
        contaMovimento = "26786";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("MARCOS DE ASSIS CUNHA")) {
        conta = "24970";
        contaMovimento = "24970";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("JOSE") && nomeOrigem.contains("SAO") && nomeOrigem.contains("DE") && nomeOrigem.contains("MARIA")) {
        conta = "25020";
        contaMovimento = "25020";
    }
    if (nomeOrigem.contains("MARIA GENILDA ALVES BERNARDO") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "25062";
        contaMovimento = "25062";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("MARIA ROSIVALDA DA SILVA")) {
        conta = "26816";
        contaMovimento = "26816";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("MAYSA RIBEIRO DE SOUSA")) {
        conta = "25119";
        contaMovimento = "25119";
    }
    if (nomeOrigem.contains("MONICA GRACIELA ALVES BEZERRA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "25151";
        contaMovimento = "25151";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("NILTON ELES MOREIRA DIAS")) {
        conta = "25216";
        contaMovimento = "25216";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("PATRICIA RODRIGUES DE MELLO")) {
        conta = "2372";
        contaMovimento = "2372";
    }
    if (nomeOrigem.contains("POLYANA MOREIRA DE ALMEIDA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "26921";
        contaMovimento = "26921";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("REBERTI WILIAN NOGUEIRA BOSCARI")) {
        conta = "25330";
        contaMovimento = "25330";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("RONNIE PETERSON PIRES STANOGA")) {
        conta = "26980";
        contaMovimento = "26980";
    }
    if (nomeOrigem.contains("ROSANE FATIMA DAL MAGRO") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "2370";
        contaMovimento = "2370";
    }
    if (nomeOrigem.contains("SIRLEI DE FATIMA MENDONCA") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "25534";
        contaMovimento = "25534";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("SONIA CRISTINA DELAI TONELLI")) {
        conta = "25542";
        contaMovimento = "25542";
    }
    if (nomeOrigem.contains("TALIA FARIAS DE BRITO") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "27952";
        contaMovimento = "27952";
    }
    if (nomeOrigem.contains("VALDEMIR DIAS OLIVEIRA LOPES") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "27022";
        contaMovimento = "27022";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("ZENITA DE CAMPOS GATO")) {
        conta = "27030";
        contaMovimento = "27030";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VERA OLIVEIRA DOS ANJOS")) {
        conta = "2879";
        contaMovimento = "2879";
    }
    if (nomeOrigem.contains("ALIETHE DA SILVA OLIVEIRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "27936";
        contaMovimento = "27936";
    }
    if (nomeOrigem.contains("ELIZEU BEZERRA DA SILVA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24406";
        contaMovimento = "24406";
    }
    if (nomeOrigem.contains("IZABELA CRISTINA CORDENNUZZI ORTIZ") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26220";
        contaMovimento = "26220";
    }
    if (nomeOrigem.contains("ANTONIO") && tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALVES") && nomeOrigem.contains("DA") && nomeOrigem.contains("COSTA")) {
        conta = "26603";
        contaMovimento = "26603";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("RENAN QUINTANA DE LIMA")) {
        conta = "25348";
        contaMovimento = "25348";
    }
    if (nomeOrigem.contains("MINEIRO") && nomeOrigem.contains("JESUS") && nomeOrigem.contains("DE") && nomeOrigem.contains("GREGORIA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24554";
        contaMovimento = "24554";
    }
    if (nomeOrigem.contains("MARIA CLEMENCIA PACHECO PINHEIRO") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "28606";
        contaMovimento = "28606";
    }
    if (nomeOrigem.contains("CRISTINA") && nomeOrigem.contains("DOS") && nomeOrigem.contains("PRIEGO") && nomeOrigem.contains("SARA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25500";
        contaMovimento = "25500";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("THIAGO SANTOS DA CONCEICAO")) {
        conta = "25585";
        contaMovimento = "25585";
    }
    if (nomeOrigem.contains("AIRTON MOREIRA DA SILVA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "28045";
        contaMovimento = "28045";
    }
    if (nomeOrigem.contains("CARLA") && nomeOrigem.contains("MORAIS") && nomeOrigem.contains("SOARES") && nomeOrigem.contains("CRISTINA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24112";
        contaMovimento = "24112";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("LUCELIZIA ALVES DE OLIVEIRA")) {
        conta = "24902";
        contaMovimento = "24902";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MARCOS DE SOUZA DOMINGUES")) {
        conta = "28819";
        contaMovimento = "28819";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("VALDEMIR DIAS OLIVEIRA LOPES")) {
        conta = "27022";
        contaMovimento = "27022";
    }
    if (nomeOrigem.contains("KESSIA") && nomeOrigem.contains("ANANDA") && nomeOrigem.contains("DA") && nomeOrigem.contains("ALVES") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26581";
        contaMovimento = "26581";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ANA PAULA SILVA GOMES")) {
        conta = "23957";
        contaMovimento = "23957";
    }
    if (nomeOrigem.contains("ADRIANA DE JESUS DA SILVA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "26530";
        contaMovimento = "26530";
    }
    if (nomeOrigem.contains("ELIGIANE CRISTINA MOREIRA DA COSTA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24368";
        contaMovimento = "24368";
    }
    if (nomeOrigem.contains("JUNIO ESLLEI MARTINS DE OLIVEIRA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "28754";
        contaMovimento = "28754";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MARIA DE SAO JOSE FERREIRA")) {
        conta = "25020";
        contaMovimento = "25020";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("MARIA NAZILDA LIMA DOS SANTOS")) {
        conta = "26808";
        contaMovimento = "26808";
    }
    if (nomeOrigem.contains("ELISVANI REGINA MOREIRA DA COSTA") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "24392";
        contaMovimento = "24392";
    }
    if (tipoPlanilha.contains("MOVIMENTO") && nomeOrigem.contains("ALINE FONSECA DA COSTA PEREIRA")) {
        conta = "23906";
        contaMovimento = "23906";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("RAIMUNDO NONATO ALVES DE SOUSA")) {
        conta = "28347";
        contaMovimento = "28347";
    }
    if (nomeOrigem.contains("RONALDO VERISSIMO BONFIM") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "25437";
        contaMovimento = "25437";
    }
    if (nomeOrigem.contains("ALISSON") && nomeOrigem.contains("RONDINELI") && nomeOrigem.contains("SANCHES") && tipoPlanilha.contains("SECUND_RECEBIMENTOS")) {
        conta = "27995";
        contaMovimento = "27995";
    }
    if (tipoPlanilha.contains("SECUND_RECEBIMENTOS") && nomeOrigem.contains("RONALDO VERISSIMO BONFIM")) {
        conta = "25437";
        contaMovimento = "25437";
    }
    if (nomeOrigem.contains("DA") && nomeOrigem.contains("SANCHES") && nomeOrigem.contains("RONDINELI") && nomeOrigem.contains("ALISSON") && tipoPlanilha.contains("MOVIMENTO")) {
        conta = "27995";
        contaMovimento = "27995";
    }
    return conta;
}
public String getContaMovimento2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getRegraContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEXANDRE") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKEN") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HELLER")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIOGO") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MISASSI")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LILIANE") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKEN") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HELLER")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCIO") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZ") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WACKEKOVISKI")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TATIANA") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HELLER")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANA") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULA") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEMARCHI")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRUNO") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MELO") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVEIRA")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAERCIO") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNIZ")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LESLIE") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOFFMANN") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGUES")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTIANE") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CALDEIRA") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOAVENTURA")) {
        conta = "1040";
        return conta;
    }
    if (nomePortador.contains("14584-8")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("0002")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("0002")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("ADEMIR VARGAS")) {
        conta = "1775";
        contaMovimento = "1775";
    }
    if (nomePortador.contains("ELOIZA PEREIRA")) {
        conta = "1951";
        contaMovimento = "1951";
    }
    if (nomePortador.contains("EVANDRO BARTH")) {
        conta = "2663";
        contaMovimento = "2663";
    }
    if (nomePortador.contains("JAISON ZAMINHAN")) {
        conta = "1548";
        contaMovimento = "1548";
    }
    if (nomePortador.contains("JURACI MACHADO")) {
        conta = "28410";
        contaMovimento = "28410";
    }
    if (nomePortador.contains("RODRIGO MARCHESINI")) {
        conta = "1657";
        contaMovimento = "1657";
    }
    if (nomePortador.contains("ROSA KIHARA")) {
        conta = "28630";
        contaMovimento = "28630";
    }
    if (nomePortador.contains("VANDERLEI ODERDENGE")) {
        conta = "2301";
        contaMovimento = "2301";
    }
    if (nomePortador.contains("VANESSA BANASZEWSKI")) {
        conta = "28428";
        contaMovimento = "28428";
    }
    if (nomePortador.contains("EMIKO SATO")) {
        conta = "2000";
        contaMovimento = "2000";
    }
    if (nomePortador.contains("FERNANDA SEBEN")) {
        conta = "2156";
        contaMovimento = "2156";
    }
    if (nomePortador.contains("IVONETE SORDI")) {
        conta = "28460";
        contaMovimento = "28460";
    }
    if (nomePortador.contains("GUSTAVO ARROIO")) {
        conta = "1741";
        contaMovimento = "1741";
    }
    if (nomePortador.contains("GIVALDO SANTOS")) {
        conta = "2705";
        contaMovimento = "2705";
    }
    if (nomePortador.contains("IARA SOARES FREITAS")) {
        conta = "2352";
        contaMovimento = "2352";
    }
    if (nomePortador.contains("ADRIANA MANFROI MENDES")) {
        conta = "28282";
        contaMovimento = "28282";
    }
    if (nomePortador.contains("ALDRIENE SANTOS PIMENTA")) {
        conta = "1445";
        contaMovimento = "1445";
    }
    if (nomePortador.contains("ANTONIO REIS SANCHES")) {
        conta = "27596";
        contaMovimento = "27596";
    }
    if (nomePortador.contains("BRENDA VITORIA FOGACA")) {
        conta = "1794";
        contaMovimento = "1794";
    }
    if (nomePortador.contains("CAMILA BRITO GONCALVES")) {
        conta = "1648";
        contaMovimento = "1648";
    }
    if (nomePortador.contains("CAMILA MARTA PETRI")) {
        conta = "27545";
        contaMovimento = "27545";
    }
    if (nomePortador.contains("DARLENE DE LIMA")) {
        conta = "27448";
        contaMovimento = "27448";
    }
    if (nomePortador.contains("DIEGO BACARIN GARCIA")) {
        conta = "27740";
        contaMovimento = "27740";
    }
    if (nomePortador.contains("DIESSICA GOMES MARTINS")) {
        conta = "2645";
        contaMovimento = "2645";
    }
    if (nomePortador.contains("DIOGGO MORAIS BORGES")) {
        conta = "948";
        contaMovimento = "948";
    }
    if (nomePortador.contains("DOMINGOS MOURAO BARROS")) {
        conta = "28436";
        contaMovimento = "28436";
    }
    if (nomePortador.contains("EDUARDO CESAR CRISTANI")) {
        conta = "927";
        contaMovimento = "927";
    }
    if (nomePortador.contains("ELISANGELA DE AZEVEDO")) {
        conta = "28320";
        contaMovimento = "28320";
    }
    if (nomePortador.contains("EZEQUIEL FELISBINO PEREIRA")) {
        conta = "1925";
        contaMovimento = "1925";
    }
    if (nomePortador.contains("FELIPE NERI MOURA")) {
        conta = "2063";
        contaMovimento = "2063";
    }
    if (nomePortador.contains("GILVALDO TRINDADE NOGUEIRA")) {
        conta = "916";
        contaMovimento = "916";
    }
    if (nomePortador.contains("GLEICIANE FERREIRA MAIA")) {
        conta = "27430";
        contaMovimento = "27430";
    }
    if (nomePortador.contains("IDENILDE ANDRADE MACHADO")) {
        conta = "26310";
        contaMovimento = "26310";
    }
    if (nomePortador.contains("IRACY CAMPOS SOARES")) {
        conta = "2350";
        contaMovimento = "2350";
    }
    if (nomePortador.contains("JOAO BATISTA BORGES")) {
        conta = "946";
        contaMovimento = "946";
    }
    if (nomePortador.contains("LEONILDO LOPES SANTANA")) {
        conta = "28304";
        contaMovimento = "28304";
    }
    if (nomePortador.contains("LORIEN DALPRA MAZER")) {
        conta = "27391";
        contaMovimento = "27391";
    }
    if (nomePortador.contains("MARIA CREUSA PEREIRA")) {
        conta = "1876";
        contaMovimento = "1876";
    }
    if (nomePortador.contains("MILTON ADRIANO ROSSI")) {
        conta = "2682";
        contaMovimento = "2682";
    }
    if (nomePortador.contains("MOGNO MADEIRAS LTDA-ME")) {
        conta = "969";
        contaMovimento = "969";
    }
    if (nomePortador.contains("MURILLO HENRIQUE CALDEIRA")) {
        conta = "1040";
        contaMovimento = "1040";
    }
    if (nomePortador.contains("NAHARA SCHEIBEL GOMES")) {
        conta = "953";
        contaMovimento = "953";
    }
    if (nomePortador.contains("NATIELI ROSA XAVIER")) {
        conta = "920";
        contaMovimento = "920";
    }
    if (nomePortador.contains("OLEVINO ANTONIO MARIANO")) {
        conta = "2248";
        contaMovimento = "2248";
    }
    if (nomePortador.contains("PEDRO PAULO ANDRADE")) {
        conta = "2313";
        contaMovimento = "2313";
    }
    if (nomePortador.contains("ROBERTO CARLOS RAMOS")) {
        conta = "1757";
        contaMovimento = "1757";
    }
    if (nomePortador.contains("ROBERTO TONELLI JUNIOR")) {
        conta = "2067";
        contaMovimento = "2067";
    }
    if (nomePortador.contains("ROGERIO DAMIRO COSTA")) {
        conta = "2695";
        contaMovimento = "2695";
    }
    if (nomePortador.contains("ROSINEIA PEREIRA LIMA")) {
        conta = "962";
        contaMovimento = "962";
    }
    if (nomePortador.contains("ZILDA PEREIRA CALDEIRA")) {
        conta = "26417";
        contaMovimento = "26417";
    }
    if (nomePortador.contains("APARECIDO ARROIO CANABASSE")) {
        conta = "1814";
        contaMovimento = "1814";
    }
    if (nomePortador.contains("CLAUDEMIR CORREIA RIBAS")) {
        conta = "27405";
        contaMovimento = "27405";
    }
    if (nomePortador.contains("GUILHERME FERREIRA COSTA")) {
        conta = "28649";
        contaMovimento = "28649";
    }
    if (nomePortador.contains("JUCEIA VENTURIM GABURRO")) {
        conta = "2340";
        contaMovimento = "2340";
    }
    if (nomePortador.contains("LIAMAR MONTEIRO CASSIANO")) {
        conta = "26174";
        contaMovimento = "26174";
    }
    if (nomePortador.contains("PEDRO HENRIQUE ARROIO")) {
        conta = "1903";
        contaMovimento = "1903";
    }
    if (nomePortador.contains("ALCIONE PEREIRA FIALHO")) {
        conta = "2022";
        contaMovimento = "2022";
    }
    if (nomePortador.contains("ANA PAULA VERONA")) {
        conta = "2120";
        contaMovimento = "2120";
    }
    if (nomePortador.contains("DAIMI LABANINO NOA")) {
        conta = "27502";
        contaMovimento = "27502";
    }
    if (nomePortador.contains("FERNANDA MAIRA ZANDONA")) {
        conta = "27731";
        contaMovimento = "27731";
    }
    if (nomePortador.contains("LEANDRO CRUZ PINHEIRO")) {
        conta = "1040";
        contaMovimento = "1040";
    }
    if (nomePortador.contains("LEONILDO LOPES SANTAN")) {
        conta = "28304";
        contaMovimento = "28304";
    }
    if (nomePortador.contains("RANIEL NASCIMENTO PEREIRA")) {
        conta = "27723";
        contaMovimento = "27723";
    }
    if (nomePortador.contains("ALEX GOMES AMO")) {
        conta = "1560";
        contaMovimento = "1560";
    }
    if (nomePortador.contains("SICREDI")) {
        conta = "C?IGO";
        contaMovimento = "C?IGO";
    }
    if (nomePortador.contains("OTT_OUD__ID675006_SICREDI RECEBIMENTOS 01-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("OTT_OUD__ID675021_SICREDI RECEBIMENTOS 01-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("OTT_OUD__ID675821_SICREDI RECEBIMENTOS 01-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("OTT_OUD__ID689405_SICREDI RECEBIMENTOS 06-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("GOLBERI DUTRA RIBEIRO")) {
        conta = "977";
        contaMovimento = "977";
    }
    if (nomePortador.contains("LEONILSON LOPES SANTANA")) {
        conta = "28304";
        contaMovimento = "28304";
    }
    if (nomePortador.contains("OTT_OUD__ID691176_SICREDI RECEBIMENTOS 06-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("OTT_OUD__ID691259_SICREDI RECEBIMENTOS 06-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("OTT_OUD__ID691633_SICREDI RECEBIMENTOS 06-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("OTT_OUD__ID692434_SICREDI RECEBIMENTOS 07-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("OTT_OUD__ID692734_SICREDI RECEBIMENTO 08-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("HERIBERT MAURICIO BARRETO")) {
        conta = "26204";
        contaMovimento = "26204";
    }
    if (nomePortador.contains("NANCY FARIAS RIBEIRO")) {
        conta = "27421";
        contaMovimento = "27421";
    }
    if (nomePortador.contains("YANIS SOARES FREITAS")) {
        conta = "2111";
        contaMovimento = "2111";
    }
    if (nomePortador.contains("OTT_OUD__ID693025_SICREDI RECEBIMENTO 09-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("MARIA DIVINA MOREIRA")) {
        conta = "1779";
        contaMovimento = "1779";
    }
    if (nomePortador.contains("ADAILSON KRUGER DA SILVA")) {
        conta = "27553";
        contaMovimento = "27553";
    }
    if (nomePortador.contains("ALZENIRA MARIA DA SILVA")) {
        conta = "26387";
        contaMovimento = "26387";
    }
    if (nomePortador.contains("CARLA GOMES BECHARA TEIXEIRA")) {
        conta = "1714";
        contaMovimento = "1714";
    }
    if (nomePortador.contains("DOMINGO FONSECA DE OLIVEIRA")) {
        conta = "27626";
        contaMovimento = "27626";
    }
    if (nomePortador.contains("EDNA MARIA COSTA VEADO")) {
        conta = "1411";
        contaMovimento = "1411";
    }
    if (nomePortador.contains("EDUARDO BEZERRA DA SILVA")) {
        conta = "1633";
        contaMovimento = "1633";
    }
    if (nomePortador.contains("EULA TAVARES DA SILVA")) {
        conta = "2661";
        contaMovimento = "2661";
    }
    if (nomePortador.contains("EVANDRO DE AMORIM MARANGON")) {
        conta = "27600";
        contaMovimento = "27600";
    }
    if (nomePortador.contains("GRACIELI REGINA SHNEIDER LANDGRAF")) {
        conta = "2670";
        contaMovimento = "2670";
    }
    if (nomePortador.contains("IGREJA DO EVANGELHO QUADRANGULAR")) {
        conta = "904";
        contaMovimento = "904";
    }
    if (nomePortador.contains("ILDA PAULA DA SILVA")) {
        conta = "2675";
        contaMovimento = "2675";
    }
    if (nomePortador.contains("JOAO NETO DA SILVA")) {
        conta = "1615";
        contaMovimento = "1615";
    }
    if (nomePortador.contains("JOSE ANTONIO RIBEIRO FERREIRA")) {
        conta = "2764";
        contaMovimento = "2764";
    }
    if (nomePortador.contains("JOSINEIDE ROSA DOS SANTOS")) {
        conta = "938";
        contaMovimento = "938";
    }
    if (nomePortador.contains("JULIANA RODRIGUES DE LIMA")) {
        conta = "1040";
        contaMovimento = "1040";
    }
    if (nomePortador.contains("LEANDRO DE AZEVEDO GENEROSO")) {
        conta = "27111";
        contaMovimento = "27111";
    }
    if (nomePortador.contains("LUIZ RODRIGO AMARILLA ANASTACIO")) {
        conta = "2852";
        contaMovimento = "2852";
    }
    if (nomePortador.contains("MAIDEL LESYANIS BENITEZ FONSECA")) {
        conta = "2234";
        contaMovimento = "2234";
    }
    if (nomePortador.contains("MARCIANO MARQUES DA SILVA")) {
        conta = "26190";
        contaMovimento = "26190";
    }
    if (nomePortador.contains("MARCOS DE ASSIS CUNHA")) {
        conta = "1732";
        contaMovimento = "1732";
    }
    if (nomePortador.contains("MARIA ROSIVALDA DA SILVA")) {
        conta = "26301";
        contaMovimento = "26301";
    }
    if (nomePortador.contains("MAYSA RIBEIRO DE SOUSA")) {
        conta = "1882";
        contaMovimento = "1882";
    }
    if (nomePortador.contains("NILTON ELES MOREIRA DIAS")) {
        conta = "2763";
        contaMovimento = "2763";
    }
    if (nomePortador.contains("PATRICIA RODRIGUES DE MELLO")) {
        conta = "934";
        contaMovimento = "934";
    }
    if (nomePortador.contains("POLYANA MOREIRA DE ALMEIDA")) {
        conta = "26182";
        contaMovimento = "26182";
    }
    if (nomePortador.contains("RAQUEL DE OLIVEIRA CANTUARIA")) {
        conta = "27200";
        contaMovimento = "27200";
    }
    if (nomePortador.contains("REBERTI WILIAN NOGUEIRA BOSCARI")) {
        conta = "1545";
        contaMovimento = "1545";
    }
    if (nomePortador.contains("RONNIE PETERSON PIRES STANOGA")) {
        conta = "2697";
        contaMovimento = "2697";
    }
    if (nomePortador.contains("ROSANE FATIMA DAL MAGRO")) {
        conta = "902";
        contaMovimento = "902";
    }
    if (nomePortador.contains("SILVANIRA GOMES DA SILVA")) {
        conta = "1536";
        contaMovimento = "1536";
    }
    if (nomePortador.contains("SIRLEI DE FATIMA MENDONCA")) {
        conta = "987";
        contaMovimento = "987";
    }
    if (nomePortador.contains("SONIA CRISTINA DELAI TONELLI")) {
        conta = "1850";
        contaMovimento = "1850";
    }
    if (nomePortador.contains("TALIA FARIAS DE BRITO")) {
        conta = "27618";
        contaMovimento = "27618";
    }
    if (nomePortador.contains("ZENITA DE CAMPOS GATO")) {
        conta = "26166";
        contaMovimento = "26166";
    }
    if (nomePortador.contains("ALEX JUNIOR DO NASCIMENTO")) {
        conta = "1491";
        contaMovimento = "1491";
    }
    if (nomePortador.contains("ALINE SANCHES DA SILVA")) {
        conta = "27570";
        contaMovimento = "27570";
    }
    if (nomePortador.contains("JACKSON DOS SANTOS LEAL")) {
        conta = "2140";
        contaMovimento = "2140";
    }
    if (nomePortador.contains("JHENNIFER EDYELLEN BARRA DICHETI")) {
        conta = "2040";
        contaMovimento = "2040";
    }
    if (nomePortador.contains("LUCIA WANNIELY FELIX FERREIRA")) {
        conta = "26263";
        contaMovimento = "26263";
    }
    if (nomePortador.contains("ROBERTO  APARECIDO DIAS")) {
        conta = "1477";
        contaMovimento = "1477";
    }
    if (nomePortador.contains("ROSIANE SOUSA DE ANDRADE")) {
        conta = "1829";
        contaMovimento = "1829";
    }
    if (nomePortador.contains("SINEIDE GONCALVES DOS SANTOS")) {
        conta = "2699";
        contaMovimento = "2699";
    }
    if (nomePortador.contains("WILLIAN MACIMO DA FONSECA")) {
        conta = "1541";
        contaMovimento = "1541";
    }
    if (nomePortador.contains("LAIR BARROS DE CARVALHO")) {
        conta = "2872";
        contaMovimento = "2872";
    }
    if (nomePortador.contains("VERA OLIVEIRA DOS ANJOS")) {
        conta = "2880";
        contaMovimento = "2880";
    }
    if (nomePortador.contains("ALIETHE DA SILVA OLIVEIRA")) {
        conta = "27537";
        contaMovimento = "27537";
    }
    if (nomePortador.contains("ELIZEU BEZERRA DA SILVA")) {
        conta = "1700";
        contaMovimento = "1700";
    }
    if (nomePortador.contains("IZABELA CRISTINA CORDENNUZZI ORTIZ")) {
        conta = "26212";
        contaMovimento = "26212";
    }
    if (nomePortador.contains("MARIA CLEMENCIA PACHECO PINHEIRO")) {
        conta = "28312";
        contaMovimento = "28312";
    }
    if (nomePortador.contains("RENAN QUINTANA DE LIMA")) {
        conta = "1806";
        contaMovimento = "1806";
    }
    if (nomePortador.contains("THIAGO SANTOS DA CONCEICAO")) {
        conta = "1790";
        contaMovimento = "1790";
    }
    if (nomePortador.contains("AIRTON MOREIRA DA SILVA")) {
        conta = "27561";
        contaMovimento = "27561";
    }
    if (nomePortador.contains("MARCOS DE SOUZA DOMINGUES")) {
        conta = "28821";
        contaMovimento = "28821";
    }
    if (nomePortador.contains("VALDEMIR DIAS OLIVEIRA LOPES")) {
        conta = "2701";
        contaMovimento = "2701";
    }
    if (nomePortador.contains("ADRIANA DE JESUS DA SILVA")) {
        conta = "26395";
        contaMovimento = "26395";
    }
    if (nomePortador.contains("DOGLAS ILARIO BASTIANI PINTO PAZ")) {
        conta = "2335";
        contaMovimento = "2335";
    }
    if (nomePortador.contains("ELIGIANE CRISTINA MOREIRA DA COSTA")) {
        conta = "1456";
        contaMovimento = "1456";
    }
    if (nomePortador.contains("FRANCISCA  APARECIDA MENDES FERREIRA")) {
        conta = "26247";
        contaMovimento = "26247";
    }
    if (nomePortador.contains("JUNIO ESLLEI MARTINS DE OLIVEIRA")) {
        conta = "28762";
        contaMovimento = "28762";
    }
    if (nomePortador.contains("MARIA DE SAO JOSE FERREIRA")) {
        conta = "2306";
        contaMovimento = "2306";
    }
    if (nomePortador.contains("MARIA GENILDA  ALVES BERNARDO")) {
        conta = "2246";
        contaMovimento = "2246";
    }
    if (nomePortador.contains("MARIA NAZILDA LIMA DOS SANTOS")) {
        conta = "2679";
        contaMovimento = "2679";
    }
    if (nomePortador.contains("MONICA GRACIELA  ALVES BEZERRA")) {
        conta = "2017";
        contaMovimento = "2017";
    }
    if (nomePortador.contains("ROCKENBACH E SILVEIRA LTDA- EPP")) {
        conta = "1430";
        contaMovimento = "1430";
    }
    if (nomePortador.contains("WILLIAN DE SOUZA  ALMEIDA")) {
        conta = "2317";
        contaMovimento = "2317";
    }
    if (nomePortador.contains("JOERTA DE  SOUSA LIMA")) {
        conta = "984";
        contaMovimento = "984";
    }
    if (nomePortador.contains("KEYTYANE KESLEN DA SILVA MARTINS")) {
        conta = "1822";
        contaMovimento = "1822";
    }
    if (nomePortador.contains("RAIMUNDO NONATO ALVES DE SOUSA")) {
        conta = "28657";
        contaMovimento = "28657";
    }
    if (nomePortador.contains("ALINE FONSECA DA COSTA PEREIRA")) {
        conta = "1349";
        contaMovimento = "1349";
    }
    if (nomePortador.contains("ANTONIO DA CUNHA MACHADO NETO")) {
        conta = "1680";
        contaMovimento = "1680";
    }
    if (nomePortador.contains("KAIO ANDRADE DE CARVALHO SOUZA")) {
        conta = "2357";
        contaMovimento = "2357";
    }
    if (nomePortador.contains("ANTONIO ALVES DA COSTA NETO")) {
        conta = "26590";
        contaMovimento = "26590";
    }
    if (nomePortador.contains("SARA CRISTINA PRIEGO DOS REIS")) {
        conta = "975";
        contaMovimento = "975";
    }
    if (nomePortador.contains("LUCELIZIA  ALVES DE OLIVEIRA")) {
        conta = "1728";
        contaMovimento = "1728";
    }
    if (nomePortador.contains("ELISVANI REGINA MOREIRA  DA COSTA")) {
        conta = "1463";
        contaMovimento = "1463";
    }
    if (nomePortador.contains("GABRIELA  LIMA DE JESUS FERNANDES")) {
        conta = "26662";
        contaMovimento = "26662";
    }
    if (nomePortador.contains("L. E. L DIAS CONSTRUTORA LTDA")) {
        conta = "28185";
        contaMovimento = "28185";
    }
    if (nomePortador.contains("GREGORIA DE JESUS MINEIRO PACHECO OLIVEIRA")) {
        conta = "918";
        contaMovimento = "918";
    }
    if (nomePortador.contains("CARLA CRISTINA SOARES MORAIS DE FARIAS")) {
        conta = "1495";
        contaMovimento = "1495";
    }
    if (nomePortador.contains("RONALDO VERISSIMO BONFIM")) {
        conta = "1661";
        contaMovimento = "1661";
    }
    if (nomePortador.contains("OTT_OUD__ID691341_SICREDI RECEBIMENTOS 06-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("ALISSON RONDINELI SANCHES DA SILVA")) {
        conta = "27588";
        contaMovimento = "27588";
    }
    if (nomePortador.contains("OTT_OUD__ID693828_SICREDI RECEBIMENTO 10-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("ANANDA KESSIA  ALVES DA SILVA")) {
        conta = "2657";
        contaMovimento = "2657";
    }
    if (nomePortador.contains("ANA PAULA SILVA GOMES")) {
        conta = "2274";
        contaMovimento = "2274";
    }
    if (nomePortador.contains("DANIELE NERES PEREIRA")) {
        conta = "2293";
        contaMovimento = "2293";
    }
    if (nomePortador.contains("IONARA CONTI")) {
        conta = "28843";
        contaMovimento = "28843";
    }
    if (nomePortador.contains("JUCYCARLA PEREIRA OLIVEIRA")) {
        conta = "27529";
        contaMovimento = "27529";
    }
    if (nomePortador.contains("NAYARA LIMA MARQUES CALDEIRA")) {
        conta = "26409";
        contaMovimento = "26409";
    }
    if (nomePortador.contains("WILLIAN DALLAGNOL REIS")) {
        conta = "9881";
        contaMovimento = "9881";
    }
    if (nomePortador.contains("OTT_OUD__ID694651_SICREDI RECEBIMENTOS 11-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("OTT_OUD__ID694748_SICREDI RECEBIMENTO 12-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (nomePortador.contains("OTT_OUD__ID694786_OTTIMIZZA_SICREDI RECEBIMENTOS 06-2023.XLSX")) {
        conta = "61";
        contaMovimento = "61";
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEXANDRE") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKEN") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HELLER")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIOGO") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MISASSI")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LILIANE") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VOLKEN") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HELLER")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCIO") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZ") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WACKEKOVISKI")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TATIANA") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HELLER")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANA") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULA") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEMARCHI")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRUNO") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MELO") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLIVEIRA")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAERCIO") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MUNIZ")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LESLIE") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HOFFMANN") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGUES")) {
        conta = "1040";
        return conta;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).equals("") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTIANE") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CALDEIRA") &&
            StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOAVENTURA")) {
        conta = "1040";
        return conta;
    }
    return conta;
}
public String getContaPortador2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros2(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros3(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros4(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros5(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros6(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaDesconto(String contaDesconto, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaDesconto;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMulta(String contaMulta, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("cntaJuros");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMulta;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public boolean getTratarComoExtrato(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoExtrato = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoExtrato;
}
public boolean getTratarComoDesconto(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoDesconto = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoDesconto;
}
public boolean getTratarComoJuros(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoJuros = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoJuros;
}
public boolean getTratarLinhaIgnorar(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarIgnoraLinha = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarIgnoraLinha;
}
public String getTratarValorAlternativo(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoAlternativo  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoAlternativo;
}
public String getTratarComoDiv(String documento, String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoDiv  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoDiv;
}
public String getCodigoClassificacao(String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String documento   = objHistorico.optString("documento");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoClassificacao  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGRA CLASSIFICACAO CLIENTES")) {
        retornoClassificacao = "1102";
    }
    return retornoClassificacao;
}
public String getModificaData(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoData  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoData;
}
public String getCampoFiscal(String parametro, JSONObject objHistorico) {
    String especie         = objHistorico.optString("especie");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String returnaCodigo  = "";

    return returnaCodigo.trim();
}
public int getContadorCabecalho(int contador, String line) {
    return contador;
}
public double getValorPrincipal(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorPrincipal = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorPrincipal;
}
public String getHistorico(String conta, String histParam, String tipoLancamento, String nomeOrigem, String documento,
                           String nomePortador, String complemento01, String complemento02, String complemento03,
                           String nomeArquivo, String codCentroCusto) {
    String historico = "";
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("24872-INATIVO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("24872-INATIVO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HISTORICOPADRAO"))  historico = "BAIXA" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZ RODRIGO AMARILLA ANASTACIO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEDRO HENRIQUE ARROIO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA GENILDA ALVES BERNARDO"))  historico = "pg. despesa ref." + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FELIPE NERI MOURA"))  historico = "" + " " + mesAnoAtual + " " + "" + " " + nomePortador + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "  CodigoHistorico:389";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCIANO MARQUES DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + "" + " " + nomePortador + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "  CodigoHistorico:389";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LESLIE HOFFMANN RODRIGUES"))  historico = "" + " " + mesAnoAtual + " " + "" + " " + nomePortador + " " + "" + " " + complemento01 + " " + ""  + " " + "" + "  CodigoHistorico:389";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALDRIENE SANTOS PIMENTA"))  historico = "SALARIO" + " " + mesAnoAtual + " " + "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:246";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APARECIDO ARROIO CANABASSE"))  historico = "SALARIO" + " " + mesAnoAtual + " " + "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:246";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOMINGOS MOURAO BARROS"))  historico = "SALARIO" + " " + mesAnoAtual + " " + "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:246";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JURACI MACHADO"))  historico = "SALARIO" + " " + mesAnoAtual + " " + "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:246";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLEIDE PEREIRA DOMINGUES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:VALOR REF. A  IOF";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PATRICIA RODRIGUES DE MELLO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRACY CAMPOS SOARES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDIVALDO KIHARA ANTEVERE"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEDRO PAULO ANDRADE"))  historico = "" + " " + mesAnoAtual + " " + "" + " " + documento + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:711";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IZABELA CRISTINA CORDENNUZZI ORTIZ"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:36";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA DIVINA MOREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + " " + complemento04 + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAIMI LABANINO NOA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + " " + complemento04 + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO CARLOS RAMOS"))  historico = "COMPRA DE" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:195";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRENDA VITORIA FOGACA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMILA BRITO GONCALVES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMILA MARTA PETRI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESSICA GOMES MARTINS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADRIANA MANFROI MENDES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADAILSON KRUGER DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADEMIR VARGAS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOMINGO FONSECA DE OLIVEIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOMINGOS MOURAO BARROS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDNA MARIA COSTA VEADO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDUARDO BEZERRA DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDUARDO CESAR CRISTANI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELIGIANE CRISTINA MOREIRA DA COSTA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELOIZA PEREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELISANGELA DE AZEVEDO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EULA TAVARES DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EVANDRO BARTH"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EVANDRO DE AMORIM MARANGON"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRACIELI REGINA SHNEIDER LANDGRAF"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IDENILDE ANDRADE MACHADO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EZEQUIEL FELISBINO PEREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRANCISCA APARECIDA MENDES FERREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILVALDO TRINDADE NOGUEIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GLEICIANE FERREIRA MAIA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSE ANTONIO RIBEIRO FERREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IGREJA DO EVANGELHO QUADRANGULAR"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ILDA PAULA DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRACY CAMPOS SOARES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JAISON ZAMINHAN"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOAO NETO DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JULIANA RODRIGUES DE LIMA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JURACI MACHADO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUNIO ESLLEI MARTINS DE OLIVEIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZ RODRIGO AMARILLA ANASTACIO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAIDEL LESYANIS BENITEZ FONSECA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEONILDO LOPES SANTANA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAERCIO FERREIRA MUNIZ"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEANDRO DE AZEVEDO GENEROSO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LORIEN DALPRA MAZER"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCOS DE ASSIS CUNHA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA CREUSA PEREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA NAZILDA LIMA DOS SANTOS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MILTON ADRIANO ROSSI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PATRICIA RODRIGUES DE MELLO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MONICA GRACIELA ALVES BEZERRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MURILLO HENRIQUE CALDEIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NAHARA SCHEIBEL GOMES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NATIELI ROSA XAVIER"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NILTON ELES MOREIRA DIAS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLEVINO ANTONIO MARIANO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POLYANA MOREIRA DE ALMEIDA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAQUEL DE OLIVEIRA CANTUARIA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REBERTI WILIAN NOGUEIRA BOSCARI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO TONELLI JUNIOR"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGO MARCHESINI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROGERIO DAMIRO COSTA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONNIE PETERSON PIRES STANOGA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SONIA CRISTINA DELAI TONELLI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILLIAN DE SOUZA ALMEIDA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSA KIHARA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVANIRA GOMES DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSANE FATIMA DAL MAGRO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSINEIA PEREIRA LIMA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TALIA FARIAS DE BRITO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VANDERLEI ODERDENGE"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZILDA PEREIRA CALDEIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLA GOMES BECHARA TEIXEIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARLENE DE LIMA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIEGO BACARIN GARCIA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIOGGO MORAIS BORGES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADRIANA DE JESUS DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALDRIENE SANTOS PIMENTA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALZENIRA MARIA DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO REIS SANCHES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOAO BATISTA BORGES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSINEIDE ROSA DOS SANTOS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA ROSIVALDA DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA DE SAO JOSE FERREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAYSA RIBEIRO DE SOUSA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SIRLEI DE FATIMA MENDONCA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VANESSA BANASZEWSKI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZENITA DE CAMPOS GATO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEX JUNIOR DO NASCIMENTO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APARECIDO ARROIO CANABASSE"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALINE SANCHES DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLAUDEMIR CORREIA RIBAS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELISVANI REGINA MOREIRA DA COSTA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMIKO SATO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDA SEBEN"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUILHERME FERREIRA COSTA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSIANE SOUSA DE ANDRADE"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JACKSON DOS SANTOS LEAL"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JHENNIFER EDYELLEN BARRA DICHETI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOERTA DE SOUSA LIMA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUCEIA VENTURIM GABURRO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIA WANNIELY FELIX FERREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEDRO HENRIQUE ARROIO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO APARECIDO DIAS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILLIAN MACIMO DA FONSECA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IVONETE SORDI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIAMAR MONTEIRO CASSIANO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SINEIDE GONCALVES DOS SANTOS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDA MAIRA ZANDONA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALCIONE PEREIRA FIALHO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALINE FONSECA DA COSTA PEREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANA PAULA VERONA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RANIEL NASCIMENTO PEREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEANDRO CRUZ PINHEIRO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEONILDO LOPES SANTAN"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONALDO VERISSIMO BONFIM"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEX GOMES AMO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAIR BARROS DE CARVALHO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NILTON ELES MOREIRA DIAS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLEVINO ANTONIO MARIANO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROGERIO DAMIRO COSTA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONALDO VERISSIMO BONFIM"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSANE FATIMA DAL MAGRO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSINEIA PEREIRA LIMA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SIRLEI DE FATIMA MENDONCA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SONIA CRISTINA DELAI TONELLI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELOIZA PEREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLAUDEMIR CORREIA RIBAS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELISANGELA DE AZEVEDO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EVANDRO BARTH"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRANCISCA APARECIDA MENDES FERREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARLENE DE LIMA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESSICA GOMES MARTINS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIOGGO MORAIS BORGES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO CARLOS RAMOS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO TONELLI JUNIOR"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGO MARCHESINI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONNIE PETERSON PIRES STANOGA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZENITA DE CAMPOS GATO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRACIELI REGINA SHNEIDER LANDGRAF"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IDENILDE ANDRADE MACHADO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOAO BATISTA BORGES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POLYANA MOREIRA DE ALMEIDA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO APARECIDO DIAS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TALIA FARIAS DE BRITO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALDEMIR DIAS OLIVEIRA LOPES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VANESSA BANASZEWSKI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAIMUNDO NONATO ALVES DE SOUSA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REBERTI WILIAN NOGUEIRA BOSCARI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA CREUSA PEREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA GENILDA ALVES BERNARDO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MONICA GRACIELA ALVES BEZERRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NAHARA SCHEIBEL GOMES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NATIELI ROSA XAVIER"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LESLIE HOFFMANN RODRIGUES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIAMAR MONTEIRO CASSIANO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCOS DE ASSIS CUNHA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMILA MARTA PETRI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLA GOMES BECHARA TEIXEIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FELIPE NERI MOURA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEONILDO LOPES SANTANA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA ROSIVALDA DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAYSA RIBEIRO DE SOUSA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MILTON ADRIANO ROSSI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADEMIR VARGAS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEX GOMES AMO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALINE SANCHES DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDNA MARIA COSTA VEADO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDUARDO BEZERRA DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIOVANA MARCONDES CALDEIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEX JUNIOR DO NASCIMENTO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANA PAULA VERONA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALZENIRA MARIA DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRENDA VITORIA FOGACA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMILA BRITO GONCALVES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GLEICIANE FERREIRA MAIA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOLBERI DUTRA RIBEIRO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ILDA PAULA DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JAISON ZAMINHAN"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LORIEN DALPRA MAZER"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCIANO MARQUES DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOAO NETO DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOERTA DE SOUSA LIMA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSE ANTONIO RIBEIRO FERREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSINEIDE ROSA DOS SANTOS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUCEIA VENTURIM GABURRO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JULIANA RODRIGUES DE LIMA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAERCIO FERREIRA MUNIZ"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEANDRO CRUZ PINHEIRO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEANDRO DE AZEVEDO GENEROSO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEONILSON LOPES SANTANA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOLBERI DUTRA RIBEIRO"))  historico = "" + " " + mesAnoAnterior + " " + "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VERA OLIVEIRA DOS ANJOS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LESLIE HOFFMANN RODRIGUES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIETHE DA SILVA OLIVEIRA"))  historico = "" + " " + nomePortador + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELIZEU BEZERRA DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUSTAVO ARROIO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NANCY FARIAS RIBEIRO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENAN QUINTANA DE LIMA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIVALDO SANTOS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HERIBERT MAURICIO BARRETO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA CLEMENCIA PACHECO PINHEIRO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("YANIS SOARES FREITAS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("THIAGO SANTOS DA CONCEICAO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AIRTON MOREIRA DA SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA DIVINA MOREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCOS DE SOUZA DOMINGUES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALDEMIR DIAS OLIVEIRA LOPES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTIANE CALDEIRA BOAVENTURA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCELIZIA ALVES DE OLIVEIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IONARA CONTI"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUCYCARLA PEREIRA OLIVEIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILLIAN DALLAGNOL REIS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANA PAULA SILVA GOMES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DANIELE NERES PEREIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IGREJA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EVANGELHO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:VALOR REF.  A JUROS";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROCKENBACH") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVEIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOGNO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIRAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROCKENBACH") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVEIRA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("L") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EVANDRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORIM"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOGNO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIRAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("L") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALISSON") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONDINELI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANCHES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NAYARA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARQUES"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAIMUNDO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NONATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE"))  historico = "PAGAMENTO REF. JUROS E COMISSOES BANCARIAS" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANANDA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KESSIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA"))  historico = "PGTO" + " " + mesAnoAtual + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "" + "  CodigoHistorico:350";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOGLAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ILARIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BASTIANI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PINTO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GABRIELA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JESUS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KEYTYANE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KESLEN") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALISSON") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONDINELI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANCHES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CUNHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MACHADO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KAIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRADE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARVALHO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELIGIANE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTINA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOREIRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GREGORIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JESUS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINEIRO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSE"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOGLAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ILARIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BASTIANI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PINTO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KEYTYANE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KESLEN") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SARA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTINA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRIEGO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GREGORIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JESUS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINEIRO"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTINA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOARES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MORAIS"))  historico = "" + " " + mesAnoAtual + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento05).equals(""))  historico = "RECEBIMENTO"  + " " + "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + "INVERTECONTA" + "";


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra3(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra4(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getRegraHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("24872-INATIVO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 24872-INATIVO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("24872-INATIVO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 24872-INATIVO, HISTORICO = Mes-Ano Atual";

    if (!StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HISTORICOPADRAO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente nao contem HISTORICOPADRAO, HISTORICO = BAIXA Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZ RODRIGO AMARILLA ANASTACIO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem LUIZ RODRIGO AMARILLA ANASTACIO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEDRO HENRIQUE ARROIO"))  historico = "HISTORICO POR REGRA = Quando Fornecedor/Cliente contem PEDRO HENRIQUE ARROIO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA GENILDA ALVES BERNARDO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MARIA GENILDA ALVES BERNARDO, HISTORICO = pg. despesa ref. Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FELIPE NERI MOURA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem FELIPE NERI MOURA, HISTORICO = Mes-Ano Atual Portador Complemento (01)";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCIANO MARQUES DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MARCIANO MARQUES DA SILVA, HISTORICO = Mes-Ano Atual Portador Complemento (01)";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LESLIE HOFFMANN RODRIGUES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LESLIE HOFFMANN RODRIGUES, HISTORICO = Mes-Ano Atual Portador Complemento (01)";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALDRIENE SANTOS PIMENTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ALDRIENE SANTOS PIMENTA, HISTORICO = SALARIO Mes-Ano Atual Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APARECIDO ARROIO CANABASSE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem APARECIDO ARROIO CANABASSE, HISTORICO = SALARIO Mes-Ano Atual Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOMINGOS MOURAO BARROS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem DOMINGOS MOURAO BARROS, HISTORICO = SALARIO Mes-Ano Atual Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JURACI MACHADO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem JURACI MACHADO, HISTORICO = SALARIO Mes-Ano Atual Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLEIDE PEREIRA DOMINGUES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem CLEIDE PEREIRA DOMINGUES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PATRICIA RODRIGUES DE MELLO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem PATRICIA RODRIGUES DE MELLO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRACY CAMPOS SOARES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem IRACY CAMPOS SOARES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDIVALDO KIHARA ANTEVERE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem EDIVALDO KIHARA ANTEVERE, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEDRO PAULO ANDRADE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PEDRO PAULO ANDRADE, HISTORICO = Mes-Ano Atual Documento/NF";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IZABELA CRISTINA CORDENNUZZI ORTIZ"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem IZABELA CRISTINA CORDENNUZZI ORTIZ, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA DIVINA MOREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem MARIA DIVINA MOREIRA, HISTORICO = Mes-Ano Atual    Complemento (04)";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DAIMI LABANINO NOA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DAIMI LABANINO NOA, HISTORICO = Mes-Ano Atual    Complemento (04)";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO CARLOS RAMOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ROBERTO CARLOS RAMOS, HISTORICO = COMPRA DE Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRENDA VITORIA FOGACA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem BRENDA VITORIA FOGACA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMILA BRITO GONCALVES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CAMILA BRITO GONCALVES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMILA MARTA PETRI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CAMILA MARTA PETRI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESSICA GOMES MARTINS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DIESSICA GOMES MARTINS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADRIANA MANFROI MENDES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ADRIANA MANFROI MENDES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADAILSON KRUGER DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ADAILSON KRUGER DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADEMIR VARGAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ADEMIR VARGAS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOMINGO FONSECA DE OLIVEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DOMINGO FONSECA DE OLIVEIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOMINGOS MOURAO BARROS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DOMINGOS MOURAO BARROS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDNA MARIA COSTA VEADO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem EDNA MARIA COSTA VEADO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDUARDO BEZERRA DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem EDUARDO BEZERRA DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDUARDO CESAR CRISTANI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem EDUARDO CESAR CRISTANI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELIGIANE CRISTINA MOREIRA DA COSTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ELIGIANE CRISTINA MOREIRA DA COSTA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELOIZA PEREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ELOIZA PEREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELISANGELA DE AZEVEDO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ELISANGELA DE AZEVEDO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EULA TAVARES DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem EULA TAVARES DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EVANDRO BARTH"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem EVANDRO BARTH, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EVANDRO DE AMORIM MARANGON"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem EVANDRO DE AMORIM MARANGON, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRACIELI REGINA SHNEIDER LANDGRAF"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem GRACIELI REGINA SHNEIDER LANDGRAF, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IDENILDE ANDRADE MACHADO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem IDENILDE ANDRADE MACHADO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EZEQUIEL FELISBINO PEREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem EZEQUIEL FELISBINO PEREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRANCISCA APARECIDA MENDES FERREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem FRANCISCA APARECIDA MENDES FERREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GILVALDO TRINDADE NOGUEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem GILVALDO TRINDADE NOGUEIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GLEICIANE FERREIRA MAIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem GLEICIANE FERREIRA MAIA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSE ANTONIO RIBEIRO FERREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem JOSE ANTONIO RIBEIRO FERREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IGREJA DO EVANGELHO QUADRANGULAR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem IGREJA DO EVANGELHO QUADRANGULAR, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ILDA PAULA DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ILDA PAULA DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IRACY CAMPOS SOARES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem IRACY CAMPOS SOARES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JAISON ZAMINHAN"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem JAISON ZAMINHAN, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOAO NETO DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem JOAO NETO DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JULIANA RODRIGUES DE LIMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem JULIANA RODRIGUES DE LIMA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JURACI MACHADO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem JURACI MACHADO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUNIO ESLLEI MARTINS DE OLIVEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem JUNIO ESLLEI MARTINS DE OLIVEIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUIZ RODRIGO AMARILLA ANASTACIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LUIZ RODRIGO AMARILLA ANASTACIO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAIDEL LESYANIS BENITEZ FONSECA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MAIDEL LESYANIS BENITEZ FONSECA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEONILDO LOPES SANTANA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LEONILDO LOPES SANTANA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAERCIO FERREIRA MUNIZ"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LAERCIO FERREIRA MUNIZ, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEANDRO DE AZEVEDO GENEROSO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LEANDRO DE AZEVEDO GENEROSO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LORIEN DALPRA MAZER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LORIEN DALPRA MAZER, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCOS DE ASSIS CUNHA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MARCOS DE ASSIS CUNHA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA CREUSA PEREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MARIA CREUSA PEREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA NAZILDA LIMA DOS SANTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MARIA NAZILDA LIMA DOS SANTOS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MILTON ADRIANO ROSSI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MILTON ADRIANO ROSSI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PATRICIA RODRIGUES DE MELLO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PATRICIA RODRIGUES DE MELLO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MONICA GRACIELA ALVES BEZERRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MONICA GRACIELA ALVES BEZERRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MURILLO HENRIQUE CALDEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MURILLO HENRIQUE CALDEIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NAHARA SCHEIBEL GOMES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem NAHARA SCHEIBEL GOMES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NATIELI ROSA XAVIER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem NATIELI ROSA XAVIER, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NILTON ELES MOREIRA DIAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem NILTON ELES MOREIRA DIAS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLEVINO ANTONIO MARIANO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem OLEVINO ANTONIO MARIANO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POLYANA MOREIRA DE ALMEIDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem POLYANA MOREIRA DE ALMEIDA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAQUEL DE OLIVEIRA CANTUARIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem RAQUEL DE OLIVEIRA CANTUARIA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REBERTI WILIAN NOGUEIRA BOSCARI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem REBERTI WILIAN NOGUEIRA BOSCARI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO TONELLI JUNIOR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ROBERTO TONELLI JUNIOR, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGO MARCHESINI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem RODRIGO MARCHESINI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROGERIO DAMIRO COSTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ROGERIO DAMIRO COSTA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONNIE PETERSON PIRES STANOGA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem RONNIE PETERSON PIRES STANOGA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SONIA CRISTINA DELAI TONELLI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SONIA CRISTINA DELAI TONELLI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILLIAN DE SOUZA ALMEIDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem WILLIAN DE SOUZA ALMEIDA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSA KIHARA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ROSA KIHARA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVANIRA GOMES DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SILVANIRA GOMES DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSANE FATIMA DAL MAGRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ROSANE FATIMA DAL MAGRO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSINEIA PEREIRA LIMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ROSINEIA PEREIRA LIMA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TALIA FARIAS DE BRITO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem TALIA FARIAS DE BRITO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VANDERLEI ODERDENGE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem VANDERLEI ODERDENGE, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZILDA PEREIRA CALDEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ZILDA PEREIRA CALDEIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLA GOMES BECHARA TEIXEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CARLA GOMES BECHARA TEIXEIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARLENE DE LIMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DARLENE DE LIMA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIEGO BACARIN GARCIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DIEGO BACARIN GARCIA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIOGGO MORAIS BORGES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DIOGGO MORAIS BORGES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADRIANA DE JESUS DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ADRIANA DE JESUS DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALDRIENE SANTOS PIMENTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALDRIENE SANTOS PIMENTA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALZENIRA MARIA DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALZENIRA MARIA DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO REIS SANCHES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ANTONIO REIS SANCHES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOAO BATISTA BORGES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem JOAO BATISTA BORGES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSINEIDE ROSA DOS SANTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem JOSINEIDE ROSA DOS SANTOS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA ROSIVALDA DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MARIA ROSIVALDA DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA DE SAO JOSE FERREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MARIA DE SAO JOSE FERREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAYSA RIBEIRO DE SOUSA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MAYSA RIBEIRO DE SOUSA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SIRLEI DE FATIMA MENDONCA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SIRLEI DE FATIMA MENDONCA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VANESSA BANASZEWSKI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem VANESSA BANASZEWSKI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZENITA DE CAMPOS GATO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ZENITA DE CAMPOS GATO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEX JUNIOR DO NASCIMENTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALEX JUNIOR DO NASCIMENTO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APARECIDO ARROIO CANABASSE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem APARECIDO ARROIO CANABASSE, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALINE SANCHES DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALINE SANCHES DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLAUDEMIR CORREIA RIBAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CLAUDEMIR CORREIA RIBAS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELISVANI REGINA MOREIRA DA COSTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ELISVANI REGINA MOREIRA DA COSTA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMIKO SATO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem EMIKO SATO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDA SEBEN"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem FERNANDA SEBEN, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUILHERME FERREIRA COSTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem GUILHERME FERREIRA COSTA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSIANE SOUSA DE ANDRADE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ROSIANE SOUSA DE ANDRADE, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JACKSON DOS SANTOS LEAL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem JACKSON DOS SANTOS LEAL, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JHENNIFER EDYELLEN BARRA DICHETI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem JHENNIFER EDYELLEN BARRA DICHETI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOERTA DE SOUSA LIMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem JOERTA DE SOUSA LIMA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUCEIA VENTURIM GABURRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem JUCEIA VENTURIM GABURRO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCIA WANNIELY FELIX FERREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LUCIA WANNIELY FELIX FERREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PEDRO HENRIQUE ARROIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem PEDRO HENRIQUE ARROIO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO APARECIDO DIAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ROBERTO APARECIDO DIAS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILLIAN MACIMO DA FONSECA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem WILLIAN MACIMO DA FONSECA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IVONETE SORDI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem IVONETE SORDI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIAMAR MONTEIRO CASSIANO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LIAMAR MONTEIRO CASSIANO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SINEIDE GONCALVES DOS SANTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SINEIDE GONCALVES DOS SANTOS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDA MAIRA ZANDONA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem FERNANDA MAIRA ZANDONA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALCIONE PEREIRA FIALHO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALCIONE PEREIRA FIALHO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALINE FONSECA DA COSTA PEREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALINE FONSECA DA COSTA PEREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANA PAULA VERONA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ANA PAULA VERONA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RANIEL NASCIMENTO PEREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem RANIEL NASCIMENTO PEREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEANDRO CRUZ PINHEIRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LEANDRO CRUZ PINHEIRO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEONILDO LOPES SANTAN"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LEONILDO LOPES SANTAN, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONALDO VERISSIMO BONFIM"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem RONALDO VERISSIMO BONFIM, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEX GOMES AMO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALEX GOMES AMO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAIR BARROS DE CARVALHO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LAIR BARROS DE CARVALHO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NILTON ELES MOREIRA DIAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem NILTON ELES MOREIRA DIAS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OLEVINO ANTONIO MARIANO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem OLEVINO ANTONIO MARIANO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROGERIO DAMIRO COSTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ROGERIO DAMIRO COSTA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONALDO VERISSIMO BONFIM"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem RONALDO VERISSIMO BONFIM, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSANE FATIMA DAL MAGRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ROSANE FATIMA DAL MAGRO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROSINEIA PEREIRA LIMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ROSINEIA PEREIRA LIMA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SIRLEI DE FATIMA MENDONCA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem SIRLEI DE FATIMA MENDONCA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SONIA CRISTINA DELAI TONELLI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem SONIA CRISTINA DELAI TONELLI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELOIZA PEREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ELOIZA PEREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLAUDEMIR CORREIA RIBAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem CLAUDEMIR CORREIA RIBAS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELISANGELA DE AZEVEDO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ELISANGELA DE AZEVEDO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EVANDRO BARTH"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem EVANDRO BARTH, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FRANCISCA APARECIDA MENDES FERREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem FRANCISCA APARECIDA MENDES FERREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DARLENE DE LIMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem DARLENE DE LIMA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESSICA GOMES MARTINS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem DIESSICA GOMES MARTINS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIOGGO MORAIS BORGES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem DIOGGO MORAIS BORGES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO CARLOS RAMOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ROBERTO CARLOS RAMOS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO TONELLI JUNIOR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ROBERTO TONELLI JUNIOR, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RODRIGO MARCHESINI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem RODRIGO MARCHESINI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONNIE PETERSON PIRES STANOGA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem RONNIE PETERSON PIRES STANOGA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZENITA DE CAMPOS GATO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ZENITA DE CAMPOS GATO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GRACIELI REGINA SHNEIDER LANDGRAF"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem GRACIELI REGINA SHNEIDER LANDGRAF, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IDENILDE ANDRADE MACHADO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem IDENILDE ANDRADE MACHADO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOAO BATISTA BORGES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem JOAO BATISTA BORGES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POLYANA MOREIRA DE ALMEIDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem POLYANA MOREIRA DE ALMEIDA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO APARECIDO DIAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ROBERTO APARECIDO DIAS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TALIA FARIAS DE BRITO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem TALIA FARIAS DE BRITO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALDEMIR DIAS OLIVEIRA LOPES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem VALDEMIR DIAS OLIVEIRA LOPES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VANESSA BANASZEWSKI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem VANESSA BANASZEWSKI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAIMUNDO NONATO ALVES DE SOUSA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem RAIMUNDO NONATO ALVES DE SOUSA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REBERTI WILIAN NOGUEIRA BOSCARI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem REBERTI WILIAN NOGUEIRA BOSCARI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA CREUSA PEREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem MARIA CREUSA PEREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA GENILDA ALVES BERNARDO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem MARIA GENILDA ALVES BERNARDO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MONICA GRACIELA ALVES BEZERRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem MONICA GRACIELA ALVES BEZERRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NAHARA SCHEIBEL GOMES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem NAHARA SCHEIBEL GOMES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NATIELI ROSA XAVIER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem NATIELI ROSA XAVIER, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LESLIE HOFFMANN RODRIGUES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem LESLIE HOFFMANN RODRIGUES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIAMAR MONTEIRO CASSIANO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem LIAMAR MONTEIRO CASSIANO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCOS DE ASSIS CUNHA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem MARCOS DE ASSIS CUNHA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMILA MARTA PETRI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem CAMILA MARTA PETRI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLA GOMES BECHARA TEIXEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem CARLA GOMES BECHARA TEIXEIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FELIPE NERI MOURA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem FELIPE NERI MOURA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEONILDO LOPES SANTANA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem LEONILDO LOPES SANTANA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA ROSIVALDA DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem MARIA ROSIVALDA DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAYSA RIBEIRO DE SOUSA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem MAYSA RIBEIRO DE SOUSA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MILTON ADRIANO ROSSI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem MILTON ADRIANO ROSSI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADEMIR VARGAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ADEMIR VARGAS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEX GOMES AMO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ALEX GOMES AMO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALINE SANCHES DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ALINE SANCHES DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDNA MARIA COSTA VEADO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem EDNA MARIA COSTA VEADO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EDUARDO BEZERRA DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem EDUARDO BEZERRA DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIOVANA MARCONDES CALDEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem GIOVANA MARCONDES CALDEIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALEX JUNIOR DO NASCIMENTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ALEX JUNIOR DO NASCIMENTO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANA PAULA VERONA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ANA PAULA VERONA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALZENIRA MARIA DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ALZENIRA MARIA DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRENDA VITORIA FOGACA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem BRENDA VITORIA FOGACA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAMILA BRITO GONCALVES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem CAMILA BRITO GONCALVES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GLEICIANE FERREIRA MAIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem GLEICIANE FERREIRA MAIA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOLBERI DUTRA RIBEIRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem GOLBERI DUTRA RIBEIRO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ILDA PAULA DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ILDA PAULA DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JAISON ZAMINHAN"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem JAISON ZAMINHAN, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LORIEN DALPRA MAZER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem LORIEN DALPRA MAZER, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCIANO MARQUES DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem MARCIANO MARQUES DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOAO NETO DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem JOAO NETO DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOERTA DE SOUSA LIMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem JOERTA DE SOUSA LIMA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSE ANTONIO RIBEIRO FERREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem JOSE ANTONIO RIBEIRO FERREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSINEIDE ROSA DOS SANTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem JOSINEIDE ROSA DOS SANTOS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUCEIA VENTURIM GABURRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem JUCEIA VENTURIM GABURRO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JULIANA RODRIGUES DE LIMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem JULIANA RODRIGUES DE LIMA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAERCIO FERREIRA MUNIZ"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem LAERCIO FERREIRA MUNIZ, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEANDRO CRUZ PINHEIRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem LEANDRO CRUZ PINHEIRO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEANDRO DE AZEVEDO GENEROSO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem LEANDRO DE AZEVEDO GENEROSO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEONILSON LOPES SANTANA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LEONILSON LOPES SANTANA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOLBERI DUTRA RIBEIRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem GOLBERI DUTRA RIBEIRO, HISTORICO = Mes-Ano Anterior Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VERA OLIVEIRA DOS ANJOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem VERA OLIVEIRA DOS ANJOS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LESLIE HOFFMANN RODRIGUES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LESLIE HOFFMANN RODRIGUES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIETHE DA SILVA OLIVEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALIETHE DA SILVA OLIVEIRA, HISTORICO = Portador";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELIZEU BEZERRA DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ELIZEU BEZERRA DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GUSTAVO ARROIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem GUSTAVO ARROIO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NANCY FARIAS RIBEIRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem NANCY FARIAS RIBEIRO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENAN QUINTANA DE LIMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem RENAN QUINTANA DE LIMA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIVALDO SANTOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem GIVALDO SANTOS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HERIBERT MAURICIO BARRETO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem HERIBERT MAURICIO BARRETO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA CLEMENCIA PACHECO PINHEIRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MARIA CLEMENCIA PACHECO PINHEIRO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("YANIS SOARES FREITAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem YANIS SOARES FREITAS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("THIAGO SANTOS DA CONCEICAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem THIAGO SANTOS DA CONCEICAO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AIRTON MOREIRA DA SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem AIRTON MOREIRA DA SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA DIVINA MOREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MARIA DIVINA MOREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCOS DE SOUZA DOMINGUES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MARCOS DE SOUZA DOMINGUES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VALDEMIR DIAS OLIVEIRA LOPES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem VALDEMIR DIAS OLIVEIRA LOPES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTIANE CALDEIRA BOAVENTURA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CRISTIANE CALDEIRA BOAVENTURA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LUCELIZIA ALVES DE OLIVEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem LUCELIZIA ALVES DE OLIVEIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IONARA CONTI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem IONARA CONTI, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUCYCARLA PEREIRA OLIVEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem JUCYCARLA PEREIRA OLIVEIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WILLIAN DALLAGNOL REIS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem WILLIAN DALLAGNOL REIS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANA PAULA SILVA GOMES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ANA PAULA SILVA GOMES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DANIELE NERES PEREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DANIELE NERES PEREIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IGREJA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EVANGELHO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem IGREJA, Fornecedor/Cliente contem DO, Fornecedor/Cliente contem EVANGELHO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROCKENBACH") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ROCKENBACH, Fornecedor/Cliente contem E, Fornecedor/Cliente contem SILVEIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOGNO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIRAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem MOGNO, Fornecedor/Cliente contem MADEIRAS, Fornecedor/Cliente contem LTDA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROCKENBACH") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVEIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ROCKENBACH, Fornecedor/Cliente contem E, Fornecedor/Cliente contem SILVEIRA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("L") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem L, Fornecedor/Cliente contem ., Fornecedor/Cliente contem E, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EVANDRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORIM"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem EVANDRO, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem AMORIM, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOGNO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MADEIRAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem MOGNO, Fornecedor/Cliente contem MADEIRAS, Fornecedor/Cliente contem LTDA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("L") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains(".") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("E"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem L, Fornecedor/Cliente contem ., Fornecedor/Cliente contem E, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALISSON") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONDINELI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANCHES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ALISSON, Fornecedor/Cliente contem RONDINELI, Fornecedor/Cliente contem SANCHES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NAYARA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARQUES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem NAYARA, Fornecedor/Cliente contem LIMA, Fornecedor/Cliente contem MARQUES, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RAIMUNDO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NONATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem RAIMUNDO, Fornecedor/Cliente contem NONATO, Fornecedor/Cliente contem ALVES, Fornecedor/Cliente contem DE, HISTORICO = PAGAMENTO REF. JUROS E COMISSOES BANCARIAS Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANANDA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KESSIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ANANDA, Fornecedor/Cliente contem KESSIA, Fornecedor/Cliente contem ALVES, Fornecedor/Cliente contem DA, HISTORICO = PGTO Mes-Ano Atual Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOGLAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ILARIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BASTIANI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PINTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem DOGLAS, Fornecedor/Cliente contem ILARIO, Fornecedor/Cliente contem BASTIANI, Fornecedor/Cliente contem PINTO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GABRIELA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIMA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JESUS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem GABRIELA, Fornecedor/Cliente contem LIMA, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem JESUS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KEYTYANE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KESLEN") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem KEYTYANE, Fornecedor/Cliente contem KESLEN, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALISSON") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RONDINELI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SANCHES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ALISSON, Fornecedor/Cliente contem RONDINELI, Fornecedor/Cliente contem SANCHES, Fornecedor/Cliente contem DA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CUNHA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MACHADO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ANTONIO, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem CUNHA, Fornecedor/Cliente contem MACHADO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KAIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANDRADE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARVALHO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem KAIO, Fornecedor/Cliente contem ANDRADE, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem CARVALHO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ELIGIANE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTINA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MOREIRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ELIGIANE, Fornecedor/Cliente contem CRISTINA, Fornecedor/Cliente contem MOREIRA, Fornecedor/Cliente contem DA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GREGORIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JESUS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINEIRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem GREGORIA, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem JESUS, Fornecedor/Cliente contem MINEIRO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JOSE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem MARIA, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem SAO, Fornecedor/Cliente contem JOSE, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOGLAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ILARIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BASTIANI") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PINTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem DOGLAS, Fornecedor/Cliente contem ILARIO, Fornecedor/Cliente contem BASTIANI, Fornecedor/Cliente contem PINTO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KEYTYANE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("KESLEN") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem KEYTYANE, Fornecedor/Cliente contem KESLEN, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem SILVA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("SECUND_RECEBIMENTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem SECUND_RECEBIMENTOS, Fornecedor/Cliente contem ANTONIO, Fornecedor/Cliente contem ALVES, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem COSTA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SARA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTINA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRIEGO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem SARA, Fornecedor/Cliente contem CRISTINA, Fornecedor/Cliente contem PRIEGO, Fornecedor/Cliente contem DOS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GREGORIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JESUS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINEIRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem GREGORIA, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem JESUS, Fornecedor/Cliente contem MINEIRO, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANTONIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALVES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COSTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem ANTONIO, Fornecedor/Cliente contem ALVES, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem COSTA, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CRISTINA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOARES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MORAIS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Fornecedor/Cliente contem CARLA, Fornecedor/Cliente contem CRISTINA, Fornecedor/Cliente contem SOARES, Fornecedor/Cliente contem MORAIS, HISTORICO = Mes-Ano Atual";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("MOVIMENTO") && StringUtil.removeSpecialCharsToUC(complemento05).equals(""))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem MOVIMENTO, Complemento (05) contem EM BRANCO, HISTORICO = RECEBIMENTO  Fornecedor/Cliente   INVERTECONTA";


    return historico.replaceAll("  "," ").trim();
}
public int getParcelaBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public int getTotalParcelas(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public String getMesAnoBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String mesAnoBase = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return mesAnoBase;
}
public double getTaxaTarifa(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorTaxaTarifa = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorTaxaTarifa;
}
public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getCentroCusto(String CentroCusto, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03,
                             String nomeArquivo, String codCentroCusto) {
    String retornaCentroCusto = CentroCusto;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaCentroCusto;
}
public String getTabelaContabil(String TabelaContabil, String nomeOrigem, String documento, String nomePortador,
                                String complemento01, String complemento02, String complemento03, String complemento04, String complemento05,
                                String nomeArquivo) {
    String retornaTabelaContabil = TabelaContabil;
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaTabelaContabil;
}
public String getParticipante(String participante, String nomeOrigem, String documento, String nomePortador,
                              String complemento01, String complemento02, String complemento03, String complemento04, String complemento05,
                              String nomeArquivo) {
    String retornaParticipantePai = participante;
    complemento04 = "";
    complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaParticipantePai;
}
public String getFilial(String codFilial, String nomeOrigem, String documento, String nomePortador,
                        String complemento01, String complemento02, String complemento03,
                        String nomeArquivo, String codCentroCusto, String filial) {
    String retornaFilial = codFilial;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaFilial;
}
public String getRegrasParaAcumular(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String getRegrasParaAcumularPortador(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String  getReplaceTermos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = "";
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return parametro2.trim();
}
public String  getReplaceTermosAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double numeroAba  		= objHistorico.optDouble("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String  getLimpaCampos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");

    return lote.trim();
}
public String  getLimpaCamposAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String getTipoGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String graph = "";

    //feito para manter o legado sem problemas, sera sobreposto por regras! ;-)
    //tipos esperados: Column, Multiple_Column_Stacked, Multiple_Columns, Line, Multiple_Lines, Pie, Donut
    //Card refere-se ao Lucro/Prejuizo
    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    if (complemento01.startsWith("07") || complemento01.startsWith("12")) graph = "CardChart";

    if (complemento01.startsWith("01") || complemento01.startsWith("02") || complemento01.startsWith("04") ||
            complemento01.startsWith("08") || complemento01.startsWith("09") || complemento01.startsWith("10") ||
            complemento01.startsWith("11") || complemento01.startsWith("21"))  graph = "ColumnChart";

    if (complemento01.startsWith("15") || complemento01.startsWith("16") || complemento01.startsWith("17"))
        graph = "ColumnChartStacked";

    if (complemento01.startsWith("05") || complemento01.startsWith("06")) graph = "LineChart";

    if (complemento01.startsWith("18") || complemento01.startsWith("19") || complemento01.startsWith("20"))
        graph = "LineChartMultiple";

    if (complemento01.startsWith("03") || complemento01.startsWith("13") || complemento01.startsWith("14"))
        graph = "DonutChart";

    return graph;
}
public String getSimboloValor(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String simboloValor = "R$";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return simboloValor.replaceAll("Nenhum","");
}
public String getSeriesGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String series = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return series;
}
public String getTituloGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String Titulo_Grafico = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return Titulo_Grafico;
}
public String getColunaAlternativa(String parametro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String retornaColunas  = "";

    return retornaColunas.replace(",",";").trim();
}

/*#############################################@ EXTRATO-BOTICARIO-EXCEL @##############################################*/
public HashMap readBoticario(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ ERP-SISPLAN @##############################################*/
public HashMap readSisplanSistemaPlanejamento(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {




    return mapaVariavel;
}


//####################################################################################################################################
//									EXTRATO UNICRED2 PDF
//####################################################################################################################################

public boolean readExtratoUnicred2PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}



public boolean readExtratoSafraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-CEF-HTML @##############################################*/
public boolean readExtratoCEFHtml(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



/*#############################################@ EXTRATO-TRIBANCO2-PDF @##############################################*/
public boolean readExtratoTribanco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


//####################################################################################################################################
//									EXTRATO UNIPRIME PDF
//####################################################################################################################################

public boolean readExtratoUniprimePDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readExtratoFibraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoABCPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoBBMPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readExtratoBIBPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoGuanabaraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoSofisaPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readExtratoVotorantimPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}

public boolean readExtratoVotorantim3PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoXPInvestimentosPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}

public boolean readExtratoXPInvestimentos2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoNubankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoMercadoPagoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoVotorantim2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoAsaasPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



/*#############################################@ EXTRATO-CONTASIMPLES-PDF @##############################################*/
public boolean readExtratoContaSimplesPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
    return true;
}


public boolean readExtratoStonePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoC6Excel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readSantanderRET(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoCoraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBtgPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readFrancesinhagrupoAilosPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}



public boolean readExtratoXPInvestimentosExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readInvestimentoBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoOmieCashPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoArbiExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoMovilepayPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-SISPRIME-EXCEL @##############################################*/
public boolean readExtratoSisprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}




public HashMap readExtratoItauPdfFrancesinha(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}

public HashMap readExtratItauPdfFrancesinha2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoTransfeeraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoLinkerPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoEfiPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public HashMap readFrancesinhaSicrediExcel (MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


public boolean readExtratoMercadoPagoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}



public HashMap readFrancesinhaSicoobPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}



public boolean readExtratoBMGExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoTargetPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-target-EXCEL @##############################################*/
public boolean readExtratoTargetExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



public boolean readExtratoCredisisPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}



/*#############################################@ EXTRATO-Fibra-EXCEL @##############################################*/
public boolean readExtratoFibraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}



/*#############################################@ EXTRATO-INDUSTRIAL-EXCEL @##############################################*/
public boolean readExtratoIndustrialExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}



/*#############################################@ EXTRATO-PAULISTA-EXCEL @##############################################*/
public boolean readExtratoPaulistaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}



/*#############################################@ EXTRATO-BBM-TXT @##############################################*/
public boolean readExtratoBBMTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



/*#############################################@ EXTRATO-Votorantim-EXCEL @##############################################*/
public boolean readExtratoVotorantimExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}



//#2307-009642 - Leal

public HashMap readFrancesinhaBradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}



/*#############################################@ EXTRATO-HDT-EXCEL @##############################################*/


//#2312-024479 By Leal

public boolean readExtratoHDTExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoUBPPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public HashMap readSicoobComprovantesPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readFrancesinhaSicrediPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readErpFolhaDominio(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoSisprimePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoPaybrokersPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public HashMap readErpFolhaWk(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoGrafenoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoGrafenoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public HashMap readFrancesinha_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoAbrapetite(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


//##############################################**CARTAO ALELO CSV**#######################
public HashMap readAleloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExpressDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExtratoDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-BENVISA-EXCEL @##############################################*/
public HashMap readCartaoBenVisaExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-BIN-EXCEL @##############################################*/
public HashMap readCartaoBinExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-BONUS-EXCEL @##############################################*/
public HashMap readExtratoBonus(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-CABAL-EXCEL @##############################################*/
public HashMap readCartaoCabal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcardExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCielo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

public HashMap readCartaoCieloRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartao_Cielo_Simples_Sem_Bandeira(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-CARREFOUR-EXCEL @##############################################*/
public HashMap readCartaoCarrefour(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoCooper(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-SANTANDERCREDITO-EXCEL @##############################################*/
public HashMap readCartaoCreditoSantander(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-ELAVON-EXCEL @##############################################*/
public HashMap readExtratoElavon(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNetRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}



/*#############################################@ CARTAO-GOODCARD-EXCEL @##############################################*/
public HashMap readExtratoGoodcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}



/*#############################################@ CARTAO-GREENCARD-EXCEL @##############################################*/
public HashMap readCartaoGreenCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-IFOOD-EXCEL @##############################################*/
public HashMap readExtratoIFood(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-MASTERFARMA-EXCEL @##############################################*/
public HashMap readCartaoMasterFarma(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-MERCADOLIVRE-EXCEL @##############################################*/
public HashMap readCartaoMercadoLivre(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-MOOZ-EXCEL @##############################################*/
public HashMap readCartaoMoozCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoNutricard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}


/*#############################################@ CARTAO-PAGSEGURO-EXCEL @##############################################*/
public HashMap readExtratoPagSeguro(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-PAGUECOM-EXCEL @##############################################*/
public HashMap readPaguecomCSV(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}


/*#############################################@ CARTAO-POLICARD-EXCEL @##############################################*/
public HashMap readCartaoPoliCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardNovoPadrao(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDeb(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardCred(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefaultNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardTxt(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-SAFRA-CSV @##############################################*/
public HashMap readCartaocSafraCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenff(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenffLayout2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagFluxoCaixa(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}

/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipag(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}
/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoSodexo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}


/*#############################################@ EXTRATO-STELO-EXCEL @##############################################*/
public HashMap readCartaoSteloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-STONE-EXCEL @##############################################*/
public HashMap readExtratoStone(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}


/*#############################################@ CARTAO-SUMUP-EXCEL @##############################################*/
public HashMap readCartaoSumup(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicketNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicket(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-TRIOCARD-EXCEL @##############################################*/
public HashMap readCartaoTrioCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}


/*#############################################@ EXTRATO-VALECARD-PDF @##############################################*/
public HashMap readExtratoValeCardPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-VRALIMENTACAO-TXT @##############################################*/
public HashMap readExtratoVRAlimentacao(String lineParam, MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}



public HashMap readExtratoMagaLU(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readExtratoPagarME(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readExtratoNetshoes(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}



/*#############################################@ EXTRATO-LIV-PDF @##############################################*/
public HashMap readCartaoLivPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-FIDELIDADE-EXCEL @##############################################*/
public HashMap readCartaoFidelidade(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*     Leitura de Planilha Padrao - EXTRATO AIQUEFOME

## ################################################################################################################## */
public HashMap readExtratoAiquefome(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}




/*     Leitura de Planilha Padrao - EXTRATO UBEREATS

        ## ################################################################################################################## */
public HashMap readExtratoUbereats(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoSquidExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-TRIBANCO-PDF @##############################################*/
public boolean readExtratoTribancoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


public boolean readExtratoPagseguroExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBS2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBanesePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoNordestePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public HashMap readErpFolhaAlterdataProgresso(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoBancoDaycovalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoBancoPaulistaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BANESTE-EXCEL @##############################################*/
public boolean readExtratoBanesteDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


/*#############################################@ EXTRATO-BANPARA-EXCEL @##############################################*/
public boolean readExtratoBanpara(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoBanparaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-BANRISUL-TXT @##############################################*/
public boolean readExtratoBANRISULDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readExtratoBancoBrasilExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BBFINANCIAMENTOS-EXCEL @##############################################*/
public boolean readExtratoBancoDoBrasilFinanciamentos(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


public boolean readExtratoBancoDoBrasilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}



/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBradescoDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA").trim();
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO").trim();

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            complemento01   = nomePortador;
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            nomeOrigem      = "";
            documento       = "";
            historico       = "";

            valorDocumento  = 0;
            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;

            if(line.contains("ULTIMOS") && line.contains("LANCAMENTOS")) naoLeMais = true;

            if (memFile.getStringField(0).equals("")) continue;
            try {
                Date dt = memFile.getDateField(0);
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(0, "dd/MM/yyyy");    // --- VERIFICAR
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try{
                        //2309-016776
                        dataMovimento     = getDate(dataMovimento, 0, line, false, "", memFile, logger);

                    }catch (Exception dt3) {
                        continue;
                    }
                }
            }

            try {
                valorDocumento = Math.abs(memFile.getDoubleField(3));
            } catch(Exception e) {
                valorDocumento = 0;
            }
            if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
            else {
                try {
                    valorDocumento = Math.abs(memFile.getDoubleField(4));
                } catch(Exception e) {
                    valorDocumento = 0;
                }

                if(valorDocumento > 0) debitoCredito = "EXTRATO-DEBITO"; else continue;
            }


            nomeOrigem    = memFile.getStringFieldRemoveEspCharsUpper(1);
            complemento02 = memFile.getStringFieldRemoveEspCharsUpper(2);
            documento = memFile.getStringFieldRemoveEspCharsUpper(2);


            if(naoLeMais) continue;

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }

    return true;
}


public boolean readExtratBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BRADESCO-TXT @##############################################*/
public boolean readExtratoBradescoTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    //USADO -> Vipcontabilidade.MiequipamentosContas_Pagas
    JSONObject extratoEmpresa = new JSONObject();

    //Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String qualPadrao        = "";
    String auxDataMovimento  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais        = false;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("qualpadrao"))  qualPadrao  = jDados.optString("qualpadrao");

    while (memFile.hasNextLine()) {
        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            // logger.logInfo("LINE -> " + line);
            // logger.logInfo("qualPadrao -> " + qualPadrao);

            if(qualPadrao.equals("") && line.contains("DATA") && (line.contains("HISTORICO") || line.contains("HISTARICO"))  && line.contains("DOCTO") && (line.contains("CREDITO") || line.contains("CRADITO")) && (line.contains("DEBITO") || line.contains("DABITO")) && line.contains("SALDO")){
                qualPadrao = "002";

                continue;
            }
            // logger.logInfo("LINHAZINHA BDTXT " + qualPadrao);
            if(!qualPadrao.equals("003") && !qualPadrao.equals("002")){
                if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
                    complemento01   = nomePortador;
                    complemento02   = "";
                    complemento03   = "";
                    complemento04   = "";
                    complemento05   = "";

                    complemento06   = "";
                    complemento07   = "";
                    complemento08   = "";
                    complemento09   = "";
                    complemento10   = "";

                    cpfCnpj         = "";

                    historico       = "";

                    valorJuros      = 0;
                    valorDesconto   = 0;
                    valorMulta      = 0;
                    valorPagamento  = 0;
                }
                if (line.contains("SALDO ANTERIOR") || line.equals("") || (line.contains("DCTO.") && line.contains("DATA") && line.contains("SALDO"))) {
                    continue;
                }
                if (line.startsWith("TOTAL")) {
                    naoLeMais = true;
                    continue;
                }

                if (line.contains("LTIMOS") && line.contains("AMENTOS")){
                    naoLeMais = false;
                    continue;
                }

                if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
                    //Data Movimento.
                    if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
                        try {
                            dataMovimento = line.substring(0, 11);
                            Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                            dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
                            dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
                        } catch (Exception dte) { }
                    }
                    if (dataMovimento.equals("")) {
                        continue;
                    }
                    nomeOrigem = StringUtil.removeSpecialChars(line.substring( 11, 38 )).trim().toUpperCase();

                    documento = StringUtil.removeSpecialChars(line.substring( 41, 50 )).trim().toUpperCase();

                    complemento02 = "Documento: " + documento;

                    strValorDocumento = "0";
                    try{
                        strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 53, 69 )).trim().toUpperCase().replaceAll("\\.","").trim();
                        strValorDocumento    = strValorDocumento.replaceAll("\\,","").replaceAll("-","");
                        debitoCredito = "EXTRATO-CREDITO";
                        valorDocumento = (Math.abs(DecimalUtil.toDecimal(strValorDocumento)))/100;
                    } catch (Exception vlrx) {
                        valorDocumento = 0;
                    }
                    if (valorDocumento == 0){
                        strValorDocumento = "0";
                        try{
                            strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 70, 85 )).trim().toUpperCase().replaceAll("\\.","").trim();
                            strValorDocumento    = strValorDocumento.replaceAll("\\,","").replaceAll("-","");
                            debitoCredito = "EXTRATO-DEBITO";
                            valorDocumento = (Math.abs(DecimalUtil.toDecimal(strValorDocumento)))/100;
                        } catch (Exception vlrx) {
                            valorDocumento = 0;
                        }
                    }

                    if(valorDocumento == 0) dataMovimento = "";
                    if(valorDocumento == 0) continue;

                    contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                }
                // } else {
                // logger.logDebug("NO " + nomeOrigem + " | " + line);
                // nomeOrigem = String.format("%s %s", nomeOrigem, line.trim());
                // }
            }
            if (memFile.getFieldsSize() == 1) {
                nomeOrigem += " " + line;

                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("HISTORICO")
                            .where("CHAVE = ? ")
                            .param(nomeOrigem)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {}
                continue;
            } else {
                if(qualPadrao.equals("002")){
                    complemento01   = nomePortador;
                    complemento02   = "";
                    complemento03   = "";
                    complemento04   = "";
                    complemento05   = "";

                    complemento06   = "";
                    complemento07   = "";
                    complemento08   = "";
                    complemento09   = "";
                    complemento10   = "";

                    cpfCnpj         = "";

                    historico       = "";

                    valorJuros      = 0;
                    valorDesconto   = 0;
                    valorMulta      = 0;
                    valorPagamento  = 0;

                    if (line.contains("SALDO ANTERIOR")) continue;

                    if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
                        try {
                            dataMovimento = cutString(line, 0, 5) + "/20"+ cutString(line, 5, 8);

                            Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                            dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
                            auxDataMovimento = dataMovimento;
                            dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );

                        } catch (Exception dte) { }
                    }
                    if (!line.substring(2,3).equals("/") && !line.substring(5,6).equals("/")) {
                        try {
                            dataMovimento = auxDataMovimento;
                            Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                            dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
                            dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );

                        } catch (Exception dte) { }
                    }
                    // if (dataMovimento.equals("")) {
                    // continue;
                    // }
                    // logger.logInfo("line.substring( 0, 27 ) -> " + line.substring( 0, 27 ) + "line.substring( 9, 34 ) -> " + line.substring( 9, 34 ));
                    if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")){
                        nomeOrigem = StringUtil.removeSpecialChars(cutString(line, 9, 34 )).trim().toUpperCase();
                        documento = StringUtil.removeSpecialChars(cutString(line, 36, 43 )).trim().toUpperCase();
                    }

                    if (!line.substring(2,3).equals("/") && !line.substring(5,6).equals("/")){
                        nomeOrigem = StringUtil.removeSpecialChars(cutString(line, 0, 27 )).trim().toUpperCase();
                        documento = StringUtil.removeSpecialChars(cutString(line, 27, 34 )).trim().toUpperCase();
                    }

                    complemento02 = "Documento: " + documento;

                    strValorDocumento = "0";
                    try{
                        strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 41, 52)).trim().toUpperCase().replaceAll("\\.","").trim();

                        if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")){
                            strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 51, 61 )).trim().toUpperCase().replaceAll("\\.","").trim();
                            if(strValorDocumento.equals(""))
                                strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 68, 78 )).trim().toUpperCase().replaceAll("\\.","").trim();
                        }

                        if (!strValorDocumento.contains(",")) strValorDocumento = "";

                        strValorDocumento    = strValorDocumento.replaceAll("\\,","").replaceAll("-","");
                        debitoCredito = "EXTRATO-CREDITO";
                        valorDocumento = (Math.abs(DecimalUtil.toDecimal(strValorDocumento)))/100;
                    } catch (Exception vlrx) {
                        valorDocumento = 0;
                    }
                    if (valorDocumento == 0){
                        strValorDocumento = "0";
                        try{
                            strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 58, 69 )).trim().toUpperCase().replaceAll("\\.","").trim();
                            if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/"))
                                strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 65, 76 )).trim().toUpperCase().replaceAll("\\.","").trim();

                            // logger.logInfo("strValorDocumento2 -> " + strValorDocumento);

                            if (!strValorDocumento.contains(",")) strValorDocumento = "";

                            strValorDocumento    = strValorDocumento.replaceAll("\\,","").replaceAll("-","");
                            debitoCredito = "EXTRATO-DEBITO";
                            valorDocumento = (Math.abs(DecimalUtil.toDecimal(strValorDocumento)))/100;
                        } catch (Exception vlrx) {
                            valorDocumento = 0;
                        }
                    }

                    logger.logInfo("VALOR DOC -> "+ valorDocumento +" | DC -> "+ debitoCredito);

                    if(valorDocumento == 0) dataMovimento = "";
                    if(valorDocumento == 0) continue;

                    // contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
                }
                else if (qualPadrao.equals("003")){
                    complemento01   = nomePortador;
                    complemento02   = "";
                    complemento03   = "";
                    complemento04   = "";
                    complemento05   = "";

                    complemento06   = "";
                    complemento07   = "";
                    complemento08   = "";
                    complemento09   = "";
                    complemento10   = "";

                    cpfCnpj         = "";

                    historico       = "";

                    valorJuros      = 0;
                    valorDesconto   = 0;
                    valorMulta      = 0;
                    valorPagamento  = 0;

                    boolean linhaContemData = false;
                    line = StringUtil.rightPad(line, 100, " ") + ";";


                    if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
                        linhaContemData = true;
                    }

                    if (linhaContemData) {
                        try {
                            dataMovimento = cutString(line, 0, 5) + "/20"+ cutString(line, 5, 8);
                            Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                            auxDataMovimento = dataMovimento;
                            dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );

                        } catch (Exception dte) { }

                        nomeOrigem = StringUtil.removeSpecialChars(cutString(line, 9, 34 )).trim().toUpperCase();
                        documento = StringUtil.removeSpecialChars(cutString(line, 36, 45 )).trim().toUpperCase();
                    }
                    else {
                        try {
                            dataMovimento = auxDataMovimento;
                            Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                            dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
                        } catch (Exception dte) { }

                        nomeOrigem = StringUtil.removeSpecialChars(cutString(line, 0, 27 )).trim().toUpperCase();
                        documento = StringUtil.removeSpecialChars(cutString(line, 26, 38 )).trim().toUpperCase();
                    }
                    // if (dataMovimento.equals("")) {
                    // continue;
                    // }
                    // logger.logInfo("line.substring( 0, 27 ) -> " + line.substring( 0, 27 ) + "line.substring( 9, 34 ) -> " + line.substring( 9, 34 ));

                    logger.logInfo("DT -> " + dataMovimento);

                    complemento02 = "Documento: " + documento;

                    strValorDocumento = "0";
                    try{
                        if (linhaContemData) {
                            strValorDocumento    = StringUtil.removeSpecialChars(line.substring(50, 62)).trim().toUpperCase();
                            logger.logInfo("strVd 1 -> " + strValorDocumento);
                            debitoCredito = "EXTRATO-CREDITO";
                            if(strValorDocumento.equals("")) {
                                strValorDocumento    = StringUtil.removeSpecialChars(line.substring(68, 78)).trim().toUpperCase();
                                logger.logInfo("strVd 2 -> " + strValorDocumento);
                                debitoCredito = "EXTRATO-DEBITO";
                            }
                        }
                        else {
                            strValorDocumento    = StringUtil.removeSpecialChars(line.substring(60, 70)).trim().toUpperCase();
                            logger.logInfo("strVd 3 -> " + strValorDocumento);
                            debitoCredito = "EXTRATO-DEBITO";
                        }

                        valorDocumento = capturaValor(strValorDocumento);
                    } catch (Exception vlrx) {
                        valorDocumento = 0;
                    }

                    logger.logInfo("VD -> " + valorDocumento);

					/*
					try{
						strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 59, 69 )).trim().toUpperCase().replaceAll("\\.","").trim();

						if (linhaContemData) {
							strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 51, 61 )).trim().toUpperCase().replaceAll("\\.","").trim();
							if(strValorDocumento.equals(""))
								strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 68, 78 )).trim().toUpperCase().replaceAll("\\.","").trim();
						}

						strValorDocumento    = strValorDocumento.replaceAll("\\,","").replaceAll("-","");
						debitoCredito = "EXTRATO-CREDITO";
						valorDocumento = (Math.abs(DecimalUtil.toDecimal(strValorDocumento)))/100;
					} catch (Exception vlrx) {
						valorDocumento = 0;
					}
					if (valorDocumento == 0){
						strValorDocumento = "0";
						try{
							strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 76, 87 )).trim().toUpperCase().replaceAll("\\.","").trim();
							if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/"))
								strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, 85, 98 )).trim().toUpperCase().replaceAll("\\.","").trim();

							// logger.logInfo("strValorDocumento2 -> " + strValorDocumento);
							strValorDocumento    = strValorDocumento.replaceAll("\\,","").replaceAll("-","");
							debitoCredito = "EXTRATO-DEBITO";
							valorDocumento = (Math.abs(DecimalUtil.toDecimal(strValorDocumento)))/100;
						} catch (Exception vlrx) {
							valorDocumento = 0;
						}
					}
					*/

                    if(valorDocumento == 0) dataMovimento = "";
                    if(valorDocumento == 0) continue;

                    // contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
                }
				/*else {
					// logger.logDebug("NO " + nomeOrigem + " | " + line);
					nomeOrigem = String.format("%s %s", nomeOrigem, line.trim());
				}*/
                if(line.contains("TOTAL") && line.contains("MOVIMENT")) continue;
                if(line.contains("EXTRATO") && line.contains("SIMPLES") && line.contains("CONFERANCIA")) naoLeMais = true;
            }
            if (dataMovimento.trim().equals("")) continue;

            if(naoLeMais) continue;

            //Chave para Insert/Update no Banco de Dados.
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
            //Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
            } else {
                // logger.logDebug("ENTROU AE " + nomeOrigem);
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("HISTORICO, COMPLEMENTO, EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(nomeOrigem)
                            .param(complemento02)
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }
    return true;
}


/*#############################################@ EXTRATO-CEF-EXCEL @##############################################*/
public boolean readExtratoCEFExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}



public boolean readExtratoCaixaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}

/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-DAYCOVAL-EXCEL @##############################################*/
public boolean readExtratoDaycoval(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-ITAU-EXCEL @##############################################*/
public boolean readExtratoItauDefault(MemoryFile memFile, String anoData, String tipoExtrato, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


public boolean readExtratoItauPdfInterno(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}

public boolean readExtratoItauPdfInterno2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-ITAU-TXT @##############################################*/
public boolean readExtratoItauTXT(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-SAFRA-EXCEL @##############################################*/
public boolean readExtratoSafraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-SANTANDER-EXCEL @##############################################*/
public boolean readExtratoSantanderDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readExtratSantanderPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}

/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readExtratSicoobPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-SICOOB-TXT @##############################################*/
public boolean readExtratoSicoobTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-SICREDI-EXCEL @##############################################*/

public boolean readExtratoSicrediDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            complemento01   = nomePortador;
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";
            nomeOrigem      = "";
            documento       = "";
            historico       = "";

            valorDocumento  = 0;
            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;

            if (memFile.getStringField(0).equals("")) continue;
            try {
                Date dt = memFile.getDateField(0, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(0);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    continue;
                }
            }

            try {valorDocumento = memFile.getDoubleField(3);}
            catch(Exception e) { valorDocumento = 0;}

            // 2309-017469 Quando o valor é negativo ele vem entre parenteses "()"
            if (valorDocumento > 0 || !memFile.getStringFieldRemoveEspCharsUpper(3).contains("(")) debitoCredito = "EXTRATO-CREDITO";
            if (valorDocumento < 0 || memFile.getStringFieldRemoveEspCharsUpper(3).contains("(")) debitoCredito = "EXTRATO-DEBITO";
            if (valorDocumento == 0) continue;

            valorDocumento = Math.abs(valorDocumento);

            nomeOrigem    = memFile.getStringFieldRemoveEspCharsUpper(1);
            complemento02 = memFile.getStringFieldRemoveEspCharsUpper(2);
            documento     = memFile.getStringFieldRemoveEspCharsUpper(2);


            if(naoLeMais) continue;

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }

    return true;
}


public boolean readExtratoSicrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idataMovimento	= 0;
    int idocumento      = 2;
    int inomePortador	=-1;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","").replaceAll("\\|", "");
    complemento01 = nomePortador.replaceAll("\\?","").replaceAll("\\|", "");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    boolean naoLeMais = false;

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
        // logger.logInfo("LINHAAAAAA " + line);
        if (line.startsWith("SICREDI FONE")) continue;
        if (line.startsWith("0800")) continue;
        if (line.startsWith("SAC")) continue;
        if (line.startsWith("OUVIDORIA")) continue;
        if (line.startsWith("VENCIMENTO DO CHEQUE")) {
            naoLeMais = true;
            continue;
        }
        if (naoLeMais) continue;
        if (memFile.getFieldsSize() == 2) continue;
        //if (memFile.getFieldsSize() == 1) {
        if (memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO")) { //2310-019873
            // logger.logInfo("MFSC " + memFile.getStringFieldRemoveEspCharsUpper(0));
            nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
            try {
                dbIOCont.update("IO_EXTRATO")
                        .fields("HISTORICO")
                        .where("CHAVE = ? ")
                        .param(nomeOrigem)
                        .param(chaveExtrato)
                        .execute();
            } catch (Exception sqlUpdateException) {
            }
        } else {
            try {
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { }
                    }
                }
                documento = "";
                // logger.logInfo("BTL -> 5737|  -> " + line  + "|  -> " + memFile.getFieldsSize()  );
                if (memFile.getFieldsSize() == 4) {
                    nomeOrigem      = "";
                    nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();

                    valorDocumento  = 0;
                    try{valorDocumento = memFile.getDoubleField(ivalorDocumento - 1);}
                    catch (Exception vlrd) { valorDocumento = 0; }
                } else {
                    nomeOrigem      = "";
                    nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();

                    documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();

                    valorDocumento  = 0;
                    try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                    catch (Exception vlrd) { valorDocumento = 0; }

                }
                // logger.logInfo("SIVALOR " + valorDocumento + " | " + dataMovimento);

                if (valorDocumento == 0) continue;
                if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
                if (valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                valorDocumento = Math.abs(valorDocumento);

                complemento02 = documento;

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                        .fields("CHAVE")
                        .param(chaveExtrato)
                        .queryUnique();

                // Inserir caso Chave nao encontrada.


                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                .param(chaveExtrato)
                                .param(codEmpresa)
                                .param(dataMovimento)
                                .param(nomePortador)
                                .param(nomeOrigem)
                                .param(nomeArquivo.toUpperCase())
                                .param(complemento02)
                                .param(valorDocumento)
                                .param(debitoCredito)
                                .param(0)
                                .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(0)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}


/*#############################################@ EXTRATO-SICREDI-TXT @##############################################*/
public boolean readExtratoSicrediTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeEmpresa        = "";
    String tipoLancamento        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String tipoPlanilha      = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    String cont = "";

    if(jDados.has("CODEMPRESA"))      codEmpresa      = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEEMPRESA"))     nomeEmpresa     = jDados.optString("NOMEEMPRESA");
    if(jDados.has("NOMEARQUIVO"))     nomeArquivo     = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO"))  tipoLancamento  = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    boolean f = true;
    while (memFile.hasNextLine()) {
        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line).trim();


            // if(f){
            // nomePortador = cutString(line, line.lastIndexOf(" "));
            // f=false;
            // }
            if(line.contains("EXTRATO DE CONTA CORRENTE)")) f = true;
            if (line.contains("==============")) continue;
            if (line.contains("PAG.:")) continue;
            if (line.contains("PERIODO: DE")) continue;
            if (line.contains("DATA") && line.contains("DOCUMENTO") &&
                    line.contains("HISTORICO") && line.contains("DEBITO")) continue;
            if (line.contains("**/**/****")) continue;
            if (line.contains("CONTINUA") && line.contains("PAGINA")) continue;
            if (line.toUpperCase().startsWith("COOP.CRED")) continue;

            // if (line.contains("[., [0-9]{2}].")) continue;

            if (nomePortador.equals("") && line.contains("-")) {
                nomePortador = cutString(line, line.trim().length() - 12, line.trim().length());
                continue;
            }
            complemento01   = "";
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            documento       = "";
            historico       = "";

            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;

            // Data Movimento.
            try {
                dataMovimento = cutString(line,  0, 10 );
                Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
                dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
            } catch (Exception dte) { }

            if(line.length() > 130){
                line = cutString(line, 0, line.length() - 14).trim();
            }

            if (dataMovimento.equals("") || line.length() < 72) continue;
            nomeOrigem    = StringUtil.removeSpecialChars(cutString(line,  23, 72 )).trim().toUpperCase();
            complemento01 = StringUtil.removeSpecialChars(cutString(line,  12, 23 )).trim().toUpperCase();
            if(!line.substring(12, 23).trim().equals("")){
                documento     = StringUtil.removeSpecialChars(cutString(line,  12, 23 )).trim().toUpperCase();
            }else{
                documento = "EM BRANCO";
            }

            strValorDocumento = "0";

            if(tipoLancamento.equals("PAGAR") && line.length() < 93 ){
                strValorDocumento    =  StringUtil.removeSpecialChars(cutString(line, line.length() - 12, line.length())).toUpperCase();
                debitoCredito = "EXTRATO-DEBITO";
            }
            if(tipoLancamento.equals("RECEBER") && line.length() > 93){
                strValorDocumento    = StringUtil.removeSpecialChars(cutString(line, line.length() - 12, line.length())).toUpperCase();
                debitoCredito = "EXTRATO-CREDITO";
            }
            if(strValorDocumento.contains(".")){
                strValorDocumento = strValorDocumento.replaceAll("\\.","");
            }
            strValorDocumento = strValorDocumento.replaceAll(",",".");
            valorDocumento = Math.abs(DecimalUtil.toDecimal(strValorDocumento));
            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            if (dataMovimento.trim().equals("")) continue;
            if (valorDocumento <= 0) continue;

            if(naoLeMais) continue;

            // Chave para Insert/Update no Banco de Dados.
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {

                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento01)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
            } else {
                try {

                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO, HISTORICO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(nomeOrigem)
                            .param(chaveExtrato)
                            .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }

    return true;
}


/*#############################################@ EXTRATO-TRIBANCO-EXCEL @##############################################*/
public boolean readExtratoTribancoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


/*#############################################@ EXTRATO-UNICRED-EXCEL @##############################################*/
public boolean readExtratoUnicredDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


/*#############################################@ EXTRATO-UNICRED-TXT @##############################################*/
public boolean readExtratoUNICREDTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


/*#############################################@ EXTRATO-UNIPRIME-EXCEL @##############################################*/
public boolean readExtratoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}



/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoBancoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}

/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoUniprimeTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoViacrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}




public boolean readExtratBradesco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();
    // logger.logInfo("ENTROU ARRRRR BRAD");
    logger.logInfo("ENTROU BRADESCO");

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String documentoAux      = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String nomeContabilidade = "";
    String nomeEmpresa       = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String anoData			 = "";
    String tipoExtrato		 = "";
    String colunaB   		 = "";
    String camposBanco       = "";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorAlternativo  = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    int idataMovimento	= 0;
    int idocumento      = 2;
    int inomePortador	=-1;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 3;
    String nomeOrigemAnterior = "";
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOEXTRATO"))  tipoExtrato  = jDados.optString("TIPOEXTRATO");
    if(jDados.has("NOMECONTABILIDADE")) nomeContabilidade = jDados.optString("NOMECONTABILIDADE");
    if(jDados.has("NOMEEMPRESA")) nomeEmpresa = jDados.optString("NOMEEMPRESA");

    int cont = 0;
    int contAuxiliar = 0;
    int contadorAuxiliar = 0;


    boolean valorColB = false;
    boolean linhaPrincipal = false;
    boolean umCampo = true;
    boolean quebraFolha = false;
    boolean quebraFolha2 = false;

    boolean achouData = false;
    boolean lerPortador = false;
    String tipoPadrao = "";

    // logger.logInfo("TE " + tipoExtrato);

    while (memFile.hasNextLine()) {

        try {



            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            // logger.logInfo("TIPO EXTRATO BRADESCO 2 == "+nomeArquivo.toUpperCase());

            if(line.contains("DATA") && (line.contains("HISTORICO") || line.contains("LANCAMENTO")) && (line.contains("DOCTO") || line.contains("DCTO")) && line.contains("CREDITO") && line.contains("DEBITO") && tipoExtrato.contains("002")){
                tipoPadrao = "002";
                // logger.logInfo("ENTROU 002 bradesco pdf");
                // continue;
            }


            // logger.logInfo("tipoPdrao -> " + tipoPadrao);

            if(!tipoPadrao.equals("002")){

                //Alguns arquivos vem separados por "  "
                if (!line.contains(";") && line.contains("  ")) {
                    // logger.logInfo("Entrou SEPARATOR");
                    memFile.setFieldSeparator("  ");
                }

                if(line.startsWith("ULTIMOS LANCAMENTOS")) naoLeMais = true;

                //if (line.startsWith("SALDOS INVEST")) naoLeMais = true; - #2307-010918
                //if (line.startsWith("OS DADOS ACIMA")) naoLeMais = true; - #2307-010918
                if (line.startsWith("HTTPS")) continue;
                if (line.startsWith("NOME DO")) continue;
                if (line.startsWith("EXTRATO MENSAL")) continue;
                if (line.startsWith("DATA DA OPERACAO")) continue;
                if (line.contains("CNPJ:") && line.contains("/") && line.contains(".") && line.contains("-")) continue;

                // logger.logInfo("UC " + line);

                if (umCampo && memFile.getFieldsSize() > 1) {
                    quebraFolha = false;
                    quebraFolha2 = false;
                    // logger.logInfo("ENTROU IF1| "+line+" | "+memFile.getFieldsSize()+" | "+umCampo); Douglas
                }

                if (quebraFolha && memFile.getFieldsSize() == 1) {
                    quebraFolha = false;
                    quebraFolha2 = false;
                }

                if (!umCampo && quebraFolha2 && memFile.getFieldsSize() == 1) {
                    // logger.logInfo("DEU CERTO FOLHA " + nomeOrigem + " | " + line);
                    // logger.logInfo("QF2 " + line);

                    String nomeOrigemAux = nomeOrigem/*.replaceAll("TESTEJOTA", "") + " "*/ + " " + memFile.getStringFieldRemoveEspCharsUpper(0);
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("HISTORICO")
                                .where("CHAVE = ? ")
                                .param(nomeOrigemAux)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                    }
                    quebraFolha2 = false;
                    continue;
                }
                if (quebraFolha2 && memFile.getFieldsSize() == 1) {
                    // logger.logInfo("QF3 " + line);
                    quebraFolha2 = false;
                }
				/*if (quebraFolha && memFile.getFieldsSize() == 1) {
					logger.logInfo("QF4 " + line);
					quebraFolha = false;
				}*/
                if  (quebraFolha && memFile.getFieldsSize() > 1) {
                    // logger.logInfo("QF5 " + line);
                    quebraFolha2 = true;
                    quebraFolha = false;
                }

                if (memFile.getFieldsSize() > 1 && !line.startsWith("FOLHA")) umCampo = false;
                if (memFile.getFieldsSize() == 1 && !line.startsWith("FOLHA")) umCampo = true;

				/*if (quebraFolha2 && memFile.getFieldsSize() == 1) {

					logger.logInfo("DEU CERTO FOLHA " + nomeOrigem + " | " + memFile.getStringFieldRemoveEspCharsUpper(0) + " | " + chaveExtrato);

					String nomeOrigemAux = nomeOrigem.replaceAll("TESTEJOTA", "") + " " + memFile.getStringFieldRemoveEspCharsUpper(0);

					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("HISTORICO")
						.where("CHAVE = ? ")
						.param(nomeOrigemAux)
						.param(chaveExtrato)
						.execute();
					} catch (Exception sqlUpdateException) {
					}
					quebraFolha2 = false;
					continue;
				}

				if (quebraFolha && memFile.getFieldsSize() > 1) {
					quebraFolha = false;
					quebraFolha2 = true;
				}*/

                // if (quebraFolha && memFile.getFieldsSize() > 1) quebraFolha = false;
                if (line.startsWith("FOLHA")&& memFile.getFieldsSize() == 1) {
                    // nomeOrigem = "";
                    // complemento02 = "";
                    // nomeOrigemAnterior = "";
                    quebraFolha = true;
                    // logger.logInfo("NOFOLHA " + nomeOrigem);
                    continue;
                }
                if (naoLeMais) continue;



                if ((achouData &&
                        memFile.getStringFieldRemoveEspCharsUpper(0).equals("BRADESCO VIDA E PREVIDENCIA SA") &&
                        memFile.getStringFieldRemoveEspCharsUpper(1).equals("") &&
                        memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) || (achouData && tipoExtrato.equals("003") && //#2306-006655
                        colunaB.matches("[0-9]+") && //#2306-006655
                        memFile.getFieldsSize() == 1)) { //#2306-006655

                    achouData = false;

                    extratoEmpresa = dbIOCont.sql("SELECT CHAVE,HISTORICO,COMPLEMENTO FROM IO_EXTRATO WHERE CHAVE = ?")
                            .fields("CHAVE,HISTORICO,COMPLEMENTO")
                            .param(chaveExtrato)
                            .queryUnique();

                    if (extratoEmpresa != null && extratoEmpresa.has("CHAVE")) {
                        try {

                            dbIOCont.update("IO_EXTRATO")
                                    .fields("HISTORICO,COMPLEMENTO")
                                    .where("CHAVE = ? ")
                                    .param(extratoEmpresa.optString("HISTORICO")    + " - " + memFile.getStringFieldRemoveEspCharsUpper(0))
                                    .param(extratoEmpresa.optString("COMPLEMENTO") + " - " + memFile.getStringFieldRemoveEspCharsUpper(0))
                                    .param(chaveExtrato)
                                    .execute();
                        } catch (Exception sqlUpdateException) {
                            logger.logDebug("Erro no update: " + sqlUpdateException);
                        }
                    }
                    continue;
                }

                if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("VALOR DISPONIVEL") && memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) continue;

                achouData = false;

                colunaB = memFile.getStringFieldRemoveEspCharsUpper(1); //#2306-006655

                String dataExtrato = "";
                try{
                    // logger.logInfo("ENTROU TRY");Douglas
                    if (!memFile.getStringFieldRemoveEspCharsUpper(4).equals("")) dataExtrato     = getDate(dataExtrato, 0, line, false, "", memFile, logger);
                    else if (cutString(line, 0, "\\|").contains("/") && !memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) dataExtrato     = getDate(dataExtrato, 0, line, false, "", memFile, logger);
                }catch(Exception e){
                    // dataMovimento   = "";
                    // dataLote        = "";
                    // logger.logInfo("ENTROU CATCH");Douglas
                }
                if (dataExtrato.equals("")) {
                    nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(0);
                    complemento02  = memFile.getStringFieldRemoveEspCharsUpper(1);
                }
                else {
                    if(!memFile.getStringFieldRemoveEspCharsUpper(1).matches("[0-9]+") && tipoExtrato.equals("003")){
                        nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(1); //#2306-006655
                    }
                    if(!tipoExtrato.equals("003")){
                        nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(1); //#2306-006655
                    }
                    complemento02  = memFile.getStringFieldRemoveEspCharsUpper(2);
                    // logger.logInfo("ENTROU ELSE1| "+tipoExtrato);Douglas
                }
                if (!dataExtrato.equals("")) {
                    achouData = true;
                    dataMovimento = dataExtrato;
                    dataLote	  = getCampoDate(dataMovimento, "", "yyyy-MM");
                    // logger.logInfo("ENTROU IF2| "+dataMovimento+" | "+line);Douglas
                }

                // if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXTRATO DE:")) {
                // 	nomePortador = memFile.getStringFieldRemoveEspCharsUpper(1);
                // 	continue;
                // }


                //O portador eh lido na linha que sucede a linha que contem 'AGENCIA' e 'CONTA'
                //Felipe - 18/04/23
                if (lerPortador) {
                    nomePortador = memFile.getStringFieldRemoveEspCharsUpper(1);
                    lerPortador = false;
                }
                else if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("AGENCIA") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("CONTA")) {
                    lerPortador = true;
                    // logger.logInfo("ENTROU ELSE2");Douglas
                }
                //----------------------------------------------------------------------------------------------

                // logger.logDebug("LINHA " + line);
                if (!memFile.getStringFieldRemoveEspCharsUpper(4).equals("")) {
                    // logger.logInfo("ENTROU IF3| "+memFile.getStringFieldRemoveEspCharsUpper(4));Douglas
                    try { valorDocumento = memFile.getDoubleField(3);
                        // logger.logInfo("ENTROU TRY1| "+memFile.getDoubleField(3));Douglas
                    } catch (Exception e) { valorDocumento = 0;}
                } else if (!memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) {
                    try { valorDocumento = memFile.getDoubleField(2);
                        // logger.logInfo("ENTROU TRY2| "+memFile.getDoubleField(2));Douglas
                    } catch (Exception e) { valorDocumento = 0;}
                } else {
                    try { valorDocumento = memFile.getDoubleField(1);
                    } catch (Exception e) { valorDocumento = 0;}

                    valorColB = true;
                }
                if(tipoExtrato.contains("003")){
                    // logger.logInfo("TIPO == "+tipoPadrao+" | LINE == "+line);
                    if(!achouData){
                        if (!memFile.getStringFieldRemoveEspCharsUpper(4).equals("")) {
                            try { valorDocumento = memFile.getDoubleField(4);
                                // logger.logInfo("ENTROU TRY3| ");Douglas
                            } catch (Exception e) { valorDocumento = 0;}
                        } else if (!memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) {
                            try { valorDocumento = memFile.getDoubleField(3);
                                // logger.logInfo("ENTROU TRY3| ");
                            } catch (Exception e) { valorDocumento = 0;}
                        } else {

                            if(!memFile.getStringFieldRemoveEspCharsUpper(2).equals("")){
                                if(memFile.getStringFieldRemoveEspCharsUpper(0).matches("[0-9]+")){//#2306-006655
                                    // logger.logInfo("ENTROU IF9");
                                    try { valorDocumento = memFile.getDoubleField(1);
                                        // logger.logInfo("ENTROU TRY4| ");
                                    } catch (Exception e) { valorDocumento = 0;}
                                }else{
                                    try { valorDocumento = memFile.getDoubleField(2);
                                        // logger.logInfo("ENTROU TRY5| ");
                                    } catch (Exception e) { valorDocumento = 0;}
                                }
                            }
                            valorColB = true;
                        }
                        if(memFile.getFieldsSize() > 3){
                            try { valorDocumento = memFile.getDoubleField(memFile.getFieldsSize()-2);
                            } catch (Exception e) { valorDocumento = 0;}
                        }
                    }
                    // if(achouData){
                    // logger.logInfo("LINE EXT BRDSC 2 == "+line);
                    // extratoEmpresa = dbIOCont.sql("SELECT CHAVE,HISTORICO,COMPLEMENTO FROM IO_EXTRATO WHERE CHAVE = ?")
                    // .fields("CHAVE,HISTORICO,COMPLEMENTO")
                    // .param(chaveExtrato)
                    // .queryUnique();

                    // if (extratoEmpresa != null && extratoEmpresa.has("CHAVE")) {
                    // try {

                    // dbIOCont.update("IO_EXTRATO")
                    // .fields("VALORDOCUMENTO")
                    // .where("CHAVE = ? ")
                    // .param(valorAlternativo)
                    // .param(chaveExtrato)
                    // .execute();
                    // } catch (Exception sqlUpdateException) {
                    // logger.logDebug("Erro no update: " + sqlUpdateException);
                    // }
                    // }
                    // logger.logInfo("data === "+dataMovimento+" | valorA == "+valorAlternativo + " | CHAVE == "+chaveExtrato);
                    // }
                }


                if (valorDocumento > 0)  debitoCredito = "EXTRATO-CREDITO";
                if (valorDocumento < 0)  debitoCredito = "EXTRATO-DEBITO";

                valorDocumento = Math.abs(valorDocumento);
                // logger.logInfo("dataMOvimento - > " + dataMovimento + " |valorDocumento -> " + valorDocumento);

                cont++;
                contLinhaExtrato = String.valueOf(cont);
                contLinhaExtrato = StringUtil.leftPad(contLinhaExtrato, 05, "0");
                // logger.logInfo("NO == "+nomeOrigem+" | LINE == "+line);
                if (nomeOrigem.startsWith("TRANSF CC PARA") ||
                        nomeOrigem.startsWith("TRANSF.AUT. C/C") || //#2306-006655
                        nomeOrigem.startsWith("DEB DESCONTO") ||
                        nomeOrigem.startsWith("TED-T ELET DISP") || //#2306-006655
                        nomeOrigem.startsWith("TED D") ||
                        nomeOrigem.startsWith("TRANSF.POUP") ||
                        nomeOrigem.startsWith("TED-TRANSF") ||
                        nomeOrigem.startsWith("TRANSFE PIX") || //#2306-006655
                        nomeOrigem.startsWith("TRANSF CONTAS") || //#2306-006655
                        nomeOrigem.startsWith("TRANSF.MM") || //#2306-006655
                        nomeOrigem.startsWith("TRANSF AUTORIZ") ||
                        nomeOrigem.startsWith("DEP.DINHEIRO") ||
                        nomeOrigem.startsWith("DEP DINH") ||
                        nomeOrigem.startsWith("SAQUE C") ||
                        nomeOrigem.startsWith("TRANSFERENCIA PIX") ||
                        nomeOrigem.startsWith("ENCARGOS") ||
                        nomeOrigem.startsWith("TARIFA") ||
                        nomeOrigem.startsWith("PAGTO ELETRO") ||
                        nomeOrigem.startsWith("PGTO ELET TRIB") || //#2306-006655
                        nomeOrigem.startsWith("PAGTO COBRANCA") || //#2306-006655
                        nomeOrigem.startsWith("TEDQ DIF") ||
                        nomeOrigem.startsWith("DEP CH") ||
                        nomeOrigem.startsWith("DEVOL.CHEQUE") ||
                        nomeOrigem.startsWith("DOC/TED") ||
                        nomeOrigem.startsWith("CONTA DE") ||
                        nomeOrigem.startsWith("RECEBIMENTO FORNECEDOR") ||
                        nomeOrigem.startsWith("RECEB PAGFOR") || //#2306-006655
                        nomeOrigem.startsWith("DEBITO AUTOMATICO") ||
                        nomeOrigem.startsWith("CIELO VDA") ||
                        // nomeOrigem.startsWith("CARTAO") ||	202302-0025621
                        nomeOrigem.startsWith("CARTAO ALIMENTACAO") ||	//alterada essa validacao pois estava atrapalhando um caso de cartao refeicao 202302-0025621
                        nomeOrigem.startsWith("DEPOSITO CHEQUE") ||
                        nomeOrigem.startsWith("ANTECIPACAO DE") ||
                        nomeOrigem.startsWith("CHO PAGO OUTRA AGENCIA") ||
                        nomeOrigem.startsWith("DEP. IDENT.") ||
                        nomeOrigem.startsWith("SISPAG FORNECEDORES") ||
                        nomeOrigem.startsWith("BRADESCO NET EMPRESA") ||
                        nomeOrigem.startsWith("TRANSF FDOS DOC-E H BANK") ||
                        nomeOrigem.startsWith("DOC CREDITO AUTOMATICO") ||
                        nomeOrigem.startsWith("GETNET VISA CREDITO") ||
                        nomeOrigem.startsWith("CIELO VDA CREDITO") ||
                        nomeOrigem.startsWith("CIELO AMEX") ||
                        nomeOrigem.startsWith("AMEX ANTECIPACAO") ||
                        nomeOrigem.startsWith("ELO ANTECIPACAO") ||
                        nomeOrigem.startsWith("VISA ANTECIPACAO") ||
                        nomeOrigem.startsWith("MASTER ANTECIPACAO") ||
                        nomeOrigem.startsWith("ESTORNO DE DEPOSITO") ||
                        nomeOrigem.startsWith("CHQ.PAGO OUTRA AGENCIA") ||
                        nomeOrigem.startsWith("TRANSF.AUTORIZ") ||
                        nomeOrigem.startsWith("DEPOSIT TRANSFER") ||
                        nomeOrigem.startsWith("TARIFA CHEQUE") ||
                        nomeOrigem.startsWith("VIDA E PREVIDEN") ||
                        nomeOrigem.startsWith("PARCELA OPER") ||
                        nomeOrigem.startsWith("LIQUIDACAO DE COBRANCA") ||
                        nomeOrigem.startsWith("DEPOSITO C/CORRENTE") ||
                        nomeOrigem.startsWith("MASTER DEBITO") ||
                        nomeOrigem.startsWith("REDE ELO DEBITO") ||
                        nomeOrigem.startsWith("MASTER DEBITO") ||
                        nomeOrigem.startsWith("DESCONTO DE CHEQUES") ||
                        nomeOrigem.startsWith("DEBITO DESCONTO") ||
                        nomeOrigem.startsWith("TAR COMANDADA") ||
                        nomeOrigem.startsWith("TARIFA BANCARIA") ||
                        nomeOrigem.startsWith("DEPOSITO EM DINHEIRO") ||
                        nomeOrigem.startsWith("BX.ANT.FINANC/EMP") ||
                        nomeOrigem.startsWith("DESCONTO ESCRITURAL") ||
                        nomeOrigem.startsWith("LIQUIDACAO COBRANCA DESC") ||
                        nomeOrigem.startsWith("CARGA CARTAO TRANSPORTES") ||
                        nomeOrigem.startsWith("RECIBO DE RETIRADA") || //#2304-003842
                        nomeOrigem.startsWith("OPERACAO CAPITAL GIRO") || //#2304-003842
                        nomeOrigem.startsWith("DEVOLUCAO PIX") || //#2304-003842
                        nomeOrigem.startsWith("DEBITO ANTECIPE CARTOES") || //#2304-003842
                        nomeOrigem.startsWith("PEND EM MORA") || //#2306-006148
                        nomeOrigem.startsWith("TRANSF/DEP") || //#2306-006148
                        nomeOrigem.startsWith("CARTAO VISA E") || //#2306-006148
                        nomeOrigem.startsWith("CIELO HIPER C") || //#2306-006148
                        nomeOrigem.startsWith("CIELO ANTECIPACAO O") || //#2306-006148
                        nomeOrigem.startsWith("CIELO VISA ANT") || //#2306-006148
                        nomeOrigem.startsWith("CIELO MASTER ANT") || //#2306-006148
                        nomeOrigem.startsWith("REDE VISA DEBITO") || //#2306-006148
                        nomeOrigem.startsWith("REDE MASTER DEBITO") || //#2306-006148
                        nomeOrigem.startsWith("REDE MASTER CREDITO") || //#2306-006148
                        nomeOrigem.startsWith("MASTER CREDITO") || //#2306-006148
                        nomeOrigem.equals("VISA CREDITO") || //#2306-006148
                        nomeOrigem.equals("ELO CREDITO") || //#2306-006148
                        nomeOrigem.equals("CABAL DEBITO") || //#2306-006148
                        nomeOrigem.equals("RECEBIMENTO FORNECEDOR") || //#2306-006148
                        nomeOrigem.startsWith("ANTECIPACAO DE CARTAO") || //#2306-006148
                        nomeOrigem.startsWith("ENCARGO ANTECIP") || //#2306-006148
                        nomeOrigem.startsWith("ESTORNO TARIFAS") || //#2306-006148
                        nomeOrigem.startsWith("BANESCARD CREDITO") || //#2306-006148
                        nomeOrigem.startsWith("PIX QR CODE DINAMICO") || //#2401-026567
                        nomeOrigem.startsWith("PIX QR CODE ESTATICO") || //#2401-026567
                        (nomeOrigem.startsWith("ADI") && nomeOrigem.contains("MENTO") && nomeOrigem.contains("OPER D")) || //#2306-006148
                        // nomeOrigem.startsWith("CARGA CRT") ||
                        (nomeOrigem.startsWith("CHEQUE") && !nomeOrigemAnterior.startsWith("TARIFA")) ) nomeOrigemAnterior = nomeOrigem;

                //2303-001843 - Necessário verificar a linha principal para gravar o contador, a fim de utilizá-lo na hora de manipular o nomeOrigem.
                if(memFile.getStringFieldRemoveEspCharsUpper(0).matches("[0-9]+(BRADESCO)?") && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && valorColB){
                    contAuxiliar = cont;
                    valorColB = false;
                }
                // logger.logInfo("MF FS -> " + memFile.getFieldsSize() + " |MF 0 ->> " + memFile.getStringFieldRemoveEspCharsUpper(0) + " |cont ->> " + cont + " |contAuxiliar -> " + contAuxiliar + " |NOA -> " + nomeOrigemAnterior);
                if(memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && (cont == contAuxiliar + 1) && contAuxiliar > 0 && nomeOrigemAnterior.equals("")){

                    // logger.logInfo("ENTROU UPDATE 456 == "+line);

                    extratoEmpresa = dbIOCont.sql("SELECT CHAVE,HISTORICO,COMPLEMENTO FROM IO_EXTRATO WHERE CHAVE = ?")
                            .fields("CHAVE,HISTORICO,COMPLEMENTO")
                            .param(chaveExtrato)
                            .queryUnique();

                    if (extratoEmpresa != null && extratoEmpresa.has("CHAVE")) {
                        try {

                            dbIOCont.update("IO_EXTRATO")
                                    .fields("HISTORICO")
                                    .where("CHAVE = ? ")
                                    .param(extratoEmpresa.optString("HISTORICO").replaceAll("[0-9]", "")    + " - " + memFile.getStringFieldRemoveEspCharsUpper(0))
                                    .param(chaveExtrato)
                                    .execute();
                        } catch (Exception sqlUpdateException) {
                            logger.logDebug("Erro no update: " + sqlUpdateException);
                        }
                    }
                    continue;
                }

                if(memFile.getFieldsSize() > 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && valorColB){
                    contadorAuxiliar = cont;
                    valorColB = false;
                    linhaPrincipal = true;
                }

                if(memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && (cont == contadorAuxiliar + 1) && contadorAuxiliar > 0 && nomeOrigemAnterior.equals("") && linhaPrincipal){

                    //logger.logInfo("LINE EXT BRDSC 2 == "+line);
                    // logger.logInfo("ENTROU UPDATE sergio == "+line);

                    extratoEmpresa = dbIOCont.sql("SELECT CHAVE,HISTORICO,COMPLEMENTO FROM IO_EXTRATO WHERE CHAVE = ?")
                            .fields("CHAVE,HISTORICO,COMPLEMENTO")
                            .param(chaveExtrato)
                            .queryUnique();

                    if (extratoEmpresa != null && extratoEmpresa.has("CHAVE")) {
                        try {

                            dbIOCont.update("IO_EXTRATO")
                                    .fields("HISTORICO")
                                    .where("CHAVE = ? ")
                                    .param(extratoEmpresa.optString("HISTORICO").replaceAll("[0-9]", "")    + " " + memFile.getStringFieldRemoveEspCharsUpper(0))
                                    .param(chaveExtrato)
                                    .execute();
                        } catch (Exception sqlUpdateException) {
                            logger.logDebug("Erro no update: " + sqlUpdateException);
                        }
                    }
                    linhaPrincipal = false;
                    continue;
                }

                // logger.logInfo("LINE EXT BRDSC 2 == "+line+" NP -> "+nomePortador);

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;


                // logger.logInfo("DMVV " + nomeOrigem + " | " + nomeOrigemAnterior + " | " + dataMovimento + " | " + valorDocumento + " | " + line);
                // logger.logInfo("DEE " + dataExtrato);
                // logger.logInfo("LINHAZINHA " + line);

                if (dataMovimento.equals("")) continue;
                if (valorDocumento == 0) continue;

                if (nomeOrigem.equals("TOTAL") && nomeOrigemAnterior.equals("")) continue;
                if (nomeOrigem.startsWith("SALDO") && !nomeOrigem.startsWith("SALDO DEV")) continue;
                if (complemento02.startsWith("SALDO") && !complemento02.startsWith("SALDO DEV")) continue;

                if (!nomeOrigemAnterior.equals("")) {
                    complemento02      = nomeOrigem;
                    if (!nomeOrigemAnterior.contains(complemento02) || nomeOrigemAnterior.contains("TED INTERNET")) nomeOrigem = nomeOrigemAnterior + " " + complemento02;
                    else if (nomeOrigemAnterior.contains(complemento02)) nomeOrigem = nomeOrigemAnterior;
                    nomeOrigemAnterior = "";
                }


                //Chamado #2311-022674 Leal
                idocumento = memFile.getFieldsSize() - 3;
                //Chamado #2311-022674 Leal
                if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).matches("[0-9]+")){
                    documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
                    documentoAux = documento;
                }
                nomeOrigem    = nomeOrigem.replaceAll("RECEBIMENTO FORNECEDOR","RECEBIMENTO FORNECEDOR ");
                complemento02 = complemento02.replaceAll("RECEBIMENTO FORNECEDOR","RECEBIMENTO FORNECEDOR ");

                if(nomeOrigem.contains("CHEQUE") && nomeOrigem.contains("COMPENSADO")){
                    if (dataExtrato.equals("")) {
                        complemento02  = memFile.getStringFieldRemoveEspCharsUpper(1);
                    }
                    else {
                        complemento02  = memFile.getStringFieldRemoveEspCharsUpper(2);
                    }
                }
            }

            if(tipoPadrao.equals("002")){


                achouData = false;

                String dataExtrato = "";

                if(memFile.getStringFieldRemoveEspCharsUpper(0).length() <= 10 && quantityOf(memFile.getStringFieldRemoveEspCharsUpper(0), "/") == 2) achouData = true;
                if(!memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && achouData == false && memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(0);

                try{
                    if (!memFile.getStringFieldRemoveEspCharsUpper(4).equals("")) dataExtrato     = getDate(dataExtrato, 0, line, false, "", memFile, logger);
                    else if (cutString(line, 0, "\\|").contains("/") && !memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) dataExtrato     = getDate(dataExtrato, 0, line, false, "", memFile, logger);
                }catch(Exception e){
                    // dataMovimento   = "";
                    // dataLote        = "";
                }
                if (achouData == false) {
                    nomeOrigem = nomeOrigemAnterior + " " +memFile.getStringFieldRemoveEspCharsUpper(0);
                    complemento02  = memFile.getStringFieldRemoveEspCharsUpper(1);
                    // Douglas # 202301-0024144
                    if(!memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && achouData == false && !memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) nomeOrigemAnterior = "";
                    try { valorDocumento = memFile.getDoubleField(2);
                    } catch (Exception e) { valorDocumento = 0;}
                }
                else {
                    nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(1);
                    complemento02  = memFile.getStringFieldRemoveEspCharsUpper(2);
                    try { valorDocumento = memFile.getDoubleField(3);
                    } catch (Exception e) { valorDocumento = 0;}
                }
                if (achouData == true) {
                    dataMovimento = dataExtrato;
                    dataLote	  = getCampoDate(dataMovimento, "", "yyyy-MM");
                }

                // if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXTRATO DE:")) {
                // nomePortador = memFile.getStringFieldRemoveEspCharsUpper(1);
                // continue;
                // }



                if (valorDocumento > 0)  debitoCredito = "EXTRATO-CREDITO";
                if (valorDocumento < 0)  debitoCredito = "EXTRATO-DEBITO";

                valorDocumento = Math.abs(valorDocumento);
                // logger.logInfo("dataMOvimento - > " + dataMovimento + " |valorDocumento -> " + valorDocumento + " |achouData -> " + achouData + " |no -> " + nomeOrigem);

                cont++;
                contLinhaExtrato = String.valueOf(cont);
                contLinhaExtrato = StringUtil.leftPad(contLinhaExtrato, 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;


                if (dataMovimento.equals("")) continue;
                if (valorDocumento == 0) continue;

                // if (nomeOrigem.equals("TOTAL") && nomeOrigemAnterior.equals("")) continue;



                if (nomeOrigem.startsWith("SALDO") && !nomeOrigem.startsWith("SALDO DEV")) continue;
                if (complemento02.startsWith("SALDO") && !complemento02.startsWith("SALDO DEV")) continue;

                // if (!nomeOrigemAnterior.equals("")) {
                // complemento02      = nomeOrigem;
                // if (!nomeOrigemAnterior.contains(complemento02) || nomeOrigemAnterior.contains("TED INTERNET")) nomeOrigem = nomeOrigemAnterior + " " + complemento02;
                // else if (nomeOrigemAnterior.contains(complemento02)) nomeOrigem = nomeOrigemAnterior;
                // nomeOrigemAnterior = "";
                // }

                // nomeOrigem    = nomeOrigem.replaceAll("RECEBIMENTO FORNECEDOR","RECEBIMENTO FORNECEDOR ");
                // complemento02 = complemento02.replaceAll("RECEBIMENTO FORNECEDOR","RECEBIMENTO FORNECEDOR ");

                // if(nomeOrigem.contains("CHEQUE") && nomeOrigem.contains("COMPENSADO")){
                // if (dataExtrato.equals("")) {
                // complemento02  = memFile.getStringFieldRemoveEspCharsUpper(1);
                // }
                // else {
                // complemento02  = memFile.getStringFieldRemoveEspCharsUpper(2);
                // }
                // }
            }


            // Buscar Extrato por Chave na Tabela IO_EXTRATO.


            // logger.logInfo("NORG " + nomeOrigem + " | " + complemento02 + " | " + quebraFolha + " | " + quebraFolha2 + " | " + umCampo);
            // logger.logInfo("TipoPadrao " + tipoPadrao + " |cp02 " + complemento02 + " |nP " + nomePortador+ " |LIN "+line);
            // logger.logInfo("LINHA AQ " + valorDocumento + " | " + line);

            // Inserir caso Chave nao encontrada.

            // logger.logInfo("LOG CAMPOS - NOME ORIGEM - " + nomeOrigem);
            // logger.logInfo("LOG CAMPOS - VALOR - " + valorDocumento);
            // logger.logInfo("LOG CAMPOS - DATA - " + dataMovimento);

            //#2312-024394 - Leal - Validacao feita dentro do read pois era preciso enviar o documento apenas para essa empresa
            // O documento era enviado atraves do complemento02, com essa alteracao agora e enviado no campo DOCUMENTO do banco
            if(!nomeContabilidade.toUpperCase().contains("SYSTEMA") && !nomeEmpresa.toUpperCase().contains("CAMFPRESTACAO")){
                documentoAux = null;
            }

            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documentoAux)
                            .param(nomePortador)
                            .param(nomeOrigem/* + " TESTEJOTA "*/)
                            .param(nomeArquivo.toUpperCase())
                            .param(documento)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }


        } catch (Exception ex) {
        }
    }
    return true;
}



public boolean readExtratoInterPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();


    return true;
}



public HashMap readExtratoFolhaSageExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

public HashMap readExtratoFolhaSageExcelv2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}








/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoViacredi(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readExtratoItauConsolidadoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    return true;
}


/*#############################################@ EXTRATO-CREDISAN-EXCEL @##############################################*/
public boolean readExtratoCredisanExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
    return true;

}



/*#############################################@ EXTRATO-CONTASIMPLES-EXCEL @##############################################*/
public boolean readExtratoContaSimplesExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
    return true;
}



/*#############################################@ EXTRATO-ORIGINAL-PDF @##############################################*/
public boolean readExtratoOriginalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - SOFISA
## ################################################################################################################## */
public boolean readExtratoSofisaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padrão EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoAbcExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


//####################################################################################################################################
//									EXTRATO UNICRED PDF
//####################################################################################################################################

public boolean readExtratoUnicredPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}

public boolean readExtratoUnicred3PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-EWALLY-EXCEL @##############################################*/
public boolean readExtratoEwallyExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


/*#############################################@ EXTRATO-BANCONORDESTE-EXCEL @##############################################*/
public boolean readExtratoBancoNordesteExcel(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BMPMONEYPLUS-EXCEL @##############################################*/
public boolean readExtratoBMPMoneyPlusExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-STONE-EXCEL @##############################################*/
public boolean readExtratoStoneExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-JUNO-EXCEL @##############################################*/
public boolean readExtratoJunoDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-CRESOL-EXCEL @##############################################*/
public boolean readExtratoCresolExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


//#############################################@ EXTRATO-ORIGINAL-EXCEL @##############################################/

public boolean readExtratoOriginalExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoPagbankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoCresolPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    return true;
}


public boolean readExtratoC6BankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


//####################################################################################################################################
//									EXTRATO BRB PDF
//####################################################################################################################################

public boolean readExtratoBRBPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoTopazioExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


public HashMap readFrancesinha_BradescoExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BRADESCO-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


public HashMap readFaturaCartaoCredito_SicoobPDFF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BB-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


public HashMap readFrancesinhaSantanderPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ FATURA-CARTAO-CREDITO-BRADESCO-PDF @##############################################*/
public HashMap readFaturaCartaoCredito_BanrisulPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoSulcrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoCredisanPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoPoupeCrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


//2312-024960
public HashMap readFrancesinhaUnicrediPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    return mapaVariavel;
}


public HashMap readFrancesinha_CefPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoAilosCiviaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBMGPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



public boolean readExtratoSicoobCapitalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoMercantilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoInfinitePayPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBKBankPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoNextPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoEfiExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoPagPixBankPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBanrisulPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public HashMap readFrancesinhaSafraPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoCrehnorPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoCoraExcel(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoNBCPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}

