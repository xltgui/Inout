{import: io_contabil.Database};
        {import: io_contabil.RegrasSemCartoes};
        {import: io_contabil.Duplicatas};
        {import: io_contabil.Util};
        {import: io_contabil.RunExtratosECartoes};
        {import: io_contabil.Ottimizza_MeuCaixa};
        {import: io_contabil.Lancamentos};
        {import: io_contabil.TemplateUtils};
        {import: io_contabil.OICUtils};


// TEMPLATE 15.03.2023
// Colocado tipoPlanilha no Lote Encerrado
// colocado para trocar XLSX por CSV se marcado no roteiro

public JSONArray run(InoutLogger logger) throws Exception {

    JSONArray  records  = new JSONArray();
    JSONObject ultimoJS = new JSONObject();

    // gera seguranca nas conexoes com Heroku
    // Create a trust manager that does not validate certificate chains
    javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[] {
            new javax.net.ssl.X509TrustManager(){
                public java.security.cert.X509Certificate[] getAcceptedIssuers(){ return null; }

                public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) { }

                public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) { }
            }
    };

    // Install the all-trusting trust manager
    try {
        javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext.getInstance("TLS");
        sc.init(null, trustAllCerts, new java.security.SecureRandom());
        javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
    } catch (Exception e) {
        //
    }


    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    SysProperties propsEmp = SysProperties.getInstance();
    JSONObject roteiroCRMPrincipal = getRoteiro();
    JSONObject roteiroCRM = getRoteiro();
    JSONObject jStatus = new JSONObject();


    props.load("contabil/" + roteiroCRM.optString("contabilidade") + "/contabil.properties");
    propsEmp.load("contabil/" + roteiroCRM.optString("contabilidade") + "/empresa.properties");

    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
    //Contectar na Base de Dados depara do heroku(nuvem)
    DBPostgreSQL dbIODepara = null;

    String empresa = getNomeEmpresa();


    String codEmpresa = props.get(empresa + "_COD_EMPRESA");

    if (codEmpresa == null) {
        empresa = propsEmp.get("NOME_EMPRESA").toUpperCase();
        codEmpresa = props.get(empresa + "_COD_EMPRESA");
    }

    //#2303-002125
    //codEmpresa que sera utilizado para consultar o plano de contas
    String codEmpresaPlanoContas = codEmpresa;
    if (roteiroCRM.optString("contabilidade").toUpperCase().contains("CONTIBEMASSESSORIA")) {
        codEmpresaPlanoContas = "000";
    }
    //2312-024058
    if (roteiroCRM.optString("contabilidade").toUpperCase().contains("SETEC")) {
        codEmpresaPlanoContas = "000";
    }

    String tipoProduto = "";
    try {
        tipoProduto = props.get(empresa + "_TIPO_PRODUTO");
    } catch (Exception xx) {tipoProduto = "OIC_PACOTE";}


    if (tipoProduto.equals("")) tipoProduto = "OIC_PACOTE";
    if (tipoProduto.contains("IMPLANTA")) tipoProduto = "OIC_PACOTE";
    if (tipoProduto.contains("AVULSO")) tipoProduto = "OIC_PACOTE";

    tipoProduto = "OIC_PACOTE";


    String processaOud = "";
    try {
        processaOud = props.get("PROCESSA_OUD");
    } catch (Exception e) {processaOud = "FALSE";}
    if (processaOud.equals("")) processaOud = "FALSE";

    String ERPContabil = props.get("ERP_CONTABILIDADE");
    String nomeEmpresa = props.get(empresa + "_NOME_EMPRESA");
    String cnpjEmpresa = props.get(empresa + "_CNPJ_EMPRESA");
    String emailResponsavel = props.get(empresa + "_EMAIL_RESPONSAVEL");
    String emailCanal = props.get("EMAIL_CANAL");
    String statusCRM = props.get(empresa + "_STATUS_CRM");
    String fornecedorUnico = props.get("FORNECEDOR_UNICO");


    String mantemArquivo = propsEmp.get("MANTEM_ARQUIVO");
    //if (mantemArquivo == null)
    mantemArquivo = "";

    String tipoLancamento = getNomeRota();
    if (tipoLancamento.toUpperCase().contains("PAGAS"))    tipoLancamento = "PAGAR";
    if (tipoLancamento.toUpperCase().contains("RECEBIDA")) tipoLancamento = "RECEBER";


    String compDirName = nomeEmpresa + "_#" + codEmpresa;
    String dirName = "";
    if (tipoLancamento.contains("PAGAR"))   dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/APagar";
    if (tipoLancamento.contains("RECEBER")) dirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRM.optString("contabilidade") + "/" + compDirName + "/AReceber";

    //logger.logInfo("Dir: "+dirName);

    String backupDirName = dirName + "/Processado";

    boolean erroShrink = false;
    boolean geraCabecalhoCordilheira = true;
    boolean cabecalhoNaoEncontrada        = true;
    boolean apagaExtrato        = false;
    boolean apagaContaT         = false;
    boolean geraRegraPortador   = false;
    boolean comparaRazao        = false;
    boolean encontrouComplemento = true;
    String tipoEmail            = "";
    String arquivoAgora         = tipoLancamento + "-" + DateUtil.dateToString(new Date(),"yyyyMMddhhmm");
    int    contadorArquivo      = 0;

    HashMap mapaVariavel		= new HashMap();
    HashMap mapaLote			= new HashMap();
    HashMap mapaDePara			= new HashMap();
    HashMap mapaOficial			= new HashMap();
    HashMap mapaDesconto		= new HashMap();
    HashMap mapaJuros   		= new HashMap();
    HashMap mapaPlano   		= new HashMap();
    HashMap mapaParcelaDominio	= new HashMap();
    HashMap mapaFornecedor 		= new HashMap();
    HashMap mapaPartPlano 		= new HashMap();
    HashMap mapaArquivo 		= new HashMap();
    HashMap mapaDocumento 		= new HashMap();

    JSONObject recordF = new JSONObject();


    String cruzaExtrato			= "";
    String Cruza_Extrato_com_Extrato = "";
    String mesAnoAnterior		= "";
    String mesAno2Anterior		= "";
    String mesAnoAtual			= "";
    int mesRef					= 0;
    int anoRef					= 0;
    String contaJuros			= "";
    String contaDesconto		= "";
    String contaMulta			= "";
    String contaTransitoria		= "";
    String contaEmpresaBranco	= "";
    String movimentoPortador	= "";
    String contaFixaDebito		= "";
    String contaFixaCredito		= "";
    String contaPortador		= "";		//pg - cred | rec - deb
    String contaMovimento		= "";		//pg - deb | rec - cred
    String tabelaContabil       = "";
    String dataMovimento        = "";
    String classificaPlano      = "";
    String classificaFornec     = "";

    boolean geraFiscal			= false;
    String [] loteFiscal		= new String[20];
    boolean apagaStatus         = false;

    String Conta_Fixa_Cruzamento_Extrato = "";
    String contaInvertida	= "";
    String contaBuscaPlano	= "";
    String nomeArquivo      = "";
    String chave			= "";
    String classificacao	= "";
    String dataLote			= DateUtil.dateToString(new Date(),"yyyy-MM");
    String lote						= "";
    String regraContaMovimento 		= "";
    String regraHistorico 			= "";
    String separadorCsv				= ";";
    String separadorTxt				= "";
    String tipoPlanilha				= "";
    String contaTemp				= "";
    String mesesdoAno			    = "JAN;FEV;MAR;ABR;MAI;JUN;JUL;AGO;SET;OUT;NOV;DEZ";
    boolean primeiroArquivo 		= true;
    boolean primeiraVezDuplicata	= true;
    boolean acumulouAntes			= false;
    boolean leuFinanceiro			= false;
    boolean dupliNaoEncontContabil	= false;
    boolean forcarPartidaDobrada	= false;
    boolean temOFX					= false;
    boolean temFiltro				= false;
    boolean temFiscal  				= false;
    boolean temLinhas               = false;
    boolean temIgnorar              = false;
    boolean logs = false;
    StringBuilder logsTxt = new StringBuilder();

    int abaConvertida = 0;

    String retornaPadroes = "";

    String zerarColAlternativo		= "";
    JSONObject deParaObj 			= new JSONObject();
    //logger.logInfo("Template Empresa -> " + nomeEmpresa);
    //logger.logInfo("Padrao empresa " + mantemArquivo);
    try {

        // #DOCUMENTACAO
        // FOR leitura dos arquivos das extensoes abaixo
        // altera-se aqui para NAO LER xlsx por exemplo

        // liberado em 25/11/2020 @DiMaz
        // se precisar alterar somente as quantidades qX e qY
        // cada unidade processa cerca de 3 arquivos ou seja 3 no qY processa uns 9 arquivos excel e uns 9 pdf por vez.
        // aumentar muito o XLSX pode causar TRAVAMENTOS
        int qX	= 9;	//ofx,csv,txt
        int qY	= 3;	//xlsx,pdf
        int qTotal = (qX*3)+(qY*2);
        String extensao = "";
        for(int extArquivo = 0; extArquivo < qTotal; extArquivo++) {
            if (extArquivo < qX)									extensao = ".ofx,.OFX,.omc,.OMC,.html,.HTML,.ret,.RET";
            if (extArquivo >= qX && extArquivo < (2*qX))			extensao = ".pdf,.PDF";
            if (extArquivo >= (2*qX) && extArquivo < (2*qX+qY))		extensao = ".xlsx,.XLSX";
            if (extArquivo >= (2*qX+qY) && extArquivo < (3*qX+qY))	extensao = ".txt,.TXT,.ret,.RET";
            if (extArquivo >= (3*qX+qY))							extensao = ".csv,.CSV";

            if (roteiroCRMPrincipal.has("ignoraExel") && roteiroCRMPrincipal.optString("ignoraExel").toUpperCase().equals("TRUE")) {
                extensao = extensao.replace(".XLSX",".CSV").replace(".xlsx",".csv");
            }
            boolean ignoraAbas = false;

            // ------------------------------------------------------------------------------------------
            // colocado para nao ler pelo template mais de 3 planilhas xlsx por rodada
            // Motivo: quando tem planilha grande em excel para ler na personalizada
            // o sistema roda varias vezes a leitura da planilha no template e depois tudo de novo na personalizada.
            //if (mantemArquivo.equals("SIM") && extensao.contains(".XLSX") && extArquivo > 20) continue;
            // ------------------------------------------------------------------------------------------

            for (int porAba = 0; porAba < 60; porAba++) {

                // #DOCUMENTACAO
                // tratamento de abas vindas do CRM

                String apagaArquivo		= backupDirName;
                String abasEspecificas	= roteiroCRMPrincipal.optString("Abas_Especificas");
                abasEspecificas 		= abasEspecificas.replace(",",";");

                if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1;2;3;4;5;6;7;8;9;10";
                // if (mantemArquivo.equals("SIM")) abasEspecificas = "0;1";
                if (!extensao.contains("XLSX") || ignoraAbas)  abasEspecificas = "";

                // liberado em 25/11/2020 @DiMaz
                // tratar js.put("Abas_Especificas", "0-60");
                // grande numero de abas pode travar o nosso sistema
                String abasFor = "";
                if (!abasEspecificas.contains(";") && abasEspecificas.contains("-") && abasEspecificas.length() <= 7) {
                    try {
                        int a = Integer.parseInt(abasEspecificas.substring(0,abasEspecificas.indexOf("-")));
                        int b = Integer.parseInt(abasEspecificas.substring(abasEspecificas.indexOf("-")+1));
                        for (int k = a; k <= b; k++){
                            if (k < b) abasFor += k+";";
                            else abasFor += k;
                        }
                    } catch (Exception fr) {}
                    if(!abasFor.equals("")) abasEspecificas = abasFor;
                }


                if (abasEspecificas.equals("")) {
                    if (porAba > 0) break;
                }
                if (!abasEspecificas.equals("")) {
                    if (!abasEspecificas.contains(String.valueOf(porAba))) {
                        continue;
                    }

                    String ultimaAba = abasEspecificas;
                    if (ultimaAba.contains(";")) ultimaAba = ultimaAba.substring(ultimaAba.lastIndexOf(";")+1).trim();
                    if (!ultimaAba.equals(String.valueOf(porAba)) && extensao.contains(".XLSX")) apagaArquivo = null;
                }

                // #DOCUMENTACAO
                // auto ajuste do separador de CSV e TXt


                if(extensao.contains("CSV"))  separadorCsv = verificaSeparador(separadorCsv, dirName, extensao, props, logger);
                logger.logInfo("sep ->" + separadorCsv);
                if(extensao.contains("TXT"))  separadorTxt = verificaSeparador(separadorTxt, dirName, extensao, props, logger);



                // #DOCUMENTACAO
                // carregamento do arquivo

                if (mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) apagaArquivo = null;
                // salva arquivo no hasmap para posterior eliminacao


                FilesLoader fileLoader = new FilesLoader(dirName, extensao, apagaArquivo, true, logger);
                int[] abas = {porAba};
                fileLoader.setSheetsToRead(abas);
                try {
                    fileLoader.loadFiles();
                } catch (Exception e) {
                    // logger.logInfo("NAO CONVERTEU PDF " + e.getMessage());
                    File file2 = new File(dirName);

                    File []  arquivoParaConverter = file2.listFiles();
                    if (FileUtil.dirHasFiles(dirName)) {
                        for (File fl: arquivoParaConverter) {
                            if (fl.getName().toUpperCase().contains(".PDF")) {
                                LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                // String idConversor  = TemplateUtils.getIdLote(fl.getName());
                                // logger.logInfo("FOI PRO CONVERSORANTES " + fl.getName());
                                boolean deubom = false;
                                deubom = buscaProtocoloConversor("", apiWeb, tipoLancamento.toLowerCase(), fl.getName(), logger);
                                try {
                                    FileUtil.deleteFile(fl);
                                } catch (Exception XX) {}

                                if (deubom) break;
                            }
                        }
                    }
                }
                try { forcarPartidaDobrada	= Boolean.parseBoolean(roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toLowerCase().trim()); }
                catch (Exception bl) {forcarPartidaDobrada = false;}

                //2304-003551. Quando utiliza esse ERP ? obrigado a sem em partida dobrada.
                if (roteiroCRMPrincipal.optString("erpContabilidade").equals("DOMINIO2") || roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA") || roteiroCRMPrincipal.optString("erpContabilidade").equals("CORDILHEIRA") || roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE")) {
                    forcarPartidaDobrada = true;
                }

                for (MemoryFile memFile: fileLoader.getMemFiles()) {

                    // caso arquivo tenha mais de 250.000 linhas sera ignorado  . Xavier e Mello em 07.06.2023
                    if (memFile.getTotalLines() > 250000 ){
                        temLinhas = true;
                        break;
                    }

                    nomeArquivo = memFile.getFilename().replace("%","");

                    if (nomeArquivo.toUpperCase().startsWith("ABA_")) {

                        abaConvertida = TemplateUtils.verificaAba(nomeArquivo);
                        abasEspecificas = roteiroCRMPrincipal.optString("Abas_Especificas");

                        // logger.logInfo("ACE " + nomeArquivo + " | " + abaConvertida + " | " + abasEspecificas);

                        if (!abasEspecificas.equals("")) {
                            if (!abasEspecificas.contains(String.valueOf(abaConvertida))) continue;
                        }
                    } else abaConvertida = porAba;

                    contadorArquivo++;


                    // =======================  =================   =======================
                    // =======================  VARIAVEIS PADROES   =======================
                    // =======================  =================   =======================
                    String historico      = "";

                    String codCcOrigem    = "";
                    String cpfCnpj        = "";
                    String nomeOrigem     = "";
                    String nomePortador   = "";
                    String nomePortador2  = "";
                    String documento      = "";
                    int    parcelaDoc     = 1;
                    double valorDocumento = 0.00;
                    double valorPagamento = 0.00;
                    double valorDesconto  = 0.00;
                    double valorJuros     = 0.00;
                    double valorMulta     = 0.00;
                    double valorAlternativo = 0;

                    int icodCcOrigem    = -1;
                    int icpfCnpj        = -1;
                    int inomeOrigem     = -1;
                    int inomePortador   = -1;
                    int idocumento      = -1;
                    int idataMovimento  = -1;
                    int ivalorDocumento = -1;
                    int ivalorAlternativo = -1;
                    int ivalorPagamento = -1;
                    int ivalorDesconto  = -1;
                    int ivalorJuros     = -1;
                    int ivalorMulta     = -1;
                    int icomplemento01  = -1;
                    int icomplemento02  = -1;
                    int icomplemento03	= -1;
                    int icomplemento04  = -1;
                    int icomplemento05	= -1;
                    int icomplemento06	= -1;
                    int icomplemento07	= -1;
                    int icomplemento08	= -1;
                    int icomplemento09	= -1;
                    int icomplemento10	= -1;
                    int idataFake		= -1;

                    String contaGetConta	= "";
                    contaPortador	= "";		//pg - cred | rec - deb
                    contaMovimento	= "";		//pg - deb | rec - cred

                    String complemento01	= "";
                    String complemento02	= "";
                    String complemento03	= "";
                    String complemento04	= "";
                    String complemento05	= "";
                    String complemento06	= "";
                    String complemento07	= "";
                    String complemento08	= "";
                    String complemento09	= "";
                    String complemento10	= "";
                    String codCentroCusto	= "";
                    String codFilial        = "";

                    double valorTotalDoc	= 0.0;
                    double valorTotalJuros	= 0.0;
                    double valorTotalDesc	= 0.0;

                    double [] valorDocumentoArray = {0,0,0,0,0,0,0,0,0,0};

                    String classJur			= "";
                    String classDes			= "";
                    String classMul			= "";

                    String codErroString	= "";
                    int cont				= 0;
                    String linhasProblema	= "";
                    String idEmpresa        = "";
                    String idRoteiro  	    = "";

                    String histAux			= "";
                    String anoData			= "";
                    boolean zerar			= true;
                    boolean filtro			= true;


                    String lerAposPrincipal   = "";
                    boolean isLinhaPrincipal  = false;
                    boolean ignorarAntes	  = false;
                    boolean tratarComoExtrato = false;
                    boolean tratarComoDesconto = false;
                    boolean tratarComoJuros = false;

                    dataMovimento        = "";

                    double partidaDobradaJuros		= 0;
                    double partidaDobradaDesconto	= 0;
                    double partidaDobradaMulta		= 0;
                    double valorSomaArray			= 0;

                    String numSeparadorDuplicata = ""; //convertido em int depois

                    StringBuilder cabecalhoPlanilha = new StringBuilder();
                    StringBuilder cabecalhoRegra    = new StringBuilder(); // quarda pemanente as 9 primeiras linhas de cada planilha / aba

                    int  	      contadorCabecalho = 0;

                    // #DOCUMENTACAO
                    // definicao de separador do arquivo
                    // se ouver separador em TXT deve ser tratado caso a caso
                    // evitar usar tabulacao como separador

                    if(extensao.contains(".xlsx,.XLSX")) memFile.setFieldSeparator("\\|");
                    if(extensao.contains(".pdf,.PDF"))   memFile.setFieldSeparator("\\|");
                    if(extensao.contains(".csv,.CSV"))	 memFile.setFieldSeparator(separadorCsv);
                    if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(separadorTxt);

                    // if (codEmpresa.equals("9999")) memFile.setFieldSeparator(";");

                    if (nomeArquivo.toUpperCase().contains(".PDF")) {

                        // logger.logInfo("ARREPENDE " + nomeArquivo /*memFile.getLines().toString().contains("##$%#&") +*/  + " | " +  memFile.getLines().toString().toUpperCase());
                        boolean rodaConversorNovo = TemplateUtils.verificaConversorNovo(StringUtil.removeSpecialCharsToUC(memFile.getLines().toString()).toUpperCase());

                        if (rodaConversorNovo) {
                            LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                            String idConversor  = TemplateUtils.getIdLote(nomeArquivo);
                            // logger.logInfo("FOI PRO CONVERSOR1 " + nomeArquivo);
                            boolean deubom = false;
                            deubom = buscaProtocoloConversor(idConversor, apiWeb, tipoLancamento.toLowerCase(), nomeArquivo, logger);

                            if (deubom) {
                                File file2 = new File(dirName);

                                File []  arquivoParaConverter = file2.listFiles();
                                if (FileUtil.dirHasFiles(dirName)) {
                                    for (File fl: arquivoParaConverter) {
                                        if (fl.getName().toUpperCase().contains(".PDF")) {
                                            try {
                                                FileUtil.deleteFile(fl);
                                            } catch (Exception XX) {}

                                            break;
                                        }
                                    }
                                }
                            }
                            continue;
                        }
                    }


                    if(roteiroCRMPrincipal.has("delimitadorDoArquivo") && !roteiroCRMPrincipal.optString("delimitadorDoArquivo").equals("")) {
                        if(extensao.contains(".txt,.TXT")) memFile.setFieldSeparator(roteiroCRMPrincipal.optString("delimitadorDoArquivo"));
                    }

                    //nao pode usar o line contem  ';' pois nao existe line neste ponto ainda.
                    if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO")) {
                        if(extensao.contains(".txt,.TXT"))	 memFile.setFieldSeparator(";");
                    }

                    String abaArquivo = String.valueOf(abaConvertida);
                    if (abaConvertida == 0) abaArquivo = "0";

                    // colocado para nao importar 2x o mesmo arquivo e mesma aba
                    ttArquivo ttArq    = (ttArquivo)mapaArquivo.get(abaArquivo+"-"+nomeArquivo+"-"+abaArquivo);
                    if (ttArq          == null) {
                        ttArq          = new ttArquivo();
                        ttArq.arquivo  = abaArquivo+"-"+nomeArquivo+"-"+abaArquivo;

                    } else continue;
                    mapaArquivo.put(abaArquivo+"-"+nomeArquivo+"-"+abaArquivo,ttArq);

                    // putStatus(dirName, "01--Etapa 1 de 4--" + tipoLancamento + ".status", jStatus, logger);
                    // logger.logInfo("NAAQ " + nomeArquivo.toUpperCase() + " | " + extensao + " | " + separadorCsv);

                    // #DOCUMENTACAO
                    // conecta ao BANCO DE DADOS
                    if (dbIOCont == null) {
                        dbIOCont = connectIOContabil(props, logger);
                    }

                    if (dbIODepara == null) {
                        //dbIODepara = connectDeParaDb(logger);
                    }

                    if(primeiroArquivo) {
                        limparIORoteiro(codEmpresa, tipoLancamento, dbIOCont, logger);
                        primeiroArquivo = false;
                    }

                    //########################################################################

                    contaJuros		    = roteiroCRM.optString("contaFixaJuros");
                    contaFixaCredito    = roteiroCRM.optString("contaFixaCredito");
                    contaFixaDebito     = roteiroCRM.optString("contaFixaDebito");
                    contaDesconto 	    = roteiroCRM.optString("contaFixaDesconto");
                    contaMulta		    = roteiroCRM.optString("contaFixaMulta");
                    idEmpresa      	    = roteiroCRM.optString("idEmpresa");
                    idRoteiro   	    = roteiroCRM.optString("idRoteiro");
                    movimentoPortador   = roteiroCRM.optString("movimentoPortador");
                    classificaPlano     = roteiroCRM.optString("classificaPlano");
                    classificaFornec    = roteiroCRM.optString("classificaFornec");
                    cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
                    Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
                    numSeparadorDuplicata   = roteiroCRM.optString("Coluna_Valor_Duplicata_Dominio");

                    tipoPlanilha = "MOVIMENTO";
                    boolean enviaEmailExtrato = false;
                    boolean naoLeMais = false;

                    tipoEmail = "CLIENTE";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZA"))  tipoEmail = "CANAL";
                    if (nomeArquivo.toUpperCase().contains("OTTIMIZZAF")) tipoEmail = "SUPORTE";

                    String debitoCredito   		 = "";
                    String chaveExtrato    		 = "";

                    //if(roteiroCRM.has("contaBuscaPlano"))contaBuscaPlano = roteiroCRM.optString("contaBuscaPlano");

                    // =======================  ========================   =======================
                    // =======================  VARIAVEIS PERSONALIZADAS   =======================
                    // =======================  ========================   =======================


                    JSONObject objetoParametro = new JSONObject();

                    // #DOCUMENTACAO
                    // busca de indices da planilha principal
                    if (tipoPlanilha.equals("MOVIMENTO")) {
                        roteiroCRM = getRoteiro();

                        inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
                        idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
                        inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
                        idocumento      = getIndice("documento", idocumento, roteiroCRM);
                        ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
                        ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
                        ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
                        ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
                        icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
                        ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
                        ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
                        icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
                        icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
                        icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
                        icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
                        icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
                        icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
                        icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
                        icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
                        icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
                        icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
                        idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
                        icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);

                        zerar 			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());
                    }
                    jStatus = new JSONObject();
                    // logger.logInfo("PUTSTATUS 524 " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba + " | " + memFile.getTotalValidLines());
                    if (memFile.getTotalValidLines() > 0) {
                        // logger.logInfo("PUTSTATUS 527 " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba + " | " + memFile.getTotalValidLines());
                        putStatus(dirName, "", jStatus, logger);
                    }
                    try{
                        // #DOCUMENTACAO
                        // leitura linha a linha
                        while (memFile.hasNextLine()) {
                            // logger.logInfo("PUTSTATUS WHILE " + nomeArquivo + " | " + cont + " | " + apagaArquivo + " | " + porAba);
                            try {
                                String line = memFile.nextLine();
                                line = StringUtil.removeSpecialCharsToUC(line);

                                // logger.logInfo("Line -> "+tipoPlanilha + "<<>>" + porAba + "<<>>" + cutString(line,0,30));
                                //logger.logInfo("TP = "+tipoPlanilha+" | LN = "+line);


                                contadorCabecalho++;
                                if (contadorCabecalho<15) {
                                    cabecalhoPlanilha.append(line).append(" ");
                                    cabecalhoRegra.append(stringNormalizer(line.replaceAll("\\|","").replaceAll("\"","").replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replaceAll("  ", " "), true)).append(" ");
                                }
                                else {
                                    cabecalhoPlanilha = new StringBuilder();

                                    // ganha performance nao tendo que ler a planilha vezes pelo template se nao for roteiro secundario
                                    if (mantemArquivo.equals("SIM") && tipoPlanilha.equals("MOVIMENTO") && abaConvertida > 2) ignoraAbas = true;
                                }
                                // logger.logInfo("PUTSTATUS 550");
                                if (cont < 10)   putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + "-" + cont + ".status", jStatus, logger);


                                ////////////////////////////////////////////////////////////////////////////////
                                ///////////////////////////////////////////////////////////// INICIO DOS PADROES
                                ////////////////////////////////////////////////////////////////////////////////

                                JSONObject jDadosPadrao = new JSONObject();
                                jDadosPadrao.put("TIPOLANCAMENTO", tipoLancamento).put("NOMEEMPRESA",nomeEmpresa)
                                        .put("CODEMPRESA", codEmpresa).put("CONTABILIDADE", roteiroCRM.optString("contabilidade"))
                                        .put("NOMEARQUIVO", nomeArquivo);
                                //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
                                //LEITURA PADRAO ARQUIVOS .OMC
                                //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
                                if (nomeArquivo.toUpperCase().contains(".OMC")) {

                                    tipoPlanilha = "OTT-MEUCAIXA";
                                    jDadosPadrao.put("TIPOPLANILHA",   tipoPlanilha);

                                    mapaVariavel = readOttimizzaMeuCaixa(memFile, dbIOCont, jDadosPadrao, mapaVariavel, logger);
                                    jStatus = new JSONObject();
                                    putStatus(dirName, "",  new JSONObject(), logger);
                                    // salva arquivo no hasmap para posterior eliminacao
                                    ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
                                    if (ttArq          == null) {
                                        ttArq          = new ttArquivo();
                                        ttArq.arquivo  = nomeArquivo;

                                    }
                                    mapaArquivo.put(nomeArquivo,ttArq);
                                    // double tempoInicio1 = System.currentTimeMillis();
                                    // logger.logInfo("Tempo Rota2; " + String.format("%.2f", (System.currentTimeMillis() - tempoInicio1) / 1000));
                                    break;
                                }

                                //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--
                                //LEITURA PADRAO ARQUIVOS .OFX
                                //--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--

                                // quando se mantem o arquivo, somente devem ser processados arquivos padroes
                                // planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
                                // logger.logInfo("NAOFX NO TEMPLATES " + nomeArquivo.toUpperCase() + " | " + mantemArquivo + " | " +tipoProduto);
                                if (nomeArquivo.toUpperCase().contains(".OFX")) {

                                    if (!mantemArquivo.equals("SIM") || !tipoProduto.equals("OIC_PACOTE")) {
                                        tipoPlanilha = "EXTRATO-OFX";


                                        // quando o OFX vem em apenas 1 linha todas as informacoes
                                        // quebramos linha e geramos um novo arquivo para gerar como um ofx normal
                                        if (line.contains("ACCTID")) {
                                            String fileOfx = dirName + "/" + nomeArquivo.toLowerCase().replaceAll(".ofx","_2.ofx");
                                            FileWriter writer = new FileWriter(fileOfx);
                                            writer.writeNewFile(line.replaceAll("><",">\r\n<"));
                                        }
                                        putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", new JSONObject(), logger);     putStatus(dirName, "02--Etapa 2 de 4--" + tipoLancamento + ".status", jStatus, logger);
                                        jDadosPadrao.put("CODEMPRESA", codEmpresa);
                                        jDadosPadrao.put("TIPOLANCAMENTO", tipoLancamento);
                                        jDadosPadrao.put("NOMEEMPRESA",    nomeEmpresa);
                                        jDadosPadrao.put("NOMEARQUIVO",    nomeArquivo);
                                        if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) jDadosPadrao.put("CHECKNUM", "CHECKNUM");	//usar para retornar o documento do OFX no complemento02
                                        readOFXDefault(memFile, jDadosPadrao, dbIOCont, logger);
                                        jStatus = new JSONObject();
                                        // logger.logInfo("PUTSTATUS 615");
                                        putStatus(dirName, "",  new JSONObject(), logger);
                                        temOFX = true;
                                        break;
                                    }

                                    // quando FOR OFX e estiver rodando pelo template
                                    // e a empresa for OIC pacote rodar pela especifica, entao foi dado um break para agili
                                    if (mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
                                        break;
                                    }

                                }

                                // quando se mantem o arquivo, somente devem ser processados arquivos padroes
                                // planilhas do roteiro movimento (principal), OFX e demais devem ficar para a rota normal
                                // if(codEmpresa.equals("3673")){
                                // logger.logInfo("mAATEMPLATE " + mantemArquivo + " | " + tipoProduto + " | " + apagaArquivo + " | " + roteiroCRM.optString("Planilhas_Padroes") + " | " + tipoPlanilha + " | " + tipoProduto);
                                // }
 								/*if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  || (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE"))) {
								// if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && abaConvertida == 0)  // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!


									JSONObject variaveis = new JSONObject();
									variaveis.put("line", 			line);
									variaveis.put("anoData", 		anoData);
									variaveis.put("dirName", 		dirName);
									variaveis.put("jStatus", 		jStatus);
									variaveis.put("extensao", 		extensao);
									variaveis.put("codEmpresa", 	codEmpresa);
									variaveis.put("nomeArquivo", 	nomeArquivo);
									variaveis.put("nomeEmpresa", 	nomeEmpresa);
									variaveis.put("nomePortador", 	nomePortador);
									variaveis.put("tipoPlanilha", 	tipoPlanilha);
									variaveis.put("complemento01", 	complemento01);
									variaveis.put("complemento02", 	complemento02);
									variaveis.put("nomePortador2", 	nomePortador2);
									variaveis.put("tipoLancamento", tipoLancamento);
									variaveis.put("cabecalhoPlanilha", cabecalhoPlanilha.toString());

									String retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);

									//logger.logInfo("CHAMOU O TEMPLATE " + retornaPadroes);

									JSONObject objRetorno = new JSONObject(retornaPadroes);
									if (objRetorno.has("tipoRetorno")) {
										anoData        = objRetorno.optString("anoData");
										retornaPadroes = objRetorno.optString("tipoRetorno");
										nomePortador   = objRetorno.optString("nomePortador").trim();
										complemento01  = objRetorno.optString("complemento01").trim();
										nomePortador2  = objRetorno.optString("nomePortador2").trim();
									}
									// logger.logInfo("NP2 == "+nomePortador2);
									if (retornaPadroes.equals("continue")) continue;
									if (retornaPadroes.equals("break"))   {
										jStatus = new JSONObject();
										logger.logInfo("PUTSTATUS 657");
										putStatus(dirName, "", jStatus, logger);
										break;
									}
								}*/

                                if (!cabecalhoPlanilha.toString().equals("") && (!roteiroCRM.optString("Planilhas_Padroes").equals("") && apagaArquivo != null  || (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")))) {
                                    // if (!roteiroCRM.optString("Planilhas_Padroes").equals("") && abaConvertida == 0)  // PROBLEMAS COM PLANILHAS PADROES EM MAIS DE UMA ABA!

                                    JSONObject variaveis = new JSONObject();
                                    variaveis.put("line", 			line);
                                    variaveis.put("anoData", 		anoData);
                                    variaveis.put("dirName", 		dirName);
                                    variaveis.put("jStatus", 		jStatus);
                                    variaveis.put("extensao", 		extensao);
                                    variaveis.put("codEmpresa", 	codEmpresa);
                                    variaveis.put("nomeArquivo", 	nomeArquivo);
                                    variaveis.put("nomeEmpresa", 	nomeEmpresa);
                                    variaveis.put("nomePortador", 	nomePortador);
                                    variaveis.put("tipoPlanilha", 	tipoPlanilha);
                                    variaveis.put("complemento01", 	complemento01);
                                    variaveis.put("complemento02", 	complemento02);
                                    variaveis.put("nomePortador2", 	nomePortador2);
                                    variaveis.put("tipoLancamento", tipoLancamento);
                                    variaveis.put("cabecalhoPlanilha", cabecalhoPlanilha.toString());

                                    // if (codEmpresa.contains("104")) {
                                    // roteiroCRM.put("Planilhas_Padroes", "Extrato_C6Bank_PDF");
                                    // }

                                    // logger.logInfo("nome do arquivo " + nomeArquivo);

                                    retornaPadroes = verificaExtratos(variaveis, mapaVariavel, memFile, roteiroCRM, dbIOCont, logger);


                                    // logger.logInfo("retorna padroes -> " + retornaPadroes);


                                    // logger.logInfo("CHAMOU O TEMPLATE " + retornaPadroes);

                                    JSONObject objRetorno = new JSONObject(retornaPadroes);
                                    if (objRetorno.has("tipoRetorno")) {
                                        anoData        = objRetorno.optString("anoData");
                                        retornaPadroes = objRetorno.optString("tipoRetorno");
                                        nomePortador   = objRetorno.optString("nomePortador").trim();
                                        complemento01  = objRetorno.optString("complemento01").trim();
                                        nomePortador2  = objRetorno.optString("nomePortador2").trim();
                                    }

                                    // logger.logInfo("NP23 " + nomePortador + " | " + nomePortador2);

                                    // logger.logInfo("NP2 ==== "+nomePortador2);
                                    if (retornaPadroes.equals("continue")) continue;
                                    if (retornaPadroes.equals("break"))   {
                                        jStatus = new JSONObject();
                                        putStatus(dirName, "", jStatus, logger);
                                        break;
                                    }
                                }

                                //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~-
                                //                      LEITURA PADRAO DE DUPLICATAS
                                //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~-
                                if(roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE")){


                                    jDadosPadrao.put("erpContabilidade",  roteiroCRMPrincipal.optString("erpContabilidade"));
                                    jDadosPadrao.put("LINE",              line);
                                    jDadosPadrao.put("PRIMEIRAVEZ",       primeiraVezDuplicata);
                                    jDadosPadrao.put("DIRNAME",      		dirName);
                                    jDadosPadrao.put("TIPOPLANILHA",      tipoPlanilha);
                                    jDadosPadrao.put("TIPOLANCAMENTO",    tipoLancamento);

                                    if (!numSeparadorDuplicata.equals("")) jDadosPadrao.put("NUMSEPARADOR", numSeparadorDuplicata);

                                    if (!roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("NAO USAR")) {
                                        jDadosPadrao.put("CONTROLAPARCELA",  true);

                                    }

                                    primeiraVezDuplicata = leituraDuplicataPadrao(jDadosPadrao, memFile, mapaVariavel, dbIOCont, logger);

                                    if(!primeiraVezDuplicata){
                                        jStatus = new JSONObject();
                                        // logger.logInfo("PUTSTATUS 687");
                                        putStatus(dirName, "", jStatus, logger);
                                        break;
                                    }
                                }



                                /// BUSCA COTNRATOS EM ABERTO (RECEBIMENTOS) PARA BAIXA DE CONTRATOS IMOBILIARIOS
                                if(roteiroCRM.optString("Integracao_contratos").toUpperCase().contains("TRUE") &&
                                        roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO")) {


                                    if (line.contains("DOCUMENTO") &&
                                            line.contains("EMISSAO") &&
                                            line.contains("V. PARCELA") &&
                                            line.contains("DEVOLUCAO") &&
                                            line.contains("SALDO") &&
                                            line.contains("SITUACAO")) {


                                        tipoPlanilha = "DUPLICATA-DOMINIO";

                                        if(primeiraVezDuplicata) limparIODuplicataTipoPlanilha(codEmpresa, dbIOCont, tipoPlanilha, logger);

                                        JSONObject jIndices = new JSONObject();

                                        jIndices.put("IVENCIMENTO", 9);
                                        jIndices.put("INOMEORIGEM", 4);
                                        jIndices.put("IDUPLICATA", 4);
                                        jIndices.put("IVALORPARCELA", 12);


                                        jIndices.put("CODEMPRESA", codEmpresa);
                                        jIndices.put("TIPOPLANILHA", tipoPlanilha);

                                        primeiraVezDuplicata = inserirIODuplicata_DominioPlanilha02(jIndices, memFile, dbIOCont, logger);
                                        primeiraVezDuplicata = false;
                                        jStatus = new JSONObject();
                                        // logger.logInfo("PUTSTATUS 730");
                                        putStatus(dirName, "", jStatus, logger);

                                        break;
                                    }
                                }



                                ////////////////////////////////////////////////////////////////////////////////
                                //////////////////////////////////////////////////////////////// FIM DOS PADROES
                                ////////////////////////////////////////////////////////////////////////////////

                                // #DOCUMENTACAO
                                // lipeza de variaveis e de indices ao mudar de TIPOPLANILHA
                                // logger.logInfo("CPTS " + cabecalhoPlanilha.toString());
                                JSONObject jDadosObj = new JSONObject();
                                if(!tipoPlanilha.equals(getTipoPlanilha(cabecalhoPlanilha.toString() + " " + line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj))){
                                    inomeOrigem			= -1;		nomeOrigem		= "";
                                    idataMovimento		= -1;		dataMovimento	= "";
                                    inomePortador		= -1;		nomePortador	= "";
                                    idocumento			= -1;		documento		= "";
                                    icpfCnpj			= -1;		cpfCnpj			= "";
                                    icodCcOrigem		= -1;       codCcOrigem		= "";
                                    icomplemento01		= -1;      	complemento01	= "";
                                    icomplemento02		= -1;      	complemento02	= "";
                                    icomplemento03		= -1;      	complemento03	= "";
                                    icomplemento04		= -1;      	complemento04	= "";
                                    icomplemento05		= -1;      	complemento05	= "";
                                    icomplemento06		= -1;      	complemento06	= "";
                                    ivalorDocumento		= -1;		complemento07	= "";
                                    ivalorAlternativo	= -1;		complemento08	= "";
                                    ivalorJuros			= -1;		complemento09	= "";
                                    ivalorDesconto		= -1;		complemento10	= "";
                                    ivalorMulta			= -1;
                                    ivalorPagamento		= -1;
                                    idataFake			= -1;
                                }
                                // #DOCUMENTACAO
                                // busca tipoplanilha e indices da planilhas secundarias

                                tipoPlanilha = getTipoPlanilha(cabecalhoPlanilha.toString() + " " + line, tipoPlanilha, StringUtil.removeSpecialChars(nomeArquivo), jDadosObj);
                                // if(codEmpresa.equals("1672")){
                                // logger.logInfo("TP -> "+tipoPlanilha+" | CPTOSTRI = "+cabecalhoPlanilha.toString());
                                // }

                                if (nomeArquivo.toUpperCase().contains(".PDF") && !nomeArquivo.toUpperCase().contains(".CSV")) {
                                    if (TemplateUtils.verificaConversorNovoTipoPlanilha(tipoPlanilha)) {
                                        LancamentosApi apiWeb = new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);
                                        String idConversor  = TemplateUtils.getIdLote(nomeArquivo);
                                        // logger.logInfo("FOI PRO CONVERSOR1 " + nomeArquivo);
                                        boolean deubom = false;
                                        deubom = buscaProtocoloConversor(idConversor, apiWeb, tipoLancamento.toLowerCase(), nomeArquivo, logger);

                                        if (deubom) {
                                            File file2 = new File(dirName);

                                            File []  arquivoParaConverter = file2.listFiles();
                                            if (FileUtil.dirHasFiles(dirName)) {
                                                for (File fl: arquivoParaConverter) {
                                                    if (fl.getName().toUpperCase().contains(".PDF")) {
                                                        try {
                                                            FileUtil.deleteFile(fl);
                                                        } catch (Exception XX) {}
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        continue;
                                    }
                                }

                                //#2306-007459
                                if(tipoPlanilha.contains("CARTAO_SIPAG7") && extensao.contains("CSV")){
                                    memFile.setFieldSeparator(";");
                                }

                                if(!tipoPlanilha.equals("MOVIMENTO")){
                                    roteiroCRM = buscaRoteiro("getRoteiro"+tipoPlanilha, logger);
                                    inomeOrigem     = getIndice("nomeOrigem", inomeOrigem, roteiroCRM);
                                    idataMovimento  = getIndice("dataMovimento", idataMovimento, roteiroCRM);
                                    inomePortador   = getIndice("nomePortador", inomePortador, roteiroCRM);
                                    idocumento      = getIndice("documento", idocumento, roteiroCRM);
                                    ivalorDocumento = getIndice("valorDocumento", ivalorDocumento, roteiroCRM);
                                    ivalorJuros     = getIndice("valorJuros", ivalorJuros, roteiroCRM);
                                    ivalorDesconto  = getIndice("valorDesconto", ivalorDesconto, roteiroCRM);
                                    ivalorMulta     = getIndice("valorMulta", ivalorMulta, roteiroCRM);
                                    icodCcOrigem    = getIndice("codCcOrigem", icodCcOrigem, roteiroCRM);
                                    ivalorPagamento = getIndice("valorPagamento", ivalorPagamento, roteiroCRM);
                                    ivalorAlternativo = getIndice("valorAlternativo", ivalorAlternativo, roteiroCRM);
                                    icomplemento01  = getIndice("complemento01", icomplemento01, roteiroCRM);
                                    icomplemento02	= getIndice("complemento02", icomplemento02, roteiroCRM);
                                    icomplemento03  = getIndice("complemento03", icomplemento03, roteiroCRM);
                                    icomplemento04  = getIndice("complemento04", icomplemento04, roteiroCRM);
                                    icomplemento05  = getIndice("complemento05", icomplemento05, roteiroCRM);
                                    icomplemento06  = getIndice("complemento06", icomplemento06, roteiroCRM);
                                    icomplemento07  = getIndice("complemento07", icomplemento07, roteiroCRM);
                                    icomplemento08  = getIndice("complemento08", icomplemento08, roteiroCRM);
                                    icomplemento09  = getIndice("complemento09", icomplemento09, roteiroCRM);
                                    icomplemento10  = getIndice("complemento10", icomplemento10, roteiroCRM);
                                    idataFake		= getIndice("dataFake", idataFake, roteiroCRM);
                                    icpfCnpj		= getIndice("cpfCnpj", icpfCnpj, roteiroCRM);

                                    zerar			= !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());


                                    // Em casos onde a planilha secund?ria precisa de uma aba espec?fica descomentar essa linha
                                    if(!roteiroCRM.optString("Abas_Especificas").equals("") && !roteiroCRM.optString("Abas_Especificas").contains(String.valueOf(abaConvertida))) continue;

                                }

                                if(nomeArquivo.toUpperCase().contains("OTTIMIZZA")){
                                    if(!logsTxt.toString().contains("MANTEMARQUIVO"))logsTxt.append("STATUS;").append("DATA;").append("VALOR;").append("DOCUMENTO;").append("CLIENTE/FORNECEDOR;").append("PORTADOR;").append("COMPLEMENTO01;").append("COMPLEMENTO02;").append("COMPLEMENTO03;").append("COMPLEMENTO04;").append("COMPLEMENTO05;").append("COMPLEMENTO06;").append("TIPOPLANILHA;").append("MANTEMARQUIVO;").append("PROCESSAOUD;").append("LINHA;");
                                    logs = true;
                                }

                                // #DOCUMENTACAO
                                // tratamento de "Agrupar Colunas Excel" e "Agrupar a partir da coluna"
                                try {
                                    fazerShrinkDelimitandoPosicoes(roteiroCRM, memFile);
                                } catch (IllegalArgumentException e) {
                                    //TODO: handle exception
                                    erroShrink = true;
                                    logger.logError("Deu ruim no shrink \n"+e);
                                    break;
                                }
                                /////////////////////////////
                                // VALIDACAO POR CABECALHO //
                                /////////////////////////////


                                inomeOrigem		= getIndiceCabecalho("nomeOrigem", inomeOrigem, memFile, roteiroCRM);
                                idataMovimento	= getIndiceCabecalho("dataMovimento", idataMovimento, memFile, roteiroCRM);
                                inomePortador	= getIndiceCabecalho("nomePortador", inomePortador, memFile, roteiroCRM);
                                idocumento		= getIndiceCabecalho("documento", idocumento, memFile, roteiroCRM);
                                ivalorDocumento	= getIndiceCabecalho("valorDocumento", ivalorDocumento, memFile, roteiroCRM);
                                ivalorJuros		= getIndiceCabecalho("valorJuros", ivalorJuros, memFile, roteiroCRM);
                                ivalorDesconto	= getIndiceCabecalho("valorDesconto", ivalorDesconto, memFile, roteiroCRM);
                                ivalorMulta		= getIndiceCabecalho("valorMulta", ivalorMulta, memFile, roteiroCRM);
                                ivalorAlternativo = getIndiceCabecalho("valorAlternativo", ivalorAlternativo, memFile, roteiroCRM);
                                ivalorPagamento	= getIndiceCabecalho("valorPagamento", ivalorPagamento, memFile, roteiroCRM);
                                icodCcOrigem	= getIndiceCabecalho("codCcOrigem", icodCcOrigem, memFile, roteiroCRM);

                                icomplemento01	= getIndiceCabecalho("complemento01", icomplemento01, memFile, roteiroCRM);
                                icomplemento02	= getIndiceCabecalho("complemento02", icomplemento02, memFile, roteiroCRM);
                                icomplemento03	= getIndiceCabecalho("complemento03", icomplemento03, memFile, roteiroCRM);
                                icomplemento04	= getIndiceCabecalho("complemento04", icomplemento04, memFile, roteiroCRM);
                                icomplemento05	= getIndiceCabecalho("complemento05", icomplemento05, memFile, roteiroCRM);
                                icomplemento06	= getIndiceCabecalho("complemento06", icomplemento06, memFile, roteiroCRM);
                                icomplemento07	= getIndiceCabecalho("complemento07", icomplemento07, memFile, roteiroCRM);
                                icomplemento08	= getIndiceCabecalho("complemento08", icomplemento08, memFile, roteiroCRM);
                                icomplemento09	= getIndiceCabecalho("complemento09", icomplemento09, memFile, roteiroCRM);
                                icomplemento10	= getIndiceCabecalho("complemento10", icomplemento10, memFile, roteiroCRM);
                                idataFake		= getIndiceCabecalho("dataFake", idataFake, memFile, roteiroCRM);
                                icpfCnpj		= getIndiceCabecalho("cpfCnpj", icpfCnpj, memFile, roteiroCRM);

                                isLinhaPrincipal = false;
                                ignorarAntes = false;

                                JSONObject histobj = new JSONObject();
                                lerAposPrincipal = roteiroCRM.optString("lerAposPrincipal").toUpperCase();

                                // #DOCUMENTACAO
                                // ignorar antes
                                if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO")) {

                                    histobj.put("nomeOrigem", getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger));
                                    histobj.put("documento", getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger));
                                    histobj.put("complemento01", getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger));
                                    histobj.put("complemento02", getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger));
                                    histobj.put("complemento03", getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger));
                                    histobj.put("complemento04", getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger));
                                    histobj.put("complemento05", getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger));
                                    histobj.put("complemento06", getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger));
                                    histobj.put("nomePortador", getCampoString(nomePortador,	inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger));
                                    histobj.put("dataMovimento", "").put("mesAnoAnterior", "").put("mesAno2Anterior", "")
                                            .put("mesAnoAtual", "").put("contaMovimento", "").put("contaPortador", "").put("contaDebito", "")
                                            .put("contaCredito", "").put("contaJuros", contaJuros).put("contaDesconto", contaDesconto)
                                            .put("contaMulta", contaMulta).put("valorDocumento", "").put("valorJuros", "")
                                            .put("valorDesconto", "").put("valorMulta","").put("codFilial", "")
                                            .put("numeroAba", String.valueOf(abaConvertida)).put("tipoPlanilha", tipoPlanilha)
                                            .put("nomeArquivo", nomeArquivo.toUpperCase());

                                    ignorarAntes = getTratarLinhaIgnorar(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento,
                                            getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger),
                                            getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger), histobj);

                                    if (ignorarAntes) continue;

                                    double valorValido = 0;
                                    try{valorValido = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                                    catch (Exception vlrd) { valorValido = 0; }

                                    if(ivalorDocumento < 0 && ivalorPagamento >= 0){
                                        try{valorValido = Math.abs(memFile.getDoubleField(ivalorPagamento));}
                                        catch (Exception vlrd) { valorValido = 0; }
                                    }


                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&  valorValido > 0) isLinhaPrincipal = true;
                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !histobj.optString("nomeOrigem").equals("")) isLinhaPrincipal = true;

                                }

                                if(tipoPlanilha.equals("MOVIMENTO")){
                                    if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento - 1).equals("")){
                                        nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(1);
                                        logger.logInfo("nomeORIGEM: " + nomeOrigem);
                                    }
                                    if(!dataMovimento.equals("")) {
                                        logger.logInfo("zerando nome origem: ");
                                        nomeOrigem = "";
                                    }
                                }

                                if (naoLeMais) continue;
                                if (tipoPlanilha.equals("")) continue;


                                // #DOCUMENTACAO
                                // leitura de xlsx e csv
                                if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") || (!roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA(") && !roteiroCRM.optString("dataMovimento").toUpperCase().startsWith("COLUNA ("))) {
                                    zerar 			  = !Boolean.parseBoolean(roteiroCRM.optString("naoZerarValores").toLowerCase().trim());

                                    // #Fabrica(2019-05-20)
                                    if (tipoPlanilha.contains("OTTCARTAO")) {
                                        try{
                                            String auxMes 	  = getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "));
                                            if(auxMes.length() == 2 && !auxMes.equals(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "))){
                                                dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll(cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), " ", " "), auxMes).replaceAll(" ", "/");
                                            }else if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).length() > 11
                                                    && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains("/")
                                                    && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains(",")
                                                    && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains(":")){
                                                dataMovimento     = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), 0, memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).lastIndexOf("/")+5);
                                            }else{
                                                dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);
                                            }

                                            dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                        }catch(Exception e){
                                            // dataMovimento   = "";
                                            // dataLote        = "";
                                        }
                                    }

                                    if (!tipoPlanilha.contains("OTTCARTAO")) {
                                        // #Fabrica(2019-05-20)
                                        try{
                                            dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger);

                                            dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                        }catch(Exception e){
                                            // dataMovimento   = "";
                                            // dataLote        = "";
                                        }
                                    }
                                    if (tipoLancamento.contains("PAGAR")&& memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA RECEBIMENTO") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("DOCUMENTO")
                                            && memFile.getStringFieldRemoveEspCharsUpper(2).contains("CLIENTE /  DESCRICAO RECEITA") && memFile.getStringFieldRemoveEspCharsUpper(3).contains("DETALHES DO RECEBIMENTO")
                                            && memFile.getStringFieldRemoveEspCharsUpper(4).contains("VALOR ORIGINAL") && memFile.getStringFieldRemoveEspCharsUpper(5).contains("VALOR RECEBIDO")
                                            && memFile.getStringFieldRemoveEspCharsUpper(6).contains("BANCO (PORTADOR)") && memFile.getStringFieldRemoveEspCharsUpper(7).contains("CATEGORIA (RECEITA)")){
                                        break;
                                    }

                                    // logger.logInfo("TP -> "+tipoPlanilha+" - Empresa -> "+nomeEmpresa+" - DM -> "+line);



                                    // leitura de data mantida por seguranca
                                    // String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, logger).trim();
                                    // if (!dataString.equals("")) {
                                    // 	String dataMovimentoAux	  = getCampoDate(dataString);
                                    // 	if (dataMovimentoAux.contains("/")) {
                                    // 		dataMovimento     = getCampoDate(dataString);
                                    // 		dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                    // 	}
                                    // }

                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals("")) isLinhaPrincipal = true;


                                    if (!zerarColAlternativo.equals("")) {
                                        if (zerarColAlternativo.contains("documento"))		documento		= "";
                                        if (zerarColAlternativo.contains("nomeOrigem"))		nomeOrigem		= "";
                                        if (zerarColAlternativo.contains("nomePortador"))   nomePortador	= "";
                                        if (zerarColAlternativo.contains("complemento01"))  complemento01	= "";
                                        if (zerarColAlternativo.contains("complemento02"))  complemento02	= "";
                                        if (zerarColAlternativo.contains("complemento03"))  complemento03   = "";
                                        if (zerarColAlternativo.contains("complemento04"))  complemento04   = "";
                                        if (zerarColAlternativo.contains("complemento05"))  complemento05   = "";
                                        if (zerarColAlternativo.contains("complemento06"))  complemento06   = "";
                                        if (zerarColAlternativo.contains("complemento07"))  complemento07   = "";
                                        if (zerarColAlternativo.contains("complemento08"))  complemento08   = "";
                                        if (zerarColAlternativo.contains("complemento09"))  complemento09   = "";
                                        if (zerarColAlternativo.contains("complemento10"))  complemento10   = "";
                                    }

                                    nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, logger);
                                    nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, logger);
                                    documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, logger);

                                    complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);
                                    complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);
                                    complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);
                                    complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);
                                    complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);

                                    complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);
                                    complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, logger);
                                    complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, logger);
                                    complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, logger);
                                    complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, logger);

                                    if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
                                        if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) {
                                            try{complemento01     = getDate(complemento01, icomplemento01, line, false, roteiroCRM.optString("complemento01").toUpperCase(), memFile, logger);}
                                            catch(Exception e){}
                                        }
                                        if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) {
                                            try{complemento02     = getDate(complemento02, icomplemento02, line, false, roteiroCRM.optString("complemento02").toUpperCase(), memFile, logger);}
                                            catch(Exception e){}
                                        }
                                        if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) {
                                            try{complemento03     = getDate(complemento03, icomplemento03, line, false, roteiroCRM.optString("complemento03").toUpperCase(), memFile, logger);}
                                            catch(Exception e){}
                                        }
                                        if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) {
                                            try{complemento04     = getDate(complemento04, icomplemento04, line, false, roteiroCRM.optString("complemento04").toUpperCase(), memFile, logger);}
                                            catch(Exception e){}
                                        }
                                        if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) {
                                            try{complemento05     = getDate(complemento05, icomplemento05, line, false, roteiroCRM.optString("complemento05").toUpperCase(), memFile, logger);}
                                            catch(Exception e){}
                                        }
                                        if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) {
                                            try{complemento06     = getDate(complemento06, icomplemento06, line, false, roteiroCRM.optString("complemento06").toUpperCase(), memFile, logger);}
                                            catch(Exception e){}
                                        }
                                    }

                                    cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, logger);
                                    codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, logger);

                                    historico		= "";
                                    parcelaDoc      = 1;

                                    valorDocumento	= 0;
                                    valorDocumentoArray[0] = 0;
                                    valorDocumentoArray[1] = 0;
                                    valorDocumentoArray[2] = 0;
                                    valorDocumentoArray[3] = 0;
                                    valorDocumentoArray[4] = 0;
                                    valorDocumentoArray[5] = 0;
                                    valorDocumentoArray[6] = 0;
                                    valorDocumentoArray[7] = 0;
                                    valorDocumentoArray[8] = 0;
                                    valorDocumentoArray[9] = 0;

                                    valorJuros		= 0;
                                    valorDesconto	= 0;
                                    valorMulta		= 0;
                                    valorPagamento	= 0;

                                    debitoCredito 	= "";
                                    valorAlternativo = 0;

                                    if(ivalorJuros >=0){
                                        try{valorJuros = Math.abs(memFile.getDoubleField(ivalorJuros));}
                                        catch (Exception vlrj) { valorJuros = 0;}
                                    }

                                    if(ivalorDesconto >=0){
                                        try{valorDesconto = Math.abs(memFile.getDoubleField(ivalorDesconto));}
                                        catch(Exception vlrd) {valorDesconto = 0;}
                                    }

                                    // quando no CRM colocarmos que a coluna de juros eh a mesma de valor desconto
                                    // no caso do valor ser negativo, jogaremos zero para juros, ficando o valor absoluto da coluna como desconto
                                    // no caso do valor ser positivo, jogamos zero em valor desconto, ficando apenas com o valor dos juros
                                    if((ivalorDesconto == ivalorJuros) && valorJuros > 0 && ivalorJuros > 0){
                                        try{
                                            if(memFile.getDoubleField(ivalorDesconto) < 0) valorJuros = 0;
                                            else valorDesconto = 0;
                                        } catch(Exception vlrd) {}
                                    }

                                    if(ivalorMulta >=0){
                                        try{valorMulta = Math.abs(memFile.getDoubleField(ivalorMulta));}
                                        catch(Exception vlrm) {valorMulta = 0;}
                                    }

                                    //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
                                    if(ivalorDocumento >=0){
                                        try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                                        catch (Exception vlrd) { valorDocumento = 0; }
                                    }

                                    if(tipoPlanilha.equals("MOVIMENTO")){
                                        if(ivalorDocumento >=0){
                                            try{
                                                if(line.contains("73") || line.contains("09/02/2024")){
                                                    logger.logInfo("linhaUNNICA -> " + line);
                                                }

                                                if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("") &&
                                                        !memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).matches(".*[a-zA-Z].*")) {
                                                    valorDocumento = Double.parseDouble(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("-", "").replaceAll(",",".").replaceAll("\\.","")) / 100;
                                                    logger.logInfo("valorDocOriginal: " + valorDocumento + "|" +"Data: " + dataMovimento);
                                                }

                                            } catch (Exception vlrd) { valorDocumento = 0; }
                                        }
                                    }

                                    // logger.logInfo("TP -> "+ ivalorDocumento + " | " + idataMovimento + " TREM " +
                                    // tipoPlanilha+" - Empresa -> "+valorDocumento+" - DM -> "+dataMovimento + " | " + memFile.getStringFieldRemoveEspCharsUpper(0));


                                    if(logs && cont <= 200){

                                        logsTxt.append("\r\n");
                                        logsTxt.append("ANALISTA AUX");												logsTxt.append(";");
                                        logsTxt.append(dataMovimento); 												logsTxt.append(";");
                                        logsTxt.append(valorDocumento);												logsTxt.append(";");
                                        logsTxt.append(documento);													logsTxt.append(";");
                                        logsTxt.append(nomeOrigem);													logsTxt.append(";");
                                        logsTxt.append(nomePortador);												logsTxt.append(";");
                                        logsTxt.append(complemento01);												logsTxt.append(";");
                                        logsTxt.append(complemento02);												logsTxt.append(";");
                                        logsTxt.append(complemento03);												logsTxt.append(";");
                                        logsTxt.append(complemento04);												logsTxt.append(";");
                                        logsTxt.append(complemento05);												logsTxt.append(";");
                                        logsTxt.append(complemento06);												logsTxt.append(";");
                                        logsTxt.append(tipoPlanilha);												logsTxt.append(";");
                                        if(mantemArquivo.equals("SIM"))logsTxt.append("LENDO PELO TEMPLATE (SIM)");	logsTxt.append(";");
                                        if(mantemArquivo.equals("NAO"))logsTxt.append("LENDO ESPECIFICO (NAO)");	logsTxt.append(";");
                                        logsTxt.append(line);														logsTxt.append(";");

                                    }

                                    // logger.logInfo("ROTEIRO coluna Extra => " + roteiroCRM.optString("Colunas_de_Valores_Extras") + " |TP => " + tipoPlanilha);
                                    if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {
                                        String [] indiceValores = roteiroCRM.optString("Colunas_de_Valores_Extras").split(";");
                                        valorSomaArray = 0;
                                        for(int iv = 0; iv < indiceValores.length; iv++) {
                                            // try{
                                            // logger.logInfo("IDValores -> " + indiceValores[iv].toString());
                                            // if(!indiceValores[iv].contains("*") && !indiceValores[iv].contains("/") && !indiceValores[iv].contains("+") && !indiceValores[iv].contains("-") && !indiceValores[iv].contains("#")){
                                            // logger.logInfo("ENTROU IF");
                                            // String rotuloColuna = "";
                                            // String [] rotuloArray  = roteiroCRM.optString("Rotulos_Para_Valores_Extras").split(";");
                                            // logger.logInfo("ROTULO ARRAY => " +rotuloArray[iv].toString());
                                            // indiceValores[iv]	= getIndiceCabecalhoExtra(rotuloArray[iv], memFile);
                                            // logger.logInfo("INDICE dps => " +indiceValores[iv].toString());
                                            // }
                                            // }catch(Exception xx){
                                            // logger.logInfo("CAIU CATCH");
                                            // }

                                            //ssss
                                            double denomidador = 0;
                                            int indiceDenominador = -1;
                                            String sinal = "";
                                            boolean multiplica100 = false;
                                            boolean divide100 = false;

                                            if (indiceValores[iv].contains("*100")) multiplica100 = true;
                                            if (indiceValores[iv].contains("/100")) divide100 = true;
                                            indiceValores[iv] = indiceValores[iv].replace("*100","").replace("/100","");

                                            if (indiceValores[iv].contains("*")) sinal = "*";
                                            if (indiceValores[iv].contains("/")) sinal = "/";
                                            if (indiceValores[iv].contains("+")) sinal = "+";
                                            if (indiceValores[iv].contains("-")) sinal = "-";


                                            if (!sinal.equals("") && indiceValores[iv].contains(sinal)) {
                                                try {
                                                    if (!indiceValores[iv].contains("#")) {
                                                        denomidador = Math.abs(memFile.getDoubleField(Integer.parseInt(cutString(indiceValores[iv], sinal))));
                                                    }
                                                    else {
                                                        denomidador = DecimalUtil.toDecimal(cutString(indiceValores[iv], "#"));
                                                    }
                                                } catch (Exception xx) {denomidador = 0;}
                                                indiceValores[iv] = cutString(indiceValores[iv], 0, sinal);
                                            }


                                            try{

                                                valorDocumentoArray[iv] = Math.abs(memFile.getDoubleField(Integer.parseInt(indiceValores[iv])));
                                                if (sinal.equals("*") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] * denomidador;
                                                if (sinal.equals("/") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] / denomidador;
                                                if (sinal.equals("+") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] + denomidador;
                                                if (sinal.equals("-") && denomidador > 0) valorDocumentoArray[iv] = valorDocumentoArray[iv] - denomidador;
                                                if (multiplica100) valorDocumentoArray[iv] = valorDocumentoArray[iv] * 100;
                                                if (divide100)     valorDocumentoArray[iv] = valorDocumentoArray[iv] / 100;



                                            }
                                            catch (Exception vlrd) {



                                                valorDocumentoArray[iv] = 0;
                                            }

                                            if(valorDocumentoArray[iv] < 0){
                                                valorDocumentoArray[iv] = 0;
                                            }

                                            valorSomaArray += valorDocumentoArray[iv];
                                        }
                                    }


                                    if(ivalorPagamento >=0){
                                        try{valorPagamento	= memFile.getDoubleField(ivalorPagamento);}
                                        catch(Exception vlrp) {valorPagamento = 0;}
                                    }

                                    if(ivalorAlternativo >= 0){
                                        try{valorAlternativo = memFile.getDoubleField(ivalorAlternativo);}
                                        catch (Exception vlrd) { valorAlternativo = 0; }
                                    }

                                    if (tipoLancamento.equals("PAGAR"))
                                        debitoCredito = "EXTRATO-DEBITO";

                                    if (tipoLancamento.equals("RECEBER"))
                                        debitoCredito = "EXTRATO-CREDITO";


                                    ////////////////////////////////////////////////
                                    ////	busca Coluna Alternativa
                                    JSONObject obj1 = new JSONObject();
                                    String validar	= "dataMovimento;nomeOrigem;documento;complemento01;complemento02;complemento03;complemento04;complemento05;complemento06;complemento07;complemento08;complemento09;complemento10;nomePortador;valorDocumento;valorPagamento;valorJuros;valorDesconto;valorMulta";
                                    obj1.put("validar",			validar);
                                    obj1.put("documento",		documento);
                                    obj1.put("nomeOrigem",		nomeOrigem);
                                    obj1.put("nomePortador",	nomePortador);
                                    obj1.put("dataMovimento",	dataMovimento);
                                    obj1.put("complemento01",	complemento01);
                                    obj1.put("complemento02",	complemento02);
                                    obj1.put("complemento03",	complemento03);
                                    obj1.put("complemento04",	complemento04);
                                    obj1.put("complemento05",	complemento05);
                                    obj1.put("complemento06",	complemento06);
                                    obj1.put("complemento07",	complemento07);
                                    obj1.put("complemento08",	complemento08);
                                    obj1.put("complemento09",	complemento09);
                                    obj1.put("complemento10",	complemento10);
                                    obj1.put("codCentroCusto",	codCcOrigem);
                                    obj1.put("tipoPlanilha",	tipoPlanilha);
                                    obj1.put("numeroAba",		String.valueOf(abaConvertida));
                                    obj1.put("nomeArquivo",		nomeArquivo.toUpperCase());
                                    JSONObject alternativeObj = getAlternativeDataInt (obj1, memFile);
                                    String changed = alternativeObj.optString("changeIt");

                                    if(!changed.equals("")) {
                                        zerarColAlternativo = changed;
                                        if (changed.contains("dataMovimento")) {
                                            dataMovimento	= alternativeObj.optString("dataMovimento");
                                            dataLote		= alternativeObj.optString("dataLote");
                                        }
                                        if (changed.contains("documento"))		documento		= alternativeObj.optString("documento");
                                        if (changed.contains("nomeOrigem"))		nomeOrigem		= alternativeObj.optString("nomeOrigem");
                                        if (changed.contains("nomePortador"))   nomePortador	= alternativeObj.optString("nomePortador");

                                        if (changed.contains("complemento01"))  complemento01	= alternativeObj.optString("complemento01");
                                        if (changed.contains("complemento02"))  complemento02	= alternativeObj.optString("complemento02");
                                        if (changed.contains("complemento03"))  complemento03   = alternativeObj.optString("complemento03");
                                        if (changed.contains("complemento04"))  complemento04   = alternativeObj.optString("complemento04");
                                        if (changed.contains("complemento05"))  complemento05   = alternativeObj.optString("complemento05");
                                        if (changed.contains("complemento06"))  complemento06   = alternativeObj.optString("complemento06");
                                        if (changed.contains("complemento07"))  complemento07   = alternativeObj.optString("complemento07");
                                        if (changed.contains("complemento08"))  complemento08   = alternativeObj.optString("complemento08");
                                        if (changed.contains("complemento09"))  complemento09   = alternativeObj.optString("complemento09");
                                        if (changed.contains("complemento10"))  complemento10   = alternativeObj.optString("complemento10");

                                        if (changed.contains("valorDocumento"))	valorDocumento	= alternativeObj.optDouble("valorDocumento");

                                        if (changed.contains("valorPagamento"))	valorPagamento  = alternativeObj.optDouble("valorPagamento");
                                        if (changed.contains("valorDesconto"))	valorDesconto	= alternativeObj.optDouble("valorDesconto");
                                        if (changed.contains("valorJuros"))		valorJuros		= alternativeObj.optDouble("valorJuros");
                                        if (changed.contains("valorMulta"))		valorMulta		= alternativeObj.optDouble("valorMulta");
                                    }


                                    // fazer regra quando tiver valor documento e alternativo na mesma coluna
                                    String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
                                    if (!tratarComoValorAlternativo.equals("")) {
                                        if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                        if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                        if(ivalorAlternativo >= 0) valorDocumento = valorAlternativo;
                                    }else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes
                                        if(valorDocumento == 0 && ivalorAlternativo >= 0){
                                            if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                            if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                            valorDocumento = valorAlternativo;
                                        }
                                    }
                                    // ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
                                    if((ivalorDocumento < 0 || tipoPlanilha.contains("PADRAOOTTIMIZZA")) && valorDocumento == 0){
                                        if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
                                        else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
                                    }
                                    if(valorDocumento>0 && ivalorJuros < 0 && ivalorDesconto < 0 && valorPagamento > 0){
                                        if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
                                        if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
                                    }

                                    valorDocumento = Math.abs(valorDocumento);



                                    // ---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---
                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && (valorDocumento > 0 || valorSomaArray > 0)) isLinhaPrincipal = true;

                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") &&
                                            lerAposPrincipal.equals("") && (valorDocumento == 0 && valorSomaArray == 0)) {

                                        continue;
                                    }
                                }



                                // #DOCUMENTACAO
                                // leitura de TXT
                                if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && roteiroCRM.optString("dataMovimento").replaceAll(" ", "").toUpperCase().startsWith("COLUNA(") && roteiroCRM.optString("dataMovimento").endsWith(")")) {

                                    String dataString = getCampoString(dataMovimento, idataMovimento, line, false, roteiroCRM.optString("dataMovimento").toUpperCase(), memFile, roteiroCRM, logger).trim();


                                    if (!dataString.equals("") && dataString.contains("/")) {
                                        String dataMovimentoAux	  = getCampoDate(dataString);
                                        if (dataMovimentoAux.contains("/")) {
                                            dataMovimento     = getCampoDate(dataString);
                                            dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                                        }
                                    }


                                    // ajusta data quando vem no formato 01012021
                                    if (!dataString.equals("") && !dataString.contains("/") && dataString.contains("20")) {
                                        try {
                                            Date dts = DateUtil.stringToDate(dataString, "ddMMyyyy");
                                            dataMovimento = DateUtil.dateToString(dts, "dd/MM/yyyy");
                                            dataLote = DateUtil.dateToString(dts, "yyyy-MM");
                                            if (!dataMovimento.contains("/20")) {   // data bichada sera ignorada
                                                dataMovimento = "";
                                                continue;
                                            }
                                        } catch (Exception dt1) {
                                            continue;
                                        }
                                    }


                                    nomePortador	= getCampoString(nomePortador, inomePortador, line, zerar, roteiroCRM.optString("portador").toUpperCase(), memFile, roteiroCRM, logger);
                                    nomeOrigem		= getCampoString(nomeOrigem, inomeOrigem, line, zerar, roteiroCRM.optString("fornecedor").toUpperCase(), memFile, roteiroCRM, logger);
                                    documento		= getCampoString(documento, idocumento, line, zerar, roteiroCRM.optString("documentoNF").toUpperCase(), memFile, roteiroCRM, logger);

                                    complemento01	= getCampoString(complemento01,	icomplemento01, line, zerar, roteiroCRM.optString("complemento01").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento02	= getCampoString(complemento02,	icomplemento02, line, zerar, roteiroCRM.optString("complemento02").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento03	= getCampoString(complemento03,	icomplemento03, line, zerar, roteiroCRM.optString("complemento03").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento04	= getCampoString(complemento04,	icomplemento04, line, zerar, roteiroCRM.optString("complemento04").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento05	= getCampoString(complemento05,	icomplemento05, line, zerar, roteiroCRM.optString("complemento05").toUpperCase(), memFile, roteiroCRM, logger);

                                    complemento06	= getCampoString(complemento06,	icomplemento06, line, zerar, roteiroCRM.optString("complemento06").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento07	= getCampoString(complemento07,	icomplemento07, line, zerar, roteiroCRM.optString("complemento07").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento08	= getCampoString(complemento08,	icomplemento08, line, zerar, roteiroCRM.optString("complemento08").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento09	= getCampoString(complemento09,	icomplemento09, line, zerar, roteiroCRM.optString("complemento09").toUpperCase(), memFile, roteiroCRM, logger);
                                    complemento10	= getCampoString(complemento10,	icomplemento10, line, zerar, roteiroCRM.optString("complemento10").toUpperCase(), memFile, roteiroCRM, logger);
                                    cpfCnpj			= getCampoString(cpfCnpj,		icpfCnpj, 		line, zerar, roteiroCRM.optString("cpfCnpj").toUpperCase(), memFile, roteiroCRM, logger);
                                    codCcOrigem		= getCampoString(codCcOrigem,	icodCcOrigem, 	line, false, roteiroCRM.optString("centroCusto").toUpperCase(), memFile, roteiroCRM, logger);


                                    valorDocumento = getDoubleTXT2020(roteiroCRM.optString("valorDocumento").toUpperCase(), line, objetoParametro);

                                    if (tipoPlanilha.contains("OTTCARTAO")) {
                                        String valorStr = getCampoString("", -1, 	line, false, roteiroCRM.optString("valorDocumento").toUpperCase(), memFile, roteiroCRM, logger);
                                        if (!valorStr.contains(".") && !valorStr.contains(",")) valorDocumento = valorDocumento / 100;
                                    }

                                    valorJuros	   = getDoubleTXT2020(roteiroCRM.optString("valorJuros").toUpperCase(), line, objetoParametro);
                                    valorDesconto  = getDoubleTXT2020(roteiroCRM.optString("valorDesconto").toUpperCase(), line, objetoParametro);
                                    valorMulta 	   = getDoubleTXT2020(roteiroCRM.optString("valorMulta").toUpperCase(), line, objetoParametro);
                                    valorPagamento = getDoubleTXT2020(roteiroCRM.optString("valorPagamento").toUpperCase(), line, objetoParametro);

                                    if (tipoLancamento.equals("PAGAR"))
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
                                            debitoCredito = "EXTRATO-DEBITO";

                                    if (tipoLancamento.equals("RECEBER"))
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA"))
                                            debitoCredito = "EXTRATO-CREDITO";

                                    // fazer regra quando tiver valor documento e alternativo na mesma coluna
                                    String tratarComoValorAlternativo = getTratarValorAlternativo(histobj);
                                    if (!tratarComoValorAlternativo.equals("")) {
                                        if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                        if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                        if(roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")) valorDocumento = valorAlternativo;
                                    }else{// n?o fazer regra quando for valor documento e alternativo em colunas diferentes
                                        if(valorDocumento == 0 && roteiroCRM.optString("valorAlternativo").toUpperCase().contains("COLUNA")){
                                            if (tipoLancamento.equals("PAGAR")) 	debitoCredito = "EXTRATO-CREDITO";
                                            if (tipoLancamento.equals("RECEBER")) 	debitoCredito = "EXTRATO-DEBITO";
                                            valorDocumento = valorAlternativo;
                                        }
                                    }

                                    if(!roteiroCRM.optString("valorDocumento").toUpperCase().contains("COLUNA") && valorDocumento == 0){
                                        if		(valorPagamento > 0) valorDocumento = valorPagamento + valorDesconto - valorJuros - valorMulta;
                                        else if	(valorPagamento < 0) valorDocumento = valorPagamento - valorDesconto + valorJuros + valorMulta;
                                    }
                                    if(valorDocumento > 0 && !roteiroCRM.optString("valorJuros").toUpperCase().contains("COLUNA") && !roteiroCRM.optString("valorDesconto").toUpperCase().contains("COLUNA") && valorPagamento > 0){
                                        if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
                                        if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
                                    }

                                    //#2305-0004328. Coluna de valor extra para o formato txt
                                    if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {
                                        valorSomaArray = TemplateUtils.lerValoresExtrasArquivoTxt(valorDocumentoArray, line, roteiroCRM, null);
                                    }
                                    valorDocumento = Math.abs(valorDocumento);

                                    // if(logs && cont <= 200){
                                    // logsTxt.append("\r\n");

                                    // logsTxt.append("ANALISTA AUX");												logsTxt.append(";");
                                    // logsTxt.append(dataMovimento); 												logsTxt.append(";");
                                    // logsTxt.append(valorDocumento);												logsTxt.append(";");
                                    // logsTxt.append(documento);													logsTxt.append(";");
                                    // logsTxt.append(nomeOrigem);													logsTxt.append(";");
                                    // logsTxt.append(nomePortador);												logsTxt.append(";");
                                    // logsTxt.append(complemento01);												logsTxt.append(";");
                                    // logsTxt.append(complemento02);												logsTxt.append(";");
                                    // logsTxt.append(complemento03);												logsTxt.append(";");
                                    // logsTxt.append(complemento04);												logsTxt.append(";");
                                    // logsTxt.append(complemento05);												logsTxt.append(";");
                                    // logsTxt.append(complemento06);												logsTxt.append(";");
                                    // logsTxt.append(tipoPlanilha);
                                    // if(mantemArquivo.equals("SIM"))logsTxt.append("LENDO PELO TEMPLATE");		logsTxt.append(";");
                                    // if(mantemArquivo.equals("NAO"))logsTxt.append("LENDO ESPECIFICO");			logsTxt.append(";");
                                    // logsTxt.append(line);														logsTxt.append(";");

                                    // }

                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("DATA MOVIMENTO") && !dataMovimento.equals(""))  isLinhaPrincipal = true;
                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("VALOR DOCUMENTO") && (valorDocumento > 0 || valorSomaArray > 0))		  isLinhaPrincipal = true;
                                    if (roteiroCRM.optString("campoLinhaPrincipal").toUpperCase().equals("FORNECEDOR-CLIENTE") && !nomeOrigem.equals("")) isLinhaPrincipal = true;
                                }


                                // #DOCUMENTACAO
                                // mes ano anterior
                                if(dataMovimento.length() > 9){
                                    mesRef	= Integer.parseInt(dataMovimento.substring(3,5));
                                    anoRef	= Integer.parseInt(dataMovimento.substring(6,10));
                                    mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                                    mesRef	= mesRef - 1;
                                    if (mesRef	== 0) {
                                        mesRef	= 12;
                                        anoRef	= anoRef - 1;
                                    }
                                    mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                    mesRef	= mesRef - 1;
                                    if (mesRef	== 0) {
                                        mesRef	= 12;
                                        anoRef	= anoRef - 1;
                                    }
                                    mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                                }

                                // #DOCUMENTACAO
                                // filtro de datas (parametro definido por integracao no CRM, e informado a cada processamento de arquivos)
                                //if (nomeArquivo.toUpperCase().contains("FILTRO_")) filtro = validaFiltro(nomeArquivo, dataMovimento);
                                if (nomeArquivo.toUpperCase().contains("FILTRO_")) {
                                    temFiltro = true;
                                    filtro = validaFiltro(nomeArquivo, dataMovimento);
                                }
                                if (!filtro) continue;

                                valorTotalDoc   += valorDocumento;
                                valorTotalJuros += valorJuros;
                                valorTotalDesc  += valorDesconto;

                                if (documento.contains(".") && documento.contains("E")) {
                                    documento = removerNotacaoCientificaExcel(documento);
                                }

                                // #DOCUMENTACAO
                                // cpfCnpj
                                boolean aceitaCpf			= true;
                                boolean cnpjSomenteNumeros	= Boolean.parseBoolean(roteiroCRM.optString("cnpjSomenteNumeros").toLowerCase().trim());

                                if(!cpfCnpj.equals("")) cpfCnpj = trataCpfCnpj(cpfCnpj, cnpjSomenteNumeros, aceitaCpf);

                                // #DOCUMENTACAO
                                // ajustes fornecedor/cliente e portador
                                if (nomeOrigem.equals("") && !roteiroCRM.optString("lerAposPrincipal").toUpperCase().contains("FORNECEDOR")) nomeOrigem = complemento01 + " " + dataMovimento + " R$" + String.valueOf(valorDocumento);
                                nomeOrigem = nomeOrigem.trim();

                                //Removemos o replace de AMP por conta de um efeito colateral #202212-0022861
                                //nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").replaceAll("AMP","").trim();
                                nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
                                // nomeOrigem = stringNormalizer(nomeOrigem, true);
                                nomeOrigem = StringUtil.removeSpecialCharsToUC(nomeOrigem);

                                // 202301-0023496 JWR Coloquei esse balde com o X para remontar o nomeOrigem
                                // Descomentar caso d? problema com caracteres especiais
								/*String letrasPermitidas = "ABCDEFGHIJKLMNOPRSTUVWXYZ 0123456789.-/&";
								String nomeOrigemNovo = "";
								for (int xx = 0; xx < nomeOrigem.length(); xx++) {
									if (nomeOrigem.length() > xx) {
										if (letrasPermitidas.contains(nomeOrigem.substring(xx, xx+1))) {
											nomeOrigemNovo = nomeOrigemNovo + nomeOrigem.substring(xx, xx+1);
										}
									}
								}
								nomeOrigem = nomeOrigemNovo;*/


                                if (roteiroCRM.optString("portador").toUpperCase().contains("NOME") && roteiroCRM.optString("portador").toUpperCase().contains("ARQUIVO")) nomePortador = StringUtil.removeSpecialCharsToUC(nomeArquivo).toUpperCase();
                                nomePortador = nomePortador.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").replaceAll("\\?", "").trim();
                                nomePortador = stringNormalizer(nomePortador, true);

                                complemento01 = complemento01.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
                                complemento02 = complemento02.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
                                complemento03 = complemento03.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
                                complemento04 = complemento04.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
                                complemento05 = complemento05.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
                                complemento06 = complemento06.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();

                                // logger.logInfo("DAMA " + dataMovimento + " | " + valorDocumento + " | " + isLinhaPrincipal);
                                if(dataMovimento.equals("")) continue;
                                // quando for ler linha principal zerar as variaveis que vem depois da principal para nao sobrepor campos.
                                if(isLinhaPrincipal) {
                                    // #DOCUMENTACAO
                                    // cont define que eh um novo lancamento (normalmente uma nova linha)
                                    cont++;

                                    if (lerAposPrincipal.contains("FORNECEDOR"))	nomeOrigem = "";
                                    if (lerAposPrincipal.contains("DOCUMENTO"))		documento = "";
                                    if (lerAposPrincipal.contains("PORTADOR")) 		nomePortador = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO01")) complemento01 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO02")) complemento02 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO03")) complemento03 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO04")) complemento04 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO05")) complemento05 = "";
                                    if (lerAposPrincipal.contains("COMPLEMENTO06")) complemento06 = "";

                                }

                                if(cont == 0) continue;

                                histobj.put("nomeOrigem", nomeOrigem);					histobj.put("documento", documento);
                                histobj.put("complemento01", complemento01);			histobj.put("complemento02", complemento02);
                                histobj.put("complemento03", complemento03);			histobj.put("complemento04", complemento04);
                                histobj.put("complemento05", complemento05);			histobj.put("complemento06", complemento06);
                                histobj.put("complemento07", complemento07);			histobj.put("complemento08", complemento08);
                                histobj.put("complemento09", complemento09);			histobj.put("complemento10", complemento10);
                                histobj.put("dataMovimento", dataMovimento);			histobj.put("mesAnoAnterior", mesAnoAnterior);
                                histobj.put("mesAno2Anterior", mesAno2Anterior);		histobj.put("mesAnoAtual", mesAnoAtual);
                                histobj.put("nomePortador", nomePortador);				histobj.put("contaMovimento", contaMovimento);
                                histobj.put("contaPortador", contaPortador);	   		histobj.put("contaDebito", "");
                                histobj.put("contaCredito", "");						histobj.put("contaJuros", contaJuros);
                                histobj.put("contaDesconto", contaDesconto);			histobj.put("contaMulta", contaMulta);
                                histobj.put("valorDocumento", valorDocumento);			histobj.put("tipoPlanilha", tipoPlanilha);
                                histobj.put("valorJuros", valorJuros);   				histobj.put("valorDesconto", valorDesconto);
                                histobj.put("valorMulta", valorMulta); 				    histobj.put("codFilial", codFilial);
                                histobj.put("nomeArquivo", nomeArquivo.toUpperCase()); // foi ajustado

                                //feita limpeza de campo para poder pegar melhor os juros e descontos.
                                documento     = getLimpaCamposAvancado("documento", documento, histobj);


                                // #DOCUMENTACAO
                                // TRATA PLANILHA OU LANCAMENTO EXPECIFICO COMO EXTRATO
                                tratarComoExtrato = getTratarComoExtrato(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
                                nomeOrigem = nomeOrigem.replaceAll("  ", " ").trim();
                                if (tratarComoExtrato) {
                                    if (nomeOrigem.length() > 199) nomeOrigem = cutString(nomeOrigem, 0, 180); // #Fabrica(2019-10-03) @Becker
                                    JSONObject jDados = new JSONObject();
                                    jDados.put("PORTADOR",    		nomePortador);
                                    jDados.put("EMPRESA",     		codEmpresa);
                                    jDados.put("DATAMOVIMENTO",	 	dataMovimento);
                                    jDados.put("NOMEARQUIVO",       debitoCredito+nomeArquivo.toUpperCase()); // #DOCUMENTACAO EVITA PROBLEMA DE TRANSFERENCIAS NO MESMO ARQUIVO
                                    jDados.put("NOMEORIGEM",    	nomeOrigem);
                                    jDados.put("VALORDOCUMENTO",    valorDocumento);
                                    jDados.put("COMPLEMENTO01",     complemento02);
                                    jDados.put("DEBITO-CREDITO",    debitoCredito);
                                    jDados.put("CONT",  			String.valueOf(cont));
                                    // logger.logInfo("nomePortador -> " + nomePortador);
                                    boolean primExtrato = insertIOExtrato(jDados, dbIOCont, logger );
                                    jStatus = new JSONObject();
                                    putStatus(dirName, "", jStatus, logger);
                                    continue;
                                }

                                debitoCredito = ""; // zera aqui para n?o confundir com extratos bancarios.


                                // #DOCUMENTACAO
                                // trata lancamento como juros (de outro lancamento)
                                complemento10 = "";
                                tratarComoJuros = getTratarComoJuros(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
                                if (tratarComoJuros) {
                                    complemento10 = dataMovimento + "-" + documento + "-JUROS";
                                    ttJuros ttJ    = (ttJuros)mapaJuros.get(complemento10);
                                    if (ttJ == null) {
                                        ttJ  = new ttJuros();
                                        ttJ.documento  = documento;
                                        ttJ.valorJur   = valorDocumento;
                                        ttJ.valorLido  = 0;
                                    }
                                    mapaJuros.put(complemento10,ttJ);
                                    continue;
                                }

                                // #DOCUMENTACAO
                                // trata lancamento como desconto (de outro lancamento)
                                tratarComoDesconto = getTratarComoDesconto(line.replaceAll("\\|","").replaceAll(";","").replaceAll(",","").trim(), tipoLancamento, documento, nomeOrigem, histobj);
                                if (tratarComoDesconto) {
                                    complemento10  = dataMovimento + "-" + documento + "-DESCONTO";
                                    ttDesconto ttD    = (ttDesconto)mapaDesconto.get(complemento10);

                                    if(valorDocumento == 0) continue;

                                    if (ttD == null) {
                                        ttD  = new ttDesconto();
                                        ttD.documento  = documento;
                                        ttD.valorDesc  = valorDocumento;
                                        ttD.valorLido  = 0;
                                    }
                                    mapaDesconto.put(complemento10,ttD);
                                    continue;
                                }

                                int restoLinha = 0;
                                restoLinha = (cont % 100);

                                // logger.logInfo("PUTSTATUS 1591");
                                if (restoLinha == 0) putStatus(dirName, "02--Etapa 2 de 4 - " + String.valueOf(cont) + "--" + tipoLancamento + ".status", jStatus, logger);


                                String contLinhaTexto = String.valueOf(cont);
                                contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
                                String consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

                                classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;


                                // quando usa o getColunaAlternativa tem que refatorar o datalote
                                dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");

                                //alterado para evitar problemas de lote (maiusculo)
                                lote = (nomeEmpresa + "_" + codEmpresa + "__" + nomeArquivo  + "__" + dataLote + "_" + tipoLancamento).replaceAll("\\." , "");
                                chave = lote + "-" + String.valueOf(abaConvertida) + String.valueOf(contadorArquivo) + "-" + contLinhaTexto;

                                // if(codEmpresa.equals("987789")) logger.logInfo("DATA == "+dataMovimento+" | LOTEEE == "+lote.replace("_rodaconversor", "")+" | TP === "+tipoPlanilha+" | COD ROT == "+roteiroCRMPrincipal.optString("codigo"));

                                if(chave.length() > 200)  chave = chave.substring(0, 199);

                                // #DOCUMENTACAO
                                ////////////////////////////////////////////////////////////// ACUMULA ANTES
                                histobj.put("nomeOrigem", nomeOrigem);
                                histobj.put("documento", documento);
                                histobj.put("complemento01", complemento01);
                                histobj.put("complemento02", complemento02);
                                histobj.put("complemento03", complemento03);
                                histobj.put("complemento04", complemento04);
                                histobj.put("complemento05", complemento05);
                                histobj.put("complemento06", complemento06);
                                histobj.put("nomePortador", nomePortador);
                                histobj.put("dataMovimento", dataMovimento);
                                histobj.put("mesAnoAnterior", mesAnoAnterior);
                                histobj.put("mesAno2Anterior", mesAno2Anterior);
                                histobj.put("mesAnoAtual", mesAnoAtual);
                                histobj.put("valorDocumento", valorDocumento);
                                histobj.put("valorJuros", valorJuros);
                                histobj.put("valorDesconto", valorDesconto);
                                histobj.put("valorMulta",valorMulta);
                                histobj.put("tipoPlanilha", tipoPlanilha);
                                histobj.put("nomeArquivo", nomeArquivo.toUpperCase());
                                histobj.put("line", line.toUpperCase());
                                histobj.put("cabecalhoRegra", cabecalhoRegra.toString());

                                String modificaData = getModificaData(histobj);

                                if (modificaData.startsWith("01"))  dataMovimento = getNextDay(dataMovimento, 1, true);
                                if (modificaData.startsWith("02"))  dataMovimento = getNextDay(dataMovimento, 2, true);
                                if (modificaData.startsWith("03"))  dataMovimento = getNextDay(dataMovimento, 1, false);
                                if (modificaData.startsWith("04"))  dataMovimento = getNextDay(dataMovimento, 2, false);
                                if (modificaData.startsWith("05"))  dataMovimento = "01/" + cutString(dataMovimento, "/");
                                if (modificaData.startsWith("06"))  dataMovimento = getLastDayOfMonth(dataMovimento, true);


                                // METODO QUE REFATORA OS CAMPOS COM BASE NO CABECALHO DO CRM
                                // EXEMPLO QUANDO ENCONTRAR #LINE NO CAMPO COMPLEMENTO03, VAMOS JOGAR O LINE NESTE COMPLEMENTO
                                // UM COMPLEMENTO02 POR EXEMPLO PODE RECEBER DADOS DE TIPOPLANILHA
                                nomeOrigem       = getRefatoraCampo(nomeOrigem, roteiroCRM.optString("fornecedor"), histobj);
                                nomePortador     = getRefatoraCampo(nomePortador, roteiroCRM.optString("portador"), histobj);
                                documento        = getRefatoraCampo(documento, roteiroCRM.optString("documentoNF"), histobj);
                                complemento01    = getRefatoraCampo(complemento01, roteiroCRM.optString("complemento01"), histobj);
                                complemento02    = getRefatoraCampo(complemento02, roteiroCRM.optString("complemento02"), histobj);
                                complemento03    = getRefatoraCampo(complemento03, roteiroCRM.optString("complemento03"), histobj);
                                complemento04    = getRefatoraCampo(complemento04, roteiroCRM.optString("complemento04"), histobj);
                                complemento05    = getRefatoraCampo(complemento05, roteiroCRM.optString("complemento05"), histobj);
                                complemento06    = getRefatoraCampo(complemento06, roteiroCRM.optString("complemento06"), histobj);
                                complemento07    = getRefatoraCampo(complemento07, roteiroCRM.optString("complemento07"), histobj);
                                complemento08    = getRefatoraCampo(complemento08, roteiroCRM.optString("complemento08"), histobj);
                                complemento09    = getRefatoraCampo(complemento09, roteiroCRM.optString("complemento09"), histobj);
                                complemento10    = getRefatoraCampo(complemento10, roteiroCRM.optString("complemento10"), histobj);



                                String testeChave = getRegrasParaAcumular(lote, chave, tipoLancamento, documento, nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
                                if(testeChave.toUpperCase().contains("ACUMULAANTES") || testeChave.toUpperCase().contains("ACUMULARANTES")) {
                                    chave = testeChave;
                                    if(chave.length() > 180) chave = cutString(chave, 0, 179);
                                    acumulouAntes = true;
                                }
                                ////////////////////////////////////////////////////////////////////////////////////
                                String key = chave  + "-CTB";
                                nomeOrigem = nomeOrigem.replaceAll("  "," ").trim();

                                partidaDobradaJuros		= 0;
                                partidaDobradaDesconto	= 0;
                                partidaDobradaMulta		= 0;

                                if (forcarPartidaDobrada) {
                                    partidaDobradaJuros		= valorJuros;
                                    partidaDobradaDesconto	= valorDesconto;
                                    partidaDobradaMulta		= valorMulta;
                                    valorJuros				= 0;
                                    valorDesconto			= 0;
                                    valorMulta				= 0;
                                }

                                if (tipoPlanilha.contains("OTTCARTAO")) {

                                    if (!roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("")) continue;
                                    if (roteiroCRM.optString("tipoArquivo").toUpperCase().contains("ARQUIVO TEXTO") && dataMovimento.equals("")) continue;
                                    complemento01 = tipoPlanilha;
                                    complemento02 = "VENDA";

                                    nomePortador = tipoPlanilha;

                                    // salva arquivo no hasmap para posterior eliminacao
                                    ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
                                    if (ttArq          == null) {
                                        ttArq          = new ttArquivo();
                                        ttArq.arquivo  = nomeArquivo;

                                    }
                                    mapaArquivo.put(nomeArquivo,ttArq);

                                } else {

                                    // quando se mantem o arquivo, somente devem ser processados arquivos padroes
                                    // planilhas do rotiero movimento (principal), OFX e demais devem ficar para a rota normal
                                    // Trocado para validar se a planilha comeca como movimento - importante por causa da iguacu, Onnegestao, confialtiva que tinham movimento no roteiro secundario e estavam sendo bloqueados
                                    if (mantemArquivo.equals("SIM") && !tipoPlanilha.contains("PADRAOOTTIMIZZA") &&
                                            !roteiroCRM.optString("nomeRelatorioRef").equals("PLANILHA_SIMPLES") &&
                                            (tipoPlanilha.contains("SECUNDARIO") || tipoPlanilha.startsWith("MOVIMENTO"))) { //#Soares esteve aqui -> chamado referente a mudan?a: 202210-0019668
                                        // Colocado este IF para dar mais performance, ou seja, se ja tiver lido mais de 15 linhas
                                        // e planilha for para ser rodada na personalizada
                                        // break agiliza a saida da leitura da planilha. Xavier em 19.08
                                        if (contadorCabecalho < 15) continue;
                                        logs = false;
                                        break;
                                    }

                                    // definido que as planilhas simples que rodam pelo template leem apenas a aba 0
                                    if (tipoPlanilha.equals("MOVIMENTO") && mantemArquivo.equals("SIM") &&
                                            porAba > 0 && roteiroCRM.optString("nomeRelatorioRef").equals("PLANILHA_SIMPLES")) { //#Soares esteve aqui -> chamado referente a mudan?a: 202210-0019668

                                        logs = false;
                                        break;
                                    }

                                }
                                //#FABRICA 31/08/2022 - @sergio - 202208-0017778
                                //Estavamos processando as planilhas padroes sem apaga-las no processo
                                //O if abaixo faz com que paguemos a planilha, ap?s processar pelo padrao

                                // logger.logInfo("TPAQ " + tipoPlanilha);

                                if(tipoPlanilha.contains("PADRAOOTTIMIZZA")){
                                    ttArq    = (ttArquivo)mapaArquivo.get(nomeArquivo);
                                    if (ttArq          == null) {
                                        ttArq          = new ttArquivo();
                                        ttArq.arquivo  = nomeArquivo;

                                    }
                                    mapaArquivo.put(nomeArquivo,ttArq);

                                }

                                // logger.logInfo("ANTES ttMov2");
                                // #DOCUMENTACAO
                                // insere numa tabela temporaria
                                ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                                if (ttMov2 == null) {
                                    ttMov2 = new ttMovimentoPadrao();
                                    ttMov2.lote              = lote;
                                    ttMov2.codEmpresa        = codEmpresa;
                                    ttMov2.nomeEmpresa       = nomeEmpresa;
                                    ttMov2.dataMovimento     = dataMovimento;
                                    ttMov2.tipoMovimento     = "CTB";
                                    ttMov2.tipoLancamento    = tipoLancamento;
                                    ttMov2.historico         = historico;
                                    ttMov2.contaJuros        = contaJuros;
                                    ttMov2.contaMulta        = contaMulta;
                                    ttMov2.contaDesconto     = contaDesconto;
                                    ttMov2.centroCusto       = codCcOrigem;
                                    ttMov2.cpfCnpj           = cpfCnpj;
                                    ttMov2.chave             = chave + "-CTB";
                                    ttMov2.classificacao     = classificacao;
                                    ttMov2.codFilial         = codFilial;
                                    ttMov2.complemento07     = complemento07;
                                    ttMov2.complemento08     = complemento08;
                                    ttMov2.complemento09     = complemento09;
                                    ttMov2.complemento10     = complemento10;
                                    ttMov2.nomeArquivo       = nomeArquivo.toUpperCase();
                                    ttMov2.tipoPlanilha      = tipoPlanilha;
                                    ttMov2.chaveExtrato      = chaveExtrato;
                                    ttMov2.debitoCredito     = debitoCredito;
                                    ttMov2.contLinha         = contLinhaTexto;
                                    ttMov2.historicoMulta    = "";
                                    ttMov2.historicoJuros    = "";
                                    ttMov2.historicoDesconto = "";
                                    ttMov2.contaDebito       = "";
                                    ttMov2.contaCredito      = "";
                                    ttMov2.naturezaContabil  = "";
                                    ttMov2.contador 		 = 0;
                                    ttMov2.parcelaDoc        = parcelaDoc;
                                    ttMov2.abaPlanilha       = String.valueOf(abaConvertida);


                                    if(!lerAposPrincipal.contains("FORNECEDOR"))	ttMov2.nomeOrigem    = nomeOrigem;
                                    if(!lerAposPrincipal.contains("DOCUMENTO")) 	ttMov2.documento 	 = documento;
                                    if(!lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05;
                                    if(!lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06;

                                    // logger.logInfo("TTMOVTP -> "+tipoPlanilha);


                                }

                                ///  -------------------------------------------------------------------------------------------------------
                                ///	 QUANDO FOR PLANILHA COM MAIS DE UMA LINHA, JOGAR OS VALORES PARA CIMA (dentro da parte de inclusao)
                                ///  E PASSAR PARA BAIXO OS CAMPOS QUE PODEM SER SOBREPOSTOS. Exemplo para a linha de baixo:
                                ///  if (!complemento02.equals("")) ttMov2.complemento02 = complemento02;
                                ///  -------------------------------------------------------------------------------------------------------

                                // #DOCUMENTACAO
                                // acumula linhas secundarias ou apenas l? as secundarias
                                boolean acumulaSegundaLinha = true;

                                if(acumulaSegundaLinha){
                                    if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = (ttMov2.nomeOrigem    + " " + nomeOrigem).trim();
                                    if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = (ttMov2.documento + " " + documento).trim();
                                    if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = (ttMov2.nomePortador  + " " + nomePortador).trim();
                                    if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = (ttMov2.complemento01 + " " + complemento01).trim();
                                    if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = (ttMov2.complemento02 + " " + complemento02).trim();
                                    if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = (ttMov2.complemento03 + " " + complemento03).trim();
                                    if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = (ttMov2.complemento04 + " " + complemento04).trim();
                                    if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = (ttMov2.complemento05 + " " + complemento05).trim();
                                    if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = (ttMov2.complemento06 + " " + complemento06).trim();
                                }
                                if(!acumulaSegundaLinha){
                                    if (!nomeOrigem.equals("")    && lerAposPrincipal.contains("FORNECEDOR"))	 ttMov2.nomeOrigem    = nomeOrigem.trim();
                                    if (!documento.equals("") 	  && lerAposPrincipal.contains("DOCUMENTO")) 	 ttMov2.documento	  = documento.trim();
                                    if (!nomePortador.equals("")  && lerAposPrincipal.contains("PORTADOR"))      ttMov2.nomePortador  = nomePortador.trim();
                                    if (!complemento01.equals("") && lerAposPrincipal.contains("COMPLEMENTO01")) ttMov2.complemento01 = complemento01.trim();
                                    if (!complemento02.equals("") && lerAposPrincipal.contains("COMPLEMENTO02")) ttMov2.complemento02 = complemento02.trim();
                                    if (!complemento03.equals("") && lerAposPrincipal.contains("COMPLEMENTO03")) ttMov2.complemento03 = complemento03.trim();
                                    if (!complemento04.equals("") && lerAposPrincipal.contains("COMPLEMENTO04")) ttMov2.complemento04 = complemento04.trim();
                                    if (!complemento05.equals("") && lerAposPrincipal.contains("COMPLEMENTO05")) ttMov2.complemento05 = complemento05.trim();
                                    if (!complemento06.equals("") && lerAposPrincipal.contains("COMPLEMENTO06")) ttMov2.complemento06 = complemento06.trim();
                                }

                                ttMov2.valorDocumento   = ttMov2.valorDocumento  + valorDocumento;
                                ttMov2.valorDesconto    = ttMov2.valorDesconto   + valorDesconto;
                                ttMov2.valorMulta       = ttMov2.valorMulta      + valorMulta;
                                ttMov2.valorJuros       = ttMov2.valorJuros      + valorJuros;

                                leuFinanceiro = true;
                                mapaVariavel.put(key,ttMov2);

                                // logger.logInfo("TEPE " + tipoPlanilha + " | " + roteiroCRM.optString("Colunas_de_Valores_Extras") + " | " + ttMov2.valorDocumento + " | " + ttMov2.dataMovimento);

                                if (!roteiroCRM.optString("Colunas_de_Valores_Extras").equals("")) {

                                    for (int iv =0; iv < 10; iv++) {

                                        if (valorDocumentoArray[iv] == 0) continue;

                                        String rotuloColuna = "";
                                        String [] rotuloArray  = roteiroCRM.optString("Rotulos_Para_Valores_Extras").split(";");

                                        try {
                                            rotuloColuna = rotuloArray[iv];
                                        }
                                        catch (Exception xx) {
                                            continue;
                                        }

                                        if (rotuloColuna.equals("")) continue;


                                        cont++;
                                        contLinhaTexto = String.valueOf(cont);
                                        contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
                                        consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

                                        classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

                                        chave = lote + "-" + String.valueOf(abaConvertida) + rotuloColuna + contLinhaTexto;
                                        key = chave  + "-CTB";
                                        ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
                                        ttTemp.dataMovimento = dataMovimento;
                                        histobj.put("dataMovimento", dataMovimento);

                                        ttTemp.complemento05 = rotuloColuna;
                                        histobj.put("complemento05", rotuloColuna);

                                        String modificaData2 = getModificaData(histobj);

                                        if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
                                        if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
                                        if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
                                        if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
                                        if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
                                        if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);

                                        ttTemp.valorDocumento   = valorDocumentoArray[iv] ;
                                        ttTemp.valorDesconto    = 0;
                                        ttTemp.valorMulta       = 0;
                                        ttTemp.valorJuros       = 0;

                                        if (tipoPlanilha.contains("OTTCARTAO")) {
                                            ttTemp.complemento01 = tipoPlanilha;
                                            ttTemp.complemento02 = rotuloColuna;
                                        }
                                        mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, rotuloColuna, classificacao);
                                    }
                                }

                                // Para cartoes, criamos o modelo de gerar tafifa por regra
                                if (tipoPlanilha.contains("OTTCARTAO")) {

                                    histobj.put("complemento02", "TARIFA");
                                    histobj.put("complemento03", complemento03);
                                    histobj.put("dataMovimento", dataMovimento);
                                    histobj.put("complemento05", "TARIFA");

                                    double taxaTarifa = getTaxaTarifa("", tipoLancamento, documento, nomeOrigem, histobj);


                                    if (taxaTarifa > 0) {
                                        cont++;
                                        contLinhaTexto = String.valueOf(cont);
                                        contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
                                        consolidaClass = StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;

                                        classificacao         = dataMovimento.replace("/","").trim() + consolidaClass;

                                        chave = lote + "-" + String.valueOf(abaConvertida) + "TARIFA" + contLinhaTexto;
                                        key = chave  + "-CTB";
                                        ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
                                        ttTemp.dataMovimento = dataMovimento;


                                        ttTemp.complemento05 = "TARIFA";
                                        String modificaData2 = getModificaData(histobj);

                                        if (modificaData2.startsWith("01"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, true);
                                        if (modificaData2.startsWith("02"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, true);
                                        if (modificaData2.startsWith("03"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 1, false);
                                        if (modificaData2.startsWith("04"))  ttTemp.dataMovimento = getNextDay(dataMovimento, 2, false);
                                        if (modificaData2.startsWith("05"))  ttTemp.dataMovimento = "01/" + cutString(dataMovimento, "/");
                                        if (modificaData2.startsWith("06"))  ttTemp.dataMovimento = getLastDayOfMonth(dataMovimento, true);
                                        ttTemp.valorDocumento   = ttTemp.valorDocumento * taxaTarifa;
                                        ttTemp.valorDesconto    = 0;
                                        ttTemp.valorMulta       = 0;
                                        ttTemp.valorJuros       = 0;

                                        ttTemp.complemento01 = tipoPlanilha;
                                        ttTemp.complemento02 = "TARIFA";

                                        mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "TARIFA", classificacao);
                                    }
                                }




                                if (forcarPartidaDobrada) {
                                    if (partidaDobradaJuros		> 0) {
                                        cont++;
                                        contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
                                        consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
                                        classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

                                        chave = lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_JUR-" + contLinhaTexto;
                                        key = chave  + "-CTB";
                                        ttMovimentoPadrao ttTemp = new ttMovimentoPadrao(ttMov2);
                                        ttTemp.valorDocumento = partidaDobradaJuros;
                                        ttTemp.cpfCnpj = "";

                                        mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "JUROS", classificacao);
                                    }

                                    if (partidaDobradaDesconto	> 0) {
                                        cont++;
                                        contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
                                        consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
                                        classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

                                        chave	= lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_DES-" + contLinhaTexto;
                                        key		= chave  + "-CTB";
                                        ttMovimentoPadrao ttTemp	= new ttMovimentoPadrao(ttMov2);
                                        ttTemp.valorDocumento		= partidaDobradaDesconto;
                                        ttTemp.cpfCnpj = "";

                                        mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "DESCONTO", classificacao);
                                    }

                                    if (partidaDobradaMulta		> 0) {
                                        cont++;
                                        contLinhaTexto	= StringUtil.leftPad(String.valueOf(cont), 05, "0");
                                        consolidaClass	= StringUtil.leftPad(String.valueOf(abaConvertida), 02, "0") + contLinhaTexto;
                                        classificacao	= dataMovimento.replace("/","").trim() + consolidaClass;

                                        chave	= lote + "-" + String.valueOf(abaConvertida) + "-DOBRADA_MUL-" + contLinhaTexto;
                                        key		= chave  + "-CTB";
                                        ttMovimentoPadrao ttTemp	= new ttMovimentoPadrao(ttMov2);
                                        ttTemp.valorDocumento		= partidaDobradaMulta;
                                        ttTemp.cpfCnpj = "";

                                        mapaVariavel = geralancamentoExtraInterno(mapaVariavel, ttTemp, key, true, 5, "MULTA", classificacao);
                                    }
                                }
                            } catch (Exception e) {
                            }
                        } // while
                    }finally {

						/*if (memFile != null) { //closeFile
							try {memFile.closeFile(); }
							catch (Exception ex) { }
						}*/ //closeFile

                    }
                }

            }
            try {
                Iterator itArquivo = mapaArquivo.keySet().iterator();
                while (itArquivo.hasNext()) {
                    String key = (String)itArquivo.next();
                    ttArquivo ttArq = (ttArquivo)mapaArquivo.get(key);

                    try {

                        FileUtil.moveToDir(dirName+"/"+ttArq.arquivo, backupDirName);
                    } catch (Exception xx) {}
                }
            } catch (Exception xx) {}



        }
    } catch (Exception ee) {
        putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
        logger.logError("EndpointA: ", ee);
    }



    try {
        Iterator itArquivo = mapaArquivo.keySet().iterator();
        while (itArquivo.hasNext()) {
            String key = (String)itArquivo.next();
            ttArquivo ttArq = (ttArquivo)mapaArquivo.get(key);

            try {

                FileUtil.moveToDir(dirName+"/"+ttArq.arquivo, backupDirName);
            } catch (Exception xx) {}
        }
    } catch (Exception xx) {}


    if(erroShrink){
        putStatus(dirName, tipoLancamento + ".err", jStatus, logger);
        throw new Exception();
    }
    // --------------------------------------------------------------------------------------------------------------------
    // #DOCUMENTACAO
    // BUSCA INFORMACAO DE EXTRATOS SALVOS
    if (leuFinanceiro && cruzaExtrato.contains("TRUE") || (tipoPlanilha.contains("EXTRATO") && cruzaExtrato.contains("FALSE")) ||
            (Cruza_Extrato_com_Extrato.contains("TRUE") && cruzaExtrato.contains("FALSE")) ||
            (Cruza_Extrato_com_Extrato.contains("FALSE") && cruzaExtrato.contains("FALSE"))) {


        try {
            JSONArray extratoEmpresa = getExtratosEmpresa(codEmpresa, dbIOCont, logger);

            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                //logger.logInfo("encontrou algum extrato");
                for (int t=0; t<extratoEmpresa.length(); t++) {

                    JSONObject recMov = extratoEmpresa.optJSONObject(t);

                    recMov.put("CODEMPRESA", codEmpresa);
                    recMov.put("NOMEEMPRESA", nomeEmpresa);

                    //QUANDO FOR CRUZAMENTO DE EXTRATO, MANTER NOME UNICO NO ARQUIVO FINAL.
                    if (leuFinanceiro && cruzaExtrato.contains("TRUE")) {
                        recMov.put("NOMEARQUIVO", nomeArquivo);
                    }
                    else {
                        recMov.put("NOMEARQUIVO", "");
                    }

                    recMov.put("TIPOLANCAMENTO", tipoLancamento).put("CONTAMOVIMENTO", "").put("CONTAPORTADOR", "").put("CONTLINHATEXTO", String.valueOf(t));


                    ttMovimentoPadrao ttMovExtrato = getMovimentoExtrato(recMov, logger);
                    if (nomeArquivo.toUpperCase().contains("FILTRO_")){
                        boolean filtro = validaFiltro(nomeArquivo, ttMovExtrato.dataMovimento);
                        temFiltro = true;
                        if(!filtro) continue;
                    }


                    String consolidaClass = StringUtil.leftPad(String.valueOf(t), 06, "0");
                    ttMovExtrato.classificacao = ttMovExtrato.dataMovimento.replace("/","").trim() + "5" + consolidaClass;

                    String leuCnpj = "";
                    if (ttMovExtrato.nomeOrigem.contains(".") && ttMovExtrato.nomeOrigem.contains("-")) {
                        leuCnpj = getCpfCnpj(ttMovExtrato.nomeOrigem);

                        if (!leuCnpj.equals("")) {
                            ttMovExtrato.nomeOrigem = ttMovExtrato.nomeOrigem.replaceAll(leuCnpj, leuCnpj.replaceAll("\\.","").replaceAll("/","").replaceAll(" ","").replaceAll("-",""));
                        }
                    }
                    if (ttMovExtrato.complemento01.contains(".") && ttMovExtrato.complemento01.contains("-")) {
                        leuCnpj = getCpfCnpj(ttMovExtrato.complemento01);
                        if (!leuCnpj.equals("")) {
                            ttMovExtrato.complemento01 = ttMovExtrato.complemento01.replaceAll(leuCnpj, leuCnpj.replaceAll("\\.","").replaceAll(" ","").replaceAll("/","").replaceAll("-",""));
                        }
                    }
                    mapaVariavel.put(ttMovExtrato.chave, ttMovExtrato);
                    apagaExtrato    = true;

                }
            }
        }
        catch (Exception xx) {
            //logger.logInfo("ATENCAO - PROBLEMA NA LEITURA DE EXTRATO - BANCO");
        }

    } // if tipo planilha nao igual extrato

    // logger.logInfo("ETAPA 03 TEMPLATE ");

    // --------------------------------------------------------------------------------------------------------------------
    // #DOCUMENTACAO
    // INICIO DAS ITERACOES
    StringBuilder[] txtFiscal = new StringBuilder[20];
    for (int i= 0; i < 20; i++) {
        txtFiscal[i] = new StringBuilder("");
        loteFiscal[i] = "";
    }

    StringBuilder txtFornecedor = new StringBuilder();
    StringBuilder txtPortador   = new StringBuilder();
    String nomePortadorAnterior = "";

    // if(roteiroCRMPrincipal.optString("erpContabilidade").equals("MAKROWEB")) txtFiscal[0].append("PGTOFOR").append(cnpjEmpresa).append("\r\n");  // #Fabrica(2019-08-13) @Vini


    StringBuilder ResumoTxt = new StringBuilder();
    String rn = "\r\n";
    ResumoTxt = new StringBuilder();
    ResumoTxt.append("");
    ResumoTxt.append(rn);
    ResumoTxt.append(rn);

    ResumoTxt.append("STATUS;").append("DATA;TIPO DATA;").append("VALOR;").append("DOCUMENTO;").append("CLIENTE/FORNECEDOR;").append("PORTADOR;").append("COMPLEMENTO01;").append("COMPLEMENTO02;").append("COMPLEMENTO03;").append("COMPLEMENTO04;").append("COMPLEMENTO05;").append("COMPLEMENTO06;;CTA DEBITO ENCONTRADA;CTA CREDITO ENCONTRADA;REGRA CONTA CRM;HISTORICO;REGRA HISTORICO;;").append("DATA;").append("DEBITO;").append("CLASS DEB;").append("NOME CONTA;").append("CREDITO;").append("CLASS CRED;").append("NOME CONTA;").append("VALOR;").append("HISTORICO;");
    ResumoTxt.append("ORIGEM");

    StringBuilder txtDePara = new StringBuilder();

    txtDePara.append("DATA;VALOR;FORNECEDOR/CLIENTE;PORTADOR;CONTA DEBITO;CONTACREDITO;DOCUMENTO;COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03;COMPLEMENTO04;COMPLEMENTO05;C.CUSTO;ARQUIVO");
    txtDePara.append("\r\n");


    // logger.logInfo("DIRNAME " + dirName);
    if (mantemArquivo.equals("SIM")) {
        File fileDepoisLista = new File(dirName);
        File [] filesDepois = fileDepoisLista.listFiles();

        if (filesDepois.length > 1) putStatus(dirName, "", jStatus, logger);
    }
    // logger.logInfo("TEMPLATE ETAPA 03 ");


    int contRegra = -1;

    String loteEtapaTres = "";


    try {
        Iterator itExtrato = mapaVariavel.keySet().iterator();
        while (itExtrato.hasNext()) {
            String chaveExtrato     = "";

            String key = (String)itExtrato.next();
            ttMovimentoPadrao ttMov = (ttMovimentoPadrao)mapaVariavel.get(key);

            if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
                roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
            }else{
                roteiroCRM = getRoteiro();
            }

            loteEtapaTres = ttMov.lote;


            // #DOCUMENTACAO
            // TRATA LOTES (MAIUSCULO e MINUSCULO)

            if(ttMov.lote.lastIndexOf("__") > ttMov.lote.indexOf("__")){
                ttMov.lote = nomeEmpresa +"_"+ codEmpresa +"_"+
                        cutString(ttMov.lote, ttMov.lote.indexOf("__"), ttMov.lote.lastIndexOf("__")).toLowerCase() +"_"+ ttMov.lote.substring(ttMov.lote.lastIndexOf("__"));
            }


            // #DOCUMENTACAO
            // EVITA GERAR 2 ARQUIVOS QUANDO TEM TRATAR COMO EXTRATO
            // ajusta o ott_oud__ para poder reprocessar o arquivo automaticamnete pelo portal
            ttMov.lote = ttMov.lote.replace(ttMov.debitoCredito,"").replace("extrato-debito","").replace("extrato-credito","").replace("___","_").replace("__","_");
            if (!ttMov.lote.toLowerCase().contains("ott_oud__") && ttMov.lote.toLowerCase().contains("ott_oud_")) {
                ttMov.lote = ttMov.lote.replace("ott_oud_","ott_oud__");
            }

            // #DOCUMENTACAO
            // JUNCAO DOS LANCAMENTOS COM OS JUROS E DESCONTOS (TRATAR COMO JUROS OU DESCONTO)
            String chaveJuros = ttMov.dataMovimento + "-" + ttMov.documento + "-JUROS";
            ttJuros ttJ  = (ttJuros)mapaJuros.get(chaveJuros);
            if (ttJ != null && ttJ.valorLido == 0) {
                ttMov.valorJuros  = ttJ.valorJur;
                ttJ.valorLido     = 1;
                mapaJuros.put(chaveJuros,ttJ);

            }

            String chaveDesconto = ttMov.dataMovimento + "-" + ttMov.documento + "-DESCONTO";
            ttDesconto ttD  = (ttDesconto)mapaDesconto.get(chaveDesconto);
            if (ttD != null && ttD.valorLido == 0) {
                ttMov.valorDesconto  = ttD.valorDesc;
                ttD.valorLido     = 1;
                mapaDesconto.put(chaveDesconto,ttD);

            }
            contRegra++;
            int restoLinha = 0;
            restoLinha = (contRegra % 100);
            //logger.logInfo("ANTES 3 DE 4");

            // if (codEmpresa.contains("277")) logger.logInfo("TRESDEQUATRO " + " | " + ttMov.tipoP + ttMov.debitoCredito + " | " +  ttMov.dataMovimento + " | " + ttMov.valorDocumento);

            if (restoLinha == 0) putStatus(dirName, "03--Etapa 3 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);


            //logger.logInfo("TPPORTTEMPLATE " + ttMov.tipoPlanilha + " | " + ttMov.lote + " | " + ttMov.dataMovimento + " | " + ttMov.tipoLancamento + " | " + ttMov.debitoCredito);
            //LOGUNICO
            logger.logInfo("valor: " + ttMov.nomePortador + "|" + ttMov.dataMovimento + "|" + ttMov.documento + "|" + ttMov.nomeOrigem + "|"+ ttMov.debitoCredito+ "|" + ttMov.valorDocumento);
            // if(codEmpresa.equals("987789")) logger.logInfo("DATA == "+ttMov.dataMovimento+" | LOTEEE == "+ttMov.lote.replace("rodaconversor", "")+" | TP === "+ttMov.tipoPlanilha);


            ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("\'","");
            ttMov.complemento01 = ttMov.complemento01.replaceAll("\'","");
            ttMov.complemento02 = ttMov.complemento02.replaceAll("\'","");
            ttMov.complemento03 = ttMov.complemento03.replaceAll("\'","");
            ttMov.complemento04 = ttMov.complemento04.replaceAll("\'","");
            ttMov.complemento05 = ttMov.complemento05.replaceAll("\'","");

            ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").trim();
            ttMov.nomePortador = ttMov.nomePortador.replaceAll("\\|","");
            ttMov.complemento01 = ttMov.complemento01.replaceAll("\\|","");

            classificaPlano     = roteiroCRM.optString("classificaPlano");
            classificaFornec    = roteiroCRM.optString("classificaFornec");
            cruzaExtrato	    = roteiroCRM.optString("cruzaExtrato").toUpperCase();
            Cruza_Extrato_com_Extrato = roteiroCRMPrincipal.optString("Cruza_Extrato_com_Extrato").toUpperCase(); // principal mesmo
            String integraFiscal = roteiroCRM.optString("Integracao_fiscal").toUpperCase();
            String integraContrato = roteiroCRM.optString("Integracao_contratos").toUpperCase();

            if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) continue;
            if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-DEBITO")) continue;
            // logger.logInfo("PORTAS1 " + cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_"));
            // logger.logInfo("PORTAS2 " + ttMov.nomePortador);
            if (ttMov.nomePortador.toUpperCase().contains("OTT_OUD") && ttMov.nomePortador.toUpperCase().contains("CEF")) ttMov.nomePortador = cutString(ttMov.nomePortador.toUpperCase(), 0, "OTT_") + " " + cutString(ttMov.nomePortador.toUpperCase(), ttMov.nomePortador.toUpperCase().indexOf(cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_"))+cutString(ttMov.nomePortador.toUpperCase(), "_ID", "_").length()+1);

            // logger.logInfo("TIPOS " + tipoPlanilha);

            if (ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("FRANCESINHA")) {
                JSONObject histobj = new JSONObject();
                histobj.put("nomeOrigem", ttMov.nomeOrigem).put("documento", ttMov.documento).put("complemento01", ttMov.complemento01).put("complemento02", ttMov.complemento02)
                        .put("complemento03", ttMov.complemento03).put("complemento04", ttMov.complemento04).put("complemento05", ttMov.complemento05)
                        .put("complemento06", ttMov.complemento06).put("nomePortador", ttMov.nomePortador).put("dataMovimento", ttMov.dataMovimento)
                        .put("valorDocumento", ttMov.valorDocumento).put("valorJuros", ttMov.valorJuros).put("valorDesconto", ttMov.valorDesconto)
                        .put("valorMulta",ttMov.valorMulta).put("tipoPlanilha", ttMov.tipoPlanilha);

                String modificaData = getModificaData(histobj);

                if (modificaData.startsWith("01"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 1, true);
                if (modificaData.startsWith("02"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 2, true);
                if (modificaData.startsWith("03"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 1, false);
                if (modificaData.startsWith("04"))  ttMov.dataMovimento = getNextDay(ttMov.dataMovimento, 2, false);
                if (modificaData.startsWith("05"))  ttMov.dataMovimento = "01/" + cutString(ttMov.dataMovimento, "/");
                if (modificaData.startsWith("06"))  ttMov.dataMovimento = getLastDayOfMonth(ttMov.dataMovimento, true);
            }


            // ------------------------------------------------------------------------------------------------------------------
            // 	 		INICIA PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------
            String DATAMOVIMENTO   = "";
            String PORTADOR        = "";
            String CHAVE           = "";
            boolean jaCruzou       = false;

            ttMov.valorJuros = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));
            ttMov.valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
            ttMov.valorMulta = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorMulta));
            ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
            // ajuste 11/2020 @DiMaz
            if (ttMov.valorDocumento == 0) continue;


            // #DOCUMENTACAO
            // EXTRATO COM EXTRATO
            if (Cruza_Extrato_com_Extrato.contains("TRUE") && ttMov.tipoPlanilha.contains("EXTRATO")) {

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);
                if (ttMov.valorDocumento == 0) continue;


                JSONArray extratoEmpresa = new JSONArray();
                String transferencia = "NAO";

                if(ttMov.tipoLancamento.contains("PAGAR")   && ttMov.debitoCredito.contains("EXTRATO-DEBITO"))  transferencia = "SIM";
                if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.contains("EXTRATO-CREDITO")) transferencia = "SIM";

                if (transferencia.equals("SIM")) {
                    for (int xx = 0;xx<1;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;

                            if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                    .param(chaveExtrato + "%")
                                    .param(0)
                                    .param(ttMov.nomeArquivo.toUpperCase())
                                    .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
                    PORTADOR        = recMov.optString("PORTADOR");
                    CHAVE           = recMov.optString("CHAVE");

                    ttMov.complemento04 = ttMov.nomeOrigem;
                    ttMov.nomeOrigem    = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;
                    ttMov.tipoPlanilha  = "EXTRATO-TRANSFERENCIA";

                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(1)
                            .param(CHAVE)
                            .execute();
                    jaCruzou = true;

                }
            }

            // #DOCUMENTACAO
            // EXTRATO COM PLANILHA
            if (cruzaExtrato.contains("TRUE")  && !jaCruzou) {

                Conta_Fixa_Cruzamento_Extrato  = roteiroCRMPrincipal.optString("Conta_Fixa_Cruzamento_Extrato");

                String tipoData = "MOVIMENTO";
                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm   = new Date();
                Date dataMovimentoDateMenosDois = new Date();
                Date dataMovimentoDateMenosTres = new Date();
                Date dataMovimentoDateMaisUm    = new Date();
                Date dataMovimentoDateMaisDois  = new Date();
                Date dataMovimentoDateMaisTres  = new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm   = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm    = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois  = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate);          cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres  = cal.getTime();

                if (ttMov.valorDocumento == 0) continue;


                JSONArray extratoEmpresa = new JSONArray();

                String transferencia = "NAO";

                if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
                    for (int xx = 0;xx<7;xx++) {
                        try {
                            String dataLeitura = ttMov.dataMovimento;
                            if (xx ==1) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisUm, "dd/MM/yyyy");
                            if (xx ==2) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosUm, "dd/MM/yyyy");
                            if (xx ==3) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisDois, "dd/MM/yyyy");
                            if (xx ==4) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosDois, "dd/MM/yyyy");
                            if (xx ==5) dataLeitura = DateUtil.dateToString(dataMovimentoDateMaisTres, "dd/MM/yyyy");
                            if (xx ==6) dataLeitura = DateUtil.dateToString(dataMovimentoDateMenosTres, "dd/MM/yyyy");


                            if(ttMov.tipoLancamento.contains("PAGAR"))   chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-DEBITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));
                            if(ttMov.tipoLancamento.contains("RECEBER")) chaveExtrato = codEmpresa + "-" +  dataLeitura + "-" + "EXTRATO-CREDITO" + "-" + String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros + ttMov.valorMulta - ttMov.valorDesconto));

                            extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? AND EXTRATOLIDO = ? AND LOTE <> ? ")
                                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                    .param(chaveExtrato + "%")
                                    .param(0)
                                    .param(ttMov.nomeArquivo.toUpperCase())
                                    .query();

                            if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                                break;
                            }
                        }
                        catch (Exception xx) {
                            break;
                        }
                    }
                }

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    JSONObject recMov = extratoEmpresa.optJSONObject(0);

                    DATAMOVIMENTO   = recMov.optString("DATAMOVIMENTO");
                    PORTADOR        = recMov.optString("PORTADOR");
                    CHAVE           = recMov.optString("CHAVE");
                    if (roteiroCRM.optString("Aloca_Checknum").toUpperCase().equals("TRUE")) ttMov.complemento02 = recMov.optString("COMPLEMENTO"); //checknum

                    ttMov.nomePortador  = PORTADOR;
                    ttMov.dataMovimento = DATAMOVIMENTO;

                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(1)
                            .param(CHAVE)
                            .execute();

                }

            }

            if (ttMov.lote.contains("_ancora_")) {
                ttMov.lote = ttMov.lote.replace("_ancora_", "");
            }

            if (ttMov.lote.contains("_ANCORA_")) {
                ttMov.lote = ttMov.lote.replace("_ANCORA_", "");
            }


            // ------------------------------------------------------------------------------------------------------------------
            // 	 		FINALO DO PROCESSO DE CRUZAMENTO COM EXTRATO
            // ------------------------------------------------------------------------------------------------------------------




            classificacao = "";

            String key2 = ttMov.chave;

            if(ttMov.dataMovimento.length() > 9){
                mesRef  = Integer.parseInt(ttMov.dataMovimento.substring(3,5));
                anoRef  = Integer.parseInt(ttMov.dataMovimento.substring(6,10));
                mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                mesRef  = mesRef - 1;
                if (mesRef  == 0) {
                    mesRef  = 12;
                    anoRef  = anoRef - 1;
                }
                mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
                mesRef  = mesRef - 1;
                if (mesRef  == 0) {
                    mesRef  = 12;
                    anoRef  = anoRef - 1;
                }
                mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
            }

            String trimestreMesAnoAnterior	    = "";
            String trimestreMesAnoAtual   	    = "";
            String descricaoPlanoContaPortador  = "";
            String descricaoPlanoContaMovimento = "";

            // #DOCUMENTACAO
            // TRIMESTRE
            if (mesAnoAnterior.startsWith("01") || mesAnoAnterior.startsWith("02") || mesAnoAnterior.startsWith("03")) trimestreMesAnoAnterior = "1. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("04") || mesAnoAnterior.startsWith("05") || mesAnoAnterior.startsWith("06")) trimestreMesAnoAnterior = "2. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("07") || mesAnoAnterior.startsWith("08") || mesAnoAnterior.startsWith("09")) trimestreMesAnoAnterior = "3. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAnterior.startsWith("10") || mesAnoAnterior.startsWith("11") || mesAnoAnterior.startsWith("12")) trimestreMesAnoAnterior = "4. Trimestre/" + mesAnoAnterior.substring(3);
            if (mesAnoAtual.startsWith("01") || mesAnoAtual.startsWith("02") || mesAnoAtual.startsWith("03")) trimestreMesAnoAtual = "1. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("04") || mesAnoAtual.startsWith("05") || mesAnoAtual.startsWith("06")) trimestreMesAnoAtual = "2. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("07") || mesAnoAtual.startsWith("08") || mesAnoAtual.startsWith("09")) trimestreMesAnoAtual = "3. Trimestre/" + mesAnoAtual.substring(3);
            if (mesAnoAtual.startsWith("10") || mesAnoAtual.startsWith("11") || mesAnoAtual.startsWith("12")) trimestreMesAnoAtual = "4. Trimestre/" + mesAnoAtual.substring(3);


            if (ttMov.nomeOrigem.equals("")) ttMov.nomeOrigem = ttMov.complemento01 + " " + ttMov.dataMovimento + " R$" + String.valueOf(ttMov.documento);
            ttMov.nomeOrigem = ttMov.nomeOrigem.trim();
            if (ttMov.nomePortador.equals("")) ttMov.nomePortador = "EM BRANCO";
            if (ttMov.nomePortador.equals("_")) ttMov.nomePortador = "EM BRANCO";
            if (ttMov.nomePortador.equals("-")) ttMov.nomePortador = "EM BRANCO";
            if (ttMov.nomePortador.replaceAll("\\$", "").equals("")) ttMov.nomePortador = "EM BRANCO";


            contaJuros        = roteiroCRM.optString("contaFixaJuros");
            contaFixaCredito  = roteiroCRM.optString("contaFixaCredito");
            contaFixaDebito   = roteiroCRM.optString("contaFixaDebito");
            contaDesconto     = roteiroCRM.optString("contaFixaDesconto");
            contaMulta        = roteiroCRM.optString("contaFixaMulta");

            // if(codEmpresa.equals("13")) logger.logInfo("ValorJuros -> " + ttMov.valorJuros + " |contaJuros -> " + contaJuros + " |VAlorMulta -> " + ttMov.valorMulta + " | contaMulta -> " + contaMulta + " |TTMovNO -> " + ttMov.nomeOrigem +  " | ValorDoc -> " + ttMov.valorDocumento);


            contaMovimento = "";
            contaPortador  = "";


            if(ttMov.tipoLancamento.contains("PAGAR")) {
                contaMovimento = contaFixaDebito;
                contaPortador  = contaFixaCredito;
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                contaPortador  = contaFixaDebito;
                contaMovimento = contaFixaCredito;
            }



            // exemplo de como vem um registro do complemento_lancaments
            // 54999667000179-PAG-ANTONIO FLAVIO DE ARAUJO JUNIOR-2021-05-21-180.0

            if (contaMovimento.equals("") && encontrouComplemento){
                try {

                    String chaveComplemento = cnpjEmpresa.replaceAll("[^0-9]","").trim() + "-" + cutString(ttMov.tipoLancamento, 0, 3) + "-" + ttMov.nomeOrigem + "-" +
                            cutString(ttMov.dataMovimento, 6) + "-" + cutString(ttMov.dataMovimento, "/", "/") + "-" + cutString(ttMov.dataMovimento, 0, "/") + "-" +
                            ttMov.valorDocumento;



                    ttPlano ttP  = (ttPlano)mapaDePara.get(chaveComplemento);
                    if (ttP == null) {
                        ttP  = new ttPlano();
                        ttP.descricaoPlano = chaveComplemento;
                        ttP.contaAnalitica = "";
                        ttP.contaContabil     = "";
                        mapaDePara.put(chaveComplemento,ttP);

                        try{
                            //deParaObj = findComplementoLancamento(dbIODepara, chaveComplemento);
                        }
                        catch (Exception e) {
                        }
                        if (deParaObj != null && !deParaObj.toString().equals("{}")) {
                            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                                ttMov.complemento02 = deParaObj.optString("complemento");
                            } else {
                                ttMov.complemento01 = deParaObj.optString("complemento");
                            }


                        } else {

                            //	 verifica se banco de dados possui ao menos algum lancamento de complemento
                            //   se nao encontrar, joga false na encontrouComplemento para ter mais performance e nao buscar no
                            //   banco  de dados a toa
                            chaveComplemento = cnpjEmpresa.replaceAll("[^0-9]","").trim() + "-" + cutString(ttMov.tipoLancamento, 0, 2);
                            try{
                                //deParaObj = findComplementoLancamento(dbIODepara, chaveComplemento);
                            }
                            catch (Exception e) {
                            }
                            if (deParaObj == null || deParaObj.toString().equals("{}"))  encontrouComplemento = false;

                        }


                    }
                } catch  (Exception Ee) {}
            }


            // Quando pede para cruzar extrato e nao encontra relacionamento com o extrato
            // joga conta fixa de extrato em DEBITO quando for extato e CREDITO quando for planilha
            if ((cruzaExtrato.contains("TRUE") || cruzaExtrato.contains("VERDADEIRO")) && PORTADOR.equals("")) {
                if (ttMov.tipoPlanilha.contains("EXTRATO"))  contaMovimento  = Conta_Fixa_Cruzamento_Extrato;
                if (!ttMov.tipoPlanilha.contains("EXTRATO")) contaPortador   = Conta_Fixa_Cruzamento_Extrato;
            }


            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

            contaMovimento    = getConta09(contaMovimento, ttMov.nomeOrigem,  ttMov.documento, "", ttMov.complemento01,  ttMov.complemento02,  ttMov.complemento03, "",  ttMov.centroCusto);
            contaPortador     = getConta09(contaPortador, "", "", ttMov.nomePortador, "", "", "", ttMov.nomeArquivo, "");
            //ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, "", ttMov.centroCusto);
            //2310-017917 - As regras de centro custo tem validacao com o nome do arquivo e n?o funcionava porque nomeArquivo nao estava sendo passado no getCentroCusto
            ttMov.centroCusto = getCentroCusto("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, nomeArquivo, ttMov.centroCusto);
            ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                    ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                    ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);
            if (!ttMov.codFilial.equals("") && roteiroCRMPrincipal.optString("erpContabilidade").equals("CUCA-FRESCA")) ttMov.cpfCnpj = ttMov.codFilial;

            ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

            JSONObject histobj = new JSONObject();

            histobj.put("nomeOrigem", ttMov.nomeOrigem).put("documento", ttMov.documento).put("complemento01", ttMov.complemento01).put("complemento02", ttMov.complemento02)
                    .put("complemento03", ttMov.complemento03).put("complemento04", ttMov.complemento04).put("complemento05", ttMov.complemento05)
                    .put("complemento06", ttMov.complemento06).put("complemento07", ttMov.complemento07).put("complemento08", ttMov.complemento08)
                    .put("complemento09", ttMov.complemento09).put("complemento10", ttMov.complemento10).put("dataMovimento", ttMov.dataMovimento)
                    .put("mesAnoAnterior", mesAnoAnterior).put("mesAno2Anterior", mesAno2Anterior).put("mesAnoAtual", mesAnoAtual).put("nomePortador", ttMov.nomePortador)
                    .put("contaMovimento", contaMovimento).put("contaPortador", contaPortador).put("contaDebito", "").put("contaCredito", "").put("contaJuros", ttMov.contaJuros)
                    .put("contaDesconto", ttMov.contaDesconto).put("contaMulta", ttMov.contaMulta).put("centroCusto", ttMov.centroCusto)
                    .put("valorDocumento", ttMov.valorDocumento).put("valorJuros", ttMov.valorJuros).put("valorDesconto", ttMov.valorDesconto).put("valorMulta", ttMov.valorMulta)
                    .put("codFilial", ttMov.codFilial).put("tipoPlanilha", ttMov.tipoPlanilha).put("numeroAba", ttMov.abaPlanilha).put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());

            ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getReplaceTermos("complemento08", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getReplaceTermos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getReplaceTermos("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getReplaceTermos("nomePortador",  ttMov.nomePortador,   histobj);

            ttMov.complemento01 = getLimpaCampos("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getLimpaCampos("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getLimpaCampos("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getLimpaCampos("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getLimpaCampos("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getLimpaCampos("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getLimpaCampos("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getLimpaCampos("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getLimpaCampos("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getLimpaCampos("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getLimpaCampos("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getLimpaCampos("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getLimpaCampos("nomePortador",  ttMov.nomePortador,   histobj);

            histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
            histobj.put("nomePortador", ttMov.nomePortador);

            ttMov.complemento01 = getLimpaCamposAvancado("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getLimpaCamposAvancado("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getLimpaCamposAvancado("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getLimpaCamposAvancado("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getLimpaCamposAvancado("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getLimpaCamposAvancado("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getLimpaCamposAvancado("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getLimpaCamposAvancado("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getLimpaCamposAvancado("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getLimpaCamposAvancado("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getLimpaCamposAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getLimpaCamposAvancado("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getLimpaCamposAvancado("nomePortador",  ttMov.nomePortador,   histobj);

            ttMov.complemento01 = getReplaceTermosAvancado("complemento01", ttMov.complemento01,  histobj);
            ttMov.complemento02 = getReplaceTermosAvancado("complemento02", ttMov.complemento02,  histobj);
            ttMov.complemento03 = getReplaceTermosAvancado("complemento03", ttMov.complemento03,  histobj);
            ttMov.complemento04 = getReplaceTermosAvancado("complemento04", ttMov.complemento04,  histobj);
            ttMov.complemento05 = getReplaceTermosAvancado("complemento05", ttMov.complemento05,  histobj);
            ttMov.complemento06 = getReplaceTermosAvancado("complemento06", ttMov.complemento06,  histobj);
            ttMov.complemento07 = getReplaceTermosAvancado("complemento07", ttMov.complemento07,  histobj);
            ttMov.complemento08 = getReplaceTermosAvancado("complemento09", ttMov.complemento08,  histobj);
            ttMov.complemento09 = getReplaceTermosAvancado("complemento09", ttMov.complemento09,  histobj);
            ttMov.complemento10 = getReplaceTermosAvancado("complemento10", ttMov.complemento10,  histobj);
            ttMov.nomeOrigem    = getReplaceTermosAvancado("nomeOrigem",    ttMov.nomeOrigem,     histobj);
            ttMov.documento     = getReplaceTermosAvancado("documento",     ttMov.documento,      histobj);
            ttMov.nomePortador  = getReplaceTermosAvancado("nomePortador",  ttMov.nomePortador,   histobj);

            histobj.put("nomeOrigem", ttMov.nomeOrigem);					histobj.put("documento", ttMov.documento);
            histobj.put("complemento01", ttMov.complemento01);				histobj.put("complemento02", ttMov.complemento02);
            histobj.put("complemento03", ttMov.complemento03);				histobj.put("complemento04", ttMov.complemento04);
            histobj.put("complemento05", ttMov.complemento05);				histobj.put("complemento06", ttMov.complemento06);
            histobj.put("complemento07", ttMov.complemento07);				histobj.put("complemento08", ttMov.complemento08);
            histobj.put("complemento09", ttMov.complemento09);				histobj.put("complemento10", ttMov.complemento10);
            histobj.put("dataMovimento", ttMov.dataMovimento);				histobj.put("mesAnoAnterior", mesAnoAnterior);
            histobj.put("mesAno2Anterior", mesAno2Anterior);				histobj.put("mesAnoAtual", mesAnoAtual);
            histobj.put("nomePortador", ttMov.nomePortador);				histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);	   			    histobj.put("contaDebito", "");
            histobj.put("contaCredito", "");								histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaDesconto", ttMov.contaDesconto);				histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("centroCusto", ttMov.centroCusto);    				histobj.put("valorDocumento", ttMov.valorDocumento);
            histobj.put("valorJuros", ttMov.valorJuros);   				    histobj.put("valorDesconto", ttMov.valorDesconto);
            histobj.put("valorMulta", ttMov.valorMulta); 				    histobj.put("codFilial", ttMov.codFilial);
            histobj.put("tipoPlanilha", ttMov.tipoPlanilha);                histobj.put("numeroAba", ttMov.abaPlanilha);
            histobj.put("nomeArquivo", ttMov.nomeArquivo.toUpperCase());


            // Quando selecionado para controlar parcela, buscar complemento apos a limpeza para poder jogar em parcela
            String parcelaString = "1";
            if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO01")) parcelaString = ttMov.complemento01;
            if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO02")) parcelaString = ttMov.complemento02;
            if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO03")) parcelaString = ttMov.complemento03;
            if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO04")) parcelaString = ttMov.complemento04;
            if (roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("COMPLEMENTO05")) parcelaString = ttMov.complemento05;

            try {
                ttMov.parcelaDoc = Integer.parseInt(parcelaString);
            }
            catch (Exception xx) { ttMov.parcelaDoc = 1;}

            //Feito para retirar os indices apos o tipoPlanilha, estavam impactando nas regras do oud
            if(!ttMov.tipoPlanilha.equals("")){
                String sequencia = "";
                try{
                    sequencia = cutString(ttMov.tipoPlanilha, ttMov.tipoPlanilha.length()-4).replaceAll("[^0-9]", "");
                }catch(Exception s1){}
                if(ttMov.tipoPlanilha.contains(sequencia)){
                    try{
                        ttMov.tipoPlanilha = cutString(ttMov.tipoPlanilha, 0, sequencia);

                    }catch(Exception s2){}
                }
            }

            // logger.logInfo("TTMS " + ttMov.tipoPlanilha + " | " + ttMov.complemento01 + " | " + ttMov.nomeOrigem + " | " + ttMov.complemento02);


            contaMovimento = getContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaMovimento = getContaMovimento2(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaMovimento = getContaMovimento3(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            // if(codEmpresa.contains("1286"))
            // logger.logInfo("CONTA MOV == "+contaMovimento+" | NO == "+ttMov.nomeOrigem+" | TP = "+ttMov.tipoPlanilha);
            // contaMovimento = getContaMovimento4(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            // contaMovimento = getContaMovimento5(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            contaPortador  = getContaPortador(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            // contaPortador  = getContaPortador2(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            // contaPortador  = getContaPortador3(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            // contaPortador  = getContaPortador4(contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            //#2305-004914. Carrega a chamadas das rotinas getContaMovimento e getContaPortador caso n?o tenha ainda.
            // Classe Principal SC
            Class<?> sc = this.getClass();
            // Instancia da Classe Principal
            Object scInstance = sc.newInstance();
            // Get all Methods from superclass 'SC'.
            java.lang.reflect.Method[] methods = sc.getDeclaredMethods();
            boolean methodFoundPortador = false;
            boolean methodFoundMovimento = false;
            for(java.lang.reflect.Method method : methods) {
                String methodName = method.getName();
                methodFoundPortador = false;
                methodFoundMovimento = false;
                if(methodName.toUpperCase().equals("GETCONTAMOVIMENTO4")) {
                    methodFoundMovimento = true;
                }
                if(methodName.toUpperCase().equals("GETCONTAMOVIMENTO5")) {
                    methodFoundMovimento = true;
                }

                if(methodName.toUpperCase().equals("GETCONTAPORTADOR2")) {
                    methodFoundPortador = true;
                }
                if(methodName.toUpperCase().equals("GETCONTAPORTADOR3")) {
                    methodFoundPortador = true;
                }
                if(methodName.toUpperCase().equals("GETCONTAPORTADOR4")) {
                    methodFoundPortador = true;
                }

                if(methodFoundMovimento) {
                    // Invoca metodo de getContaMovimento.
                    contaMovimento = (String) method.invoke(scInstance, contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                }
                if(methodFoundPortador) {
                    // Invoca metodo de getContaPortador.
                    contaPortador = (String) method.invoke(scInstance, contaPortador, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                }
            }

            // Soares - Mudanca no template referente a uma parte do chamado =>> 202208-0017982

            if(roteiroCRM.optString("gravaCnpjMovimento").toUpperCase().contains("TRUE")){
                if(contaMovimento.equals("")) {
                    if(!ttMov.cpfCnpj.equals("")){
                        contaMovimento = ttMov.cpfCnpj;
                        if((roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().startsWith("SCI") || roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("PROSOFT")) && !ttMov.cpfCnpj.equals(""))
                            contaMovimento = ttMov.cpfCnpj + "P";
                    }
                }
                else {ttMov.cpfCnpj = "";}
            }

            regraContaMovimento  = getRegraContaMovimento(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            // logger.logInfo("CONTINHA "  + contaMovimento + " | " + regraContaMovimento);

            double valorPrincipal 	 = getValorPrincipal("", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            if (valorPrincipal> 0 && ttMov.valorDocumento > valorPrincipal) {
                ttMov.valorJuros     = ttMov.valorDocumento - valorPrincipal;
                ttMov.valorDocumento = valorPrincipal;
            }

            ttMov.complemento03 	= ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";
            ttMov.contaJuros        = getContaJuros(contaJuros,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaDesconto     = getContaDesconto(contaDesconto,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            ttMov.contaMulta        = getContaMulta(contaMulta,  ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            tabelaContabil   		= getTabelaContabil("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02, ttMov.complemento03, ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);
            ttMov.complemento03  	= ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();
            // if(roteiroCRM.optString("empresa").toUpperCase().contains("FARMAGIL")){
            // logger.logInfo("TIPO PLANILHINHA == "+ttMov.tipoPlanilha+" | ttMov.contaDesconto - "+ttMov.contaDesconto+" - contaDesconto - "+contaDesconto+" | "+roteiroCRM.optString("contaFixaDesconto"));
            // }
            // logger.logInfo("Contabilidade - "+roteiroCRM.optString("contabilidade")+" - empresa => "+roteiroCRM.optString("empresa"));
            // logger.logInfo("TP - "+tipoPlanilha+" - conta fixa => "+roteiroCRM.optString("contaFixaJuros")+""+roteiroCRM.optString("contaFixaMulta")+""+roteiroCRM.optString("contaFixaDesconto")+"");
            // logger.logInfo("ttMov.contaJuros - "+ttMov.contaJuros+" - ttMov.contaDesconto - "+ttMov.contaDesconto+" - ttMov.contaMulta - "+ttMov.contaMulta);

            // quando for forcada partida dobrada , vamos jogar a conta de juros automaticamente na conta movimento
            if (!contaMovimento.contains("IGNORA")) { // colocado para ignorar os lancamentos de partida dobrada quando o lancamento principal eh ignorado 20122022 JWR
                if (ttMov.chave.contains("DOBRADA_JUR") && !ttMov.contaJuros.equals("")) contaMovimento = ttMov.contaJuros;//#2304-002846
                if (ttMov.chave.contains("DOBRADA_DES")) {
                    // invers?o de contas em desconto.
                    contaMovimento = contaPortador;
                    if (!ttMov.contaDesconto.equals("")) contaPortador = ttMov.contaDesconto;
                }
                if (ttMov.chave.contains("DOBRADA_MUL") && !ttMov.contaMulta.equals("")) contaMovimento = ttMov.contaMulta;
            }


            boolean regraCRM = false;
            // logger.logInfo("contaMovimento F -> " + contaMovimento);
            if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;

            //---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---~---

            if (!contaMovimento.equals("")){

                ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
                if (ttP == null) {
                    ttP  = new ttPlano();
                    ttP.descricaoPlano = "";
                    ttP.contaAnalitica = "";


                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                            .fields("DESCRICAOPLANO,CONTAANALITICA")
                            .param(codEmpresaPlanoContas)
                            .param(cutString(contaMovimento,0, 20))
                            .queryUnique();

                    if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
                        dbIOCont.insert("IO_PLANOCONTA")
                                .fields("CODEMPRESA,CONTACONTABIL")
                                .param(codEmpresaPlanoContas)
                                .param(cutString(contaMovimento,0, 20))
                                .execute();
                    } else {
                        ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
                        ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
                    }
                    ttP.contaContabil     = cutString(contaMovimento,0, 20);
                    mapaPlano.put(contaMovimento,ttP);
                }
            }



            regraCRM = false;
            if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("FISCAL")) regraCRM = true;


            if (contaMovimento.equals("")){
                // logger.logInfo("Chegou 2");
                try {
                    String classificacaoPlanoContas = getCodigoClassificacao(ttMov.nomeOrigem, histobj); // exemplo: 2.1.1.01.
                    JSONObject futureObject = new JSONObject();
                    //JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);
                    futureObject.put("codEmpresaPlano", codEmpresaPlanoContas);
                    JSONObject ret = buscaContaNovo(codEmpresa, ttMov.nomeOrigem, ttMov.cpfCnpj, classificacaoPlanoContas, ttMov.tipoLancamento, logger, dbIOCont, mapaPartPlano, mapaFornecedor, futureObject);

                    if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = ret.optString("contaDebito");
                    if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = ret.optString("contaCredito");
                    if (contaMovimento == null || contaMovimento.trim().length() == 0) {
                        contaMovimento = "";

                        // CASO NAO ACHOU CONTA EM REGRAS NEM NO DEPARA ATUAL
                        // VERIFICA SE E A PRIMEIRA VEZ QUE BUSCA A DESCRICAO NA NUVEM
                        // INSERIDO PARA TRATGAR O BUSSOLA 3.0

                        ttPlano ttP  = (ttPlano)mapaDePara.get(ttMov.nomeOrigem);
                        if (ttP == null) {
                            ttP  = new ttPlano();
                            ttP.descricaoPlano = ttMov.nomeOrigem;
                            ttP.contaAnalitica = "";

                            ttP.contaContabil     = "";
                            mapaDePara.put(ttMov.nomeOrigem,ttP);

                            // BUSCA DEPARA PREENCHIDO PELO CONTADOR NO BUSSOLA 3.0
                            String cnpjEmpresaRequest = cnpjEmpresa.replaceAll("[^0-9]","").trim();
                            String cnpjContabilidadeRequest = roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/","");
                            //logger.logInfo("SUJANDO "  + cnpjEmpresaRequest + " | " + cnpjContabilidadeRequest + " | " + ttMov.nomeOrigem);
                            try{
                                // logger.logInfo("ttMov.nomeOrigem -> " + ttMov.nomeOrigem);
                                //deParaObj = findDeParaDescricao(dbIODepara, cnpjEmpresaRequest, cnpjContabilidadeRequest, ttMov.nomeOrigem);

                            }
                            catch (Exception e) {
                            }
                            if (deParaObj != null ) {
                                if(ttMov.tipoLancamento.contains("PAGAR")) contaMovimento = deParaObj.optString("conta_debito");
                                if(ttMov.tipoLancamento.contains("RECEBER")) contaMovimento = deParaObj.optString("conta_credito");
                                // logger.logInfo("contaMovimento -> " + contaMovimento);
                                if (contaMovimento == null) contaMovimento = "";
                                // logger.logInfo("CONTS " + contaMovimento);
                                // Quando cliente inserir a contaT no DEpara Nuvem, vamos apagar no final da rota
                                if (contaMovimento.contains("T")) {
                                    apagaContaT    = true;
                                }

                                // logger.logInfo("CMM " + contaMovimento + " | " + apagaContaT);


                            }else contaMovimento = "";


                            // SE ENCONTROU DAPARA NA NUVEM GRAVA NO H2 PARA NA PROXIMA VEZ// ACHAR LOCALMENTE O DEPARA
							/*if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("PAGAR")) {
									if (!hasPessoaPag(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("PAGAR")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "",
															contaMovimento, "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", "", contaMovimento, "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}
							if (!contaMovimento.equals("") && !contaMovimento.toUpperCase().contains("T")){
								String chaveIoPessoa = codEmpresa + ttMov.nomeOrigem;
								if(ttMov.tipoLancamento.contains("RECEBER")) {
									if (!hasPessoaRec(dbIOCont, chaveIoPessoa)) {
										try {
											if(ttMov.tipoLancamento.contains("RECEBER")) {
												if (!hasPessoa(dbIOCont, chaveIoPessoa)) insertPessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento,
													"", "", chaveIoPessoa, props.get("FORNECEDOR_UNICO"));
												else updatePessoa(dbIOCont, codEmpresa, ttMov.nomeOrigem, "", "", contaMovimento, "", "", chaveIoPessoa);
											}
										} catch (Exception eInsertIOPessoa) {
											logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
										}
									}
								}
							}*/

                            // RETIRA  T DA CONTA MOVIMENTO
                            contaMovimento = contaMovimento.replaceAll("T", "").replaceAll("t","");
                            ttP.contaContabil     = contaMovimento;
                            mapaDePara.put(ttMov.nomeOrigem,ttP);

                        }
                        else {
                            contaMovimento = ttP.contaContabil;
                        }


                    }
                } catch  (Exception Ee) {}
            }




            if(roteiroCRMPrincipal.optString("erpContabilidade").contains("DEXION")){
                if (contaMovimento.equals("")) {
                    JSONObject descricaoPlano = dbIOCont.sql("SELECT CONTACONTABIL FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOPLANO LIKE ?")
                            .fields("CONTACONTABIL")
                            .param(codEmpresaPlanoContas)
                            .param(ttMov.cpfCnpj + "%")
                            .queryUnique();
                    contaMovimento = descricaoPlano.optString("CONTACONTABIL").trim();
                }
            }

            if (contaPortador.equals("")) {
                try {
                    ttFornecedor ttF  = (ttFornecedor)mapaFornecedor.get(ttMov.nomePortador+"PORT");
                    if (ttF == null) {
                        ttF  = new ttFornecedor();

                        JSONArray portadorDePara =  findPortador(dbIOCont, codEmpresa, ttMov.nomePortador);
                        if (portadorDePara != null && portadorDePara.length() > 0) {
                            JSONObject ret = portadorDePara.optJSONObject(0);
                            contaPortador = ret.optString("CONTACONTABIL").trim();
                        }

                        ttF.contaMovimento = contaPortador;
                        ttF.nomeOrigem     = ttMov.nomePortador + "PORT";
                        mapaFornecedor.put(ttMov.nomePortador + "PORT",ttF);
                    } else {
                        contaPortador = ttF.contaMovimento;
                    }
                }
                catch  (Exception Ee) {}
            }

            String contaTipoFornecedor = "999333";

            boolean eFornecedor = false;
            String  razaoSocial = ttMov.nomeOrigem;
            String  razaoSocialDuplicata = ttMov.nomeOrigem;
            if (contaMovimento.toUpperCase().contains("FISCAL"))  eFornecedor = true;

            if (!contaMovimento.equals("")){
                ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
                if (ttP == null) {
                    ttP  = new ttPlano();
                    ttP.descricaoPlano = "";
                    ttP.contaAnalitica = "";

                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                            .fields("DESCRICAOPLANO,CONTAANALITICA")
                            .param(codEmpresaPlanoContas)
                            .param(contaMovimento)
                            .queryUnique();

                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO") && descricaoPlano.has("CONTAANALITICA") ) {
                        ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
                        ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
                    }
                    ttP.contaContabil     = contaMovimento;
                    mapaPlano.put(contaMovimento,ttP);
                }

                descricaoPlanoContaMovimento = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
                if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
                    razaoSocial = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
                }

                // Joga no nome do fornecedor o que esta no plano de contas
                if (!classificaPlano.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaPlano))) {
                    ttMov.nomeOrigem = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
                }
                if (ttP.descricaoPlano.length() < 2 || ttP.descricaoPlano.equals("") || ttP.descricaoPlano == null) {
                    eFornecedor = true;
                }

                if (razaoSocial.length() < 4) razaoSocial = ttMov.nomeOrigem;

                if (!classificaFornec.equals("") && (ttP.contaAnalitica.replaceAll("[^0-9]*", "").trim().startsWith(classificaFornec))) {
                    eFornecedor = true;
                }
            }

            if (!contaPortador.equals("")){
                ttPlano ttP  = (ttPlano)mapaPlano.get(contaPortador);
                if (ttP == null) {
                    ttP  = new ttPlano();
                    ttP.descricaoPlano = "";
                    ttP.contaAnalitica = "";
                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                            .fields("DESCRICAOPLANO,CONTAANALITICA")
                            .param(codEmpresaPlanoContas)
                            .param(cutString(contaPortador,0, 20))
                            .queryUnique();

                    if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
                        dbIOCont.insert("IO_PLANOCONTA")
                                .fields("CODEMPRESA,CONTACONTABIL")
                                .param(codEmpresaPlanoContas)
                                .param(cutString(contaPortador,0, 20))
                                .execute();
                    } else {
                        ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
                        ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
                    }
                    ttP.contaContabil     = cutString(contaPortador,0, 20);
                    mapaPlano.put(contaPortador,ttP);
                }
                descricaoPlanoContaPortador = ttP.descricaoPlano.replaceAll("EAMP;","&").replaceAll(";","").trim();
            }

            if(ttMov.tipoLancamento.contains("PAGAR")) {
                ttMov.contaDebito  = cutString(contaMovimento,0, 20);
                ttMov.contaCredito = cutString(contaPortador,0, 20);
            }
            if(ttMov.tipoLancamento.contains("RECEBER")) {
                ttMov.contaCredito  = cutString(contaMovimento,0, 20);
                ttMov.contaDebito   = cutString(contaPortador,0, 20);
            }

            // logger.logInfo("CONTASTEMP " + ttMov.contaDebito + " | " + ttMov.contaCredito);

            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
                temIgnorar = true;
                ResumoTxt.append("\r\n");
                comparaRazao = true;


                ResumoTxt.append("REGRA DE IGNORAR CONTA MOVIMENTO;");
                ResumoTxt.append(ttMov.dataMovimento);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.dataMovimento);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.valorDocumento);    ResumoTxt.append(";");
                ResumoTxt.append(ttMov.documento);         ResumoTxt.append(";");
                ResumoTxt.append(ttMov.nomeOrigem);        ResumoTxt.append(";");
                ResumoTxt.append(ttMov.nomePortador);      ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento01);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento02);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento03);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento04);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento05);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento06);     ResumoTxt.append(";;");

                ResumoTxt.append(ttMov.contaDebito);       ResumoTxt.append(";");
                ResumoTxt.append(ttMov.contaCredito);      ResumoTxt.append(";");
                ResumoTxt.append(regraContaMovimento);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.historico);         ResumoTxt.append(";");

                mapaVariavel.put(key,ttMov);

                continue;
            }
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
                temIgnorar = true;

                ResumoTxt.append("\r\n");
                comparaRazao = true;


                ResumoTxt.append("REGRA DE IGNORAR CONTA MOVIMENTO;");
                ResumoTxt.append(ttMov.dataMovimento);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.dataMovimento);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.valorDocumento);    ResumoTxt.append(";");
                ResumoTxt.append(ttMov.documento);         ResumoTxt.append(";");
                ResumoTxt.append(ttMov.nomeOrigem);        ResumoTxt.append(";");
                ResumoTxt.append(ttMov.nomePortador);      ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento01);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento02);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento03);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento04);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento05);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento06);     ResumoTxt.append(";;");

                ResumoTxt.append(ttMov.contaDebito);       ResumoTxt.append(";");
                ResumoTxt.append(ttMov.contaCredito);      ResumoTxt.append(";");
                ResumoTxt.append(regraContaMovimento);     ResumoTxt.append(";");
                ResumoTxt.append(ttMov.historico);         ResumoTxt.append(";");

                mapaVariavel.put(key,ttMov);

                continue;
            }
            String parcelaAtualeFinal = "";
            String parcelaAtual       = "";

            int parcelaBase = getParcelaBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            int totalParcelas = getTotalParcelas(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            String mesAnoBase = getMesAnoBase(contaMovimento, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!mesAnoBase.equals("") && parcelaBase > 0) parcelaAtual       = String.valueOf(getParcelaFinanciamento(mesAnoAtual, mesAnoBase,parcelaBase, totalParcelas));
            if (!mesAnoBase.equals("")) parcelaAtualeFinal = parcelaAtual.trim() + "/" + String.valueOf(totalParcelas).trim();

            ttMov.historico = getHistorico(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);

            histobj.put("contaMovimento", contaMovimento);
            histobj.put("contaPortador", contaPortador);
            histobj.put("contaDebito", ttMov.contaDebito);
            histobj.put("contaCredito", ttMov.contaCredito);
            histobj.put("contaJuros", ttMov.contaJuros);
            histobj.put("contaMulta", ttMov.contaMulta);
            histobj.put("contaDesconto", ttMov.contaDesconto);
            histobj.put("parcelaAtual", parcelaAtual);
            histobj.put("parcelaAtualeFinal", parcelaAtualeFinal);
            histobj.put("trimestreMesAnoAnterior", trimestreMesAnoAnterior);
            histobj.put("trimestreMesAnoAtual", trimestreMesAnoAtual);
            histobj.put("descricaoPlanoMovimento", descricaoPlanoContaMovimento.toUpperCase());
            histobj.put("descricaoPlanoPortador", descricaoPlanoContaPortador.toUpperCase());

            if(roteiroCRM.optString("Realizar_Busca_Plano").equals("TRUE")){

                // #Fabrica(2019-08-27) @Vini
                JSONObject fornecFilial = new JSONObject();
                String cAnalitica = "";
                String auxNomeOrig = "";
                auxNomeOrig = ttMov.nomeOrigem.replaceAll("-","").replaceAll("/","").replaceAll("\\.","").replaceAll("[0-9]*", "").replaceAll("\\s+","").replaceAll("ME","").replaceAll("EPP","").replaceAll("LTDA","").replaceAll("EIRELI","").replaceAll("SA","").trim();
                if (auxNomeOrig.length()> 11) auxNomeOrig = cutString(auxNomeOrig,0,10);
                //pesquisa no banco de dados pela descricao continua para pegar a classifica??o usada na nova regra
                fornecFilial = dbIOCont.sql("SELECT CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND DESCRICAOCONTINUA LIKE ?")
                        .fields("CONTAANALITICA")
                        .param(codEmpresaPlanoContas)
                        .param(auxNomeOrig+"%")
                        .queryUnique();
                cAnalitica = fornecFilial.optString("CONTAANALITICA").replaceAll("[^0-9]*", "").trim();
                histobj.put("classificacao", cAnalitica); // classificacao para criacao de regra
            }

            ttMov.complemento03 = ttMov.complemento03 + " C4#"+ ttMov.complemento04 + " C5#" + ttMov.complemento05 + " " + " C6#" + ttMov.complemento06 + " ";

            ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            //yuri - 2309-016305
            boolean methodFoundHistorico = false;
            for(java.lang.reflect.Method method : methods) {
                String methodName = method.getName();
                methodFoundHistorico = false;
                if(methodName.toUpperCase().equals("GETHISTORICOREGRA2")) {
                    methodFoundHistorico = true;
                }

                if(methodName.toUpperCase().equals("GETHISTORICOREGRA3")) {
                    methodFoundHistorico = true;
                }

                if(methodName.toUpperCase().equals("GETHISTORICOREGRA4")) {
                    methodFoundHistorico = true;
                }

                if(methodFoundHistorico) {
                    // Invoca metodo de getHistoricoRegra
                    ttMov.historico = (String) method.invoke(scInstance, contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                }
            }

            regraHistorico = getRegraHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!ttMov.historicoJuros.contains("JUROS")) ttMov.historicoJuros = "JUROS REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoJuros = getHistorico(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoJuros = getHistoricoJuros(ttMov.contaJuros, ttMov.historicoJuros, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (!ttMov.historicoDesconto.contains("DESCONTO")) ttMov.historicoDesconto = "DESCONTO REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoDesconto = getHistorico(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoDesconto = getHistoricoDesconto(ttMov.contaDesconto, ttMov.historicoDesconto, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            if (ttMov.historicoMulta.equals("")) ttMov.historicoMulta = "MULTA REF. " + ttMov.documento + " " + ttMov.nomeOrigem;
            ttMov.historicoMulta = getHistorico(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.nomeOrigem,
                    ttMov.documento, ttMov.nomePortador, ttMov.complemento01, ttMov.complemento02,
                    ttMov.complemento03, ttMov.nomeArquivo, ttMov.centroCusto);
            ttMov.historicoMulta = getHistoricoMulta(ttMov.contaMulta, ttMov.historicoMulta, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);

            // quando for forcada partida dobrada , vamos jogar o historico  de juros automaticamente no historico  movimento
            if (ttMov.chave.contains("DOBRADA_JUR")) ttMov.historico = ttMov.historicoJuros;
            if (ttMov.chave.contains("DOBRADA_DES")) ttMov.historico = ttMov.historicoDesconto;
            if (ttMov.chave.contains("DOBRADA_MUL")) ttMov.historico = ttMov.historicoMulta;

            ttMov.codFilial   = getFilial("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                    ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                    ttMov.nomeArquivo, ttMov.centroCusto, ttMov.codFilial);

            if(!ttMov.codFilial.equals("") && roteiroCRMPrincipal.optString("erpContabilidade").contains("SCI")){
                ttMov.lote = ttMov.codFilial+"_"+ttMov.lote;
            }

            String codParticipante   = getParticipante("", ttMov.nomeOrigem, ttMov.documento, ttMov.nomePortador,
                    ttMov.complemento01, ttMov.complemento02, ttMov.complemento03,
                    ttMov.complemento04, ttMov.complemento05, ttMov.nomeArquivo);

            ttMov.complemento03  = ttMov.complemento03.substring(0,ttMov.complemento03.indexOf("C4#")).trim();

            if (!ttMov.codFilial.equals("")) {
                ttMov.historico 		= ttMov.historico 			 + " Filial:" + ttMov.codFilial;
                ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Filial:" + ttMov.codFilial;
                ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Filial:" + ttMov.codFilial;
                ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Filial:" + ttMov.codFilial;
            }

            if (!codParticipante.equals("")) {
                ttMov.historico 		= ttMov.historico			 + " Participante:" + codParticipante;
                ttMov.historicoJuros 	= ttMov.historicoJuros		 + " Participante:" + codParticipante;
                ttMov.historicoDesconto = ttMov.historicoDesconto 	 + " Participante:" + codParticipante;
                ttMov.historicoMulta 	= ttMov.historicoMulta		 + " Participante:" + codParticipante;
            }

            ttMov.historico 		= ttMov.historico.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoJuros 	= ttMov.historicoJuros.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoDesconto = ttMov.historicoDesconto.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();
            ttMov.historicoMulta 	= ttMov.historicoMulta.replaceAll(",","\\.").replaceAll(";","").replaceAll("_ ","").replaceAll(" _","").replaceAll("_","").replaceAll("  "," ").trim();

            if(roteiroCRMPrincipal.optString("erpContabilidade").equals("JBSOFTWARE")){
                ttMov.historico += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoJuros += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoDesconto += "GPLCTO:" + ttMov.contLinha;
                ttMov.historicoMulta += "GPLCTO:" + ttMov.contLinha;
            }

            // ------------------------------------------------
            //           GERA ARQUIVO PARA O FISCAL
            // ------------------------------------------------
            ttMov.documento = ttMov.documento.trim();
            if (ttMov.documento.startsWith("0")) {
                for (int xx=0;xx<10;xx++) {
                    if (ttMov.documento.length() > 1 && ttMov.documento.startsWith("0")) ttMov.documento = ttMov.documento.substring(1);
                }
            }

            JSONObject jDescricaoDupl = new JSONObject();
            if (eFornecedor)   jDescricaoDupl.put("TIPO","FORNECEDOR");

            if(integraFiscal.contains("TRUE") && ttMov.tipoPlanilha.contains("MOVIMENTO") && !razaoSocial.equals("") && !ttMov.documento.equals("") && !regraCRM && !contaMovimento.equals("")){
                //Atendimento: 2308-013102 -> Problema ao gerar os relatorios de PELO_FISCAL e Duplicatas nao encontradas
                // eFornecedor = true;
                temFiscal = true;
                apagaStatus = true;

                //JWR 02022021 - estava adicionando a parcela no documento para a busca de duplicata em roteiros secundarios.
                //Adicionada a validacao "roteiroCRM.has("usarComplementoParcela")"
                if (roteiroCRM.has("usarComplementoParcela") && !roteiroCRM.optString("usarComplementoParcela").toUpperCase().contains("NAO USAR")) {
                    ttMov.documento = ttMov.documento + "-" + ttMov.parcelaDoc;
                }

                String dataVencimentoTTMov = "";

                if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
                    if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) dataVencimentoTTMov = ttMov.complemento01;
                    if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) dataVencimentoTTMov = ttMov.complemento02;
                    if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) dataVencimentoTTMov = ttMov.complemento03;
                    if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) dataVencimentoTTMov = ttMov.complemento04;
                    if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) dataVencimentoTTMov = ttMov.complemento05;
                    if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) dataVencimentoTTMov = ttMov.complemento06;
                }


				/*if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("MAKROWEB")) {
					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("VALORMULTA",  ttMov.valorMulta);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
						ttMov.parcelaDoc     = jDescricaoDupl.optInt("PARCELADOC");
						ttMov.valorDesconto  = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDesconto));
						ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento));
						ttMov.valorJuros 	 = DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorJuros));

						String valorDescontoAux  = preparaDoublePrecisao(String.valueOf(ttMov.valorDesconto));
						String valorDocumentoAux = preparaDoublePrecisao(String.valueOf(ttMov.valorDocumento));
						String valorAcrecimoAux 	 = preparaDoublePrecisao(String.valueOf(ttMov.valorJuros+ttMov.valorMulta));

						//#2309-015394
						//double valorAux = ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta;
						//String valorCalcAux = "";
						// #Fabrica(2019-08-06) @Vini
						//valorCalcAux = preparaDoublePrecisao(String.valueOf(DecimalUtil.toDecimal(String.format("%.2f", valorAux))));

						// if (!String.format("%.2f", ttMov.valorDocumento).equals(jDescricaoDupl.optString("VALORPARCELA"))) { //<--- antigo
						if (ttMov.valorDocumento > jDescricaoDupl.optDouble("VALORPARCELA")) {
							jDescricaoDupl.put("TIPO", "FORNECEDOR");
						} else {

							txtFiscal[0].append(StringUtil.leftPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 14,  "0"));
							txtFiscal[0].append(StringUtil.leftPad(cutString(ttMov.documento, 0, "-"), 8, "0"));
							txtFiscal[0].append(StringUtil.leftPad(String.valueOf(ttMov.parcelaDoc), 2, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(ttMov.dataMovimento.replaceAll("/",""));
							txtFiscal[0].append(StringUtil.leftPad(valorDescontoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorAcrecimoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							//#2309-015394
							//txtFiscal[0].append(StringUtil.leftPad(valorCalcAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(valorDocumentoAux.replaceAll("\\.","").replaceAll(",",""), 13, "0"));
							txtFiscal[0].append(StringUtil.leftPad(contaPortador, 9,  "0"));
							txtFiscal[0].append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}*/

				/*if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) {
					JSONObject jDados = new JSONObject();
					jDados.put("CODEMPRESA",     codEmpresa);

					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}

					 jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("PARCELADOC",     ttMov.parcelaDoc);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);
					jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

					Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
					dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

					double valorSaldoDuplicata2 = 0;
					if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

					valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
					ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

					if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {

						if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){

							txtFiscal[0].append(TemplateUtils.geraLinhaFiscalCordilheira(jDescricaoDupl, ttMov, geraCabecalhoCordilheira).toString());

							geraCabecalhoCordilheira = false;

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						} else {
							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
							txtFornecedor.append("\r\n");

							jDescricaoDupl.put("TIPO","FORNECEDOR");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

							if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

							ttMov.tipoPlanilha = "NAO LER";
							mapaVariavel.put(key,ttMov);
							continue;
						}
					}
				}*/

                // if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CUCA-FRESCA")) {

                // JSONObject jDados = new JSONObject();
                // jDados.put("CODEMPRESA",     codEmpresa);

                // //usando a filial do questor em duplicatas em aberto

                // jDados.put("RAZAOSOCIAL",    razaoSocial);
                // jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                // jDados.put("DOCUMENTO",      ttMov.documento);
                // jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                // jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
                // jDados.put("PARCELADOC",     ttMov.parcelaDoc);
                // jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                // jDados.put("VALORJUROS",     ttMov.valorJuros);
                // jDados.put("VALORMULTA",     ttMov.valorMulta);
                // jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                // jDados.put("TABELACONTABIL", tabelaContabil);
                // jDescricaoDupl    = buscarIODuplicata(jDados, dbIOCont, logger);

                // Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                // dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

                // double valorSaldoDuplicata2 = 0;
                // if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata2 = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

                // valorSaldoDuplicata2 = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata2));
                // ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                // if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {

                // if ((ttMov.valorDocumento - ttMov.valorDesconto) <= valorSaldoDuplicata2){
                // String separadorFiscal = "";
                // String dataVencimento  = "";
                // //String parcela		   = "1";
                // String duplicataParcela = jDescricaoDupl.optString("DUPLICATA")+"/"+String.valueOf(ttMov.parcelaDoc);

                // txtFiscal[0].append(cnpjEmpresa);
                // txtFiscal[0].append("    ");

                // if(tipoLancamento.contains("PAGAR"))	txtFiscal[0].append("E");
                // if(tipoLancamento.contains("RECEBER"))	txtFiscal[0].append("S");

                // txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("DATAVENCIMENTO"), 10, " ")); //lendo do duplicatasem aberto
                // txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("SITUACAO"), 5, " ")); //especie
                // txtFiscal[0].append(StringUtil.rightPad("", 3, " ")); //serie

                // txtFiscal[0].append(StringUtil.rightPad("", 2, " ")); //sub-serie
                // txtFiscal[0].append(StringUtil.leftPad(cutString(ttMov.documento, 0, "-"), 9, "0"));
                // txtFiscal[0].append(StringUtil.leftPad("", 9, "0"));

                // txtFiscal[0].append(StringUtil.rightPad(jDescricaoDupl.optString("CODIGOFORNECEDOR"), 18, " ")); // preciso criar a leitura do CNPJ do cliente, est? sendo usado o objeto "CODIGOFORNECEDOR" para guardar essa informa??o
                // txtFiscal[0].append(StringUtil.leftPad(duplicataParcela, 21, "0"));
                // txtFiscal[0].append(StringUtil.leftPad(dataVencimento, 10, " ")); //data do vencimento

                // txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0")); //? preciso criar a leitura do valor ? baixar, est? sendo usado o objeto "VALORPARCELA" para guardar no banco

                // if(contaPortador.length() > 1){
                // contaPortador = contaPortador.substring(0, contaPortador.length()-1) + "-" + contaPortador.substring(contaPortador.length()-1);
                // if(contaPortador.length() > 5) contaPortador = contaPortador.substring(0, contaPortador.length()-5) + "." + contaPortador.substring(contaPortador.length()-5);
                // }

                // txtFiscal[0].append(StringUtil.leftPad(contaPortador, 9, "0")); //a conta do banco
                // txtFiscal[0].append(StringUtil.rightPad(ttMov.centroCusto, 4, " "));

                // //txtFiscal[0].append(StringUtil.rightPad(ttMov.historico, 3, ""));
                // if(tipoLancamento.contains("PAGAR"))	txtFiscal[0].append(StringUtil.rightPad("10", 3, " ")); //10 pagamento fornecedor
                // if(tipoLancamento.contains("RECEBER"))	txtFiscal[0].append(StringUtil.rightPad("11", 3, " ")); // 11 recebimento duplicata

                // txtFiscal[0].append(StringUtil.leftPad("", 15, " "));	//numero do cheque na planilha
                // txtFiscal[0].append(StringUtil.rightPad(ttMov.dataMovimento, 10, " "));

                // txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDocumento), 13, "0"));
                // txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorJuros), 13, "0"));
                // txtFiscal[0].append(StringUtil.leftPad(String.format("%.2f", ttMov.valorDesconto), 13, "0"));

                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // correcao monetaria
                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // despesas/receitas
                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // Base de Calculo Retencao

                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // IRRF Retido
                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // PIS Retido
                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido

                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // CSLL Retido
                // txtFiscal[0].append(StringUtil.leftPad(separadorFiscal, 13, "0")); // COFINS Retido
                // txtFiscal[0].append("    "); //n?o encontrado o c?digo da receita

                // txtFiscal[0].append("\r\n");

                // geraFiscal = true;
                // loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
                // if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

                // ttMov.tipoPlanilha = "NAO LER";
                // mapaVariavel.put(key,ttMov);
                // continue;
                // } else {
                // if(cabecalhoNaoEncontrada){
                // txtFornecedor.append("Codigo");
                // txtFornecedor.append(";");
                // txtFornecedor.append("Fornecedor/Cliente");
                // txtFornecedor.append(";");
                // txtFornecedor.append("Duplicata");
                // txtFornecedor.append(";");
                // txtFornecedor.append("Data");
                // txtFornecedor.append(";");
                // txtFornecedor.append("Valor bruto");
                // txtFornecedor.append(";");
                // txtFornecedor.append("Valor liquido");
                // txtFornecedor.append(";");
                // txtFornecedor.append("Banco");
                // txtFornecedor.append(";");
                // txtFornecedor.append("Obs:");
                // txtFornecedor.append("\r\n");
                // cabecalhoNaoEncontrada = false;
                // }
                // String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
                // jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                // txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                // txtFornecedor.append(";");
                // txtFornecedor.append(razaoSocialDuplicata);
                // txtFornecedor.append(";");
                // txtFornecedor.append(ttMov.documento);
                // txtFornecedor.append(";");
                // txtFornecedor.append(ttMov.dataMovimento);
                // txtFornecedor.append(";");
                // txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                // txtFornecedor.append(";");
                // txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
                // txtFornecedor.append(";");
                // txtFornecedor.append(ttMov.nomePortador);
                // txtFornecedor.append(";");
                // txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata2));
                // txtFornecedor.append("\r\n");

                // jDescricaoDupl.put("TIPO","FORNECEDOR");

                // geraFiscal = true;
                // loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

                // if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

                // if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

                // ttMov.tipoPlanilha = "NAO LER";
                // mapaVariavel.put(key,ttMov);
                // continue;
                // }
                // }
                // }

                if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
                    JSONObject jDados = new JSONObject();

                    if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("LER DA DUPLICATA MAIS ANTIGA"))  {


                        if (dataVencimentoTTMov.equals("")) {

                            JSONObject recordsDupVenc = new JSONObject();
                            try {
                                String sql = "SELECT VENCIMENTO FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.DUPLICATA = ? ORDER BY VENCIMENTO LIMIT 1";
                                recordsDupVenc = dbIOCont.sql(sql)
                                        .setFields("VENCIMENTO")
                                        .param(codEmpresa)
                                        .param(ttMov.documento)
                                        .debug(logger)
                                        .queryUnique();

                            } catch (Exception e1) {
                                // logger.logInfo("ERROR: " + e1.getMessage());
                            }

                            if(recordsDupVenc != null && recordsDupVenc.has("VENCIMENTO")){
                                dataVencimentoTTMov = cutString(recordsDupVenc.optString("VENCIMENTO"), 8, 10) + "/" +cutString(recordsDupVenc.optString("VENCIMENTO"), "-", "-") + "/" + cutString(recordsDupVenc.optString("VENCIMENTO"), 0, "-") ;
                            }
                        }


                        jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
                    }else if(!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO")){
                        jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
                    }else if(roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO")){
                        jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
                    }



                    jDados.put("CODEMPRESA",     codEmpresa);
                    jDados.put("RAZAOSOCIAL",    razaoSocial);
                    jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
                    jDados.put("DOCUMENTO",      ttMov.documento);
                    jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                    jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
                    jDados.put("PARCELADOC",     99);
                    jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jDados.put("VALORJUROS",     ttMov.valorJuros);
                    jDados.put("VALORMULTA",     ttMov.valorMulta);
                    jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
                    jDados.put("TABELACONTABIL", tabelaContabil);
                    jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);

                    // Descomentar a proxima linha para testar data de vencimento  a jDescricaoDupl.optString("DATAVENCIMENTO") que vem das duplicatas em aberto! OBS: Complemento06, deve estar lendo a data de vencimento da planilha financeira
                    if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
                        if(jDescricaoDupl.optString("TIPO").equals("FISCAL")) jDescricaoDupl = validaBaixaPorDataVencimento(jDescricaoDupl, dataVencimentoTTMov);
                    }

                    String chaveParcela = ttMov.documento + "-PARCELA";
                    ttParcelaDominio ttP    = (ttParcelaDominio)mapaParcelaDominio.get(chaveParcela);
                    if (ttP == null) {
                        ttP  			= new ttParcelaDominio();
                        ttP.documento   = ttMov.documento;
                        ttP.ultimaParcela = 0;
                    }
                    ttP.ultimaParcela++;

                    mapaParcelaDominio.put(chaveParcela,ttP);

                    jDados.put("PARCELADOC", ttP.ultimaParcela);
                    jDescricaoDupl = buscarIODuplicataDominio(jDados, dbIOCont, logger);

                    Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                    dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

                    String chaveDuplicata = "";
                    if (jDescricaoDupl.has("CODIGOFORNECEDOR")) chaveDuplicata = ttMov.codEmpresa + "-ESPECIAL-" + jDescricaoDupl.optString("CODIGOFORNECEDOR") + "-" + ttMov.documento + "-SEG-";

                    String serie = "";
                    String subSerie = "";
                    String especie = "";
                    double valorSegmento = 0;

                    JSONArray recordsDup = new JSONArray();

					/*
					DESCOMENTAR ESSA LINHA QUANDO TIVER DATA DE VENCIMENTO
					VAI SEPARAR QUANDO ENCONTRAR A DATA DE VENCIMENTO NO BANCO
					COLOCAR O COMPLEMENTO QUE TIVER A DATA DE VENCIMENTO : ttMov.complemento06
					*/
                    // if (ttMov.tipoPlanilha.equals("MOVIMENTO")) {
                    if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {

                        boolean isData = false;
                        Date dtV = new Date();
                        try{
                            dtV = DateUtil.stringToDate(jDescricaoDupl.optString("DATAVENCIMENTO"), "dd/MM/yyyy");
                            isData = true;
                            if(!getCampoDate(DateUtil.dateToString(dtV, "dd/MM/yyyy")).equals(getCampoDate(dataVencimentoTTMov))) isData = false;
                        } catch(Exception ii){
                            isData = false;
                        }
                        if(!chaveDuplicata.equals("")){
                            if(isData){
                                try {
                                    String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.CHAVE LIKE ? AND VENCIMENTO = ? ";
                                    recordsDup = dbIOCont.sql(sql)
                                            .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
                                            .param(codEmpresa)
                                            .param(chaveDuplicata + "%")
                                            .param(dtV)
                                            .debug(logger)
                                            .query();
                                } catch (Exception e1) {
                                    // logger.logInfo("ERROR: " + e1.getMessage());
                                }
                            }
                            // if(!isData){
                            // try {
                            // String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE IO_DUPLICATA.CHAVE LIKE ? ";
                            // recordsDup = dbIOCont.sql(sql)
                            // .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
                            // .param(chaveDuplicata + "%")
                            // .debug(logger)
                            // .query();
                            // } catch (Exception e1) {
                            // logger.logInfo("ERROR: " + e1.getMessage());
                            // }
                            // }
                        }
                    }

                    else  {
                        if(!chaveDuplicata.equals("")){
                            try {
                                // INSERIDO O WHERE CODEMPRESA = ? PARA CORRE????O DO CHAMADO 202301-0023064.
                                String sql = "SELECT SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND IO_DUPLICATA.CHAVE LIKE ? ";
                                recordsDup = dbIOCont.sql(sql)
                                        .setFields("SERIE, SITUACAO, CHAVEDUPLICATA, VALORPARCELA, CHAVE, CPFCNPJ")
                                        .param(codEmpresa)
                                        .param(chaveDuplicata + "%")
                                        .debug(logger)
                                        .query();

                            } catch (Exception e1) {
                                logger.logInfo("ERROR: " + e1.getMessage());
                            }
                        }
                    }
					/* EXEMPLO DE COMO TEM QUE SAIR

					|0000|07701892000105|
					|5100|39||0|21338|15/08/2017|14/08/2017|0|||180,00|||||||||||||
					|5110|15/08/2017|3612|434|180,00|5|21338 ATLANTA ALARMES -  MONITOL MONIT. TOLEDO LTDA.||418|
					*/

                    JSONObject recordsDupSeg = new JSONObject();
                    if (recordsDup.length() > 0) recordsDupSeg = recordsDup.optJSONObject(0);

                    if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
                        serie   = recordsDupSeg.optString("SERIE");
                        especie = recordsDupSeg.optString("CHAVEDUPLICATA");
                    }

                    double valorSaldoDuplicata = 0;
                    double valorSomaSegmentos  = 0;

                    // soma os segmentos pois eles nao sao baixados. Ou seja, se pago um valor parcial no dominio soma dos segmentos
                    // continua sendo o valor origial (total) da nota fiscal
                    // utilizado para achar a proporcao do valor para cada segmento
                    for (int seg =0; seg<recordsDup.length(); seg ++) {
                        recordsDupSeg =  recordsDup.optJSONObject(seg);
                        if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
                            valorSomaSegmentos = valorSomaSegmentos + DecimalUtil.toDecimal(String.format("%.2f", recordsDupSeg.optDouble("VALORPARCELA")));
                        }
                    }

                    boolean leuDuplicata = false;

                    // valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
                    if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

                    if (jDescricaoDupl.optString("TIPO").equals("FISCAL") && !roteiroCRMPrincipal.optString("validaFornecedorFiscal").equals("")) {
                        jDescricaoDupl.put("VALIDAFORNECEDORFISCAL", roteiroCRMPrincipal.optInt("validaFornecedorFiscal"));
                        jDescricaoDupl = validaRazaoSocial(jDescricaoDupl, ttMov.nomeOrigem);
                    }

                    if (valorSomaSegmentos > 0) valorSaldoDuplicata = valorSomaSegmentos;

                    valorSaldoDuplicata  = DecimalUtil.toDecimal(String.format("%.2f",valorSaldoDuplicata));
                    ttMov.valorDocumento = DecimalUtil.toDecimal(String.format("%.2f",ttMov.valorDocumento));

                    double diferencaParcela = DecimalUtil.toDecimal(String.format("%.2f", DecimalUtil.toDecimal(String.format("%.2f", ttMov.valorDocumento )) - valorSomaSegmentos));

                    if (!especie.equals("") || !serie.equals("")) {
                        if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) {
                            double valorTotalBaixado = 0;
                            for (int seg =0; seg<recordsDup.length(); seg ++) {

                                recordsDupSeg =  recordsDup.optJSONObject(seg);
                                String segmento = "";

                                if	(recordsDupSeg != null && recordsDupSeg.has("SERIE")) {
                                    serie   	  = recordsDupSeg.optString("SERIE");
                                    subSerie   	  = recordsDupSeg.optString("SITUACAO");      // GUARDA SUB SERIE
                                    especie 	  = recordsDupSeg.optString("CHAVEDUPLICATA");
                                    valorSegmento = recordsDupSeg.optDouble("VALORPARCELA");
                                    segmento      = recordsDupSeg.optString("CHAVE");
                                    if (segmento.contains("-SEG-")) {
                                        segmento = cutString(segmento, "-SEG-");
                                        segmento = cutString(segmento, 0, "-");
                                    }
                                }

                                if(segmento.equals("0")){
                                    if(seg>0) continue;
                                    valorSomaSegmentos = DecimalUtil.toDecimal(String.format("%.2f",valorSegmento));
                                    diferencaParcela = 0;
                                }

                                // (zerado para validacao)
                                diferencaParcela = 0;

                                //if (subSerie.equals("")) subSerie = "0";

                                String codContabil = "";
                                if(ttMov.tipoLancamento.contains("PAGAR")) {
                                    ttMov.contaDebito  = contaMovimento;
                                    ttMov.contaCredito = contaPortador;
                                    codContabil = "5100";
                                }
                                if(ttMov.tipoLancamento.contains("RECEBER")) {
                                    ttMov.contaDebito   = contaPortador;
                                    ttMov.contaCredito  = contaMovimento;
                                    codContabil = "5200";
                                    if(especie.equals("39")) codContabil = "5300";

                                    histobj.put("especie", especie);
                                    String codigoFiscalNovo = getCampoFiscal("", histobj);
                                    if (!codigoFiscalNovo.equals("")) codContabil = codigoFiscalNovo;
                                }

                                String delimitador = "|";
                                String tipoSerie = delimitador + codContabil + delimitador + especie + delimitador + serie + delimitador + subSerie + delimitador;

                                // if(ttMov.codEmpresa.contains("351")) logger.logInfo("Fiscal pelo Template");

                                if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                                    txtFiscal[0].append(tipoSerie);
                                    //txtFiscal[0].append(jDescricaoDupl.optString("DUPLICATA"));
                                    if(ttMov.tipoLancamento.contains("PAGAR")) { //2311-020947
                                        txtFiscal[0].append(cutString(jDescricaoDupl.optString("DUPLICATA"), 0, "-"));
                                    }
                                    if(ttMov.tipoLancamento.contains("RECEBER")) {
                                        txtFiscal[0].append(jDescricaoDupl.optString("DUPLICATA"));
                                    }
                                    txtFiscal[0].append(delimitador);
                                    txtFiscal[0].append(jDescricaoDupl.optString("DATAVENCIMENTO"));
                                    txtFiscal[0].append(delimitador);
                                    txtFiscal[0].append(ttMov.dataMovimento);
                                    txtFiscal[0].append(delimitador);



                                    ttDocumento ttDoc    = (ttDocumento)mapaDocumento.get(ttMov.documento+"-"+seg);
                                    if (ttDoc == null) {
                                        ttDoc  = new ttDocumento();
                                        ttDoc.documento  = ttMov.documento;
                                        ttDoc.valorDocumento  = 0;
                                    }

                                    double valorBaixar = 0;

                                    ttDoc.valorDocumento   = ttDoc.valorDocumento + DecimalUtil.toDecimal(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))));
                                    valorBaixar = DecimalUtil.toDecimal(String.format("%.2f", ((ttMov.valorDocumento - ttMov.valorDesconto + ttMov.valorJuros + ttMov.valorMulta + diferencaParcela) * (valorSegmento /  valorSomaSegmentos))));


                                    if ((valorSegmento - ttDoc.valorDocumento) <= 0.02 && (valorSegmento - ttDoc.valorDocumento) > 0) valorBaixar = valorBaixar  + (valorSegmento - ttDoc.valorDocumento);
                                    if ((ttDoc.valorDocumento - valorSegmento) <= 0.02 && (ttDoc.valorDocumento - valorSegmento) > 0) valorBaixar = valorBaixar  - (ttDoc.valorDocumento - valorSegmento);

                                    valorTotalBaixado += valorBaixar;



                                    // calcula se o valor a ser baixado somando os segmentos eh maior que o valor pago pelo cliente
                                    // quando isto ocorrer, deve-se ajustar no ultimo segmento o valor
                                    if ((valorTotalBaixado - ttMov.valorDocumento) <= 0.02 && (valorTotalBaixado - ttMov.valorDocumento) > 0) {
                                        valorBaixar = valorBaixar  - (valorTotalBaixado - ttMov.valorDocumento);
                                        ttDoc.valorDocumento = ttDoc.valorDocumento  - (valorTotalBaixado - ttMov.valorDocumento);
                                    }

                                    if ((ttMov.valorDocumento - valorTotalBaixado) <= 0.02 && (ttMov.valorDocumento - valorTotalBaixado) > 0) {
                                        valorBaixar = valorBaixar  - (ttMov.valorDocumento - valorTotalBaixado);
                                        ttDoc.valorDocumento = ttDoc.valorDocumento  - (ttMov.valorDocumento - valorTotalBaixado);
                                    }


                                    mapaDocumento.put(ttMov.documento+"-"+seg,ttDoc);

                                    txtFiscal[0].append(String.format("%.2f", (valorBaixar)).replaceAll("\\.",","));

                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALJUROS").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALMULTA").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    txtFiscal[0].append(delimitador);
                                    if (seg == 0) txtFiscal[0].append(jDescricaoDupl.optString("VALORFINALDESCONTO").replaceAll("\\.",","));
                                    if (seg > 0)  txtFiscal[0].append("0");
                                    // txtFiscal[0].append("||||||||||");
                                    // if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal[0].append("||");
                                    txtFiscal[0].append("||||||||");
                                    if(ttMov.tipoLancamento.contains("RECEBER")) txtFiscal[0].append("||||");

                                    if(ttMov.tipoLancamento.contains("PAGAR")) {
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append(jDescricaoDupl.optString("CPFCNPJ"));
                                        txtFiscal[0].append(delimitador);
                                    }
                                    txtFiscal[0].append(segmento).append(delimitador);
                                    //txtFiscal[0].append(jDescricaoDupl.optString("OBSERVACAO"));	// FEITO PARA SPEROTO VANZELLA
                                    //txtFiscal[0].append(delimitador);
                                    txtFiscal[0].append("\r\n");


                                    if (ttMov.valorDocumento > ttMov.valorDesconto) {
                                        codContabil = codContabil.replaceAll("00","10");

                                        txtFiscal[0].append(delimitador).append(codContabil).append(delimitador).append(ttMov.dataMovimento).append(delimitador)
                                                .append(ttMov.contaDebito).append(delimitador).append(ttMov.contaCredito).append(delimitador);

                                        txtFiscal[0].append(String.format("%.2f", (valorBaixar)).replaceAll("\\.",","));

                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append("");
                                        if(ttMov.historico.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historico, "CodigoHistorico:", " "));
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append(cutString(cutString(ttMov.historico, 0, "Filial:"), 0 ,"Codigo"));
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append("");
                                        txtFiscal[0].append(delimitador + codEmpresa + delimitador);
                                        txtFiscal[0].append("\r\n");
                                    }

                                    if (ttMov.valorDesconto > 0 && seg == 0) {

                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append(codContabil);
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append(ttMov.dataMovimento);
                                        txtFiscal[0].append(delimitador);
                                        if(ttMov.tipoLancamento.contains("PAGAR")) {
                                            txtFiscal[0].append(ttMov.contaDebito);
                                            txtFiscal[0].append(delimitador);
                                            txtFiscal[0].append(contaDesconto);
                                        }
                                        if(ttMov.tipoLancamento.contains("RECEBER")) {
                                            txtFiscal[0].append(contaDesconto);
                                            txtFiscal[0].append(delimitador);
                                            txtFiscal[0].append(ttMov.contaCredito);
                                        }
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append(String.format("%.2f", ttMov.valorDesconto).replaceAll("\\.",","));
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append("");
                                        if(ttMov.historicoDesconto.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoDesconto, "CodigoHistorico:", " "));
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append(cutString(cutString(ttMov.historicoDesconto, 0, "Filial:"), 0 ,"Codigo"));

                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append("");
                                        txtFiscal[0].append(delimitador + codEmpresa + delimitador);
                                        txtFiscal[0].append("\r\n");
                                    }

                                    if (ttMov.valorJuros > 0  && seg == 0) {
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append(codContabil);
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append(ttMov.dataMovimento);
                                        txtFiscal[0].append(delimitador);
                                        if(ttMov.tipoLancamento.contains("PAGAR")) {
                                            txtFiscal[0].append(contaJuros);
                                            txtFiscal[0].append(delimitador);
                                            txtFiscal[0].append(ttMov.contaDebito);
                                        }
                                        if(ttMov.tipoLancamento.contains("RECEBER")) {
                                            txtFiscal[0].append(ttMov.contaCredito);
                                            txtFiscal[0].append(delimitador);
                                            txtFiscal[0].append(contaJuros);
                                        }
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append(String.format("%.2f", ttMov.valorJuros).replaceAll("\\.",","));
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append("");
                                        if(ttMov.historicoJuros.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoJuros, "CodigoHistorico:", " "));
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append(cutString(cutString(ttMov.historicoJuros, 0, "Filial:"), 0 ,"Codigo"));
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append("");
                                        txtFiscal[0].append(delimitador + codEmpresa + delimitador);
                                        txtFiscal[0].append("\r\n");
                                    }

                                    if (ttMov.valorMulta > 0 && seg == 0) {
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append(codContabil);
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append(ttMov.dataMovimento);
                                        txtFiscal[0].append(delimitador);
                                        if(ttMov.tipoLancamento.contains("PAGAR")) {
                                            txtFiscal[0].append(contaMulta);
                                            txtFiscal[0].append(delimitador);
                                            txtFiscal[0].append(ttMov.contaDebito);
                                        }
                                        if(ttMov.tipoLancamento.contains("RECEBER")) {
                                            txtFiscal[0].append(ttMov.contaCredito);
                                            txtFiscal[0].append(delimitador);
                                            txtFiscal[0].append(contaMulta);
                                        }
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append(String.format("%.2f", ttMov.valorMulta).replaceAll("\\.",","));
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append("");
                                        if(ttMov.historicoMulta.contains("CodigoHistorico")) txtFiscal[0].append(cutString(ttMov.historicoMulta, "CodigoHistorico:", " "));
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append(cutString(cutString(ttMov.historicoMulta, 0, "Filial:"), 0 ,"Codigo"));
                                        txtFiscal[0].append(delimitador);
                                        txtFiscal[0].append("");
                                        txtFiscal[0].append(delimitador + codEmpresa + delimitador);
                                        txtFiscal[0].append("\r\n");
                                    }

                                    diferencaParcela = 0;

                                    geraFiscal = true;
                                    loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

                                    if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

                                    eFornecedor = false;
                                    leuDuplicata = true;

                                }
                            }
                            if (leuDuplicata) continue;
                        } else {
                            if(cabecalhoNaoEncontrada){
                                txtFornecedor.append("Codigo");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Fornecedor/Cliente");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Duplicata");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Data");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Valor bruto");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Valor liquido");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Banco");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Obs:");
                                txtFornecedor.append("\r\n");
                                cabecalhoNaoEncontrada = false;
                            }
                            String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
                            jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(razaoSocialDuplicata);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.documento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.dataMovimento);
                            txtFornecedor.append(";");
                            txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.nomePortador);
                            txtFornecedor.append(";");
                            txtFornecedor.append("Valor Duplicata " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata));
                            txtFornecedor.append("\r\n");

                            geraFiscal = true;
                            loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

                            if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;

                            if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                        }
                    }
                    else {
                        if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FISCAL")) {
                            jDescricaoDupl.put("TIPO","FORNECEDOR"); // se nao acha serie vai para duplicatas nao encontradas
                            eFornecedor = true;
                        }
                    }
                }


                if (eFornecedor) {

                    dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
                    contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");


                    if(dupliNaoEncontContabil){
                        contaMovimento = contaTemp;
                        if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
                        if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

                        histobj.put("contaMovimento", contaMovimento);
                        ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


                    }else{
                        if(jDescricaoDupl.has("TIPO") && jDescricaoDupl.optString("TIPO").equals("FORNECEDOR")) {
                            if(cabecalhoNaoEncontrada){
                                txtFornecedor.append("Codigo");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Fornecedor/Cliente");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Duplicata");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Data");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Valor bruto");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Valor liquido");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Banco");
                                txtFornecedor.append(";");
                                txtFornecedor.append("Obs:");
                                txtFornecedor.append("\r\n");
                                cabecalhoNaoEncontrada = false;
                            }
                            String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                            String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);


                            jDescricaoDupl.put("NOMEORIGEM",     ttMov.nomeOrigem);
                            jDescricaoDupl.put("DOCUMENTO",      ttMov.documento);
                            jDescricaoDupl.put("DATAMOVIMENTO",  ttMov.dataMovimento);
                            jDescricaoDupl.put("VALORFINAL",  valorFinal);
                            jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);

                            txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("NOMEORIGEM"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("DOCUMENTO"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("DATAMOVIMENTO"));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("VALORFINAL").replaceAll("\\.",","));
                            txtFornecedor.append(";");
                            txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
                            txtFornecedor.append(";");
                            txtFornecedor.append(ttMov.nomePortador);
                            txtFornecedor.append(";");
                            if (jDescricaoDupl.has("FORNECEDORESNAOBATEM")) {
                                txtFornecedor.append("Nome do Fornecedor/Cliente nao confere com a duplicata aberta no fiscal ");
                            }
                            else {
                                txtFornecedor.append("Duplicata nao encontrada no Fiscal ");

                            }
                            txtFornecedor.append("\r\n");


                            geraFiscal = true;
                            loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;

                            if (ttMov.nomeArquivo.toUpperCase().contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(ttMov.nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + ttMov.tipoLancamento;

                            ttMov.tipoPlanilha = "NAO LER";
                            mapaVariavel.put(key,ttMov);
                            continue;

                        }
                    }
                }
            }

			/*
			if (integraContrato.toUpperCase().equals("TRUE")) {
				if (roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("DOMINIO")) {
					String dataVencimentoTTMov = "";


					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR")) {
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO01")) dataVencimentoTTMov = ttMov.complemento01;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO02")) dataVencimentoTTMov = ttMov.complemento02;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO03")) dataVencimentoTTMov = ttMov.complemento03;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO04")) dataVencimentoTTMov = ttMov.complemento04;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO05")) dataVencimentoTTMov = ttMov.complemento05;
						if (roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("COMPLEMENTO06")) dataVencimentoTTMov = ttMov.complemento06;
					}


					JSONObject jDados = new JSONObject();

					if (!roteiroCRMPrincipal.optString("usarComplementoVencimento").toUpperCase().contains("NAO USAR"))  {
						jDados.put("DATAVENCIMENTO", dataVencimentoTTMov);
					}
					else {
						jDados.put("DATAVENCIMENTO", ttMov.dataMovimento);
					}

					jDados.put("CODEMPRESA",     codEmpresa);
					jDados.put("RAZAOSOCIAL",    razaoSocial);
					jDados.put("NOMEORIGEM",     ttMov.nomeOrigem);
					jDados.put("DOCUMENTO",      ttMov.documento);
					jDados.put("DATAMOVIMENTO",  ttMov.dataMovimento);
					jDados.put("OBSERVACAO", 	 ttMov.dataMovimento);
					jDados.put("PARCELADOC",     99);
					jDados.put("VALORDOCUMENTO", ttMov.valorDocumento);
					jDados.put("VALORJUROS",     ttMov.valorJuros);
					jDados.put("VALORMULTA",     ttMov.valorMulta);
					jDados.put("VALORDESCONTO",  ttMov.valorDesconto);
					jDados.put("TABELACONTABIL", tabelaContabil);

 					try {
						Date dtvenc = DateUtil.stringToDate(dataVencimentoTTMov, "dd/MM/yyyy");

						jDescricaoDupl = dbIOCont.sql("SELECT CPFCNPJ,CODEMPRESA,RAZAOSOCIAL,CODIGOFORNECEDOR,CHAVE,CHAVEDUPLICATA,DUPLICATA,PARCELA,SERIE,VENCIMENTO,VALORPARCELA,SITUACAO,VALORJUROS,VALORDESCONTO,VALORMULTA,VALORPAGO,VALORTARIFA,OBSERVACAO FROM IO_DUPLICATA WHERE CODEMPRESA = ? AND DUPLICATA = ? AND VALORPARCELA >= ? and VENCIMENTO = ? order by VENCIMENTO   limit 1 ")
						.fields("CPFCNPJ,CODEMPRESA,RAZAOSOCIAL,CODIGOFORNECEDOR,CHAVE,CHAVEDUPLICATA,DUPLICATA,PARCELA,SERIE,VENCIMENTO,VALORPARCELA,SITUACAO,VALORJUROS,VALORDESCONTO,VALORMULTA,VALORPAGO,VALORTARIFA,OBSERVACAO")
						.param(codEmpresa)
						.param(ttMov.documento)
						.param(ttMov.valorDocumento)
						.param(dtvenc)
						.queryUnique();
					} catch (Exception e2) {
						logger.logInfo("ERROR: " + e2.getMessage());
						continue;
					}


					if (jDescricaoDupl != null && jDescricaoDupl.has("VALORPARCELA")) {

 						Date dtL = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
						dataLote = DateUtil.dateToString(dtL, "yyyy-MM");

						boolean leuDuplicata = false;
						double valorSaldoDuplicata = 0;

						// valor saldo duplicata = valor que esta em aberto no Dominio. Baixa nao pode ser maior que valor de saldo no Dominio
						if (jDescricaoDupl.has("VALORPARCELA")) valorSaldoDuplicata = DecimalUtil.toDecimal(jDescricaoDupl.optString("VALORPARCELA"));

 						if ((ttMov.valorDocumento) <= valorSaldoDuplicata ) {

							String codContabil = "5700";
							// |5700|1875|57593981053| | |1|25/02/2021|01/03/2021|5527,28|1649,16||||||

							String delimitador = "|";
							String tipoSerie = delimitador + codContabil + delimitador + ttMov.documento + delimitador + ttMov.complemento01 + delimitador + delimitador + delimitador + ttMov.complemento02  + delimitador;


						 try {
								String dataVencimento = jDescricaoDupl.optString("VENCIMENTO");
								Date dt        = DateUtil.stringToDate(dataVencimento, "yyyy-MM-dd HH:mm:ss");
								dataVencimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
								dataVencimentoTTMov = dataVencimento;
							} catch (Exception e4) {
 							}


							if(jDescricaoDupl.has("VALORPARCELA")) {
								txtFiscal[0].append(tipoSerie);
								txtFiscal[0].append(dataVencimentoTTMov);
								txtFiscal[0].append(delimitador);
								txtFiscal[0].append(ttMov.dataMovimento);
								txtFiscal[0].append(delimitador);
								txtFiscal[0].append(String.format("%.2f", (ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta)).replaceAll("\\.",","));
 								txtFiscal[0].append(delimitador);
							    txtFiscal[0].append(String.format("%.2f", (ttMov.valorJuros)).replaceAll("\\.",","));
								txtFiscal[0].append("||||||");
								txtFiscal[0].append("\r\n");

								geraFiscal = true;
								loteFiscal[0]= nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
								eFornecedor = false;
								leuDuplicata = true;

							}

 						} else { //Add dia 02/03/2021 - > Enviar dupli n encontradas p/ contabil Dominio

							if(cabecalhoNaoEncontrada){
								txtFornecedor.append("Codigo");
								txtFornecedor.append(";");
								txtFornecedor.append("Fornecedor/Cliente");
								txtFornecedor.append(";");
								txtFornecedor.append("Duplicata");
								txtFornecedor.append(";");
								txtFornecedor.append("Data");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor bruto");
								txtFornecedor.append(";");
								txtFornecedor.append("Valor liquido");
								txtFornecedor.append(";");
								txtFornecedor.append("Banco");
								txtFornecedor.append(";");
								txtFornecedor.append("Obs:");
								txtFornecedor.append("\r\n");
								cabecalhoNaoEncontrada = false;
							}
							String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
							jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
							txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
							txtFornecedor.append(";");
							txtFornecedor.append(razaoSocialDuplicata);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.documento);
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.dataMovimento);
							txtFornecedor.append(";");
							txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
							txtFornecedor.append(";");
							txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
							txtFornecedor.append(";");
							txtFornecedor.append(ttMov.nomePortador);
							txtFornecedor.append(";");
							txtFornecedor.append("Valor Contrato " + String.format("%.2f", ttMov.valorDocumento) + " maior que saldo no Fiscal " + String.format("%.2f", valorSaldoDuplicata));
							txtFornecedor.append("\r\n");

							geraFiscal = true;
							loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
							if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
 							mapaVariavel.put(key,ttMov);

						}
					}
					else {
						if(cabecalhoNaoEncontrada){
							txtFornecedor.append("Codigo");
							txtFornecedor.append(";");
							txtFornecedor.append("Fornecedor/Cliente");
							txtFornecedor.append(";");
							txtFornecedor.append("Duplicata");
							txtFornecedor.append(";");
							txtFornecedor.append("Data");
							txtFornecedor.append(";");
							txtFornecedor.append("Valor bruto");
							txtFornecedor.append(";");
							txtFornecedor.append("Valor liquido");
							txtFornecedor.append(";");
							txtFornecedor.append("Banco");
							txtFornecedor.append(";");
							txtFornecedor.append("Obs:");
							txtFornecedor.append("\r\n");
							cabecalhoNaoEncontrada = false;
						}
						String valorLiquido = String.format("%.2f", ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta);
						jDescricaoDupl.put("VALORLIQUIDO",  valorLiquido);
						txtFornecedor.append(jDescricaoDupl.optString("CODEMPRESA"));
						txtFornecedor.append(";");
						txtFornecedor.append(razaoSocialDuplicata);
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.documento);
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.dataMovimento);
						txtFornecedor.append(";");
						txtFornecedor.append(String.format("%.2f", ttMov.valorDocumento));
						txtFornecedor.append(";");
						txtFornecedor.append(jDescricaoDupl.optString("VALORLIQUIDO").replaceAll("\\.",","));
						txtFornecedor.append(";");
						txtFornecedor.append(ttMov.nomePortador);
						txtFornecedor.append(";");
						txtFornecedor.append("Contrato " + ttMov.documento + " nao encontrado no Dominio ");
						txtFornecedor.append("\r\n");

						geraFiscal = true;
						loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_" + dataLote + "_" + ttMov.tipoLancamento;
						if (ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_TESTE_OTTIMIZZA_" + dataLote + "_" + ttMov.tipoLancamento;
 						mapaVariavel.put(key,ttMov);
					}
 				}

			}

			*/

            boolean ctFiscal = false;
            if(ttMov.tipoLancamento.contains("PAGAR")	&& ttMov.contaDebito.toUpperCase().contains("FISCAL")) ctFiscal = true;
            if(ttMov.tipoLancamento.contains("RECEBER") && ttMov.contaCredito.toUpperCase().contains("FISCAL")) ctFiscal = true;

            dupliNaoEncontContabil	= Boolean.parseBoolean(roteiroCRM.optString("dupliNaoEncontContabil").toLowerCase().trim());
            contaTemp				= roteiroCRMPrincipal.optString("Conta_Dupl_Contabil");

            if(contaMovimento.toUpperCase().contains("FISCAL") || ctFiscal) {
                contaMovimento = contaTemp;
                if(ttMov.tipoLancamento.contains("PAGAR"))	ttMov.contaDebito = contaTemp;
                if(ttMov.tipoLancamento.contains("RECEBER"))ttMov.contaCredito = contaTemp;

                histobj.put("contaMovimento", contaMovimento);
                ttMov.historico = getHistoricoRegra(contaMovimento, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            }

            if (!contaMovimento.equals("")){

                ttPlano ttP  = (ttPlano)mapaPlano.get(contaMovimento);
                if (ttP == null) {

                    ttP  = new ttPlano();
                    ttP.descricaoPlano = "";
                    ttP.contaAnalitica = "";

                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO,CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                            .fields("DESCRICAOPLANO,CONTAANALITICA")
                            .param(codEmpresaPlanoContas)
                            .param(cutString(contaMovimento,0, 20))
                            .queryUnique();

                    if (descricaoPlano == null || !descricaoPlano.has("DESCRICAOPLANO")) {
                        dbIOCont.insert("IO_PLANOCONTA")
                                .fields("CODEMPRESA,CONTACONTABIL")
                                .param(codEmpresaPlanoContas)
                                .param(cutString(contaMovimento,0, 20))
                                .execute();
                    } else {
                        ttP.descricaoPlano = descricaoPlano.optString("DESCRICAOPLANO");
                        ttP.contaAnalitica = descricaoPlano.optString("CONTAANALITICA");
                    }
                    ttP.contaContabil     = cutString(contaMovimento,0, 20);
                    mapaPlano.put(contaMovimento,ttP);


                }
            }
            //Tratamento para inverter conta em lencamento simples feito para JBSOFTWARE
            if (roteiroCRMPrincipal.optString("erpContabilidade").contains("JBSOFTWARE") ||
                    roteiroCRMPrincipal.optString("erpContabilidade").contains("TRON") ||
                    roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET") ||
                    roteiroCRMPrincipal.optString("erpContabilidade").contains("MICROSYSTEM")){
                if(ttMov.contaDebito.contains("INVERTE") && !ttMov.contaCredito.contains("INVERTE")) ttMov.contaCredito = ttMov.contaCredito+ "INVERTE";
                if(!ttMov.contaDebito.contains("INVERTE") && ttMov.contaCredito.contains("INVERTE")) ttMov.contaDebito = ttMov.contaDebito+ "INVERTE";
            }

            chave = ttMov.chave;
            //chave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
            String testeChave = getRegrasParaAcumular(ttMov.lote, ttMov.chave, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
            if(!testeChave.toUpperCase().contains("ACUMULAANTES") && !testeChave.toUpperCase().contains("ACUMULARANTES")) chave = testeChave;

            if(chave.length() > 180) chave = cutString(chave, 0, 179);

            chave = chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";
            ttMov.chave = ttMov.chave.replaceAll("[^0-9a-zA-Z]*", "") + "-CTB";

            apagaStatus = true;
            String keyAc = chave;

            // logger.logInfo("EMPR " + nomeEmpresa + " | " + tipoProduto + " | " + mantemArquivo + " | " + processaOud);

            if (((!tipoProduto.equals("OIC_PACOTE") && mantemArquivo.equals("SIM"))  || processaOud.equals("TRUE")) && !ttMov.lote.toUpperCase().contains("_OUD_")) {
                ttMov.lote = ttMov.lote.replace(codEmpresa +"_",codEmpresa +"_oud_");
            }
            else {
                if (ttMov.nomeArquivo.contains(".omc")) {
                    ttMov.lote = ttMov.lote.replace(codEmpresa +"_",codEmpresa +"_oud_");
                }
            }

            // logger.logInfo("LOTEE " + ttMov.lote);



            ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
            if (ttLot       == null) {
                ttLot       = new ttLote();
                ttLot.lote  = ttMov.lote;
                ttLot.tipoPlanilha  = ttMov.tipoPlanilha;
            }
            mapaLote.put(ttMov.lote,ttLot);


            ttMovimentoPadrao ttMov3       = (ttMovimentoPadrao)mapaOficial.get(keyAc);
            if (ttMov3  == null) {
                ttMov3                = new ttMovimentoPadrao(ttMov);
                ttMov3.valorDesconto   = 0;
                ttMov3.valorJuros      = 0;
                ttMov3.valorDocumento  = 0;
                ttMov3.valorMulta      = 0;
                ttMov3.documento       = "";
            }
            if (ttMov3.documento.equals("")) {
                ttMov3.documento         = ttMov.documento;
            } else { if (!ttMov3.documento.contains(ttMov.documento)) ttMov3.documento = ttMov3.documento + ", " + ttMov.documento; }


            ttMov3.valorDesconto     = ttMov3.valorDesconto   + ttMov.valorDesconto;
            ttMov3.valorDocumento    = ttMov3.valorDocumento  + ttMov.valorDocumento;
            ttMov3.valorMulta        = ttMov3.valorMulta      + ttMov.valorMulta;
            ttMov3.valorJuros        = ttMov3.valorJuros      + ttMov.valorJuros;
            ttMov3.chave = chave;


            // logger.logInfo("ERP =>> "+roteiroCRM.optString("erpContabilidade")+" - ttMov3.contador =>> "+ttMov3.contador);
            String testeChavePortador = getRegrasParaAcumularPortador("", "", ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj).replaceAll("[^0-9a-zA-Z]*", "");
            if (!testeChavePortador.equals("")) ttMov3.contador = 3;

            if (!ttMov.chave.equals(chave)) ttMov3.contador = 3;

            // for?a lancamento aberto no FB software
            if (roteiroCRMPrincipal.optString("erpContabilidade").contains("JBSOFTWARE") ||
                    roteiroCRMPrincipal.optString("erpContabilidade").contains("TRON") ||
                    roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET") ||
                    roteiroCRMPrincipal.optString("erpContabilidade").contains("DYAD") ||//removido o erp FORTES dessa valida??o - 202301-0023113
                    roteiroCRMPrincipal.optString("erpContabilidade").contains("MICROSYSTEM")) ttMov3.contador = 3;

            //logger.logInfo("ERP =>> "+roteiroCRM.optString("erpContabilidade")+" - ttMov3.contador =>> "+ttMov3.contador+" - AGORA E AGORA -> "+roteiroCRMPrincipal.optString("erpContabilidade"));

            mapaVariavel.put(key,ttMov);
            mapaOficial.put(keyAc,ttMov3);

            if(ttMov.tipoPlanilha.contains("EXTRATO") || ttMov.tipoPlanilha.contains("CARTAO")){
                if(roteiroCRMPrincipal.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;
            }else if(roteiroCRM.optString("Forcar_Partida_Simples").equals("TRUE")) ttMov3.contador = 3;

            //#2305-005880
            //if (ttMov.tipoPlanilha.contains("OTTCARTAO")) ttMov3.contador = 0;
            if (ttMov.tipoPlanilha.contains("OTTCARTAO") && !roteiroCRMPrincipal.optString("erpContabilidade").contains("CONSISANET")) ttMov3.contador = 0;

            // if(ttMov.codEmpresa.contains("68345")) logger.logInfo("VALOR = "+ttMov.valorDocumento+" | DT == "+ttMov.dataMovimento+" | CONT = "+ttMov3.contador+" | CHAVE == "+chave);


            if  ((ttMov.valorJuros > 0 || ttMov.valorDesconto > 0 || ttMov.valorMulta > 0 || ttMov3.contador == 3) && !ttMov.tipoPlanilha.equals("NAO LER")) {
                chave = chave.replaceAll("CTB","CTBPORT");
                if (!testeChavePortador.equals("")) chave = testeChavePortador;

                key = chave;
                ttMovimentoPadrao ttMov2       = (ttMovimentoPadrao)mapaOficial.get(key);
                if (ttMov2  == null) {
                    ttMov2                = new ttMovimentoPadrao(ttMov);
                    ttMov2.contador        = 0;
                    ttMov2.valorDesconto   = 0;
                    ttMov2.valorJuros      = 0;
                    ttMov2.valorDocumento  = 0;
                    ttMov2.valorMulta      = 0;
                    ttMov2.classificacao     = ttMov.classificacao;

                }
                ttMov2.tipoMovimento     = "CTBPORT";
                ttMov2.valorDesconto     = ttMov2.valorDesconto   + ttMov.valorDesconto;
                ttMov2.valorMulta        = ttMov2.valorMulta      + ttMov.valorMulta;
                ttMov2.valorJuros        = ttMov2.valorJuros      + ttMov.valorJuros;
                ttMov2.chave             = chave;
                ttMov2.chaveExtrato      = "";
                ttMov2.documento         = ttMov3.documento;
                ttMov2.valorDocumento    = ttMov2.valorDocumento + ttMov.valorDocumento + ttMov.valorJuros - ttMov.valorDesconto + ttMov.valorMulta;
                ttMov2.contador          = ttMov2.contador + ttMov3.contador;
                if(tipoLancamento.contains("PAGAR") && !ttMov2.tipoPlanilha.contains("OTTCARTAO")) {
                    ttMov2.naturezaContabil  = "C";
                    ttMov2.contaDebito       = "";
                    ttMov2.contaCredito      = ttMov.contaCredito;
                }
                if(tipoLancamento.contains("RECEBER") && !ttMov2.tipoPlanilha.contains("OTTCARTAO")){
                    ttMov2.naturezaContabil  = "D";
                    ttMov2.contaDebito       = ttMov.contaDebito;
                    ttMov2.contaCredito      = "";
                }
                if (ttMov2.valorDocumento == 0) continue; //JWR
                ttMov2.historico = getHistoricoPortador(contaPortador, ttMov2.historico, ttMov2.tipoLancamento, ttMov2.documento, ttMov2.nomeOrigem, histobj);

                //Descomentar caso haja problema com a perna de portador do lancamento
                if (!ttMov2.codFilial.equals("") && !ttMov2.historico.contains("Filial:")) ttMov2.historico = ttMov2.historico + " Filial:" + ttMov2.codFilial;

                String tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV FORNECEDOR", histobj);
                if(!tratarDiv.equals("")){
                    String filial = "";
                    filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                    if(tratarDiv.contains("FORNECEDOR"))    ttMov3.historico = cutString(ttMov3.historico,0," Filial:") + " Filial:"+filial;
                    if(tratarDiv.contains("PORTADOR"))      ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
                    ttMov3.historicoJuros	 = cutString(ttMov3.historicoJuros,0," Filial:") + " Filial:"+filial;
                    ttMov3.historicoMulta 	 = cutString(ttMov3.historicoMulta,0," Filial:") + " Filial:"+filial;
                    ttMov3.historicoDesconto = cutString(ttMov3.historicoDesconto,0," Filial:") + " Filial:"+filial;
                }

                tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV DESCONTO", histobj);
                if(!tratarDiv.equals("")){
                    String filial = "";
                    filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                    if(tratarDiv.contains("DESCONTO"))    ttMov3.historicoDesconto = cutString(ttMov3.historicoDesconto,0," Filial:") + " Filial:"+filial;
                }
                tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV JUROS", histobj);
                if(!tratarDiv.equals("")){
                    String filial = "";
                    filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                    if(tratarDiv.contains("JUROS"))    ttMov3.historicoJuros = cutString(ttMov3.historicoJuros,0," Filial:") + " Filial:"+filial;
                }
                tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV MULTA", histobj);
                if(!tratarDiv.equals("")){
                    String filial = "";
                    filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                    if(tratarDiv.contains("MULTA"))    ttMov3.historicoMulta = cutString(ttMov3.historicoMulta,0," Filial:") + " Filial:"+filial;
                }
                tratarDiv = getTratarComoDiv(ttMov2.documento, ttMov2.nomeOrigem + " DIV PORTADOR", histobj);
                if(!tratarDiv.equals("")){
                    String filial = "";
                    filial = cutString(tratarDiv, "-").replaceAll("[^0-9]", "");
                    if(tratarDiv.contains("PORTADOR"))    ttMov2.historico = cutString(ttMov2.historico,0," Filial:") + " Filial:"+filial;
                }

                mapaOficial.put(key,ttMov2);
                ttMov3.classificacao = ttMov2.classificacao;
                mapaOficial.put(keyAc,ttMov3);
            }
        }
        if(contRegra == -1){
            String codEmp = props.get(empresa + "_COD_EMPRESA");
            String nomeEmp = props.get(empresa + "_NOME_EMPRESA");

            String info = tipoPlanilha + ";" + roteiroCRM.optString("codigo");
            compDirName = nomeEmp + "_#" + codEmp;
            String tipoPlanilhaDirName = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/" + compDirName + "/DePara/Processado/";
            String tipoPlanilhaPath = tipoPlanilhaDirName + "TIPOPLANILHA" + ".txt";
            // inout/contabil/Depaula/vektor_#123/Depara/TIPOPLANILHA.txt
            FileWriter 	arquivoTp = new FileWriter(tipoPlanilhaPath);
            arquivoTp.writeNewFile(info);
            //sssssss
        }


        //-------------------------------------------------------------------------
        // GERA OS ARQUICOS PARA BAIXA DE DUPLICATAS -- FISCAL
        //-------------------------------------------------------------------------
        if (geraFiscal) {

            String auxExtencao = ".txt";
            if(roteiroCRMPrincipal.optString("erpContabilidade").toUpperCase().contains("CORDILHEIRA")) auxExtencao = ".csv";
            String filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[0] + auxExtencao;
            FileWriter writer = new FileWriter(filename);
            writer.writeNewFile(txtFiscal[0].toString());

            if (nomeArquivo.toUpperCase().contains("_ID") && !loteFiscal[0].contains("_ID")) loteFiscal[0] = nomeEmpresa + "_" + codEmpresa + "_" + "_PELO_FISCAL_ID" + cutString(nomeArquivo.toUpperCase(), "_ID", "_") + "_" + dataLote + "_" + tipoLancamento;

            loteFiscal[0] = loteFiscal[0].replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");

            filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[0] + ".csv";
            writer = new FileWriter(filename);
            writer.writeNewFile(txtFornecedor.toString());

            //JWR 2303-000613 Descomentar para quando utilizar arquivos fiscais separados por filial
			/*if (!loteFiscal[i].equals("") && geraNaoEncontradas) {
				loteFiscal[i] = loteFiscal[i].replaceAll("_PELO_FISCAL","_DUPLICATAS_NAO_ENCONTRADAS");
				filename = RouteEngine.INOUT_HOME + "/Contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/" + loteFiscal[i] + ".csv";
				writer = new FileWriter(filename);
				writer.writeNewFile(txtFornecedor.toString());
				geraNaoEncontradas = false;
			}*/


        }


        //-------------------------------------------------------------------------
        //--- DESABILITAR AQUI SOMENTE SE O BANCO DE DADOS CONTIVER TABELA IO_RAZAO
        //-------------------------------------------------------------------------



        mapaVariavel		= new HashMap();

        if (apagaStatus) {
            jStatus = new JSONObject();
            // logger.logInfo("PUTSTATUS 4745");
            putStatus(dirName, "", jStatus, logger);
        }

        // =======================================================================================
        // * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base
        // =======================================================================================


        Iterator itLote = mapaLote.keySet().iterator();
        while (itLote.hasNext()) {

            String key = (String)itLote.next();
            ttLote ttLot = (ttLote)mapaLote.get(key);
            lote = ttLot.lote;

            try {
                if (dbIOCont != null) {
                    dbIOCont.closeConnection();
                    dbIOCont = null;
                }
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                        .where("LOTE=?")
                        .param(lote)
                        .execute();

                if (mantemArquivo.equals("SIM")) {

                    dbIOCont.delete("IO_MOVIMENTO")
                            .where("LOTE LIKE ? AND LOTE LIKE ? ")
                            .param("%" + tipoLancamento + "%")
                            .param(nomeEmpresa + "_" + "%")

                            .execute();

                }

                if (mantemArquivo.equals("SIM")) {

                    dbIOCont.delete("IO_ARQUIVOS")
                            .where("LOTE LIKE ? AND LOTE LIKE ? ")
                            .param(cutString(lote, 0, "_") + "%")
                            .param("%" + tipoLancamento + "%")
                            .execute();

                }


            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }
        }
        // logger.logInfo("ETAPA 04 TEMPLATE ");


        contRegra = -1;
        Iterator it = mapaOficial.keySet().iterator();
        while (it.hasNext()) {

            String chaveExtrato     = "";

            String key = (String)it.next();
            ttMovimentoPadrao ttMov = new ttMovimentoPadrao();
            try {
                ttMov = (ttMovimentoPadrao)mapaOficial.get(key);
            }
            catch (Exception xx) { continue;}


            if (ttMov.tipoPlanilha.equals("NAO LER")) continue;


            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                if(tipoLancamento.contains("PAGAR") && ttMov.debitoCredito.equals("EXTRATO-CREDITO")) continue;
                if(tipoLancamento.contains("RECEBER") && ttMov.debitoCredito.equals("EXTRATO-DEBITO"))  continue;

            }
            if (ttMov.contaDebito.toUpperCase().contains("IGNORA")) {
                temIgnorar = true;
                continue;
            }
            if (ttMov.contaCredito.toUpperCase().contains("IGNORA")) {
                temIgnorar = true;
                continue;
            }
            ttMov.nomeOrigem = ttMov.nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

            contRegra++;
            int restoLinha = 0;
            restoLinha = (contRegra % 100);
            if (restoLinha == 0) putStatus(dirName, "04--Etapa 4 de 4 - " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
            // quando cliente escolhe para agrupar tudo em um unico lote, mudamos o nome do arquivo.

            if (ttMov.valorDocumento == 0) continue;

            // logger.logInfo("TPPORTTEMPLATE " + ttMov.tipoPlanilha + " | " + ttMov.lote + " | " + ttMov.dataMovimento + " | " + ttMov.tipoLancamento + " | " + ttMov.debitoCredito);
            // logger.logInfo("PORTAS2 " + ttMov.nomePortador);
            String idLote = cutString(ttMov.lote, "ott_oud", ttMov.lote.indexOf("ott_oud") + 16);//202302-0025707

            if (ttMov.lote.contains("ott_oud__id")) idLote = cutString(ttMov.lote, "ott_oud__id", "_");//2308-011361
            if (ttMov.lote.contains("ott_oud_id")) idLote = cutString(ttMov.lote, "ott_oud_id", "_");//2308-011361

            if (roteiroCRMPrincipal.optString("agrupaArquivos").toUpperCase().contains("TRUE")) {
                if (ttMov.lote.contains("_CORA_")) {
                    ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_CORA_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
                }

                else {
                    if (ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) {

                        ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_OTTIMIZZA_PROJETO_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
                    }
                    else {
                        if (ttMov.lote.toUpperCase().contains("_OUD_")) {

                            ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_ott_oud__id" + idLote + "_" + arquivoAgora  + "_OUD_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");
                        }

                        else {
                            ttMov.lote = (nomeEmpresa + "_" + codEmpresa + "_" + arquivoAgora  + "_" + DateUtil.dateToString(new Date(),"yyyy-MM") + "_" + tipoLancamento).replaceAll("\\." , "");

                        }
                    }
                }


            }

            if (ttMov.lote.toLowerCase().contains("ott_oud_")) ttMov.lote = ttMov.lote.replaceAll("__", "_");

            // logger.logInfo("LOTIZIN " + nomeEmpresa + " | " + ttMov.lote);

            ttLote ttLot    = (ttLote)mapaLote.get(ttMov.lote);
            if (ttLot       == null) {
                ttLot       = new ttLote();
                ttLot.lote  = ttMov.lote;
                ttLot.tipoPlanilha  = ttMov.tipoPlanilha;
            }
            mapaLote.put(ttMov.lote,ttLot);


            if(tipoLancamento.contains("PAGAR")){
                ttMov.naturezaContabil = "D";
                if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "C";
            }
            if(tipoLancamento.contains("RECEBER")){
                ttMov.naturezaContabil = "C";
                if(ttMov.tipoMovimento.contains("CTBPORT") || ttMov.tipoMovimento.contains("CTBDES")) ttMov.naturezaContabil = "D";
            }

            JSONObject extratoEmpresa = new JSONObject();

            // CASO A LINHA DO EXTATO JA TENHA SIDO LIDA PELA PLANILHA DE PAGAMENTOS, DEVE SER IGNORADA
            if (ttMov.tipoPlanilha.contains("EXTRATO")) {
                chaveExtrato = ttMov.chaveExtrato;

                extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE CHAVE LIKE ? ")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato + "%")
                        .queryUnique();

                if (extratoEmpresa != null && extratoEmpresa.length() > 0) {
                    if (extratoEmpresa.has("EXTRATOLIDO")) {

                        double extratoLido = extratoEmpresa.optDouble("EXTRATOLIDO");

                        if (extratoLido == 1) continue;

                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(1)
                                .param(chaveExtrato)
                                .execute();

                    }
                }

            }


            // -----------------------------------------------------------------------------------------------------------
            // COMPARA COM RAZAO APENAS QUANDO O NOME DO ARQUIVO CONTIVER OTTIMIZZA, ASSIM FICA MAIS RAPIDA A INTEGRACAO
            // QUANDO O CLIENTE FINAL ESTIVER RODANDO.
            // -----------------------------------------------------------------------------------------------------------
            //logger.logInfo(ttMov.tipoMovimento + "|" + ttMov.nomeArquivo.toUpperCase());
            if (!ttMov.tipoMovimento.equals("CTBPORT") && ttMov.nomeArquivo.toUpperCase().contains("OTTIMIZZA")) {

                String tipoData = "MOVIMENTO";

                comparaRazao = true;


                Date dataMovimentoDate = DateUtil.stringToDate(ttMov.dataMovimento, "dd/MM/yyyy");
                Date dataMovimentoDateMenosUm= new Date();
                Date dataMovimentoDateMenosDois= new Date();
                Date dataMovimentoDateMenosTres= new Date();
                Date dataMovimentoDateMaisUm= new Date();
                Date dataMovimentoDateMaisDois= new Date();
                Date dataMovimentoDateMaisTres= new Date();

                Calendar cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -1); dataMovimentoDateMenosUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -2); dataMovimentoDateMenosDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, -3); dataMovimentoDateMenosTres = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +1); dataMovimentoDateMaisUm = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +2); dataMovimentoDateMaisDois = cal.getTime();
                cal = Calendar.getInstance(); cal = DateUtil.dateToCalendar(dataMovimentoDate); cal.add (Calendar.DATE, +3); dataMovimentoDateMaisTres = cal.getTime();

                if (ttMov.valorDocumento == 0) continue;

                String valorFinal = String.format("%.2f", ttMov.valorDocumento);
                valorFinal = valorFinal.replaceAll("\\.",",");

                JSONArray registro = new JSONArray();



                JSONObject histobj = new JSONObject();
                ttMov.complemento01 = getReplaceTermos("complemento01", ttMov.complemento01, histobj);
                ttMov.complemento02 = getReplaceTermos("complemento02", ttMov.complemento02, histobj);
                ttMov.complemento03 = getReplaceTermos("complemento03", ttMov.complemento03, histobj);
                ttMov.complemento04 = getReplaceTermos("complemento04", ttMov.complemento04, histobj);
                ttMov.complemento05 = getReplaceTermos("complemento05", ttMov.complemento05, histobj);
                ttMov.complemento06 = getReplaceTermos("complemento06", ttMov.complemento06, histobj);
                ttMov.complemento07 = getReplaceTermos("complemento07", ttMov.complemento07, histobj);
                ttMov.complemento08 = getReplaceTermos("complemento09", ttMov.complemento08, histobj);
                ttMov.complemento09 = getReplaceTermos("complemento09", ttMov.complemento09, histobj);
                ttMov.complemento10 = getReplaceTermos("complemento10", ttMov.complemento10, histobj);
                ttMov.nomeOrigem = getReplaceTermos("nomeOrigem", ttMov.nomeOrigem, histobj);
                ttMov.documento = getReplaceTermos("documento", ttMov.documento, histobj);
                ttMov.nomePortador = getReplaceTermos("nomePortador", ttMov.nomePortador, histobj);

                histobj.put("nomeOrigem", ttMov.nomeOrigem); histobj.put("documento", ttMov.documento);
                histobj.put("complemento01", ttMov.complemento01); histobj.put("complemento02", ttMov.complemento02);
                histobj.put("complemento03", ttMov.complemento03); histobj.put("complemento04", ttMov.complemento04);
                histobj.put("complemento05", ttMov.complemento05); histobj.put("complemento06", ttMov.complemento06);
                histobj.put("complemento07", ttMov.complemento07); histobj.put("complemento08", ttMov.complemento08);
                histobj.put("complemento09", ttMov.complemento09); histobj.put("complemento10", ttMov.complemento10);
                histobj.put("dataMovimento", ttMov.dataMovimento); histobj.put("mesAnoAnterior", mesAnoAnterior);
                histobj.put("mesAno2Anterior", mesAno2Anterior); histobj.put("mesAnoAtual", mesAnoAtual);
                histobj.put("nomePortador", ttMov.nomePortador); histobj.put("contaMovimento", contaMovimento);
                histobj.put("contaPortador", contaPortador); histobj.put("contaDebito", "");
                histobj.put("contaCredito", ""); histobj.put("contaJuros", ttMov.contaJuros);
                histobj.put("contaDesconto", ttMov.contaDesconto); histobj.put("contaMulta", ttMov.contaMulta);
                histobj.put("centroCusto", ttMov.centroCusto); histobj.put("valorDocumento", ttMov.valorDocumento);
                histobj.put("valorJuros", ttMov.valorJuros); histobj.put("valorDesconto", ttMov.valorDesconto);
                histobj.put("valorMulta", ttMov.valorMulta); histobj.put("codFilial", ttMov.codFilial);
                histobj.put("tipoPlanilha", ttMov.tipoPlanilha); histobj.put("numeroAba", ttMov.abaPlanilha);

                String contaPrincipal = "";
                String contraSecundaria = "";

                if (tipoLancamento.contains("PAGAR")) {
                    contaPrincipal = ttMov.contaDebito;
                    contraSecundaria = ttMov.contaCredito;

                }
                if (tipoLancamento.contains("RECEBER")) {
                    contaPrincipal = ttMov.contaCredito;
                    contraSecundaria = ttMov.contaDebito;
                }

                regraContaMovimento = getRegraContaMovimento(contaPrincipal, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);
                regraHistorico = getRegraHistoricoRegra(contaPrincipal, ttMov.historico, ttMov.tipoLancamento, ttMov.documento, ttMov.nomeOrigem, histobj);


                ResumoTxt.append("\r\n");
                ResumoTxt.append("NAO ENCONTRADO;");
                ResumoTxt.append(ttMov.dataMovimento);
                ResumoTxt.append(";");
                ResumoTxt.append(tipoData);
                ResumoTxt.append(";");
                ResumoTxt.append(valorFinal);
                ResumoTxt.append(";");
                ResumoTxt.append(ttMov.documento);
                ResumoTxt.append(";");
                ResumoTxt.append(ttMov.nomeOrigem);
                ResumoTxt.append(";");
                ResumoTxt.append(ttMov.nomePortador);
                ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento01);
                ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento02);
                ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento03);
                ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento04);
                ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento05);
                ResumoTxt.append(";");
                ResumoTxt.append(ttMov.complemento06);
                ResumoTxt.append(";;");

                ResumoTxt.append(ttMov.contaDebito);
                ResumoTxt.append(";");
                ResumoTxt.append(ttMov.contaCredito);
                ResumoTxt.append(";");
                ResumoTxt.append(regraContaMovimento);
                ResumoTxt.append(";");
                ResumoTxt.append(ttMov.historico);
                ResumoTxt.append(";");
                ResumoTxt.append(regraHistorico);
                ResumoTxt.append(";;");
                ResumoTxt.append(ttMov.nomeArquivo);
                ResumoTxt.append(";");

            }

            if(tipoLancamento.contains("PAGAR")){

                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "C";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "D";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "C";
                if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
            }
            if(tipoLancamento.contains("RECEBER")){
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros == 0) classificacao = "X";
                if (ttMov.valorDesconto == 0 && ttMov.valorJuros > 0)  classificacao = "D";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros == 0) classificacao = "C";
                if (ttMov.valorDesconto >  0 && ttMov.valorJuros > 0)  classificacao = "V";

                if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "D";
                if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
            }

            if (roteiroCRMPrincipal.optString("erpContabilidade").contains("DOMINIO")) {
                if(tipoLancamento.contains("PAGAR")){

                    if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
                    if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
                    if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
                    if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

                    if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
                    if (ttMov.contador > 1 && classificacao.equals("D")) classificacao = "V";
                }
                if(tipoLancamento.contains("RECEBER")){
                    if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "X";
                    if (ttMov.valorDesconto == 0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";
                    if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) == 0) classificacao = "V";
                    if (ttMov.valorDesconto >  0 && (ttMov.valorJuros + ttMov.valorMulta) > 0)  classificacao = "V";

                    if ((ttMov.contador > 1 || ttMov.valorMulta > 0) && classificacao.equals("X")) classificacao = "V";
                    if (ttMov.contador > 1 && classificacao.equals("C")) classificacao = "V";
                }
            }

            String classificacaoFinal = classificacao + ttMov.classificacao + "01";


            if ((classificacao.startsWith("X") || roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) && ttMov.tipoMovimento.equals("CTBPORT")) { continue;}

            if(!ttMov.tipoPlanilha.equals("MOVIMENTO") && !ttMov.tipoPlanilha.contains("EXTRATO")){
                roteiroCRM = buscaRoteiro("getRoteiro"+ttMov.tipoPlanilha, logger);
            }else{
                roteiroCRM = getRoteiro();
            }
            // if(ttMov.codEmpresa.contains("68345")) logger.logInfo("QUATRO " + ttMov.valorDocumento + " | " + ttMov.dataMovimento + " | " + ttMov.tipoPlanilha + " | " + ttMov.tipoMovimento + " | " + roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase());
            // logger.logInfo("AQQQQ " + roteiroCRM.optString("erpContabilidade") + " | " + roteiroCRMPrincipal.optString("erpContabilidade") + " | " + ttMov.complemento05 + " | " + roteiroCRM.optString("Forcar_Partida_Dobrada").toUpperCase() + " | " + roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase() + " | " + ttMov.contaJuros + " | " + ttMov.contaDebito + " | " + ttMov.contaCredito + " | " + classificacao);


            if (classificacao.startsWith("X")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", ttMov.tipoMovimento);
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("CONTADEBITO", ttMov.contaDebito);
                js.put("CONTACREDITO", ttMov.contaCredito);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave  + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);


                if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
                        ttMov.lote.toUpperCase().contains("_OUD") ||
                        (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
                    js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
                    js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
                    js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
                    js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
                    // 2307-010554
                    if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
                        js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
                        js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
                        js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
                        js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
                        js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
                    }
                }



                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) {
                        if (roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE")
                                || roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA")
                                || roteiroCRMPrincipal.optString("erpContabilidade").equals("CONTMATIC")) {
                            if (ttMov.complemento05.equals("JUROS") && !ttMov.contaJuros.equals("")) {
                                js.put("CONTADEBITO", ttMov.contaJuros);
                                //#2303-000922
                                //js.put("CONTACREDITO", ttMov.contaDebito);
                                js.put("CONTACREDITO", ttMov.contaCredito);
                            }
                            if (ttMov.complemento05.equals("MULTA") && !ttMov.contaMulta.equals("")) {
                                js.put("CONTADEBITO", ttMov.contaMulta);
                                //#2303-000922
                                //js.put("CONTACREDITO", ttMov.contaDebito);
                                js.put("CONTACREDITO", ttMov.contaCredito);
                            }
                            if (ttMov.complemento05.equals("DESCONTO") && !ttMov.contaDesconto.equals("")) {
                                js.put("CONTADEBITO", ttMov.contaDebito);
                                js.put("CONTACREDITO", ttMov.contaDesconto);
                            }
                        }

                    }
                }
                if(tipoLancamento.contains("RECEBER")){
                    if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) {
                        if (roteiroCRMPrincipal.optString("erpContabilidade").equals("LEDWARE")
                                || roteiroCRMPrincipal.optString("erpContabilidade").equals("ALTERDATA")
                                || roteiroCRMPrincipal.optString("erpContabilidade").equals("CONTMATIC")) {
                            if (ttMov.complemento05.equals("JUROS") && !ttMov.contaJuros.equals("")) {
                                js.put("CONTADEBITO", ttMov.contaDebito);
                                js.put("CONTACREDITO", ttMov.contaJuros);
                            }
                            if (ttMov.complemento05.equals("MULTA") && !ttMov.contaMulta.equals("")) {
                                js.put("CONTADEBITO", ttMov.contaDebito);
                                js.put("CONTACREDITO", ttMov.contaMulta);
                            }
                            if (ttMov.complemento05.equals("DESCONTO") && !ttMov.contaDesconto.equals("")) {
                                js.put("CONTADEBITO", ttMov.contaDesconto);
                                //#2303-000922
                                //js.put("CONTACREDITO", ttMov.contaCredito);
                                js.put("CONTACREDITO", ttMov.contaDebito);
                            }
                        }
                    }
                }

                recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");

                if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
                if (ttMov.tipoMovimento.equals("CTB")   && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
                criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);


                //records.put(js);
                if (!ttMov.centroCusto.equals("")) {

                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("CONTADEBITO", ttMov.contaDebito);
                    rec3.put("CONTACREDITO", ttMov.contaCredito);
                    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");

                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);

                    //records.put(rec3);
                }
                continue;
            }

            String classJur = "";
            String classDes = "";
            String classMul = "";

            if(tipoLancamento.contains("PAGAR")){
                if(roteiroCRMPrincipal.optString("erpContabilidade").equals("DYAD")){
                    if(classificacao.startsWith("C") || classificacao.startsWith("V")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "03";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        classDes = classificacao + ttMov.classificacao + "02";
                        classJur = classificacao + ttMov.classificacao + "04";
                        classMul = classificacao + ttMov.classificacao + "05";
                    }
                    if(classificacao.startsWith("D")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        classDes = classificacao + ttMov.classificacao + "05";
                        classJur = classificacao + ttMov.classificacao + "02";
                        classMul = classificacao + ttMov.classificacao + "03";
                    }
                }else{
                    if(classificacao.startsWith("C") || classificacao.startsWith("V")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
                        classDes = classificacao + ttMov.classificacao + "02";
                        classJur = classificacao + ttMov.classificacao + "04";
                        classMul = classificacao + ttMov.classificacao + "05";
                    }
                    if(classificacao.startsWith("D")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        classDes = classificacao + ttMov.classificacao + "05";
                        classJur = classificacao + ttMov.classificacao + "02";
                        classMul = classificacao + ttMov.classificacao + "03";
                    }
                }
            }


            if(tipoLancamento.contains("RECEBER")){
                if(roteiroCRMPrincipal.optString("erpContabilidade").equals("DYAD")){
                    if(classificacao.startsWith("D") || classificacao.startsWith("V")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "03";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        classDes = classificacao + ttMov.classificacao + "02";
                        classJur = classificacao + ttMov.classificacao + "04";
                        classMul = classificacao + ttMov.classificacao + "05";
                    }
                    if(classificacao.startsWith("C")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        classDes = classificacao + ttMov.classificacao + "05";
                        classJur = classificacao + ttMov.classificacao + "02";
                        classMul = classificacao + ttMov.classificacao + "03";
                    }
                }else{
                    if(classificacao.startsWith("D") || classificacao.startsWith("V")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "03";
                        classDes = classificacao + ttMov.classificacao + "02";
                        classJur = classificacao + ttMov.classificacao + "04";
                        classMul = classificacao + ttMov.classificacao + "05";
                    }
                    if(classificacao.startsWith("C")){
                        if (ttMov.tipoMovimento.equals("CTBPORT"))  classificacaoFinal = classificacao + ttMov.classificacao + "04";
                        if (ttMov.tipoMovimento.equals("CTB"))      classificacaoFinal = classificacao + ttMov.classificacao + "01";
                        classDes = classificacao + ttMov.classificacao + "05";
                        classJur = classificacao + ttMov.classificacao + "02";
                        classMul = classificacao + ttMov.classificacao + "03";
                    }

                }
            }



            if (ttMov.tipoMovimento.equals("CTBPORT")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTBPORT");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTBPORT");
                js.put("CLASSIFICACAO", classificacaoFinal);

                if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
                        ttMov.lote.toUpperCase().contains("_OUD") ||
                        (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
                    js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
                    js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
                    js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
                    js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
                    // 2307-010554
                    if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
                        js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
                        js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
                        js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
                        js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
                        js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
                    }
                }

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                }

                recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBPORT");
                if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
                if (ttMov.tipoMovimento.equals("CTBPORT") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
                criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBPORT", js);

                //records.put(js);
            }
            if (ttMov.tipoMovimento.equals("CTB")) {
                JSONObject js = new JSONObject();
                js.put("LOTE", ttMov.lote);
                js.put("CNPJEMPRESA", cnpjEmpresa);
                js.put("DOCUMENTO", ttMov.documento);
                js.put("CODEMPRESA", ttMov.codEmpresa);
                js.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                js.put("DATAMOVIMENTO", ttMov.dataMovimento);
                js.put("TIPOMOVIMENTO", "CTB");
                js.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                js.put("HISTORICO", ttMov.historico);
                js.put("VALORDOCUMENTO", ttMov.valorDocumento);
                js.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                js.put("VALORDESCONTO", ttMov.valorDesconto);
                js.put("VALORJUROS", ttMov.valorJuros);
                js.put("VALORMULTA", ttMov.valorMulta);
                js.put("NOMEPORTADOR", ttMov.nomePortador);
                js.put("CENTROCUSTO", ttMov.centroCusto);
                js.put("NATUREZACONTABIL", ttMov.naturezaContabil);
                js.put("NOMEORIGEM", ttMov.nomeOrigem);
                js.put("CPFCNPJ", ttMov.cpfCnpj);
                js.put("SERIE", ttMov.serie);
                js.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                js.put("CHAVE", ttMov.chave + "-CTB");
                js.put("CLASSIFICACAO", classificacaoFinal);

                if ((ttMov.lote.toUpperCase().contains("OTTIMIZZA") && ttMov.lote.toUpperCase().contains("PROJETO")) ||
                        ttMov.lote.toUpperCase().contains("_OUD") ||
                        (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) || processaOud.equals("TRUE")) {
                    js.put("ID_ROTEIRO", roteiroCRMPrincipal.optString("idRoteiro"));
                    js.put("CNPJ_EMPRESA", roteiroCRMPrincipal.optString("CnpjEmpresa"));
                    js.put("CNPJ_CONTABILIDADE", roteiroCRMPrincipal.optString("CnpjContabilidade").replaceAll("\\.","").replaceAll("-","").replaceAll("/",""));
                    js.put("TIPO_PLANILHA", ttMov.tipoPlanilha );
                    // 2307-010554
                    if (!ttMov.tipoPlanilha.contains("EXTRATO")) {
                        js.put("LABEL_COMPLEMENTO01", roteiroCRM.optString("Rotulo_Complemento_01"));
                        js.put("LABEL_COMPLEMENTO02", roteiroCRM.optString("Rotulo_Complemento_02"));
                        js.put("LABEL_COMPLEMENTO03", roteiroCRM.optString("Rotulo_Complemento_03"));
                        js.put("LABEL_COMPLEMENTO04", roteiroCRM.optString("Rotulo_Complemento_04"));
                        js.put("LABEL_COMPLEMENTO05", roteiroCRM.optString("Rotulo_Complemento_05"));
                    }
                }

                js.put("COMPLEMENTO01", ttMov.complemento01);
                js.put("COMPLEMENTO02", ttMov.complemento02);
                js.put("COMPLEMENTO03", ttMov.complemento03);
                js.put("COMPLEMENTO04", ttMov.complemento04);
                js.put("COMPLEMENTO05", ttMov.complemento05);
                js.put("COMPLEMENTO06", ttMov.complemento06);
                js.put("COMPLEMENTO07", ttMov.complemento07);
                js.put("COMPLEMENTO08", ttMov.complemento08);
                js.put("COMPLEMENTO09", ttMov.complemento09);
                js.put("COMPLEMENTO10", ttMov.complemento10);
                js.put("NOMEARQUIVO", ttMov.nomeArquivo);

                if(tipoLancamento.contains("PAGAR")){
                    js.put("CONTADEBITO", ttMov.contaDebito);
                    js.put("CONTACREDITO", "");
                    if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTACREDITO", ttMov.contaCredito);
                }
                if(tipoLancamento.contains("RECEBER")){
                    js.put("CONTADEBITO", "");
                    js.put("CONTACREDITO", ttMov.contaCredito);
                    if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) js.put("CONTADEBITO", ttMov.contaDebito);
                }

                recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTB");
                if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("PAGAR") && ttMov.contaDebito.equals("")) js.put("CONTADEBITO", "PENDENTE");
                if (ttMov.tipoMovimento.equals("CTB") && ttMov.tipoLancamento.equals("RECEBER") && ttMov.contaCredito.equals("")) js.put("CONTACREDITO", "PENDENTE");
                criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTB", js);

                //records.put(js);
                if (!ttMov.centroCusto.equals("")) {
                    JSONObject rec3 = new JSONObject(js.toString());
                    rec3.put("CONTADEBITO", ttMov.contaDebito);
                    rec3.put("CONTACREDITO", ttMov.contaCredito);
                    rec3.put("TIPOMOVIMENTO", "CTBCC");
                    rec3.put("CHAVE", ttMov.chave + "-CTBCC");
                    rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBCC");

                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBCC");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBCC", rec3);
                    //records.put(rec3);
                }


                if (ttMov.valorJuros > 0)  {
                    classificacaoFinal = classJur;
                    JSONObject jsJUR = new JSONObject(js.toString());
                    jsJUR.put("LOTE", ttMov.lote);
                    jsJUR.put("CNPJEMPRESA", cnpjEmpresa);
                    jsJUR.put("DOCUMENTO", ttMov.documento);
                    jsJUR.put("CODEMPRESA", ttMov.codEmpresa);
                    jsJUR.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsJUR.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsJUR.put("TIPOMOVIMENTO", "CTBJUR");
                    jsJUR.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsJUR.put("HISTORICO", ttMov.historicoJuros);
                    jsJUR.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsJUR.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsJUR.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsJUR.put("VALORJUROS", ttMov.valorJuros);
                    jsJUR.put("VALORMULTA", ttMov.valorMulta);
                    jsJUR.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsJUR.put("CENTROCUSTO", ttMov.centroCusto);
                    jsJUR.put("NATUREZACONTABIL", "D");
                    jsJUR.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsJUR.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsJUR.put("SERIE", ttMov.serie);
                    jsJUR.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsJUR.put("CHAVE", ttMov.chave + "-CTBJUR");
                    jsJUR.put("CLASSIFICACAO", classificacaoFinal);

                    jsJUR.put("COMPLEMENTO01", ttMov.complemento01);
                    jsJUR.put("COMPLEMENTO02", ttMov.complemento02);
                    jsJUR.put("COMPLEMENTO03", ttMov.complemento03);
                    jsJUR.put("COMPLEMENTO04", ttMov.complemento04);
                    jsJUR.put("COMPLEMENTO05", ttMov.complemento05);
                    jsJUR.put("COMPLEMENTO06", ttMov.complemento06);
                    jsJUR.put("COMPLEMENTO07", ttMov.complemento07);
                    jsJUR.put("COMPLEMENTO08", ttMov.complemento08);
                    jsJUR.put("COMPLEMENTO09", ttMov.complemento09);
                    jsJUR.put("COMPLEMENTO10", ttMov.complemento10);
                    jsJUR.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsJUR.put("CONTADEBITO",  ttMov.contaJuros);
                        jsJUR.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTACREDITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsJUR.put("CONTADEBITO",  "");
                        jsJUR.put("CONTACREDITO", ttMov.contaJuros);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsJUR.put("CONTADEBITO", ttMov.contaDebito);

                    }


                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJUR");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJUR", jsJUR);


                    //records.put(jsJUR);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsJUR.toString());
                        rec3.put("CONTADEBITO", ttMov.contaDebito);
                        rec3.put("CONTACREDITO", ttMov.contaCredito);
                        rec3.put("TIPOMOVIMENTO", "CTBJURCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBJURCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBJURCC");
                        recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBJURCC");
                        criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBJURCC", rec3);
                        // records.put(rec3);
                    }
                }
                if (ttMov.valorDesconto > 0)  {
                    classificacaoFinal = classDes;
                    JSONObject jsDES = new JSONObject(js.toString());
                    jsDES.put("LOTE", ttMov.lote);
                    jsDES.put("CNPJEMPRESA", cnpjEmpresa);
                    jsDES.put("DOCUMENTO", ttMov.documento);
                    jsDES.put("CODEMPRESA", ttMov.codEmpresa);
                    jsDES.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsDES.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsDES.put("TIPOMOVIMENTO", "CTBDES");
                    jsDES.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsDES.put("HISTORICO", ttMov.historicoDesconto);
                    jsDES.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsDES.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsDES.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsDES.put("VALORJUROS", ttMov.valorJuros);
                    jsDES.put("VALORMULTA", ttMov.valorMulta);
                    jsDES.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsDES.put("CENTROCUSTO", ttMov.centroCusto);
                    jsDES.put("NATUREZACONTABIL", "C");
                    jsDES.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsDES.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsDES.put("SERIE", ttMov.serie);
                    jsDES.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsDES.put("CHAVE", ttMov.chave + "-CTBDES");
                    jsDES.put("CLASSIFICACAO", classificacaoFinal);

                    jsDES.put("COMPLEMENTO01", ttMov.complemento01);
                    jsDES.put("COMPLEMENTO02", ttMov.complemento02);
                    jsDES.put("COMPLEMENTO03", ttMov.complemento03);
                    jsDES.put("COMPLEMENTO04", ttMov.complemento04);
                    jsDES.put("COMPLEMENTO05", ttMov.complemento05);
                    jsDES.put("COMPLEMENTO06", ttMov.complemento06);
                    jsDES.put("COMPLEMENTO07", ttMov.complemento07);
                    jsDES.put("COMPLEMENTO08", ttMov.complemento08);
                    jsDES.put("COMPLEMENTO09", ttMov.complemento09);
                    jsDES.put("COMPLEMENTO10", ttMov.complemento10);
                    jsDES.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsDES.put("CONTADEBITO", "");
                        jsDES.put("CONTACREDITO", ttMov.contaDesconto);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTADEBITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsDES.put("CONTADEBITO",  ttMov.contaDesconto);
                        jsDES.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsDES.put("CONTACREDITO", ttMov.contaDebito);

                    }


                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDES");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDES", jsDES);

                    //records.put(jsDES);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsDES.toString());
                        rec3.put("CONTADEBITO", ttMov.contaDebito);
                        rec3.put("CONTACREDITO", ttMov.contaCredito);
                        rec3.put("TIPOMOVIMENTO", "CTBDESCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBDESCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBDESCC");
                        recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBDESCC");
                        criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBDESCC", rec3);
                        // records.put(rec3);
                    }
                }
                if (ttMov.valorMulta > 0)  {
                    classificacaoFinal = classMul;
                    JSONObject jsMUL = new JSONObject(js.toString());
                    jsMUL.put("LOTE", ttMov.lote);
                    jsMUL.put("CNPJEMPRESA", cnpjEmpresa);
                    jsMUL.put("DOCUMENTO", ttMov.documento);
                    jsMUL.put("CODEMPRESA", ttMov.codEmpresa);
                    jsMUL.put("NOMEEMPRESA", ttMov.nomeEmpresa);
                    jsMUL.put("DATAMOVIMENTO", ttMov.dataMovimento);
                    jsMUL.put("TIPOMOVIMENTO", "CTBMUL");
                    jsMUL.put("TIPOLANCAMENTO", ttMov.tipoLancamento);
                    jsMUL.put("HISTORICO", ttMov.historicoMulta);
                    jsMUL.put("VALORDOCUMENTO", ttMov.valorDocumento);
                    jsMUL.put("VALORLIQUIDACAO", ttMov.valorDocumento);
                    jsMUL.put("VALORDESCONTO", ttMov.valorDesconto);
                    jsMUL.put("VALORJUROS", ttMov.valorJuros);
                    jsMUL.put("VALORMULTA", ttMov.valorMulta);
                    jsMUL.put("NOMEPORTADOR", ttMov.nomePortador);
                    jsMUL.put("CENTROCUSTO", ttMov.centroCusto);
                    jsMUL.put("NATUREZACONTABIL", "D");
                    jsMUL.put("NOMEORIGEM", ttMov.nomeOrigem);
                    jsMUL.put("CPFCNPJ", ttMov.cpfCnpj);
                    jsMUL.put("SERIE", ttMov.serie);
                    jsMUL.put("STATUSMOVIMENTO", ttMov.statusMovimento);
                    jsMUL.put("CHAVE", ttMov.chave + "-CTBMUL");
                    jsMUL.put("CLASSIFICACAO", classificacaoFinal);

                    jsMUL.put("COMPLEMENTO01", ttMov.complemento01);
                    jsMUL.put("COMPLEMENTO02", ttMov.complemento02);
                    jsMUL.put("COMPLEMENTO03", ttMov.complemento03);
                    jsMUL.put("COMPLEMENTO04", ttMov.complemento04);
                    jsMUL.put("COMPLEMENTO05", ttMov.complemento05);
                    jsMUL.put("COMPLEMENTO06", ttMov.complemento06);
                    jsMUL.put("COMPLEMENTO07", ttMov.complemento07);
                    jsMUL.put("COMPLEMENTO08", ttMov.complemento08);
                    jsMUL.put("COMPLEMENTO09", ttMov.complemento09);
                    jsMUL.put("COMPLEMENTO10", ttMov.complemento10);
                    jsMUL.put("NOMEARQUIVO", ttMov.nomeArquivo);

                    if(tipoLancamento.contains("PAGAR")){
                        jsMUL.put("CONTADEBITO",  ttMov.contaMulta);
                        jsMUL.put("CONTACREDITO", "");
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTACREDITO", ttMov.contaCredito);

                    }
                    if(tipoLancamento.contains("RECEBER")){
                        jsMUL.put("CONTADEBITO",  "");
                        jsMUL.put("CONTACREDITO", ttMov.contaMulta);
                        if (roteiroCRMPrincipal.optString("Forcar_Partida_Dobrada").toUpperCase().equals("TRUE")) jsMUL.put("CONTADEBITO", ttMov.contaDebito);

                    }


                    recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMUL");
                    criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMUL", jsMUL);

                    //records.put(jsMUL);
                    if (!ttMov.centroCusto.equals("")) {
                        JSONObject rec3 = new JSONObject(jsMUL.toString());
                        rec3.put("CONTADEBITO", ttMov.contaDebito);
                        rec3.put("CONTACREDITO", ttMov.contaCredito);
                        rec3.put("TIPOMOVIMENTO", "CTBMULCC");
                        rec3.put("CHAVE", ttMov.chave + "-CTBMULCC");
                        rec3.put("CLASSIFICACAO", classificacaoFinal + "-CTBMULCC");
                        recordF = findMovimentoPorChave(dbIOCont, ttMov.chave+ "-CTBMULCC");
                        criaMovimento(dbIOCont, recordF, ttMov.chave+ "-CTBMULCC", rec3);
                        //records.put(rec3);
                    }
                }
            }
        }
        // JWR adicionamos essa parte para mandar uma mensagem personalizada para o cliente, no caso de apenas nao conseguir ler os movimentos e nao um erro de layout
        // vamos descomentar depois de adicionar todas as validacoes sobre fiscal e afins
        // logger.logInfo("contRegra -> " + contRegra + " | temFiltro -> " + temFiltro);

        /*if (roteiroCRMPrincipal.optString("contabilidade").toUpperCase().contains("MICALI")) */

		/*if (contRegra > 0 && nomeArquivo.toUpperCase().contains("_ID") && nomeArquivo.toUpperCase().contains(".PDF")) {
			// logger.logInfo("ENTROU 34");
			putStatus(dirName, "03--Etapa 3 de 4 LEUCONVERSORANTIGO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
		}*/

        //#2304-002843. Melhorias no feedback
        if (contRegra < 0 && nomeArquivo.toUpperCase().contains("_ID") && !nomeArquivo.toUpperCase().startsWith("OK_DEPARACONTA") && ((roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE") && !temFiscal && !mantemArquivo.equals("SIM")) || !roteiroCRM.optString("Integracao_fiscal").toUpperCase().contains("TRUE"))) {
            if (temFiltro) {
                if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEUFILTRO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
                if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEUFILTRO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
            } else if (temIgnorar) {
                if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEUIGNORAR- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
                if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEUIGNORAR- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
            } else if (temLinhas) {
                if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEULINHAS- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
                if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEULINHAS- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
            } else if (temOFX || retornaPadroes.equals("break")) {
                if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEU- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
                if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEU- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
            } else {
                if (mantemArquivo.equals("SIM") && !tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEUMOVIMENTO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
                if (!mantemArquivo.equals("SIM") && tipoProduto.equals("OIC_PACOTE")) {
                    putStatus(dirName, "03--Etapa 3 de 4 NAOLEUMOVIMENTO- " + String.valueOf(contRegra) + "--" + tipoLancamento + ".status", jStatus, logger);
                }
            }

        }

        if (apagaExtrato) {
            try {

                if (dbIOCont != null) {
                    dbIOCont.closeConnection();
                    dbIOCont = null;
                }
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_EXTRATO")
                        .where("CODEMPRESA=?")
                        .param(codEmpresa)
                        .execute();
            } catch (Exception e) {
                logger.logInfo("PROBLEMA APAGAR EXTRATO " + e.getMessage());
            }
        }

        // Apaga as Contas T quando sao informadas pelos contadore no Conf. REfras
        if (apagaContaT) {
            try {

                if (dbIOCont != null) {
                    dbIOCont.closeConnection();
                    dbIOCont = null;
                }
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                if (tipoLancamento.contains("PAGAR")) {
                    dbIOCont.delete("IO_PESSOA")
                            .where("CODEMPRESA = ? 	AND CONTACTBFOR LIKE '%T%'")
                            .param(codEmpresa)
                            .execute();
                }
                else {
                    dbIOCont.delete("IO_PESSOA")
                            .where("CODEMPRESA = ? 	AND CONTACTBCLI LIKE '%T%'")
                            .param(codEmpresa)
                            .execute();
                }
            } catch (Exception e) {
                logger.logInfo("PROBLEMA APAGAR IO_PESSOA  " + e.getMessage());
            }
        }
        // resumo comparativo com razao
        String idLoteResumo = "";
        if (comparaRazao) {
            if(loteEtapaTres.toUpperCase().contains("_ID") && fornecedorUnico.contains("EXIBE_RESUMO")){
                idLoteResumo = "_ID"+cutString(loteEtapaTres.toUpperCase(), "_ID", "_")+"_";
            }
            String filenameRazao = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_APOS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +idLoteResumo+".csv";
            FileWriter writerRazao = new FileWriter(filenameRazao);
            // writerRazao.writeNewFile(ResumoTxt.toString());
            writerRazao.writeNewFile(ResumoTxt.toString());
        }

        if(logs){
            String filenameLogs = RouteEngine.INOUT_HOME + "/contabil/" + roteiroCRMPrincipal.optString("contabilidade") + "/Arquivos/RESUMO_LOGS_IMPORTACAO_" + tipoLancamento + "_" + nomeEmpresa + "_"+codEmpresa +idLoteResumo+".csv";
            FileWriter writerLogs = new FileWriter(filenameLogs);
            // writerRazao.writeNewFile(ResumoTxt.toString());
            writerLogs.writeNewFile(logsTxt.toString());
        }

        //-------------------------------------------------------------------------------------
        // GERA ARQUIVO COM CONTAS NAO ENCONTRADAS
        //-------------------------------------------------------------------------------------
        String filename = backupDirName + "/ARQUIVO_APOIO_" + tipoLancamento + ".csv";
        // Cria o arquivo de DE-PARA FORNECEDOR
        FileWriter writer = new FileWriter(filename);
        writer.writeNewFile(txtDePara.toString());

        Iterator ite = mapaLote.keySet().iterator();
        while (ite.hasNext()) {
            String key = (String)ite.next();
            ttLote ttLot = (ttLote)mapaLote.get(key);
            // =======================================================================================
            // * elimina da tabela IO_MOVIMENTO os movimentos deste LOTE para evitar sujeira na base *
            // =======================================================================================
            lote = ttLot.lote;


            ultimoJS = new JSONObject();
            ultimoJS.put("LOTE", lote);
            ultimoJS.put("DOCUMENTO", "");
            ultimoJS.put("CODEMPRESA", codEmpresa);
            ultimoJS.put("NOMEEMPRESA", nomeEmpresa);
            ultimoJS.put("DATAMOVIMENTO", "");
            ultimoJS.put("TIPOMOVIMENTO", "");
            ultimoJS.put("TIPOLANCAMENTO", "");
            ultimoJS.put("CONTADEBITO", "LOTE_ENCERRADO");
            ultimoJS.put("CONTACREDITO", "LOTE_ENCERRADO");
            ultimoJS.put("HISTORICO", ttLot.tipoPlanilha);
            ultimoJS.put("VALORLIQUIDACAO", 0);
            ultimoJS.put("VALORDOCUMENTO", 0);
            ultimoJS.put("VALORDESCONTO", 0);
            ultimoJS.put("VALORJUROS", 0);
            ultimoJS.put("VALORMULTA", 0);
            ultimoJS.put("NOMEPORTADOR", "");
            ultimoJS.put("CENTROCUSTO", "");
            ultimoJS.put("NATUREZACONTABIL", "");
            ultimoJS.put("NOMEORIGEM", "");
            ultimoJS.put("CPFCNPJ", "");
            ultimoJS.put("SERIE", "");
            ultimoJS.put("STATUSMOVIMENTO", 0);
            ultimoJS.put("CHAVE","LOTE_ENCERRADO " + lote );
            ultimoJS.put("CLASSIFICACAO", "LOTE_ENCERRADO");
            ultimoJS.put("STATUSMOVIMENTO", 1);
            records.put(ultimoJS);
            // Resumo Planilha
            try {
                String dirName1 = dirName.substring(0, dirName.lastIndexOf("/"))+"/DePara/";
                File file = new File(dirName1);
                try {
                    String diretorio = dirName1;
                    File file2 = new File(diretorio);
                    File[] files = file2.listFiles();
                    if (FileUtil.dirHasFiles(diretorio)) {
                        for (File fl: files) {
                            if (fl.isFile()){
                                if(fl.getName().contains(lote) && fl.getName().toLowerCase().endsWith(".csv") && !fl.getName().startsWith("OK_") ){
                                    // ELIMINA ARQUIVO IMPORTADO
                                    file = new File(dirName1);
                                    if (file.exists()){
                                        FileUtil.deleteFile(dirName1+fl.getName());
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception ee) {
                    logger.logError(ee);
                }
            }catch (Exception e) {
                logger.logError(e);
            }
        }
    } catch (Exception ee) {
        logger.logError("EndpointA: ", ee);
    } finally {

        try {
            if (dbIOCont != null) {
                dbIOCont.closeConnection();
            }
            if (dbIODepara != null) {
                //dbIODepara.closeConnection();
            }
        } catch (Exception ee) {}
    }
    return records;
}

class ttLote {
    public String lote;
    public String tipoPlanilha;
    public ttLote(){}
    public ttLote(ttLote tt){
        lote=tt.lote;
        tipoPlanilha=tt.tipoPlanilha;
    }
}

class ttArquivo {
    public String arquivo;
    public String abas;
    public ttArquivo(){}
    public ttArquivo(ttArquivo tt){
        arquivo=tt.arquivo;
        abas=tt.abas;
    }
}

class ttDocumento {
    public String documento;
    public double valorDocumento;
    public ttDocumento(){}
    public ttDocumento(ttDocumento ttD){
        documento = ttD.documento;
        valorDocumento  = ttD.valorDocumento;
    }
}
class ttJuros {
    public String documento;
    public double valorJur;
    public int valorLido;
    public ttJuros(){}
    public ttJuros(ttJuros ttJ){
        documento = ttJ.documento;
        valorLido = ttJ.valorLido;
        valorJur  = ttJ.valorJur;
    }
}

class ttDesconto {
    public String documento;
    public double valorDesc;
    public int valorLido;
    public ttDesconto(){}
    public ttDesconto(ttDesconto ttD){
        documento  = ttD.documento;
        valorDesc  = ttD.valorDesc;
        valorLido  = ttD.valorLido;
    }
}

class ttPlano {
    public String contaContabil;
    public String descricaoPlano;
    public String contaAnalitica;
    public ttPlano(){}
    public ttPlano(ttPlano ttP){
        contaContabil = ttP.contaContabil;
        descricaoPlano = ttP.descricaoPlano;
        contaAnalitica = ttP.contaAnalitica;
    }
}

class ttFornecedor {
    public String nomeOrigem;
    public String contaMovimento;
    public ttFornecedor(){}
    public ttFornecedor(ttFornecedor ttF){
        nomeOrigem 	 = ttF.nomeOrigem;
        contaMovimento = ttF.contaMovimento;
    }
}



public String verificaSeparador(String separadorCsv, String dirName, String extensao, SysProperties props, InoutLogger logger) {

    try {
        if(extensao.contains("CSV")) {

            FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
            fileLoader2.loadFiles();
            for (MemoryFile memFile: fileLoader2.getMemFiles()) {
                if(memFile.getFilename().startsWith("OK_DeParaConta__")) importaDePara(memFile, dirName, extensao, logger, props);
                if (memFile.getFilename().toUpperCase().contains("CSV")) {
                    while (memFile.hasNextLine()) {
                        try {
                            String line = memFile.nextLine();
                            line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
                            if (line.length() < 10) return separadorCsv;
                            String [] fields1 = line.split(";");
                            String [] fields2 = line.split(",");
                            if(fields1.length > 0 && fields2.length > 0){
                                if(fields1.length < fields2.length) {
                                    //logger.logInfo("entrando separator");
                                    separadorCsv = ","; break; }
                                if(fields1.length > fields2.length) { separadorCsv = ";"; break; }
                            }
                        }
                        catch(Exception xx) {}
                    }
                    return separadorCsv;
                }
            }
        }



        if(extensao.contains("TXT")) {
            FilesLoader fileLoader2 = new FilesLoader(dirName, extensao, null, true, logger);
            fileLoader2.loadFiles();
            for (MemoryFile memFile: fileLoader2.getMemFiles()) {
                if (memFile.getFilename().toUpperCase().endsWith(".TXT")) {
                    while (memFile.hasNextLine()) {
                        try {
                            String line = memFile.nextLine();
                            line = StringUtil.removeSpecialCharsToUC(line).replaceAll("\"","");
                            if (line.length() < 10) return separadorCsv;
                            String [] fields1 = line.split(";");
                            String [] fields2 = line.split(",");
                            String [] fields3 = line.split("\t");
                            if(fields1.length > 0 && fields2.length > 0){
                                if(fields1.length > fields2.length && fields1.length > fields3.length) { separadorCsv = ";"; break; }
                                if(fields2.length > fields1.length && fields2.length > fields3.length) { separadorCsv = ","; break; }
                                if(fields3.length > fields1.length && fields3.length > fields2.length) { separadorCsv = "\t"; break; }
                            }
                        }
                        catch(Exception xx) {}
                    }
                    return separadorCsv;
                }
            }
        }

    }
    catch(Exception xx) {}

    return separadorCsv;


}

public void criaMovimento(DataBase dbIO, JSONObject recordRec, String chave, JSONObject js) {
    if (recordRec != null)  {
        try {
            updateMovimento(dbIO, js);
			/*if (js.has("idRoteiro")) {
				try {
					updateArquivo(dbIO, js);
				} catch(Exception ex){}
			}*/
        } catch (Exception eUpdateMovimento) {
            logger.logError("EndpointB: Erro ao Atualizar Movimento", eUpdateMovimento);
        }
    } else {
        try {
            insertMovimento(dbIO, js);
			/*if (js.has("idRoteiro")) {
				try {
					insertArquivo(dbIO, js);
				} catch(Exception ex) {}
			}*/

        } catch (Exception eInsertMovimento) {
            logger.logError("EndpointB: Erro ao fazer insert no Movimento", eInsertMovimento);
        }
    }
}

public int getIndiceRoteiro(String nomeCampo, JSONObject roteiroIndice) {
    int validaCampo = -1;
    try {
        if (!roteiroIndice.optString(nomeCampo).equals("")) {
            try {
                validaCampo = Integer.parseInt(roteiroIndice.optString(nomeCampo).replaceAll("@","").trim());
            }
            catch (Exception xx) { validaCampo = -1;}
        }
    }
    catch (Exception xx) {validaCampo = -1;}
    return  validaCampo;
}


public HashMap geralancamentoExtraInterno(HashMap mapaVariavel, ttMovimentoPadrao ttMov2, String chave,boolean gerarApenasValorDocumento, int complemento , String textoComplemento, String classificacao){
    ttMovimentoPadrao ttMov4      = (ttMovimentoPadrao)mapaVariavel.get(chave);
    if (ttMov4 == null) {
        ttMov4 = new ttMovimentoPadrao(ttMov2);
        ttMov4.chave                    = chave;
        if(gerarApenasValorDocumento){
            ttMov4.valorDesconto            = 0;
            ttMov4.valorMulta               = 0;
            ttMov4.valorJuros               = 0;
        }
        ttMov4.classificacao            = classificacao;
        switch(complemento){
            case 1: ttMov4.complemento01 = textoComplemento; break;
            case 2: ttMov4.complemento02 = textoComplemento; break;
            case 3: ttMov4.complemento03 = textoComplemento; break;
            case 4: ttMov4.complemento04 = textoComplemento; break;
            case 5: ttMov4.complemento05 = textoComplemento; break;
            case 6: ttMov4.complemento06 = textoComplemento; break;
        }
        mapaVariavel.put(chave, ttMov4);
    }
    return mapaVariavel;
}


public JSONObject getAlternativeDataInt (JSONObject objIn, MemoryFile memFile) throws Exception {
    JSONObject response	= new JSONObject();
    String validar		= objIn.optString("validar");
    String [] validaArr	= validar.split(";");
    String changeIt		= "";
    String changeText	= "nomeOrigem;documento;complemento01;complemento02;complemento03;complemento04;complemento05;complemento06;complemento07;complemento08;complemento09;complemento10;nomePortador";
    String changeDate	= "dataMovimento";
    String changeValue	= "valorDocumento;valorPagamento;valorJuros;valorDesconto;valorMulta";

    for (String parameter : validaArr) {
        response.put(parameter,	"");

        // String indiceAux = "";
        String indiceAux = getColunaAlternativa(parameter,	objIn);
        if (!indiceAux.equals("")) {
            if (changeDate.contains(parameter)) {
                if(!indiceAux.contains(";")) {
                    try {
                        int iAux = Integer.parseInt(indiceAux);
                        String dataStrAux = memFile.getStringFieldRemoveEspCharsUpper(iAux);
                        if (!dataStrAux.equals("")) {
                            String dataMovAux = getCampoDate(dataStrAux);
                            if (dataMovAux.contains("/")) {
                                String dataAlternativa = getCampoDate(dataStrAux);
                                response.put(parameter,	dataAlternativa);
                                response.put("dataLote", dataAlternativa);
                                changeIt = changeIt+";"+parameter;

                                //feito pra que as proximas iteracoes ja tenham o dado atualizado
                                objIn.put(parameter, dataAlternativa);
                            }
                        }
                    } catch (Exception ee) { logger.logInfo("Erro getColunaAlternativa 'Data'! "+ee.getMessage()); }
                }

            } else if (changeValue.contains(parameter)) {
                if(!indiceAux.contains(";")) {
                    try {
                        int iAux  = Integer.parseInt(indiceAux);
                        if(iAux >=0){
                            double valorAlternativo = memFile.getDoubleField(iAux);
                            response.put(parameter, valorAlternativo);
                            changeIt = changeIt+";"+parameter;

                            //feito pra que as proximas iteracoes ja tenham o dado atualizado
                            objIn.put(parameter, valorAlternativo);
                        }
                    } catch (Exception ee) { logger.logInfo("Erro getColunaAlternativa 'Valor'! "+ee.getMessage()); }

                }
                if (indiceAux.contains(";")) {
                    double valorAlternativo = 0;
                    try {
                        String [] izis = indiceAux.split(";");
                        for (String k : izis) {
                            int iAux = Integer.parseInt(k);
                            valorAlternativo = valorAlternativo + memFile.getDoubleField(iAux);
                        }
                    } catch (Exception ee) {logger.logInfo("Erro getColunaAlternativa 'Valor 02'! "+ee.getMessage());  }

                    if (valorAlternativo != 0) {
                        response.put(parameter, valorAlternativo);
                        changeIt = changeIt+";"+parameter;

                        //feito pra que as proximas iteracoes ja tenham o dado atualizado
                        objIn.put(parameter, valorAlternativo);
                    }
                }
            } else if (changeText.contains(parameter)) {
                if(!indiceAux.contains(";")) {
                    try {
                        int iAux = Integer.parseInt(indiceAux);
                        String textoAlternativo = memFile.getStringFieldRemoveEspCharsUpper(iAux);
                        response.put(parameter, textoAlternativo);
                        changeIt = changeIt+";"+parameter;

                        //feito pra que as proximas iteracoes ja tenham o dado atualizado
                        objIn.put(parameter, textoAlternativo);
                    } catch (Exception ee) { logger.logInfo("Erro getColunaAlternativa 'Texto'! "+ee.getMessage()); }
                }
                if (indiceAux.contains(";")) {
                    String textoAlternativo = "";

                    try {
                        String [] izis = indiceAux.split(";");
                        for (String k : izis) {
                            int iAux	 = Integer.parseInt(k);
                            textoAlternativo = textoAlternativo+" - "+memFile.getStringFieldRemoveEspCharsUpper(iAux).trim();
                            textoAlternativo = textoAlternativo.trim();
                        }
                        if (textoAlternativo.startsWith("-")) textoAlternativo = cutString(textoAlternativo, 1).trim();

                    } catch (Exception ee) {logger.logInfo("Erro getColunaAlternativa 'Texto 02'! "+ee.getMessage());  }

                    if (!textoAlternativo.equals("")) {
                        response.put(parameter, textoAlternativo);
                        changeIt = changeIt+";"+parameter;

                        //feito pra que as proximas iteracoes ja tenham o dado atualizado
                        objIn.put(parameter, textoAlternativo);
                    }
                }
            } else {
                response.put(parameter, "");
                objIn.put(parameter, "");
            }
        }
    }

    response.put("changeIt",	changeIt);
    return response;
}




public String getRefatoraCampo(String valorOriginal, String conteudoRoteiro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String line            = objHistorico.optString("line");
    String cabecalhoRegra  = objHistorico.optString("cabecalhoRegra");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    nomeArquivo = StringUtil.removeSpecialCharsToUC(nomeArquivo);


    if (conteudoRoteiro.toUpperCase().contains("#CABECALHO"))      return cabecalhoRegra;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO01"))  return complemento01;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO02"))  return complemento02;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO03"))  return complemento03;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO04"))  return complemento04;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO05"))  return complemento05;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO06"))  return complemento06;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO07"))  return complemento07;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO08"))  return complemento08;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO09"))  return complemento09;
    if (conteudoRoteiro.toUpperCase().contains("#COMPLEMENTO10"))  return complemento10;
    if (conteudoRoteiro.toUpperCase().contains("#TIPOPLANILHA"))   return tipoPlanilha;
    if (conteudoRoteiro.toUpperCase().contains("#NOMEDOARQUIVO"))   return nomeArquivo;
    if (conteudoRoteiro.toUpperCase().contains("#LINE"))  		   return line;
    if (conteudoRoteiro.toUpperCase().contains("#NUMEROABA"))      return ("ABA:" + String.valueOf(numeroAba));


    return valorOriginal;
}

public boolean buscaProtocoloConversor(String protocolo_id, LancamentosApi apiWeb, String tipoLancamento, String nomeArquivo, InoutLogger logger) throws Exception {
    logger.logInfo("ENTROU PROTOCOLOCONV");
    String diretorio = "C:/Conversor/Pdf";
    File file2 = new File(diretorio);

    File [] files = file2.listFiles();
    nomeArquivo = cutString(nomeArquivo, 0, ".pdf");

    if (FileUtil.dirHasFiles(diretorio)) {

        boolean notificouProtocolo = false;
        for (File fl: files) {
            // logger.logInfo("FL " + fl.getAbsolutePath()+ " | " + nomeArquivo + " | " + tipoLancamento);
            if (fl.getAbsolutePath().contains(tipoLancamento) && fl.getAbsolutePath().contains(nomeArquivo)) {
                // logger.logInfo("AQ FOI " + fl.getAbsolutePath());
                if ((fl.getAbsolutePath().contains("pagar") || fl.getAbsolutePath().contains("receber")) && fl.getAbsolutePath().contains("#") && fl.getAbsolutePath().toUpperCase().contains(".CSV") && fl.getAbsolutePath().contains("_ancora_") && fl.length() > 0){
                    String diretorioArquivoCsv = "C:/inout/contabil/";
                    String testeCsv = "";
                    String contabilidadeCsv = "";
                    String empresaCsv = "";

                    // logger.logInfo("ENTROU NOS PDFFFFFF");

                    if (fl.getAbsolutePath().contains("pagar_")) {
                        try {
                            testeCsv = cutString(fl.getAbsolutePath(), "pagar_");
                            contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
                            empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
                            empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
                            diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/APagar";
                        } catch (Exception e) {
                            logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
                        }
                    }
                    else if (fl.getAbsolutePath().contains("receber_")) {
                        try {
                            testeCsv = cutString(fl.getAbsolutePath(), "receber_");
                            contabilidadeCsv = testeCsv.substring(0, testeCsv.indexOf("_"));
                            empresaCsv = testeCsv.substring(testeCsv.indexOf("_")+1);
                            empresaCsv = empresaCsv.substring(0, empresaCsv.indexOf("_ancora_"));
                            diretorioArquivoCsv += contabilidadeCsv + "/" + empresaCsv + "/AReceber";
                        } catch (Exception e) {
                            logger.logInfo("ERRO AO CORTAR ARQUIVO " + e.getMessage());
                        }
                    }
                    String arquivoDeployStr = "";
                    try {
                        // mantivemos o ancora no nome do arquivo para saber que foi convertido e usado nos extratos
                        arquivoDeployStr = fl.getAbsolutePath().substring(fl.getAbsolutePath().indexOf("_ancora_"));
                    } catch (Exception e) {
                        logger.logInfo("NAOCRIOURODACONVERSOR " + e.getMessage());
                    }
                    logger.logInfo("DIRETORIOS " + diretorioArquivoCsv + " | " + arquivoDeployStr);
                    if (!arquivoDeployStr.equals("")) {
                        File arquivoDeploy  = new File(diretorioArquivoCsv + "/" + arquivoDeployStr);
                        //logger.logInfo("COPIOUARQUIVO " + arquivoDeploy.getName());
                        FileUtil.copyFolder(fl, arquivoDeploy);

                        try {
                            FileUtil.deleteFile(fl);
                        } catch (Exception XX) {}
                    }
                    if (!notificouProtocolo) {
                        notificouProtocolo = true;
                        String atualizaStatus = atualizaStatusProtocoloOic(apiWeb, fl, "0", "Estamos convertendo os PDFs.",  logger);
                    }
                    continue;
                }
            }
        }
        if (notificouProtocolo) return true;
    }
    return false;
}

public String atualizaStatusProtocoloOic(LancamentosApi apiWeb, File fl,  String statusProtocolo, String mensagem, InoutLogger logger) throws Exception {

    try {
        String protocolo_id = cutString(fl.getName().toUpperCase(), fl.getName().toUpperCase().lastIndexOf("_ID")+3, "_");
        if (fl.getName().toUpperCase().contains("OUD_ID"))  protocolo_id = cutString(fl.getName().toUpperCase(), "OUD_ID", "_");
        if (fl.getName().toUpperCase().contains("OUD__ID")) protocolo_id = cutString(fl.getName().toUpperCase(), "OUD__ID", "_");
        // roda requisicao para atualizar o satus do protocolo
        JSONObject bodyProtocolo = new JSONObject();
        bodyProtocolo.put("status", statusProtocolo).put("mensagem", mensagem);
        String atualizaStatus = apiWeb.atualizaStatusProtocolo("https://integrador-contabil.herokuapp.com", protocolo_id, bodyProtocolo);
        return atualizaStatus;
    } catch (Exception xx) {
        logger.logInfo(" Erro ao Atualizar Status " + xx);
        return "";
    }

}






































//## CODIGO GERADO A PARTIR DAS REGRAS NO SALESFORCE ##
//## NAO ALTERAR DAQUI ATE O FINAL DO SCRIPT!!!!     ##
public JSONObject getRoteiro() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2023-0876957");
    js.put("idRoteiro", "a0A6R000018MjWq");
    js.put("idEmpresa", "a0q6R000009Fa9cQAC");
    js.put("idContabilidade", "a096R0000361GKE");
    js.put("CnpjContabilidade", "35.471.669/0001-46");
    js.put("CnpjEmpresa", "12.024.938/0001-20");
    js.put("fornecedor", "1");
    js.put("dataMovimento", "0");
    js.put("portador", "#COLUNA A CONTEM(CONTA :) COLUNA B");
    js.put("documentoNF", "2");
    js.put("valorDocumento", "4");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "");
    js.put("complemento01", "");
    js.put("complemento02", "");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("valorAlternativo", "");
    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("dataFake", "");

    js.put("Abas_Especificas", "");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Bsacontabilidade");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "TRUE");
    js.put("cruzaExtrato", "FALSE");
    js.put("empresa", "Unidasrepresentacoese");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "DOMINIO");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "FALSE");
    js.put("ValidaFornecedorFiscal", "0");
    js.put("Integracao_contratos", "false");
    js.put("Usa_Filial_Questor", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "PRINCIPAL");
    //planilhassearch
    js.put("Planilhas_Padroes", "Extrato_Bradesco2_PDF;Extrato_Safra_PDF;Extrato_Nubank_PDF;FaturaCartaoCredito_Sicoob_PDF;Extrato_ContaSimples_PDF;Cartao_Ticket_Excel;Extrato_SicoobConvenios_PDF;FrancesinhaItau_PDF;Extrato_ApliBB_PDF;Extrato_BTG_Excel;Extrato_Sicoob_Excel;FrancesinhagrupoAilos_PDF;Francesinha_BB_PDF;Extrato_Itau_Excel;Cartao_IFood_Excel;FrancesinhaSicredi_Excel;Extrato_Unicred_PDF;Extrato_Unicred2_PDF;Extrato_Btg_PDF;Extrato_Stone_PDF;Extrato_Banrisul_PDF;Extrato_Next_Excel;Extrato_BB_TXT;Extrato_Sicoob;Extrato_Sicoob_Txt;Extrato_Itau_Txt;Extrato_BB_PDF;Extrato_Sicoob_PDF;Extrato_Sicredi_PDF;Extrato_ITAU_PDF;Extrato_BB_Excel;Extrato_ItauConsolidado_PDF;Extrato_Credisan_Excel;Extrato_Credisan_PDF;Extrato_Cresol_PDF;Extrato_Nordeste_PDF;FrancesinhaSicredi_PDF;Extrato_Santander_PDF;Extrato_CEF_PDF;Extrato_Cef_Html,FaturaCartaoCredito_Bradesco_PDF;FaturaCartaoCredito_Sicoob_PDF;FaturaCartaoCredito_BB_PDF;FaturaCartaoCredito_Banrisul_PDF;Extrato_Tribanco2_PDF");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");

    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("especiaisBaixaFiscal", "");
    js.put("Arredonda", "false");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");
    js.put("Coluna_Valor_Duplicata_Dominio", "9");
    js.put("delimitadorDoArquivo", "");
    js.put("agrupaArquivos", "FALSE");

    js.put("X001_ROB", "");
    js.put("X002_Despesas", "");
    js.put("X003_Despesas_Detalhe", "");
    js.put("X004_Geracao_Caixa_Mes", "");
    js.put("X005_Geracao_Caixa_Acumulado", "");
    js.put("X006_Despesas_sobre_Faturamento", "");
    js.put("X007_Lucro", "");
    js.put("X008_Deducoes_Receitas", "");
    js.put("X009_CMV", "");
    js.put("X010_CPV", "");
    js.put("X011_CSP", "");
    js.put("X012_Indicador", "");
    js.put("X013_Indicador", "");
    js.put("X014_Indicador", "");
    js.put("X015_Indicador", "");
    js.put("X016_Indicador", "");
    js.put("X017_Indicador", "");
    js.put("X018_Indicador", "");
    js.put("X019_Indicador", "");
    js.put("X020_Indicador", "");
    js.put("X021_Indicador", "");

    js.put("X015_Label", "");
    js.put("X016_Label", "");
    js.put("X017_Label", "");
    js.put("X018_Label", "");
    js.put("X019_Label", "");
    js.put("X020_Label", "");
    js.put("Email_Logo", "");
    js.put("BuscaCnpjCRM", "FALSE");
    js.put("Idioma", "PORTUGUES");
    js.put("Ordem_dos_Indicadores", "7, 12, 21, 1, 8, 9, 10, 11, 13, 2, 3, 6, 4, 5, 15, 16, 18, 14, 17, 19, 20");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Gera_LOG", "false");
    js.put("Gera_LOG_PARAMETROS", "");

    return js;
}

public JSONObject getRoteiroZZPADRAOOTTIMIZZAPAG1() {
    JSONObject js = new JSONObject();
    js.put("codigo", "ROT-2021-1016997");
    js.put("idRoteiro", "a0A6R000018MjWq");
    js.put("idEmpresa", "a0q6R000007KGdjQAG");
    js.put("idContabilidade", "a091500001BVcOf");
    js.put("CnpjContabilidade", "10.000.000/0000-0");
    js.put("CnpjEmpresa", "1");
    js.put("usarComplementoVencimento", "NAO USAR");
    js.put("usarComplementoParcela", "NAO USAR");
    js.put("fornecedor", "2");
    js.put("dataMovimento", "0");
    js.put("portador", "6");
    js.put("documentoNF", "1");
    js.put("valorDocumento", "4");
    js.put("valorJuros", "");
    js.put("valorDesconto", "");
    js.put("valorMulta", "");
    js.put("valorPagamento", "5");
    js.put("complemento01", "3");
    js.put("complemento02", "7");
    js.put("complemento03", "");
    js.put("complemento04", "");
    js.put("complemento05", "");
    js.put("complemento06", "");
    js.put("centroCusto", "");
    js.put("dataFake", "");

    js.put("cpfCnpj", "");
    js.put("gravaCnpjMovimento", "FALSE");
    js.put("cnpjSomenteNumeros", "FALSE");
    js.put("valorAlternativo", "");
    js.put("Abas_Especificas", "0");
    js.put("classificaFornec", "");
    js.put("classificaPlano", "");
    js.put("contaFixaCredito", "");
    js.put("contaFixaDebito", "");
    js.put("contaFixaDesconto", "");
    js.put("contaFixaJuros", "");
    js.put("contaFixaMulta", "");
    js.put("contabilidade", "Bsacontabilidade");
    js.put("Contabilizacao_Atraves_Fornecedor", "FALSE");
    js.put("Conta_Fixa_Cruzamento_Extrato", "");
    js.put("Cruza_Extrato_com_Extrato", "false");
    js.put("cruzaExtrato", "false");
    js.put("empresa", "Unidasrepresentacoese");
    js.put("empresaDir", "");
    js.put("erpContabilidade", "QUESTOR");
    js.put("Forcar_Partida_Dobrada", "FALSE");
    js.put("Forcar_Partida_Simples", "FALSE");
    js.put("Realizar_Busca_Plano", "FALSE");
    js.put("geraGerencial", "FALSE");
    js.put("Integracao_fiscal", "false");
    js.put("Integracao_contratos", "false");
    js.put("Ler_Planilha_Pelo_Cabecalho", "FALSE");
    js.put("movimentoPortador", "PARTIDA DOBRADA");
    js.put("naoZerarValores", "FALSE");
    js.put("lerAposPrincipal", "");
    js.put("campoLinhaPrincipal", "VALOR DOCUMENTO");
    js.put("nomeRelatorioRef", "OFICIAL PLANILHA PADRAO OTTIMIZZA");
    js.put("Planilhas_Padroes", "");
    js.put("statusRoteiro", "EM DESENVOLVIMENTO");
    js.put("tipoArquivo", ".XLSX - EXCEL");
    js.put("tipoIntegracao", "CONTAS PAGAS");
    js.put("fazerShrink", "FALSE");
    js.put("colunaShrink", "0");
    js.put("dupliNaoEncontContabil", "FALSE");
    js.put("Conta_Dupl_Contabil", "");
    js.put("Aloca_Checknum", "FALSE");
    js.put("Rotulo_Complemento_01", "");
    js.put("Rotulo_Complemento_02", "");
    js.put("Rotulo_Complemento_03", "");
    js.put("Rotulo_Complemento_04", "");
    js.put("Rotulo_Complemento_05", "");
    js.put("Colunas_de_Valores_Extras", "");
    js.put("Rotulos_Para_Valores_Extras", "");
    js.put("Colunas_de_Portadores_Extras", "");

    return js;
}

public String getTipoPlanilha(String line, String tipoPlanilha, String nomeArquivo, JSONObject jDadosObj) {
    boolean achouTipo = true;
    String [] campos1 = "DATA PAGAMENTO;DOCUMENTO;FORNECEDOR;DETALHES DO PAGAMENTO".split(";");
    for (int x=0;x<campos1.length;x++) {
        if (!line.contains(campos1[x])) {
            achouTipo = false; break; }
    }
    if (achouTipo) return "ZZPADRAOOTTIMIZZAPAG1";
    achouTipo = true;
    return tipoPlanilha;
}
public String getConta(String nomeOrigem, String documento, String nomePortador,
                       String complemento01, String complemento02, String complemento03,
                       String nomeArquivo, String codCentroCusto) {
    String conta = "";
    String complemento04 = "";
    String complemento05 = "";
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getConta09(String contaMovimento, String nomeOrigem, String documento,
                         String nomePortador, String complemento01, String complemento02,
                         String complemento03, String nomeArquivo, String codCentroCusto) {
    String conta = contaMovimento;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }

    return "111";
}
public String getContaMovimento2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMovimento6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getRegraContaMovimento(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }

    return "111";
}
public String getContaPortador(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }

    return "222";
}
public String getContaPortador2(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador3(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador4(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador5(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaPortador6(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMovimento;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros2(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros3(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros4(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros5(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaJuros6(String contaJuros, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaJuros;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaDesconto(String contaDesconto, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaDesconto;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public String getContaMulta(String contaMulta, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("cntaJuros");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String conta = contaMulta;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return conta;
}
public boolean getTratarComoExtrato(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoExtrato = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoExtrato;
}
public boolean getTratarComoDesconto(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoDesconto = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoDesconto;
}
public boolean getTratarComoJuros(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarComoJuros = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarComoJuros;
}
public boolean getTratarLinhaIgnorar(String line, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    boolean tratarIgnoraLinha = false;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return tratarIgnoraLinha;
}
public String getTratarValorAlternativo(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoAlternativo  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoAlternativo;
}
public String getTratarComoDiv(String documento, String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoDiv  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoDiv;
}
public String getCodigoClassificacao(String nomeOrigem, JSONObject objHistorico){
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String documento   = objHistorico.optString("documento");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    String classificacao  = objHistorico.optString("classificacao");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoClassificacao  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoClassificacao;
}
public String getModificaData(JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String tipoLancamento  = objHistorico.optString("tipoLancamento");
    String documento    = objHistorico.optString("documento");
    String nomeOrigem    = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    String retornoData  = "";

    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornoData;
}
public String getCampoFiscal(String parametro, JSONObject objHistorico) {
    String especie         = objHistorico.optString("especie");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String returnaCodigo  = "";

    return returnaCodigo.trim();
}
public int getContadorCabecalho(int contador, String line) {
    return contador;
}
public double getValorPrincipal(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorPrincipal = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return valorPrincipal;
}
public String getHistorico(String conta, String histParam, String tipoLancamento, String nomeOrigem, String documento,
                           String nomePortador, String complemento01, String complemento02, String complemento03,
                           String nomeArquivo, String codCentroCusto) {
    String historico = "";
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;

    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("951-INATIVO"))  historico = "PARCELAMENTO DE ICMS - PARCELA 9"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("530-INATIVO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADIANTAMENTO DEPOSITANTES"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CADASTRO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA TRANSF PARA DESCONTO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO SEGURO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO SERVICO COBRANCA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB GIRO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHEQUE"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESTIMO"))  historico = "PAGAMENTO DE EMPRESTIMOS" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG TRIB MUNICIPAL"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG CONCESSIONARIA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA MASTERCARD MAESTRO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO PACOTE SERVICOS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAQUE"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED INTERNET"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO CARTAO CREDITO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO CARTAO CREDITO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO CARTAO CREDITO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG TRIB COD BARRAS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURO VIDA EMPRESA FLEX"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIDENCIA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIDENCIA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSORCIO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLET"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCI"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADIANT") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSITANTE"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TITULO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROTESTO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROTESTO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROTESTO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPOSTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GNRE"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEVOLVIDO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEVOLVIDO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MULTAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSITO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRESTAMISTA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ULTRASUCAR"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAP") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORTIZACAO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANCO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGUROS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EFETIVADO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMISSAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUCROENERGIA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CERTIFIX"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGIANE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTINS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("12024938000120"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TD"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAMUEL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLORIANO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GABRIELA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESEL"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GABRIELA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESEL"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GABRIELA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESEL"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIDER") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONG"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PERPECAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONQUISTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESEL"))  historico = "DEPOSITO CFE EXTRATO" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("I") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("O") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("F") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESTIMOS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTE"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIANCA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("I") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("O") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("F"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESARIAL"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("QR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CODE"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEMAIS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESAS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MASTERCARD") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAESTRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ACOUGUE"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ORGAOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOV"))  historico = "PARCELAMENTO DE ICMS - PARCELA 9"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMITIDO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ORGAOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOV"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ORGAOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOV"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TITULARIDADE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("USINA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PANORAMA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TITULARIDADE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES"))  historico = "VALOR REF. TRANSF. ENTRE CONTAS N/ DATA"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("USINA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BELA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VISTA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS"))  historico = "EMPRESTIMO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLAUDIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPO"))  historico = "EMPRESTIMO PARA OUTRA EMPRESA" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("I") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VAREJISTA"))  historico = "EMPRESTIMO"  + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANHEIRAS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FAV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANEX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXPORTACAO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONCEDIDO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SACADO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANHEIRAS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALBER") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCOS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERBANK"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PABLO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTINS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRUNO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BARBOSA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACK"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENOVADORA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PNEUS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("P") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("H") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("T"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACK"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENOVADORA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PNEUS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("P") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("H") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("T"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACK"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("P") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("H") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("T"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENOVADORA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PNEUS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FAM"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DONORTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EQUIPADORA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COM") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOL*CLINICA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WEVERTHON") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALMEIDA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HINOVA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAYMENTS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GEREMIAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PNEUS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALBER") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCOS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAPECARIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIDER"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLAUDIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTES"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("V") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("M") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("H") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AFFONSO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARVALHO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSTRUAGRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZOARILDO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOARES"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PNEUS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAROLAINE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ISABELA"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEANDRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHAVES"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NADIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAGE"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LANCAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CUSTAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORARIAS"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MESMATIT") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMBUSTIVEL"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORIL"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NILSON") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERGIO"))  historico = "" + " " + nomeOrigem + " " + ""  + " " + ""  + " " + ""  + " " + "" + "";


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra2(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra3(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoRegra4(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento").replaceAll("INVERTE","");
    String contaPortador   = objHistorico.optString("contaPortador").replaceAll("INVERTE","");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getRegraHistoricoRegra(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("951-INATIVO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 951-INATIVO, HISTORICO = PARCELAMENTO DE ICMS - PARCELA 9";

    if (StringUtil.removeSpecialCharsToUC(contaMovimento).equals("530-INATIVO"))  historico = "HISTORICO POR REGRA = Quando Conta Normal - Movimento - igual a 530-INATIVO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("JUROS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem JUROS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TARIFA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADIANTAMENTO DEPOSITANTES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem ADIANTAMENTO DEPOSITANTES, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CADASTRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem CADASTRO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA TRANSF PARA DESCONTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem COBRANCA TRANSF PARA DESCONTO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO SEGURO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGTO SEGURO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO SERVICO COBRANCA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEBITO SERVICO COBRANCA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB GIRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem BB GIRO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHEQUE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem CHEQUE, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESTIMO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem EMPRESTIMO, HISTORICO = PAGAMENTO DE EMPRESTIMOS Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG TRIB MUNICIPAL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem SISPAG TRIB MUNICIPAL, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TAR, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG CONCESSIONARIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem SISPAG CONCESSIONARIA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA MASTERCARD MAESTRO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem COMPRA MASTERCARD MAESTRO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO PACOTE SERVICOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEBITO PACOTE SERVICOS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAQUE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem SAQUE, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TED INTERNET"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TED INTERNET, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO CARTAO CREDITO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGTO CARTAO CREDITO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO CARTAO CREDITO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGTO CARTAO CREDITO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO CARTAO CREDITO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGTO CARTAO CREDITO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG TRIB COD BARRAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem SISPAG TRIB COD BARRAS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURO VIDA EMPRESA FLEX"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem SEGURO VIDA EMPRESA FLEX, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIDENCIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PREVIDENCIA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PREVIDENCIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PREVIDENCIA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGTO, Fornecedor/Cliente contem DESCONTO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TARIFA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TARIFA, Fornecedor/Cliente contem PIX, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSORCIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem BB, Fornecedor/Cliente contem CONSORCIO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLET"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem SISPAG, Fornecedor/Cliente contem BOLET, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCI"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem SISPAG, Fornecedor/Cliente contem TRANSFERENCI, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ADIANT") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEPOSITANTE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem ADIANT, Fornecedor/Cliente contem DEPOSITANTE, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IOF"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem IOF, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TITULO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TITULO, Fornecedor/Cliente contem COBRANCA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem APLICACAO, Fornecedor/Cliente contem BB, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROTESTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem CARTORIO, Fornecedor/Cliente contem PROTESTO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem APLICACAO, Fornecedor/Cliente contem BB, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROTESTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem CARTORIO, Fornecedor/Cliente contem PROTESTO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("APLICACAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BB"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem APLICACAO, Fornecedor/Cliente contem BB, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PROTESTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem CARTORIO, Fornecedor/Cliente contem PROTESTO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("IMPOSTOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GNRE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem IMPOSTOS, Fornecedor/Cliente contem GNRE, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEVOLVIDO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DESCONTADO, Fornecedor/Cliente contem DEVOLVIDO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESCONTADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEVOLVIDO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DESCONTADO, Fornecedor/Cliente contem DEVOLVIDO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MULTAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSITO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem MULTAS, Fornecedor/Cliente contem TRANSITO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGURO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PRESTAMISTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem SEGURO, Fornecedor/Cliente contem PRESTAMISTA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ULTRASUCAR"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ULTRASUCAR, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAP") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GIRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AMORTIZACAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem CAP, Fornecedor/Cliente contem GIRO, Fornecedor/Cliente contem AMORTIZACAO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANCO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem SISPAG, Fornecedor/Cliente contem BOLETO, Fornecedor/Cliente contem BANCO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SEGUROS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem CONV, Fornecedor/Cliente contem SEGUROS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EFETIVADO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem COMPE, Fornecedor/Cliente contem EFETIVADO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMISSAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUCROENERGIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEBITO, Fornecedor/Cliente contem EMISSAO, Fornecedor/Cliente contem SUCROENERGIA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CERTIFIX"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem TRANSF, Fornecedor/Cliente contem CERTIFIX, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REGIANE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTINS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem REGIANE, Fornecedor/Cliente contem MARTINS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("12024938000120"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem 12024938000120, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TD"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem TD, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAMUEL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FLORIANO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TRANSF, Fornecedor/Cliente contem SAMUEL, Fornecedor/Cliente contem FLORIANO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PECAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem AUTO, Fornecedor/Cliente contem PECAS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GABRIELA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem GABRIELA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem BOLETO, Fornecedor/Cliente contem TECNOLOGIA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESEL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem BOLETO, Fornecedor/Cliente contem DIESEL, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GABRIELA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem GABRIELA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem BOLETO, Fornecedor/Cliente contem TECNOLOGIA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESEL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem BOLETO, Fornecedor/Cliente contem DIESEL, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GABRIELA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem GABRIELA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TECNOLOGIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem BOLETO, Fornecedor/Cliente contem TECNOLOGIA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESEL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem BOLETO, Fornecedor/Cliente contem DIESEL, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIDER") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TRANSF, Fornecedor/Cliente contem LIDER, Fornecedor/Cliente contem SUL, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALUGUEL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONG"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TRANSF, Fornecedor/Cliente contem ALUGUEL, Fornecedor/Cliente contem CONG, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TRANSF, Fornecedor/Cliente contem AUTO, Fornecedor/Cliente contem POSTO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PERPECAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONQUISTA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DIESEL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem PERPECAS, Fornecedor/Cliente contem CONQUISTA, Fornecedor/Cliente contem DIESEL, HISTORICO = DEPOSITO CFE EXTRATO Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("I") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("O") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("F") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESTIMOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem I, Fornecedor/Cliente contem O, Fornecedor/Cliente contem F, Fornecedor/Cliente contem EMPRESTIMOS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem PAULO, Fornecedor/Cliente contem ROBERTO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem RV, Fornecedor/Cliente contem TRANSPORTE, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALIANCA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LOGISTICA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ALIANCA, Fornecedor/Cliente contem LOGISTICA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COBRANCA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("I") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("O") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("F"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem COBRANCA, Fornecedor/Cliente contem I, Fornecedor/Cliente contem O, Fornecedor/Cliente contem F, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CREDITO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESARIAL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGTO, Fornecedor/Cliente contem CARTAO, Fornecedor/Cliente contem CREDITO, Fornecedor/Cliente contem EMPRESARIAL, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SISPAG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("QR") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CODE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem SISPAG, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem QR, Fornecedor/Cliente contem CODE, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEMAIS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMPRESAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem CONV, Fornecedor/Cliente contem DEMAIS, Fornecedor/Cliente contem EMPRESAS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MASTERCARD") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MAESTRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ACOUGUE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem COMPRA, Fornecedor/Cliente contem MASTERCARD, Fornecedor/Cliente contem MAESTRO, Fornecedor/Cliente contem ACOUGUE, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ORGAOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOV"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem CONV, Fornecedor/Cliente contem ORGAOS, Fornecedor/Cliente contem GOV, HISTORICO = PARCELAMENTO DE ICMS - PARCELA 9";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EMITIDO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("OUTRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem EMITIDO, Fornecedor/Cliente contem OUTRA, Fornecedor/Cliente contem PAGAMENTO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ORGAOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOV"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem CONV, Fornecedor/Cliente contem ORGAOS, Fornecedor/Cliente contem GOV, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ORGAOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GOV"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem CONV, Fornecedor/Cliente contem ORGAOS, Fornecedor/Cliente contem GOV, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TITULARIDADE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("USINA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PANORAMA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEBITO, Fornecedor/Cliente contem TITULARIDADE, Fornecedor/Cliente contem USINA, Fornecedor/Cliente contem PANORAMA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TITULARIDADE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEBITO, Fornecedor/Cliente contem TITULARIDADE, Fornecedor/Cliente contem UNIDAS, Fornecedor/Cliente contem REPRESENTACOES, HISTORICO = VALOR REF. TRANSF. ENTRE CONTAS N/ DATA";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEBITO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("USINA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BELA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VISTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEBITO, Fornecedor/Cliente contem USINA, Fornecedor/Cliente contem BELA, Fornecedor/Cliente contem VISTA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem TRANSF, Fornecedor/Cliente contem COMERCIAL, Fornecedor/Cliente contem MINAS, HISTORICO = EMPRESTIMO";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLAUDIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERNANDES") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem CLAUDIO, Fornecedor/Cliente contem FERNANDES, Fornecedor/Cliente contem FERREIRA, Fornecedor/Cliente contem TRANSPO, HISTORICO = EMPRESTIMO PARA OUTRA EMPRESA Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("J") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("I") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FERREIRA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TRANSF, Fornecedor/Cliente contem J, Fornecedor/Cliente contem I, Fornecedor/Cliente contem FERREIRA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MG") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("VAREJISTA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TRANSF, Fornecedor/Cliente contem MG, Fornecedor/Cliente contem COMERCIO, Fornecedor/Cliente contem VAREJISTA, HISTORICO = EMPRESTIMO";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANHEIRAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem TRANSF, Fornecedor/Cliente contem MINAS, Fornecedor/Cliente contem BANHEIRAS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FAV") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CANEX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EXPORTACAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem FAV, Fornecedor/Cliente contem CANEX, Fornecedor/Cliente contem EXPORTACAO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DESC") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONCEDIDO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SACADO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem DESC, Fornecedor/Cliente contem CONCEDIDO, Fornecedor/Cliente contem SACADO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BANHEIRAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem MINAS, Fornecedor/Cliente contem BANHEIRAS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALBER") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ALBER, Fornecedor/Cliente contem MARCOS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("INTERBANK"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem LS, Fornecedor/Cliente contem INTERBANK, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PABLO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARTINS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem PABLO, Fornecedor/Cliente contem MARTINS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem UNIDAS, Fornecedor/Cliente contem REPRESENTACOES, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BRUNO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BARBOSA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem BRUNO, Fornecedor/Cliente contem DA, Fornecedor/Cliente contem SILVA, Fornecedor/Cliente contem BARBOSA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACK"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem SUL, Fornecedor/Cliente contem PACK, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENOVADORA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PNEUS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem BOLETO, Fornecedor/Cliente contem RENOVADORA, Fornecedor/Cliente contem PNEUS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem COMERCIAL, Fornecedor/Cliente contem SUL, Fornecedor/Cliente contem MINAS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("P") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("H") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("T"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TRANSFERENCIA, Fornecedor/Cliente contem P, Fornecedor/Cliente contem H, Fornecedor/Cliente contem T, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem UNIDAS, Fornecedor/Cliente contem REPRESENTACOES, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem AUTO, Fornecedor/Cliente contem POSTO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACK"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem SUL, Fornecedor/Cliente contem PACK, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENOVADORA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PNEUS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem BOLETO, Fornecedor/Cliente contem RENOVADORA, Fornecedor/Cliente contem PNEUS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem COMERCIAL, Fornecedor/Cliente contem SUL, Fornecedor/Cliente contem MINAS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("P") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("H") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("T"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TRANSFERENCIA, Fornecedor/Cliente contem P, Fornecedor/Cliente contem H, Fornecedor/Cliente contem T, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem UNIDAS, Fornecedor/Cliente contem REPRESENTACOES, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem AUTO, Fornecedor/Cliente contem POSTO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIAL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MINAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem COMERCIAL, Fornecedor/Cliente contem SUL, Fornecedor/Cliente contem MINAS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SUL") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PACK"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem SUL, Fornecedor/Cliente contem PACK, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("P") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("H") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("T"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TRANSFERENCIA, Fornecedor/Cliente contem P, Fornecedor/Cliente contem H, Fornecedor/Cliente contem T, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("RENOVADORA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PNEUS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem BOLETO, Fornecedor/Cliente contem RENOVADORA, Fornecedor/Cliente contem PNEUS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem UNIDAS, Fornecedor/Cliente contem REPRESENTACOES, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem AUTO, Fornecedor/Cliente contem POSTO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ANA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARIA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem ANA, Fornecedor/Cliente contem MARIA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AUTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("FAM"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem AUTO, Fornecedor/Cliente contem POSTO, Fornecedor/Cliente contem FAM, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DONORTE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("EQUIPADORA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem BOLETO, Fornecedor/Cliente contem DONORTE, Fornecedor/Cliente contem EQUIPADORA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMPRA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COM") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTAO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOL*CLINICA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem COMPRA, Fornecedor/Cliente contem COM, Fornecedor/Cliente contem CARTAO, Fornecedor/Cliente contem SOL*CLINICA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARLOS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SILVA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem CARLOS, Fornecedor/Cliente contem SILVA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("WEVERTHON") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALMEIDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem WEVERTHON, Fornecedor/Cliente contem ALMEIDA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("HINOVA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAYMENTS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem BOLETO, Fornecedor/Cliente contem HINOVA, Fornecedor/Cliente contem PAYMENTS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("GEREMIAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PNEUS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem GEREMIAS, Fornecedor/Cliente contem COMERCIO, Fornecedor/Cliente contem PNEUS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ALBER") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MARCOS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem ALBER, Fornecedor/Cliente contem MARCOS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TAPECARIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LIDER"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem TAPECARIA, Fornecedor/Cliente contem LIDER, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CLAUDIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSPORTES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TRANSFERENCIA, Fornecedor/Cliente contem ENVIADA, Fornecedor/Cliente contem CLAUDIO, Fornecedor/Cliente contem TRANSPORTES, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("V") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("M") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("H") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LTDA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem V, Fornecedor/Cliente contem M, Fornecedor/Cliente contem H, Fornecedor/Cliente contem LTDA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("AFFONSO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARVALHO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem AFFONSO, Fornecedor/Cliente contem CARVALHO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONSTRUAGRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SAO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem CONSTRUAGRO, Fornecedor/Cliente contem SAO, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSFERENCIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ZOARILDO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SOARES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TRANSFERENCIA, Fornecedor/Cliente contem ENVIADA, Fornecedor/Cliente contem ZOARILDO, Fornecedor/Cliente contem SOARES, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAULO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ROBERTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem PAULO, Fornecedor/Cliente contem ROBERTO, Fornecedor/Cliente contem DE, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PAGAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("BOLETO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PNEUS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PAGAMENTO, Fornecedor/Cliente contem BOLETO, Fornecedor/Cliente contem COMERCIO, Fornecedor/Cliente contem PNEUS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CAROLAINE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ISABELA"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem CAROLAINE, Fornecedor/Cliente contem ISABELA, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("PIX") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ENVIADO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LEANDRO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CHAVES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem PIX, Fornecedor/Cliente contem ENVIADO, Fornecedor/Cliente contem LEANDRO, Fornecedor/Cliente contem CHAVES, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CONTAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NADIA") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LAGE"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem TRANSF, Fornecedor/Cliente contem CONTAS, Fornecedor/Cliente contem NADIA, Fornecedor/Cliente contem LAGE, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("LANCAMENTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DE") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CUSTAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("CARTORARIAS"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem LANCAMENTO, Fornecedor/Cliente contem DE, Fornecedor/Cliente contem CUSTAS, Fornecedor/Cliente contem CARTORARIAS, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("MESMATIT") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("UNIDAS") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("REPRESENTACOES"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem MESMATIT, Fornecedor/Cliente contem UNIDAS, Fornecedor/Cliente contem REPRESENTACOES, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMERCIO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("COMBUSTIVEL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem TRANSF, Fornecedor/Cliente contem COMERCIO, Fornecedor/Cliente contem COMBUSTIVEL, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("POSTO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("ESTORIL"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem TRANSF, Fornecedor/Cliente contem POSTO, Fornecedor/Cliente contem ESTORIL, HISTORICO = Fornecedor/Cliente";

    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("EXTRATO") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("DEB") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("TRANSF") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("NILSON") && StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("SERGIO"))  historico = "HISTORICO POR REGRA = Quando Tipo Planilha contem EXTRATO, Fornecedor/Cliente contem DEB, Fornecedor/Cliente contem TRANSF, Fornecedor/Cliente contem NILSON, Fornecedor/Cliente contem SERGIO, HISTORICO = Fornecedor/Cliente";


    return historico.replaceAll("  "," ").trim();
}
public int getParcelaBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public int getTotalParcelas(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    int parcelaBase = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return parcelaBase;
}
public String getMesAnoBase(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    String mesAnoBase = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return mesAnoBase;
}
public double getTaxaTarifa(String contaMovimento, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    double valorTaxaTarifa = 0;
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
            StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
            StringUtil.removeSpecialCharsToUC(complemento03).contains("VISTA")) {
        valorTaxaTarifa = 0.0319;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_STELO") &&
            StringUtil.removeSpecialCharsToUC(complemento05).contains("TARIFA") &&
            StringUtil.removeSpecialCharsToUC(complemento03).contains("CREDITO") &&
            StringUtil.removeSpecialCharsToUC(complemento03).contains("PARC")) {
        valorTaxaTarifa = 0.0379;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_VRALIMENTACAO1")) {
        valorTaxaTarifa = 0.063;
    }
    if (StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_SENFF")) {
        valorTaxaTarifa = 0.04;
    }
    return valorTaxaTarifa;
}
public String getHistoricoPortador(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoJuros(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoDesconto(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getHistoricoMulta(String conta, String histParam, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String historico = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");
    String parcelaAtual    = objHistorico.optString("parcelaAtual");
    String parcelaAtualeFinal  = objHistorico.optString("parcelaAtualeFinal");
    String trimestreMesAnoAnterior = objHistorico.optString("trimestreMesAnoAnterior");
    String trimestreMesAnoAtual = objHistorico.optString("trimestreMesAnoAtual");
    String descricaoPlanoMovimento  = objHistorico.optString("descricaoPlanoMovimento");
    String descricaoPlanoPortador  = objHistorico.optString("descricaoPlanoPortador");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!histParam.equals("")) historico = histParam;

    if(histParam.equals("") && tipoLancamento.contains("PAGAR"))    historico = "PAGAMENTO " + documento + " " + nomeOrigem;
    if(histParam.equals("") && tipoLancamento.contains("RECEBER"))  historico = "RECEBIMENTO " + documento + " " + nomeOrigem;


    return historico.replaceAll("  "," ").trim();
}
public String getCentroCusto(String CentroCusto, String nomeOrigem, String documento, String nomePortador,
                             String complemento01, String complemento02, String complemento03,
                             String nomeArquivo, String codCentroCusto) {
    String retornaCentroCusto = CentroCusto;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaCentroCusto;
}
public String getTabelaContabil(String TabelaContabil, String nomeOrigem, String documento, String nomePortador,
                                String complemento01, String complemento02, String complemento03, String complemento04, String complemento05,
                                String nomeArquivo) {
    String retornaTabelaContabil = TabelaContabil;
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaTabelaContabil;
}
public String getParticipante(String participante, String nomeOrigem, String documento, String nomePortador,
                              String complemento01, String complemento02, String complemento03, String complemento04, String complemento05,
                              String nomeArquivo) {
    String retornaParticipantePai = participante;
    complemento04 = "";
    complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaParticipantePai;
}
public String getFilial(String codFilial, String nomeOrigem, String documento, String nomePortador,
                        String complemento01, String complemento02, String complemento03,
                        String nomeArquivo, String codCentroCusto, String filial) {
    String retornaFilial = codFilial;
    String complemento04 = "";
    String complemento05 = "";
    String complemento06 = "";
    if (complemento03.contains("C6#")) { complemento06 = complemento03.substring(complemento03.indexOf("C6#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C6#")).trim(); }
    if (complemento03.contains("C5#")) { complemento05 = complemento03.substring(complemento03.indexOf("C5#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C5#")).trim(); }
    if (complemento03.contains("C4#")) { complemento04 = complemento03.substring(complemento03.indexOf("C4#")+3).trim(); complemento03 = complemento03.substring(0,complemento03.indexOf("C4#")).trim(); }
    return retornaFilial;
}
public String getRegrasParaAcumular(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String getRegrasParaAcumularPortador(String loteParam, String chave, String tipoLancamento, String documento, String nomeOrigem, JSONObject objHistorico) {
    String lote = "";
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String tipoPlanilha     = objHistorico.optString("tipoPlanilha");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");
    if(!chave.equals("")) lote = chave;



    return lote.trim();
}
public String  getReplaceTermos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = "";
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaMovimento  = objHistorico.optString("contaMovimento");
    String contaPortador   = objHistorico.optString("contaPortador");
    String nomePortador    = objHistorico.optString("nomePortador");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return parametro2.trim();
}
public String  getReplaceTermosAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double numeroAba  		= objHistorico.optDouble("numeroAba");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String  getLimpaCampos(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");

    return lote.trim();
}
public String  getLimpaCamposAvancado(String parametro, String parametro2, JSONObject objHistorico) {
    String lote = parametro2;
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String documento       = objHistorico.optString("documento");
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String nomePortador    = objHistorico.optString("nomePortador");
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String mesAnoAnterior  = objHistorico.optString("mesAnoAnterior");
    String mesAno2Anterior = objHistorico.optString("mesAno2Anterior");
    String mesAnoAtual     = objHistorico.optString("mesAnoAtual");
    String contaDebito     = objHistorico.optString("contaDebito");
    String contaCredito    = objHistorico.optString("contaCredito");
    String contaJuros      = objHistorico.optString("contaJuros");
    String contaDesconto   = objHistorico.optString("contaDesconto");
    String contaMulta      = objHistorico.optString("contaMulta");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    double valorDocumento  = objHistorico.optDouble("valorDocumento");
    double valorDesconto   = objHistorico.optDouble("valorDesconto");
    double valorJuros      = objHistorico.optDouble("valorJuros");

    return lote.trim();
}
public String getTipoGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String graph = "";

    //feito para manter o legado sem problemas, sera sobreposto por regras! ;-)
    //tipos esperados: Column, Multiple_Column_Stacked, Multiple_Columns, Line, Multiple_Lines, Pie, Donut
    //Card refere-se ao Lucro/Prejuizo
    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    if (complemento01.startsWith("07") || complemento01.startsWith("12")) graph = "CardChart";

    if (complemento01.startsWith("01") || complemento01.startsWith("02") || complemento01.startsWith("04") ||
            complemento01.startsWith("08") || complemento01.startsWith("09") || complemento01.startsWith("10") ||
            complemento01.startsWith("11") || complemento01.startsWith("21"))  graph = "ColumnChart";

    if (complemento01.startsWith("15") || complemento01.startsWith("16") || complemento01.startsWith("17"))
        graph = "ColumnChartStacked";

    if (complemento01.startsWith("05") || complemento01.startsWith("06")) graph = "LineChart";

    if (complemento01.startsWith("18") || complemento01.startsWith("19") || complemento01.startsWith("20"))
        graph = "LineChartMultiple";

    if (complemento01.startsWith("03") || complemento01.startsWith("13") || complemento01.startsWith("14"))
        graph = "DonutChart";

    return graph;
}
public String getSimboloValor(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String simboloValor = "R$";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return simboloValor.replaceAll("Nenhum","");
}
public String getSeriesGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String series = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return series;
}
public String getTituloGrafico(JSONObject objGrafico) {
    String complemento01   = objGrafico.optString("complemento01");
    String complemento02   = objGrafico.optString("complemento02");
    String complemento03   = objGrafico.optString("complemento03");
    String complemento04   = objGrafico.optString("complemento04");
    String complemento05   = objGrafico.optString("complemento05");
    String complemento06   = objGrafico.optString("complemento06");
    String Titulo_Grafico = "";

    complemento01 = StringUtil.removeSpecialCharsToUC(complemento01);

    return Titulo_Grafico;
}
public String getColunaAlternativa(String parametro, JSONObject objHistorico) {
    String complemento01   = objHistorico.optString("complemento01");
    String complemento02   = objHistorico.optString("complemento02");
    String complemento03   = objHistorico.optString("complemento03");
    String complemento04   = objHistorico.optString("complemento04");
    String complemento05   = objHistorico.optString("complemento05");
    String complemento06   = objHistorico.optString("complemento06");
    String complemento07   = objHistorico.optString("complemento07");
    String complemento08   = objHistorico.optString("complemento08");
    String complemento09   = objHistorico.optString("complemento09");
    String complemento10   = objHistorico.optString("complemento10");
    String nomeArquivo     = objHistorico.optString("nomeArquivo").toUpperCase();
    String dataMovimento   = objHistorico.optString("dataMovimento");
    String nomePortador    = objHistorico.optString("nomePortador");
    String tipoPlanilha    = objHistorico.optString("tipoPlanilha");
    String documento       = objHistorico.optString("documento");
    String nomeOrigem      = objHistorico.optString("nomeOrigem");
    String codCentroCusto  = objHistorico.optString("centroCusto");
    int    numeroAba       = objHistorico.optInt("numeroAba");

    String retornaColunas  = "";

    if (parametro.equals("valorDocumento") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL1") &&
            !StringUtil.removeSpecialCharsToUC(nomeOrigem).contains("XPTO")) {
        retornaColunas = "4;5";
    }
    if (parametro.equals("valorDocumento") && StringUtil.removeSpecialCharsToUC(tipoPlanilha).contains("CARTAO_IFOOD_EXCEL2") &&
            StringUtil.removeSpecialCharsToUC(complemento03).contains("MERCHANT")) {
        retornaColunas = "13";
    }
    return retornaColunas.replace(",",";").trim();
}

/*#############################################@ EXTRATO-BOTICARIO-EXCEL @##############################################*/
public HashMap readBoticario(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ ERP-SISPLAN @##############################################*/
public HashMap readSisplanSistemaPlanejamento(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {




    return mapaVariavel;
}


//####################################################################################################################################
//									EXTRATO UNICRED2 PDF
//####################################################################################################################################






public boolean readExtratoSafraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String auxData     		 = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoExtrato = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = true;
    boolean naoLeMaisMeio = false;
    boolean ignoraComplemento = false;




    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idataMovimento	= -1;
    int idocumento      = -1;
    int inomePortador	= -1;
    int inomeOrigem		= -1;
    int ivalorDocumento	= -1;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");



    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("AUXDATA"))   auxData   = jDados.optString("AUXDATA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
    if(quantityOf(linha, "|") > quantityOf(linha, ";"))
        memFile.setFieldSeparator("\\|");
    else
        memFile.setFieldSeparator(";");
    if(jDados.has("TIPOEXTRATO"))   tipoExtrato   = jDados.optString("TIPOEXTRATO");

    List arquivoCompleto = memFile.getLines();

    while (memFile.hasNextLine()) {
        //logger.logInfo("LOG DATA - " + memFile.getStringFieldRemoveEspCharsUpper(0));

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if(line.startsWith("CENTRAL DE SUPORTE")){
                naoLeMais = true;
            }

            if(line.startsWith("DATA")){
                naoLeMais = false;
                continue;
            }

            if (line.startsWith("LANCAMENTOS")) continue;

            if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO TOTAL")) continue;

            // Douglas ## foi feito continue para o Chamado #2309-014662 pois o layout é o mesmo do padrão e o padrão não ignorava o saldo conta corrente
            if (line.contains("SALDO CONTA CORRENTE")) continue;

            if (naoLeMais) continue;

            if(tipoExtrato.equals("001")){
                idataMovimento	= 0;
                idocumento      = 2;
                inomeOrigem		= 1;
                nomePortador = nomePortador.replaceAll("\\?","");
                complemento01 = nomePortador.replaceAll("\\?","");
                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1);
                if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
                if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

                if(naoLeMais){
                    continue;
                }

                if (memFile.getFieldsSize() == 5) {
                    // logger.logInfo("LINHAR " + line);
                    ignoraComplemento = true;
                }



                if (ignoraComplemento && memFile.getFieldsSize() == 1) {
                    ignoraComplemento = false;
                    continue;
                }
                // logger.logInfo("FIELDSIZE -> "+memFile.getFieldsSize()+" - LIN -> "+line);
                if (((memFile.getFieldsSize() <= 2 && !ignoraComplemento) || memFile.getFieldsSize() == 2) && (!memFile.getStringFieldRemoveEspCharsUpper(0).contains("-") && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("/"))) {
                    // logger.logInfo("TESTANDINHO O LINE " + memFile.getStringFieldRemoveEspCharsUpper(0).trim().replaceAll("-", "") + " | " + line);
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("HISTORICO")
                                .where("CHAVE = ? ")
                                .param(nomeOrigem + " " + memFile.getStringFieldRemoveEspCharsUpper(0))
                                .param(chaveExtrato)
                                .execute();
                    }
                    catch (Exception sqlUpdateException) {}
                    ignoraComplemento = false;
                    continue;
                }

                    /*if((memFile.getFieldsSize() == 1 || memFile.getFieldsSize() == 2) && !memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("[.-/]", "").replaceAll("\\s+", "").matches("\\d+")){
                        logger.logInfo("LOG COMPLEMENTO - " + memFile.getStringFieldRemoveEspCharsUpper(0).trim().replaceAll("[.-/]", "").replaceAll("\\s+", ""));

                        try {
                            dbIOCont.update("IO_EXTRATO")
                            .fields("HISTORICO")
                            .where("CHAVE = ? ")
                            .param(nomeOrigem + " " + memFile.getStringFieldRemoveEspCharsUpper(0))
                            .param(chaveExtrato)
                            .execute();
                        }
                        catch (Exception sqlUpdateException) {}

                        continue;
                    }*/

                String proximaLinha = (String) arquivoCompleto.get(memFile.getCurrentIndex() + 1);
                proximaLinha = proximaLinha.toUpperCase();

                String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");

                dataString = dataString + "/" + auxData;

                if (dataString.equals("000000")) continue;

                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { continue; }
                    }
                }
                if (dataMovimento.equals("")) {
                    try {
                        Date dt = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        // logger.logInfo("LOG TRY 2");
                    } catch (Exception dt1) {

                    }
                }
                // logger.logInfo("DATA " + dataMovimento);
                if (dataMovimento.equals("")) continue;

                valorDocumento  = 0;
                debitoCreditoAux = "";
                String strValor = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1);
                complemento02 = "";

                if(memFile.getFieldsSize() >= 3){
                    try{valorDocumento = Math.abs(memFile.getDoubleField(memFile.getFieldsSize()-1));}
                    catch (Exception vlrd) { valorDocumento = 0; }
                }
                logger.logInfo("DATA -> " + dataMovimento + " - VAZIN -> " + valorDocumento);
                if (valorDocumento == 0) continue;

                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
                documento = "";
                if(memFile.getFieldsSize() >= 3){
                    documento = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-2).replaceAll("\"","").trim();
                    if(!documento.matches("[0-9]+")){
                        documento = "";
                    }
                }

                //logger.logInfo("Teste1: "+memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem+1));
                //logger.logInfo("DebAux: "+memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem+1).contains(strValor));

                if(!memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem+1).equals(documento) && !memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem+1).contains(strValor)){ //Testar
                    complemento02 = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem+1);
                }
                //logger.logInfo("Linha: "+line);
                //logger.logInfo("PL: "+proximaLinha.replaceAll("-", "").replaceAll("/", ""));

                if(proximaLinha.replaceAll("-", "").replaceAll("/", "").replaceAll(";", "").replaceAll("\\.", "").replaceAll(" ", "").matches("[0-9]*")){
                    complemento02 = complemento02 + " " + proximaLinha.replaceAll(";", "");
                }

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            }

            if(tipoExtrato.equals("002")){
                idataMovimento	 = 0;
                ivalorDocumento  = memFile.getFieldsSize() - 1;
                idocumento       = memFile.getFieldsSize() - 2;
                inomeOrigem		 = 1;
                nomePortador     = nomePortador.replaceAll("\\?","");
                complemento01    = nomePortador.replaceAll("\\?","");
                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1);

                if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
                if (debitoCreditoAux.contains("-")) debitoCredito  = "EXTRATO-DEBITO";

                // if((line.contains("DATA") && line.contains("TIPO")) || line.contains("LANCAMENTOS")) continue;

                // if(!line.startsWith("CONTA CORRENTE"))dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(0) + "/" + auxData;

                if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("CONTA CORRENTE")) {
                    dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(0) + "/" + auxData;
                    // logger.logInfo("LOG ENTROU IF " + line);
                }
                //LOG CAMPOS
                // logger.logInfo(memFile.getStringFieldRemoveEspCharsUpper(0) + " I " +
                // memFile.getStringFieldRemoveEspCharsUpper(1) + " I " +
                // memFile.getStringFieldRemoveEspCharsUpper(2) + " I " +
                // memFile.getStringFieldRemoveEspCharsUpper(3) + " I " +
                // memFile.getStringFieldRemoveEspCharsUpper(4) + " I " +
                // memFile.getStringFieldRemoveEspCharsUpper(5));

                String dataString = dataMovimento;

                if (dataString.equals("000000")) {
                    // logger.logInfo("DATINHA " + dataString);
                    continue;
                }
                if(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).matches("[0-9/]+")){

                    try {
                        Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt1) {
                        try {
                            Date dt = memFile.getDateField(idataMovimento);
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) {
                            try {
                                Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                            } catch (Exception dt2) {/* continue;*/ }
                        }
                    }
                    if (dataMovimento.equals("")) {
                        try {
                            Date dt = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                            // logger.logInfo("LOG TRY 2");
                        } catch (Exception dt1) {

                        }
                    }
                }

                //logger.logInfo("DATINHAS " + dataMovimento);

                if (dataMovimento.equals("")) {
                    // logger.logInfo("CONTINUOU A DATA");
                    continue;
                }

                if (dataMovimento.length() != 10) continue;

                //Se começar com data move nomeOrigem um para direita   //2402-030445
                if (memFile.getStringFieldRemoveEspCharsUpper(0).trim().matches("^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\\d\\d")){
                    inomeOrigem++;
                }

                nomeOrigem     = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
                documento      = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }

                // logger.logInfo("VALZIN " + valorDocumento);

                if (valorDocumento  == 0) {
                    // logger.logInfo("CONTINUOU O VALOR");
                    continue;
                }
                complemento02  = documento;

                if(!documento.matches("[0-9]+")){
                    documento = "0";
                }
            }
            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, COMPLEMENTO03,VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(complemento03)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }

    }
    return true;
}


/*#############################################@ EXTRATO-CEF-HTML @##############################################*/
public boolean readExtratoCEFHtml(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    //logger.logInfo("Caixa HTML");

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataString        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    String tipoExtrato	 	 = "001";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais        = true;
    int cont	= 0; //Contador para definir os campos do extrato.

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if(line.contains("VIA INTERNET")) {
                tipoExtrato = "002";
            }

            if(tipoExtrato.equals("001")){

                //logger.logInfo("Line i caixa -> "+line);
                if(line.contains("<TD>") && line.contains("CONTA:")){//termo usado para validar a linha anterior a captura do nomePortador
                    naoLeMais = false;
                    continue;
                }
                //Sempre que encontrar este termo na class CSS, ser� inicado a leitura de um lan�amento e portando o contador � zerado
                if(line.contains("IMPRESSAO_SALVAR") && line.contains("<TR")){
                    naoLeMais = false;
                    cont = 0;
                    continue;
                }

                if(naoLeMais) continue;

                if(nomePortador.equals("")){
                    nomePortador = cutString(line, line.lastIndexOf("|")-1, "</TD>");
                    naoLeMais = true;
                    continue;
                }
                if(line.contains("<TD")) cont++;

                if(cont == 1){//contador 1 � para ler a Data.
                    dataString = cutString(line, line.indexOf(">"), "</TD>");
                    if (!dataString.equals("")) {
                        String dataMovimentoAux	  = getCampoDate(dataString);
                        if (dataMovimentoAux.contains("/")) {
                            dataMovimento     = getCampoDate(dataString);
                            dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");

                        }
                        if (!dataString.equals("") && dataMovimento.equals("")) {
                            if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
                                String pattern = "";
                                if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
                                    if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
                                        pattern = "yyyy-MM-dd hh:mm:ss";
                                    } else {
                                        pattern = "yyyy-MM-dd";
                                    }
                                    dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
                                } else {
                                    try {
                                        pattern = "ddddd";
                                        dataString = cutString(dataString, 0, 5);
                                        Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
                                        int datanum = Integer.parseInt(dataString);
                                        Calendar calSerial = Calendar.getInstance();
                                        calSerial.setTime(dt);
                                        calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
                                        dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
                                    } catch (Exception dt2) {dataMovimento = "";}
                                }
                                if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                            }
                        }
                    }

                    if(dataMovimento.equals("")){
                        naoLeMais = true;
                        continue;
                    }
                }

                if(cont == 2){//contador 2 � para ler o documento NF
                    documento = cutString(line, line.indexOf(">"), "</TD>");
                    complemento02 = documento;
                }

                if(cont == 3){//contador 3 � para ler o hist�rico
                    nomeOrigem = cutString(line, line.indexOf(">"), "</TD>");
                }

                valorDocumento  = 0;

                if(cont == 4){//contador 4 � para ler o valor
                    strValorDocumento = cutString(line, line.indexOf(">"), "</TD>");
                    if(strValorDocumento.contains("D")) debitoCredito = "EXTRATO-DEBITO";
                    if(strValorDocumento.contains("C")) debitoCredito = "EXTRATO-CREDITO";
                    strValorDocumento = strValorDocumento.replace("C", "").replace("D", "").replace(".", "").replace(",", ".").trim();
                    try{
                        valorDocumento = Double.parseDouble(strValorDocumento);
                    }catch(Exception vlrd){
                        valorDocumento = 0;
                    }
                }

            }

            //2312-025426
            if(tipoExtrato.contains("002")){

                if(line.contains("AGANCIA:") || line.contains("AGENCIA:")) nomePortador = line.replaceAll("AGANCIA", "AGENCIA");
                if(line.contains("PRODUTO:")) nomePortador += " "+line;
                if(line.contains("CONTA:")) nomePortador += " "+line;

                if(line.contains("<TR")){
                    naoLeMais = false;
                    cont = 0;
                    continue;
                }

                if(naoLeMais) continue;

                if(line.contains("<TD")) cont++;

                if(cont == 2){
                    dataString = cutString(line, line.indexOf(">"), "</TD>");

                    dataMovimento = getCampoDate(dataString);
                    dataLote = getCampoDate(dataMovimento,"","yyyy-MM");

                    if (!dataString.equals("") && dataMovimento.equals("")) {
                        if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
                            String pattern = "";
                            if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
                                if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
                                    pattern = "yyyy-MM-dd hh:mm:ss";
                                } else {
                                    pattern = "yyyy-MM-dd";
                                }
                                dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
                            } else {
                                try {
                                    pattern = "ddddd";
                                    dataString = cutString(dataString, 0, 5);
                                    Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
                                    int datanum = Integer.parseInt(dataString);
                                    Calendar calSerial = Calendar.getInstance();
                                    calSerial.setTime(dt);
                                    calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
                                    dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
                                } catch (Exception dt2) {dataMovimento = "";}
                            }
                            if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                        }
                    }

                    if(dataMovimento.equals("")){
                        naoLeMais = true;
                        continue;
                    }
                }

                if(cont == 3){
                    documento = cutString(line, line.indexOf(">"), "</TD>");
                }

                if(cont == 4){
                    nomeOrigem = cutString(line, line.indexOf(">"), "</TD>");
                }

                if(cont > 5) continue;

                valorDocumento  = 0;

                if(cont == 5){
                    strValorDocumento = cutString(line, line.indexOf(">"), "</TD>");

                    if(strValorDocumento.contains("-")) debitoCredito = "EXTRATO-DEBITO";
                    if(!strValorDocumento.contains("-")) debitoCredito = "EXTRATO-CREDITO";

                    //Feito dessa maneira pq algumas vezes o cutString corta o - junto, dai os pagamentos apareciam como recebimentos
                    if(line.replaceAll(" ", "").contains("-0") || line.replaceAll(" ", "").contains("-1") || line.replaceAll(" ", "").contains("-2") ||
                            line.replaceAll(" ", "").contains("-3") || line.replaceAll(" ", "").contains("-4") || line.replaceAll(" ", "").contains("-5") || line.replaceAll(" ", "").contains("-6") ||
                            line.replaceAll(" ", "").contains("-7") || line.replaceAll(" ", "").contains("-8") || line.replaceAll(" ", "").contains("-9")) {
                        debitoCredito = "EXTRATO-DEBITO";
                    }

                    try{
                        valorDocumento = Double.parseDouble(strValorDocumento);
                    }catch(Exception vlrd){
                        valorDocumento = 0;
                    }
                }

                if(nomeOrigem.contains("SALDO DIA")) continue;
            }

            if (valorDocumento == 0) continue;

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato CEF Excel", readExtratoException);
        }
    }
    return true;
}


public boolean readExtratoTribanco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    // Douglas padr�o novo Tribanco chamados #2304-003535 , #2304-002655 , #2304-003618
    // logger.logInfo("read Tribanco2 PDF");

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPadrao		 = "";
    String anoData			 = "";
    String dataAux			 = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    int idataMovimento	= 0;
    int idocumento      = 3;
    int inomePortador	= -1;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 4;
    int icomplemento02	= 2;

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPADRAO"))   tipoPadrao   = jDados.optString("TIPOPADRAO");
    if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
    if(nomeArquivo.contains(".csv") && linha.contains(";") && !linha.contains("\\|"))
        memFile.setFieldSeparator(";");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if (memFile.getStringFieldRemoveEspCharsUpper(0).startsWith("SALDO")) continue;
        if (line.startsWith("HTTPS:")) continue;
        if (line.contains("TRIBANCO ONLINE")) continue;
        if (line.contains("TRIBANCO ONLINE")) continue;
        if (line.contains("SUJEITO A ALTERACOES")) continue;
        if (line.contains("1 OF 1")) continue;
        if (line.contains("BLOQUEIO JUDICIAL")) continue;
        if (line.contains("IOF ACUMULADO")) continue;
        if (line.contains("POSICAO DA CONTA")) continue;
        if (line.contains("NAO HA LANCAMENTOS")) continue;
        if (line.contains("LANCAMENTOS FUTUROS")) continue;
        if (line.contains("ENCARGOS ACUMULADOS")) continue;


        valorDocumento = 0;
        String dataString = "";

        try {
            try {
                dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","")+"/"+anoData;
                Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                dataString = dataMovimento;
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    dataString = dataMovimento;
                } catch (Exception dt2) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        dataString = dataMovimento;
                    } catch (Exception dt2) {
                        dataString = "";
                    }
                }
            }
            if (!dataString.equals("")) {
                dataAux = dataString;
                valorDocumento  = 0;
                debitoCredito = "";
                if(!memFile.getStringFieldRemoveEspCharsUpper(4).equals("")){
                    ivalorDocumento = 4;
                    idocumento		= 3;
                    icomplemento02	= 2;
                    inomeOrigem		= 1;
                }
                if(memFile.getStringFieldRemoveEspCharsUpper(4).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(3).equals("")){
                    ivalorDocumento = 3;
                    idocumento		= -1;
                    icomplemento02	= 2;
                    inomeOrigem		= 1;
                }
            } else{
                dataMovimento = dataAux;
                valorDocumento  = 0;
                debitoCredito = "";
                if(!memFile.getStringFieldRemoveEspCharsUpper(3).equals("")){
                    ivalorDocumento = 3;
                    idocumento		= 2;
                    icomplemento02	= 1;
                    inomeOrigem		= 0;
                }
                if(memFile.getStringFieldRemoveEspCharsUpper(3).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(2).equals("")){
                    ivalorDocumento = 2;
                    idocumento		= -1;
                    icomplemento02	= 1;
                    inomeOrigem		= 0;
                }


            }
            if(dataMovimento.equals("")) continue;

            try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
            catch (Exception vlrd) { valorDocumento = 0; }
            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";
            if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            valorDocumento = Math.abs(valorDocumento);

            if (valorDocumento == 0) {

                continue;
            }
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
            complemento02 	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);
            if(idocumento >= 0){
                documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento);
            }else{
                documento = "";
            }
            complemento01	= nomePortador;
            complemento04	= nomeOrigem;
            // contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            // if (dataMovimento.equals("")) continue;

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.

            // contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, COMPLEMENTO03, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }

    }
    return true;
}


//2310-019420 e 2309-017421
public boolean readExtratoTribanco3PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    //logger.logInfo("Entrou Read Tribanco 3");

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPadrao		 = "";
    String anoData			 = "";
    String dataAux			 = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    int idataMovimento	= 0;
    int idocumento      = 1;
    int inomeOrigem		= 2;
    int ivalorDocumento	= 3;

    nomePortador = nomePortador.replaceAll("\\?","").replaceAll(" ","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPADRAO"))   tipoPadrao   = jDados.optString("TIPOPADRAO");
    if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
    if(nomeArquivo.contains(".csv") && linha.contains(";") && !linha.contains("\\|"))
        memFile.setFieldSeparator(";");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if(line.contains("SALDO C/C") || line.contains("SALDO ANTERIOR")) continue;

        if(line.contains("POSICAO EM")){
            naoLeMais = true;
        }

        if(naoLeMais) continue;

        inomeOrigem		= memFile.getFieldsSize() - 2;
        ivalorDocumento	= memFile.getFieldsSize() - 1;

        try {
            try {
                Date dt = memFile.getDateField(idataMovimento);
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt2) {
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    dataMovimento = "";
                }
            }

            if(dataMovimento.equals("")) continue;


            try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
            catch (Exception vlrd) { valorDocumento = 0; }

            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";
            if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            valorDocumento = Math.abs(valorDocumento);

            if (valorDocumento == 0) {
                continue;
            }

            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            if(nomeOrigem.matches("[[0-9]{2}/[0-9]{2}/[0-9]{4};].*")){
                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1);
                nomeOrigem = cutString(nomeOrigem, 0, nomeOrigem.lastIndexOf(" "));
            }

            if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).matches("[0-9]*")){
                documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
            }else{
                documento = "";
            }

            complemento04	= nomeOrigem;

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato    = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, COMPLEMENTO03, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }
    }
    return true;
}

//2312-024723
public boolean readExtratoTribanco4PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPadrao		 = "";
    String anoData			 = "";
    String dataAux			 = "";
    String dataString		 = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    int idataMovimento	= 0;
    int idocumento      = 2;
    int inomeOrigem		= 0;
    int ivalorDocumento	= 3;
    int icomplemento02  = 1;

    nomePortador = nomePortador.replaceAll("\\?","").replaceAll(" ","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPADRAO"))   tipoPadrao   = jDados.optString("TIPOPADRAO");
    if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
    if(nomeArquivo.contains(".csv") && linha.contains(";") && !linha.contains("\\|"))
        memFile.setFieldSeparator(";");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if(line.contains("SALDO C/C") || line.contains("SALDO ANTERIOR")) continue;

        if(line.startsWith("DATA") && line.contains("VALOR") && line.contains("TIPO")) continue;

        if(memFile.getFieldsSize() < 3) continue;

        if(naoLeMais) continue;

        //inomeOrigem		= memFile.getFieldsSize() - 2;
        ivalorDocumento	= memFile.getFieldsSize() - 1;
        idocumento      = 2;
        inomeOrigem		= 0;
        icomplemento02  = 1;

        try {
            if(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains("/20") && memFile.getFieldsSize() > 3 && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim().length() == 10){
                dataString = getDate(dataMovimento, idataMovimento, line, false,"", memFile, logger);
                idocumento      = 3;
                inomeOrigem		= 1;
                icomplemento02  = 2;
            }

            try {
                dataMovimento = dataString;
                dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
            } catch (Exception e) {
                dataMovimento = "";
            }

            if(dataMovimento.equals("")) continue;


            try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
            catch (Exception vlrd) { valorDocumento = 0; }

            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";
            if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            valorDocumento = Math.abs(valorDocumento);

            if (valorDocumento == 0) {
                continue;
            }

            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            if(idocumento != ivalorDocumento){
                documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
            }else{
                documento = "";
            }

            complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato    = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, COMPLEMENTO03, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }
    }
    return true;
}


//####################################################################################################################################
//									EXTRATO UNIPRIME PDF
//####################################################################################################################################

public boolean readExtratoUniprimePDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readExtratoFibraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padr?o EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoABCPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoBBMPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readExtratoBIBPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoGuanabaraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


//####################################################################################################################################
//									EXTRATO BBM PDF
//####################################################################################################################################

public boolean readExtratoSofisaPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readExtratoVotorantimPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}

public boolean readExtratoVotorantim3PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoXPInvestimentosPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}

public boolean readExtratoXPInvestimentos2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoNubankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento    = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String dia				 = "";
    String mes				 = "";
    String ano				 = "";
    String dataAux			 = "";

    String lineAux           = "";

    String anoData			 = "";
    String pegaBanco		 = "";
    String contLinhaExtrato  = "";
    String strValorDocumento = "";
    String nomeOrigemBackup	 = "";
    String padraoDataOttimizza = "[0-9]{2}/[0-9]{2}/[0-9]{4}";

    boolean ignoraBanco	= false;
    boolean naoLeMais = false;
    boolean somaIndex = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int idataMovimento	= 0;
    int idocumento      = -1;
    int inomePortador	= -1;
    int inomeOrigem		= 0;
    int ivalorDocumento	= 2;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("PEGABANCO")) pegaBanco  = jDados.optString("PEGABANCO");
    if(jDados.has("CODEMPRESA")) codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO")) nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento  = jDados.optString("TIPOLANCAMENTO");

    // gui - 2404-035944 - SETANDO SEPARADOR FIXO
    if(jDados.has("LINHA")) lineAux  = jDados.optString("LINHA");
    if(lineAux.contains(";")) memFile.setFieldSeparator(";");
    if(lineAux.contains("|")) memFile.setFieldSeparator("|");



    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);


        if (memFile.getFieldsSize() == 1 && pegaBanco.equals("SIM")) {
            nomePortador += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
            complemento01 = nomePortador;
            pegaBanco = "";
            continue;
        }
        if (memFile.getStringFieldRemoveEspCharsUpper(2).contains("AGENCIA") && memFile.getStringFieldRemoveEspCharsUpper(4).contains("CONTA")){
            try {
                dbIOCont.update("IO_EXTRATO")
                        .fields("HISTORICO")
                        .where("CHAVE = ? ")
                        .param(nomeOrigemBackup)
                        .param(chaveExtrato)
                        .execute();
            } catch (Exception sqlUpdateException) {
            }
            ignoraBanco = true;
            continue;
        }
        if (ignoraBanco){
            ignoraBanco = false;
            continue;
        }
        if (line.toUpperCase().contains("CNPJ")) continue;
        if (line.toUpperCase().contains("OUVIDORIA")) continue;
        if (line.toUpperCase().contains("SALDO DO DIA")) continue;
        if (line.toUpperCase().contains("VALORES EM R$")) continue;
        //#2310-019627 comentado
        // if (line.toUpperCase().contains("E INVESTIMENTO")) continue;
        if (line.toUpperCase().contains("EXTRATO GERADO DIA")) continue;
        if (line.toUpperCase().contains("HORARIO DE SAO PAULO.")) continue;
        if (line.toUpperCase().contains("E INVESTIMENTO CNPJ: 30.680.829/0001-43")) continue;
        if (line.toUpperCase().contains("NU FINANCEIRA S.A. - SOCIEDADE DE CREDITO, FINANCIAMENTO ")) continue;
        if (line.toUpperCase().contains("O SALDO LIQUIDO CORRESPONDE")) continue;
        if (line.toUpperCase().contains("NAO NOS RESPONSABILIZAMOS PELO USO INDEVIDO OU POR ALTERACOES DAS INFORMACOES")) continue;
        if (line.toUpperCase().contains("ASSEGURAMOS A AUTENTICIDADE DESTAS MOVIMENTACOES E DAS INFORMACOES AQUI CITADAS.")) continue;

        try {
            //Aqui concatena a segunda linha
            if (memFile.getFieldsSize() == 1) {
                nomeOrigemBackup = nomeOrigem;
                nomeOrigem += memFile.getStringFieldRemoveEspCharsUpper(0);
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("HISTORICO")
                            .where("CHAVE = ? ")
                            .param(nomeOrigem)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                }
                continue;
            }


            if(!memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && (memFile.getStringFieldRemoveEspCharsUpper(1).equals("TOTAL DE SAIDAS")
                    || memFile.getStringFieldRemoveEspCharsUpper(1).equals("TOTAL DE ENTRADAS"))){

                dataAux = memFile.getStringFieldRemoveEspCharsUpper(0).trim().replaceAll(" ","/");

                if(dataAux.contains("/")) {
                    dia	= cutString(dataAux, 0, "/");
                    try {
                        mes	= getMonth(cutString(dataAux, "/", dataAux.lastIndexOf("/")));
                    }catch(Exception e) {
                        mes = "";
                    }
                    try {
                        ano	= cutString(dataAux, dataAux.lastIndexOf("/")+1);
                    }catch(Exception e) {
                        logger.logInfo("CATCH"+e);
                    }
                    dataAux = dia+"/"+mes+"/"+ano;
                }
            }
            try {
                if(dataAux.matches(padraoDataOttimizza) && (!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("") || !memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento-1).equals(""))) dataMovimento = dataAux;
            }catch(Exception e) {
                logger.logInfo("CATCH1"+e);
            }

            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("TOTAL DE SAIDAS") || memFile.getStringFieldRemoveEspCharsUpper(0).contains("TOTAL DE ENTRADAS")) {
                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento-1);
                chaveExtrato = "";
                continue;
            }

            if (dataMovimento.equals("")) continue;

            if (memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("") && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento-1).equals("")) continue;

            valorDocumento		= 0;
            if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("TOTAL DE SAIDAS") || memFile.getStringFieldRemoveEspCharsUpper(1).contains("TOTAL DE ENTRADAS")) {
                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
                continue;
            }

            if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

            try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
            catch (Exception vlrd) { valorDocumento = 0; }

            if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("") && valorDocumento == 0){
                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento-1));}
                catch (Exception vlrd) { valorDocumento = 0; }
            }


            if (valorDocumento == 0) continue;

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            nomeOrigem = "";
            if(!memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("")){
                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(0) + " " + memFile.getStringFieldRemoveEspCharsUpper(1);
            }


            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }
    }
    return true;
}


public boolean readExtratoMercadoPagoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoVotorantim2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoAsaasPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoContaSimplesPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String anoAux 			 = "";
    String dataString 		 = "";
    String nomeOrigemBackup	 = "";

    boolean ignoraBanco	= false;
    boolean naoLeMais = false;
    boolean isLinhaPrincipal = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    double valorDocumentoCredito    = 0.0;
    double valorDocumentoDebito    = 0.0;

    int inomePortador	= -1;
    int idataMovimento	= 0;
    int inomeOrigem		= 1;
    int ivalorDocumento	= -1;



    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
    // if(jDados.has("ANOAUX"))  	   anoAux  		= jDados.optString("LINE");


    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if (line.toUpperCase().contains("EXTRATO EMITIDO PELA CONTA SIMPLES - A CONTA FEITA PARA EMPREENDER")) continue;
        if (naoLeMais || memFile.getStringFieldRemoveEspCharsUpper(0).contains("OS DADOS ACIMA")){
            naoLeMais = true;
            continue;
        }


        try{
            valorDocumentoDebito = memFile.getDoubleField(3);
        }catch(Exception ex){}
        try{
            valorDocumentoCredito = memFile.getDoubleField(2);
        }catch(Exception ex){}

        if (valorDocumentoCredito != 0.0 || valorDocumentoDebito != 0.0){
            isLinhaPrincipal = true;
            chaveExtrato 	= "";
            valorDocumento 	= 0.0;
        }

        if (memFile.getFieldsSize() == 1) {
            nomeOrigem	+= " " +  memFile.getStringFieldRemoveEspCharsUpper(0);
            try {
                dbIOCont.update("IO_EXTRATO")
                        .fields("HISTORICO")
                        .where("CHAVE = ? ")
                        .param(nomeOrigem)
                        .param(chaveExtrato)
                        .execute();
            } catch (Exception sqlUpdateException) {
            }
            continue;
        }

        try {
            try {
                dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","")+"/"+anoAux;
                Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                dataString = dataMovimento;
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    dataString = dataMovimento;
                } catch (Exception dt2) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        dataString = dataMovimento;
                    } catch (Exception dt2) {
                        dataString = "";
                    }
                }
            }

            // logger.logInfo("DM "+idataMovimento+" -> "+dataMovimento+" MF DATA = "+memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));


            if (dataMovimento.equals("")) continue;
            valorDocumento		= 0;

            if (valorDocumentoCredito != 0){
                valorDocumento = valorDocumentoCredito;
                debitoCredito = "EXTRATO-CREDITO";
            }
            if (valorDocumentoDebito != 0){
                valorDocumento = valorDocumentoDebito;
                debitoCredito = "EXTRATO-DEBITO";
            }

            try{valorDocumento = Math.abs(valorDocumento);}
            catch (Exception vlrd) { valorDocumento = 0; }

            // logger.logInfo("VD "+ivalorDocumento+" -> "+valorDocumento+" - DeC -> "+debitoCredito);

            if (valorDocumento == 0) continue;


            nomeOrigem = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();


            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");


            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();


            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }
    }
    return true;
}

public boolean readExtratoContaSimples2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String anoAux 			 = "";
    String dataString 		 = "";
    String nomeOrigemBackup	 = "";

    boolean ignoraBanco	= false;
    boolean naoLeMais = false;
    boolean isLinhaPrincipal = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    double valorDocumentoCredito    = 0.0;
    double valorDocumentoDebito    = 0.0;

    int idataMovimento	= 0;
    int inomeOrigem		= memFile.getFieldsSize()-3;
    int ivalorDocumento	= -1;



    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
    // if(jDados.has("ANOAUX"))  	   anoAux  		= jDados.optString("LINE");


    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if (line.toUpperCase().contains("EXTRATO EMITIDO PELA CONTA SIMPLES - A CONTA FEITA PARA EMPREENDER")) continue;
        if (naoLeMais || memFile.getStringFieldRemoveEspCharsUpper(0).contains("OS DADOS ACIMA")) break;

        try {
            try {
                dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","")+"/"+anoAux;
                Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                dataString = dataMovimento;
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    dataString = dataMovimento;
                } catch (Exception dt2) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        dataString = dataMovimento;
                    } catch (Exception dt2) {
                        dataString = "";
                    }
                }
            }
            if (dataMovimento.equals("")) continue;

            nomeOrigem = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").replaceAll("\\s+", " ").trim();

            try{
                valorDocumento = memFile.getDoubleField(memFile.getFieldsSize()-1);
                debitoCredito = "EXTRATO-DEBITO";
            }catch(Exception e){ logger.logInfo("Erro de getDoubleField: " + e); }

            if(valorDocumento == 0){
                try{
                    valorDocumento = memFile.getDoubleField(memFile.getFieldsSize()-2);
                    debitoCredito = "EXTRATO-CREDITO";
                }catch(Exception e){ logger.logInfo("Erro de getDoubleField: " + e); }
            }


            try{valorDocumento = Math.abs(valorDocumento);}
            catch (Exception vlrd) { valorDocumento = 0; }

            if (valorDocumento == 0) continue;


            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");


            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();


            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {

                logger.logInfo(debitoCredito + " | nomePortador:" + nomePortador + " | dataMovimento:" + dataMovimento + " | nomeOrigem:" + nomeOrigem + " | documento:" + documento + " | valorDocumento:" +  valorDocumento);

                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }
    }
    return true;
}


public boolean readExtratoStonePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();
    logger.logInfo("PADRAO STONE PDF");

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String debitoCredito     = "";
    String contLinhaExtrato  = "";
    String nomeOrigemAux  = "";


    // Data Movimento = DATA
    // Valor Movimento = VALOR (R$)
    // Fornecedor/cliente = LAN�AMENTO
    // Portador = Agencia e Conta
    // Complemento 01 = Agencia e Conta
    // Complemento 04 = LAN�AMENTO
    // Complemento 02 = CONTRAPARTE
    // Pagamentos e recebimento diferenciado pelo TIPO

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int idataMovimento	= 0;
    int idebitoCredito  = 1;
    int inomeOrigem		= 2;
    int ivalorDocumento	= 3;
    int idocumento      = 5;

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        // if (memFile.getFieldsSize() < 3) continue;
        if (line.contains("DATA") && line.contains("TIPO") && line.contains("LANCAMENTO") && line.contains("VALOR")) continue;
        // if (memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) continue;
        if(!memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("") && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")  && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("LTD") && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("PIX")){
            // nomeOrigem = "";
            // logger.logInfo(" MF 0 -> " + memFile.getStringFieldRemoveEspCharsUpper(0));
            nomeOrigemAux = memFile.getStringFieldRemoveEspCharsUpper(0);
            continue;
        }

        if(memFile.getFieldsSize() <= 2){

            if(!memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("") && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")
                    && (memFile.getStringFieldRemoveEspCharsUpper(0).contains("LTD") || memFile.getStringFieldRemoveEspCharsUpper(0).contains("PIX"))){
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("HISTORICO")
                            .where("CHAVE = ? ")
                            .param(nomeOrigem + " " + memFile.getStringFieldRemoveEspCharsUpper(0).replaceAll("\\|", "").replace("  ", " "))
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                }
                // chaveExtrato = "";
                nomeOrigemAux = "";
            }
        }else{
            // logger.logInfo("DTS " + dataString);
            try {
                String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");

                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { continue; }
                    }
                }
                if (dataMovimento.equals("")) continue;

                valorDocumento  = 0;
                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }

                if (valorDocumento == 0) continue;

                // logger.logInfo("NOMESS " + inomeOrigem + " | " + line);

                nomeOrigem      = "";
                nomeOrigem		= nomeOrigemAux + " " +  memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
                if (nomeOrigem.contains("SALDO C/C")) continue;
                documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
                complemento02 = documento;

                if(memFile.getStringFieldRemoveEspCharsUpper(idebitoCredito).contains("DEBITO")) debitoCredito = "EXTRATO-DEBITO";
                else debitoCredito = "EXTRATO-CREDITO";


                try {
                    for (int j = 0; j < nomeOrigem.length(); j++) {
                        if (nomeOrigem.contains("|")) nomeOrigem = nomeOrigem.replaceAll("\\|", "");
                        else break;
                    }
                } catch (Exception e) {logger.logInfo("Problema nomeOrigem " + e.getMessage());}
                nomeOrigem = nomeOrigem.trim().replace("  ", " ");
                // logger.logInfo("BTL -> 5565|  -> " + dataMovimento  + "|  -> " + valorDocumento  + "|  -> " + debitoCredito  );
                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                        .fields("CHAVE")
                        .param(chaveExtrato)
                        .queryUnique();

                // Inserir caso Chave nao encontrada.
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                .param(chaveExtrato)
                                .param(codEmpresa)
                                .param(dataMovimento)
                                .param(documento)
                                .param(nomePortador)
                                .param(nomeOrigem)
                                .param(nomeArquivo.toUpperCase())
                                .param(complemento02)
                                .param(valorDocumento)
                                .param(debitoCredito)
                                .param(0)
                                .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(0)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}

/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoC6Excel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readSantanderRET(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoCoraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBtgPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readFrancesinhagrupoAilosPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int inomeOrigem		= -1;
    int idataMovimento	= -1;
    int idocumento      = -1;
    int ivalorDocumento	= -1;	//(VALOR POSITIVO RC, NEGATIVO PG)
    int icomplemento02	= -1;	//(VALOR POSITIVO RC, NEGATIVO PG)

    complemento01 = nomePortador;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    // logger.logInfo("Viacredi Teste");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("PAGADOR:") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("")){
            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(1);
            continue;
        }

        if(line.contains("NOSSO NUMERO") && line.contains("DOCUMENTO") && line.contains("EMISSAO") && line.contains("PAGTO/BAIXA")){
            for (int i = 0; i < memFile.getFieldsSize(); i++) {
                if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("VENCIMENTO")) idataMovimento = i;
                if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("PAGTO/BAIXA")) ivalorDocumento = i;
                if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("SITUACAO")) icomplemento02 = i;
                if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO") && idocumento == -1) idocumento = i;
            }
            if(idataMovimento == -1 || ivalorDocumento == -1 || idocumento == -1){
                idocumento = 1;
                idataMovimento = 5;
                icomplemento02	= 2;
                ivalorDocumento = 8;
            }
            continue;
        }
        //Criado For para ler 2 blocos de lçtos
        for(int y = 0; y < 2; y++){
            try {
                // logger.logInfo("y ->>" + y);
                if(y == 0){
                    if(!memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains(" ")){
                        try {
                            Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt1) {
                            try {
                                Date dt = memFile.getDateField(idataMovimento);
                                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                            } catch (Exception dt2) {
                                try {
                                    String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                                    Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                } catch (Exception dt2) { continue; }
                            }
                        }
                    }
                    if(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains(" ")){
                        try {
                            String dataString = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), 0, " ").replaceAll("\"","");
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { continue; }

                    }

                    valorDocumento	= 0;
                    // nomeOrigem		= "";
                    if(!memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).contains(" "))
                        complemento02		= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).trim();
                    if(memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).contains(" "))
                        complemento02		= cutString(memFile.getStringFieldRemoveEspCharsUpper(icomplemento02), 0, " ").trim();

                    //Feita a tratativa de 2 padroes de documentos sendo NF001 Nf002 e 123/1  -1/2 123/2  -2/2
                    if(!memFile.getStringFieldRemoveEspCharsUpper(idocumento).contains("-")){
                        if(!memFile.getStringFieldRemoveEspCharsUpper(idocumento).contains(" "))
                            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).trim();
                        if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).contains(" "))
                            documento		= cutString(memFile.getStringFieldRemoveEspCharsUpper(idocumento), 0, " ").trim();
                    }
                    if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).contains("-")){
                        if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).contains(" ") && memFile.getStringFieldRemoveEspCharsUpper(idocumento).contains("  "))
                            documento		= cutString(memFile.getStringFieldRemoveEspCharsUpper(idocumento), 0, " ");
                        documento = documento + "  -" +cutString(memFile.getStringFieldRemoveEspCharsUpper(idocumento), documento, " ");
                    }

                    if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains(" ")){
                        try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                        catch (Exception vlrd) { valorDocumento = 0; }
                    }
                    if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains(" ")){
                        //try{valorDocumento = Double.parseDouble(cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento), 0, " ").replaceAll("\\.", "").replaceAll(",", ""))/1000;}
                        try{valorDocumento = Double.parseDouble(cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento), 0, " ").replaceAll("\\.", "").replaceAll(",", ""))/100;}
                        catch (Exception vlrd) { valorDocumento = 0; }
                        //logger.logInfo("Linha: "+line+" Valor: "+valorDocumento);
                    }

                    if (valorDocumento == 0) continue;

                    if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
                    if (valorDocumento < 0) {
                        debitoCredito = "EXTRATO-DEBITO";
                        valorDocumento = Math.abs(valorDocumento);
                    }
                }


                if(y == 1){
                    if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains(" ")) break;

                    if(!memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains(" ")){
                        try {
                            Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt1) {
                            try {
                                Date dt = memFile.getDateField(idataMovimento);
                                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                            } catch (Exception dt2) {
                                try {
                                    String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                                    Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                                } catch (Exception dt2) { continue; }
                            }
                        }
                    }
                    if(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains(" ")){
                        try {
                            String dataString = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento)," ").replaceAll("\"","");
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { continue; }

                    }

                    valorDocumento	= 0;
                    // nomeOrigem		= "";
                    if(!memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).contains(" "))
                        complemento02		= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).trim();
                    if(memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).contains(" "))
                        complemento02		= cutString(memFile.getStringFieldRemoveEspCharsUpper(icomplemento02), " ").trim();

                    if(!memFile.getStringFieldRemoveEspCharsUpper(idocumento).contains("-")){
                        if(!memFile.getStringFieldRemoveEspCharsUpper(idocumento).contains(" "))
                            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).trim();
                        if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).contains(" "))
                            documento		= cutString(memFile.getStringFieldRemoveEspCharsUpper(idocumento), " ").trim();
                    }

                    if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).contains("-")){
                        if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).contains(" ") && memFile.getStringFieldRemoveEspCharsUpper(idocumento).contains("  "))
                            documento = cutString(memFile.getStringFieldRemoveEspCharsUpper(idocumento), 0, " ");
                        documento = documento + "  -" +cutString(memFile.getStringFieldRemoveEspCharsUpper(idocumento), documento, " ");
                        documento = cutString(memFile.getStringFieldRemoveEspCharsUpper(idocumento), documento);
                    }


                    if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains(" ")){
                        try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                        catch (Exception vlrd) { valorDocumento = 0; }
                    }
                    if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains(" ")){
                        //try{valorDocumento = Double.parseDouble(cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento)," ").replaceAll("\\.", "").replaceAll(",", ""))/1000;}
                        try{valorDocumento = Double.parseDouble(cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento)," ").replaceAll("\\.", "").replaceAll(",", ""))/100;}
                        catch (Exception vlrd) { valorDocumento = 0; }
                        //logger.logInfo("Linha: "+line+" Valor: "+valorDocumento);
                    }

                    if (valorDocumento == 0) continue;

                    if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
                    if (valorDocumento < 0) {
                        debitoCredito = "EXTRATO-DEBITO";
                        valorDocumento = Math.abs(valorDocumento);
                    }
                }

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                //logger.logInfo("Lancamento: "+nomeOrigem+" - "+ dataMovimento+" - "+debitoCredito+" - "+valorDocumento+" - "+contLinhaExtrato);

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                        .fields("CHAVE")
                        .param(chaveExtrato)
                        .queryUnique();

                // Inserir caso Chave nao encontrada.


                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                .param(chaveExtrato)
                                .param(codEmpresa)
                                .param(dataMovimento)
                                .param(documento)
                                .param(nomePortador)
                                .param(nomeOrigem)
                                .param(nomeArquivo.toUpperCase())
                                .param(complemento02)
                                .param(valorDocumento)
                                .param(debitoCredito)
                                .param(0)
                                .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(0)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) { }
        }
    }
    return true;
}





public boolean readExtratoXPInvestimentosExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readInvestimentoBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoOmieCashPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoArbiExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoMovilepayPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-SISPRIME-EXCEL @##############################################*/
public boolean readExtratoSisprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}

public HashMap readExtratoSicoobConveniosPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String nomeEmpresa       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String nomePortador      = "";
    String dataString        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String tipoLancamento    = "";
    String tipoPlanilha      = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String contLinhaTexto    = "";
    String consolidaClass    = "";
    String classificacao     = "";
    String chave             = "";
    String key               = "";
    String lote              = "";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idataMovimento	= -1;
    int idocumento      = 1;
    int inomePortador	= -1;
    int inomeOrigem		= 3;
    int ivalorDocumento	= 6;
    int icomplemento01  = 7;
    int ivalorJuros     = 10;

    int cont = 0;


    if(jDados.has("CODEMPRESA"))         codEmpresa = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))       nomeArquivo = jDados.optString("NOMEARQUIVO");
    if(jDados.has("NOMEEMPRESA"))       nomeEmpresa = jDados.optString("NOMEEMPRESA");
    if(jDados.has("DATAMOVIMENTO"))	     dataString = jDados.optString("DATAMOVIMENTO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("NOMEPORTADOR"))       nomePortador = jDados.optString("NOMEPORTADOR");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        //logger.logInfo("LINHA " + line + " NAO LE MAIS " + naoLeMais);

        cont++;

        try {

            String mf1 = memFile.getStringFieldRemoveEspCharsUpper(0);
            String mf2 = memFile.getStringFieldRemoveEspCharsUpper(1);

            if(mf1.contains("VALOR RECOLHIDO")){
                try{ valorDocumento = memFile.getDoubleField(1);} catch (Exception e){}
            }

            debitoCredito = "EXTRATO-DEBITO";

            if(mf1.trim().equals("NOME:")){
                nomeOrigem = mf2;
                complemento04 = nomeOrigem;
            }

            if(mf1.trim().equals("CONTA DEBITADA:")){
                nomePortador = mf2;
                complemento01 = nomePortador;
            }
            //dataMovimento = cutString(nomeArquivo.toUpperCase(), nomeArquivo.toUpperCase().lastIndexOf(".PDF") -10, ".PDF").replace(".","/");
            logger.logInfo("data: " + dataMovimento);

            if(mf1.contains("PAGAMENTO EFETUADO EM")){
                dataMovimento = getCampoDate(mf2);
                continue;
            }
            if(dataMovimento.equals("")) continue;

            if(mf1.contains("DESCRICAO DO PAGAMENTO")){
                complemento02 = mf2;
            }

            if(mf1.contains("COD. CONVENIO")){
                documento = mf2;
            }



            if (valorDocumento == 0) continue;

            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~  Criacao de Lote / Chave
            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 04, "0");
            consolidaClass = contLinhaTexto;

            classificacao = dataMovimento + "0" + consolidaClass;



            lote = String.format( "%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento );

            /*  A) Um movimento que serᠣriado, para a contabiliza磯 da venda. Este movimento deverᠴer:
             * No campo portador = Caixa
             * No campo complemento(02) = Venda
             * No campo Valor do movimento = Posi絥s indicadas no roteiro
             */
            chave = lote + contLinhaTexto;
            key	= chave  + "-CTB";
            //logger.logDebug("###1319### "+line);

            ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
            if (ttMov2 == null) {
                ttMov2 = new ttMovimentoPadrao();
            }
            ttMov2.lote		 	    = lote;
            ttMov2.documento   	    = documento;
            ttMov2.debitoCredito    = debitoCredito;
            ttMov2.codEmpresa 	    = codEmpresa;
            ttMov2.nomeEmpresa      = nomeEmpresa;
            ttMov2.dataMovimento    = dataMovimento;
            ttMov2.tipoMovimento    = "CTB";
            ttMov2.tipoLancamento   = tipoLancamento;
            ttMov2.historico		= "";
            ttMov2.valorDocumento   = valorDocumento;
            ttMov2.valorDesconto    = 0;
            ttMov2.valorMulta  	    = 0;
            ttMov2.valorJuros  	    = valorJuros;
            ttMov2.contaJuros    	= "";
            ttMov2.contaMulta		= "";
            ttMov2.contaDesconto  	= "";
            ttMov2.nomePortador     = nomePortador;
            ttMov2.centroCusto  	= "";
            ttMov2.nomeOrigem 	    = nomeOrigem;
            ttMov2.cpfCnpj          = cpfCnpj;
            ttMov2.chave            = chave + "-CTB";
            ttMov2.classificacao    = classificacao;
            ttMov2.tipoPlanilha     = tipoPlanilha;

            ttMov2.complemento01	= complemento01;
            ttMov2.complemento02	= complemento02;
            ttMov2.complemento03	= complemento03;
            ttMov2.complemento04	= complemento04;
            ttMov2.complemento05	= "";
            ttMov2.complemento06	= "";
            ttMov2.complemento07	= "";
            ttMov2.complemento08	= "";
            ttMov2.complemento09	= "";
            ttMov2.complemento10	= "";
            ttMov2.nomeArquivo		= nomeArquivo;
            ttMov2.naturezaContabil  = "D";
            ttMov2.contaDebito       = "";
            ttMov2.contaCredito      = "";
            mapaVariavel.put(key,ttMov2);

            nomePortador = "";
            dataMovimento = "";
            documento = "";
            nomeOrigem = "";
            valorDocumento = 0.0;

        } catch (Exception ex) {
        }

    }
    return mapaVariavel;
}




public HashMap readExtratoItauPdfFrancesinha(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String nomeEmpresa       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String nomePortador      = "";
    String dataString        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String tipoLancamento    = "";
    String tipoPlanilha      = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String contLinhaTexto    = "";
    String consolidaClass    = "";
    String classificacao     = "";
    String chave             = "";
    String key               = "";
    String lote              = "";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idataMovimento	= -1;
    int idocumento      = 1;
    int inomePortador	= -1;
    int inomeOrigem		= 3;
    int ivalorDocumento	= 6;
    int icomplemento01  = 7;
    int ivalorJuros     = 10;

    int cont = 0;

    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))         codEmpresa = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))       nomeArquivo = jDados.optString("NOMEARQUIVO");
    if(jDados.has("NOMEEMPRESA"))       nomeEmpresa = jDados.optString("NOMEEMPRESA");
    if(jDados.has("DATAMOVIMENTO"))	     dataString = jDados.optString("DATAMOVIMENTO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("NOMEPORTADOR"))       nomePortador = jDados.optString("NOMEPORTADOR");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        //logger.logInfo("LINHA " + line + " NAO LE MAIS " + naoLeMais);
        if (naoLeMais) continue;

        cont++;

        try {

            if(!dataString.equals("")){
                dataMovimento = getCampoDate(dataString);

                dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
            }

            if (dataMovimento.equals("")) continue;

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            complemento01 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento01);

            documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);

            // logger.logInfo("DATA === "+dataMovimento+" | DTSTRING == "+dataString+" | CP == "+complemento01);

            if(!complemento01.contains("L")) continue;

            try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
            catch (Exception vlrd) { valorDocumento = 0; }

            // Este padrão roda somente recebimentos
            debitoCredito = "EXTRATO-CREDITO";

            valorDocumento = Math.abs(valorDocumento);

            if(memFile.getStringFieldRemoveEspCharsUpper(9).contains("4") && !memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).equals("")){
                try{valorJuros = memFile.getDoubleField(ivalorJuros);}
                catch (Exception vlrJr) { valorJuros = 0; }
            }else{
                valorJuros = 0;
            }

            // logger.logInfo("VALOR == "+valorDocumento+" | DATINHA == "+dataMovimento+" | NO == "+nomeOrigem);

            if (valorDocumento == 0) continue;

            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~  Criacao de Lote / Chave
            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 04, "0");
            consolidaClass = contLinhaTexto;

            classificacao = dataMovimento + "0" + consolidaClass;



            lote = String.format( "%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento );

            /*  A) Um movimento que serᠣriado, para a contabiliza磯 da venda. Este movimento deverᠴer:
             * No campo portador = Caixa
             * No campo complemento(02) = Venda
             * No campo Valor do movimento = Posi絥s indicadas no roteiro
             */
            chave = lote + contLinhaTexto;
            key	= chave  + "-CTB";
            //logger.logDebug("###1319### "+line);

            ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
            if (ttMov2 == null) {
                ttMov2 = new ttMovimentoPadrao();
            }
            ttMov2.lote		 	    = lote;
            ttMov2.documento   	    = documento;
            ttMov2.codEmpresa 	    = codEmpresa;
            ttMov2.nomeEmpresa      = nomeEmpresa;
            ttMov2.dataMovimento    = dataMovimento;
            ttMov2.tipoMovimento    = "CTB";
            ttMov2.tipoLancamento   = tipoLancamento;
            ttMov2.historico		= "";
            ttMov2.valorDocumento   = valorDocumento;
            ttMov2.valorDesconto    = 0;
            ttMov2.valorMulta  	    = 0;
            ttMov2.valorJuros  	    = valorJuros;
            ttMov2.contaJuros    	= "";
            ttMov2.contaMulta		= "";
            ttMov2.contaDesconto  	= "";
            ttMov2.nomePortador     = nomePortador;
            ttMov2.centroCusto  	= "";
            ttMov2.nomeOrigem 	    = nomeOrigem;
            ttMov2.cpfCnpj          = cpfCnpj;
            ttMov2.chave            = chave + "-CTB";
            ttMov2.classificacao    = classificacao;
            ttMov2.tipoPlanilha     = tipoPlanilha;

            ttMov2.complemento01	= complemento01;
            ttMov2.complemento02	= complemento02;
            ttMov2.complemento03	= complemento03;
            ttMov2.complemento04	= complemento04;
            ttMov2.complemento05	= "";
            ttMov2.complemento06	= "";
            ttMov2.complemento07	= "";
            ttMov2.complemento08	= "";
            ttMov2.complemento09	= "";
            ttMov2.complemento10	= "";
            ttMov2.nomeArquivo		= nomeArquivo;
            ttMov2.naturezaContabil  = "C";
            ttMov2.contaDebito       = "";
            ttMov2.contaCredito      = "";
            mapaVariavel.put(key,ttMov2);

        } catch (Exception ex) {
        }

    }
    return mapaVariavel;
}

public HashMap readExtratItauPdfFrancesinha2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String nomeEmpresa       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomePortador      = "";
    String nomeOrigem        = "";
    String dataString        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String tipoLancamento    = "";
    String tipoPlanilha      = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String contLinhaTexto    = "";
    String consolidaClass    = "";
    String classificacao     = "";
    String chave             = "";
    String key               = "";
    String lote              = "";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idataMovimento	= 8;
    int idocumento      = 2;
    int inomePortador	= -1;
    int inomeOrigem		= 3;
    int ivalorDocumento	= 9;
    int icomplemento01  = 7;
    int ivalorJuros     = 11;

    int cont = 0;

    ttMovimentoPadrao ttMov2 = new ttMovimentoPadrao();


    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))    codEmpresa = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("NOMEEMPRESA"))       nomeEmpresa = jDados.optString("NOMEEMPRESA");
    if(jDados.has("NOMEPORTADOR"))       nomePortador = jDados.optString("NOMEPORTADOR");

    // memFile.setFieldSeparator(";");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        // logger.logInfo("LINHA " + line + " NAO LE MAIS " + naoLeMais);
        if (naoLeMais) continue;

        cont++;

        try {

            // dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
            // logger.logInfo("DATA STRING == "+dataString);
            // if (!dataString.equals("")) {
            // String dataMovimentoAux	  = getCampoDate(dataString);
            // if (dataMovimentoAux.contains("/")) {
            // dataMovimento     = getCampoDate(dataString);
            // dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");

            // }
            // if (!dataString.equals("") && dataMovimento.equals("")) {
            // if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
            // String pattern = "";
            // if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
            // if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
            // pattern = "yyyy-MM-dd hh:mm:ss";
            // } else {
            // pattern = "yyyy-MM-dd";
            // }
            // dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
            // } else {
            // try {
            // pattern = "ddddd";
            // dataString = cutString(dataString, 0, 5);
            // Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
            // int datanum = Integer.parseInt(dataString);
            // Calendar calSerial = Calendar.getInstance();
            // calSerial.setTime(dt);
            // calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
            // dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
            // } catch (Exception dt2) {dataMovimento = "";}
            // }
            // if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
            // }
            // }
            // }

            if(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("") && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("") && memFile.getFieldsSize() == 2 && memFile.getStringFieldRemoveEspCharsUpper(0).matches("[0-9]+")){
                ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                if(ttMov2 != null){
                    if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("4")){
                        try{valorJuros = memFile.getDoubleField(1);}
                        catch (Exception vlrJr) { valorJuros = 0; }
                        ttMov2.valorJuros = valorJuros;
                        valorJuros = 0;
                    }
                    if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("1") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("-")){
                        try{valorDesconto = memFile.getDoubleField(1);}
                        catch (Exception vlrJr) { valorDesconto = 0; }
                        ttMov2.valorDesconto = valorDesconto;
                        valorDesconto = 0;
                    }
                    mapaVariavel.put(key,ttMov2);
                    continue;
                }
            }

            dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim();
            // logger.logInfo("DT ITAU = "+dataMovimento);

            if (dataMovimento.equals("")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("") && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            complemento01 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento01);

            documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);

            // logger.logInfo("DATA === "+dataMovimento+" | DTSTRING == "+dataString+" | CP == "+complemento01);

            if(!complemento01.contains("L")) continue;

            try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
            catch (Exception vlrd) { valorDocumento = 0; }

            valorDocumento = Math.abs(valorDocumento);

            debitoCredito = "EXTRATO-CREDITO";

            if(memFile.getStringFieldRemoveEspCharsUpper(10).contains("4") && !memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).equals("")){
                try{valorJuros = memFile.getDoubleField(ivalorJuros);}
                catch (Exception vlrJr) { valorJuros = 0; }
            }else{
                valorJuros = 0;
            }

            if(memFile.getStringFieldRemoveEspCharsUpper(10).contains("1") && memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).contains("-")){
                try{valorDesconto = memFile.getDoubleField(ivalorJuros);}
                catch (Exception vlrJr) { valorDesconto = 0; }
            }else{
                valorDesconto = 0;
            }

            logger.logInfo("VALOR == "+valorDocumento+" | DATINHA == "+dataMovimento+" | NO == "+nomeOrigem);

            if (valorDocumento == 0) continue;

            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~  Criacao de Lote / Chave
            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 04, "0");
            consolidaClass = contLinhaTexto;

            classificacao = dataMovimento + "0" + consolidaClass;



            lote = String.format( "%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento );

            /*  A) Um movimento que serᠣriado, para a contabiliza磯 da venda. Este movimento deverᠴer:
             * No campo portador = Caixa
             * No campo complemento(02) = Venda
             * No campo Valor do movimento = Posi絥s indicadas no roteiro
             */
            chave = lote + contLinhaTexto;
            key	= chave  + "-CTB";
            //logger.logDebug("###1319### "+line);

            ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
            if (ttMov2 == null) {
                ttMov2 = new ttMovimentoPadrao();
            }
            ttMov2.lote		 	    = lote;
            ttMov2.documento   	    = documento;
            ttMov2.codEmpresa 	    = codEmpresa;
            ttMov2.nomeEmpresa      = nomeEmpresa;
            ttMov2.dataMovimento    = dataMovimento;
            ttMov2.tipoMovimento    = "CTB";
            ttMov2.tipoLancamento   = tipoLancamento;
            ttMov2.historico		= "";
            ttMov2.valorDocumento   = valorDocumento;
            ttMov2.valorDesconto    = Math.abs(valorDesconto);
            ttMov2.valorMulta  	    = 0;
            ttMov2.valorJuros  	    = Math.abs(valorJuros);
            ttMov2.contaJuros    	= "";
            ttMov2.contaMulta		= "";
            ttMov2.contaDesconto  	= "";
            ttMov2.nomePortador     = nomePortador;
            ttMov2.centroCusto  	= "";
            ttMov2.nomeOrigem 	    = nomeOrigem;
            ttMov2.cpfCnpj          = cpfCnpj;
            ttMov2.chave            = chave + "-CTB";
            ttMov2.classificacao    = classificacao;
            ttMov2.tipoPlanilha     = tipoPlanilha;

            ttMov2.complemento01	= complemento01;
            ttMov2.complemento02	= complemento02;
            ttMov2.complemento03	= complemento03;
            ttMov2.complemento04	= complemento04;
            ttMov2.complemento05	= "";
            ttMov2.complemento06	= "";
            ttMov2.complemento07	= "";
            ttMov2.complemento08	= "";
            ttMov2.complemento09	= "";
            ttMov2.complemento10	= "";
            ttMov2.nomeArquivo		= nomeArquivo;
            ttMov2.naturezaContabil  = "C";
            ttMov2.contaDebito       = "";
            ttMov2.contaCredito      = "";
            mapaVariavel.put(key,ttMov2);

        } catch (Exception ex) {
            logger.logInfo("ERRO = "+ex.getMessage());
        }

    }
    return mapaVariavel;
}

//2311-022659
public HashMap readExtratoItauPdfFrancesinha3(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String nomeEmpresa       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String nomePortador      = "";
    String dataString        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String tipoLancamento    = "";
    String tipoPlanilha      = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String contLinhaTexto    = "";
    String consolidaClass    = "";
    String classificacao     = "";
    String chave             = "";
    String key               = "";
    String lote              = "";

    String codAux			 = "";
    String jurosAux			 = "";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int idataMovimento	= 8;
    int idocumento      = 2;
    int inomeOrigem		= 3;
    int ivalorDocumento	= 6;
    int icomplemento01  = 7;
    int ivalorJuros     = 10;
    int icodAux			= 9;

    int numeroLancLinha = 0;
    int cont = 0;

    if(jDados.has("CODEMPRESA"))         codEmpresa = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))       nomeArquivo = jDados.optString("NOMEARQUIVO");
    if(jDados.has("NOMEEMPRESA"))       nomeEmpresa = jDados.optString("NOMEEMPRESA");
    if(jDados.has("DATAMOVIMENTO"))	     dataString = jDados.optString("DATAMOVIMENTO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("NOMEPORTADOR"))       nomePortador = jDados.optString("NOMEPORTADOR");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if(line.contains("RESUMO") && line.contains("VALOR") && line.contains("COBRADO") && line.contains("PRINCIPAL")){
            naoLeMais = true;
        }

        if(line.contains("BANCO ITAU S.A.") && line.contains("TITULOS")) continue;
        if(line.contains("CLIENTE") && line.contains("AGENCIA") && line.contains("CONTA")) continue;
        if(line.contains("CART") && line.contains("NOSSO N") && line.contains("PAGADOR")) continue;

        if (naoLeMais) continue;
        numeroLancLinha = quantityOf(memFile.getStringFieldRemoveEspCharsUpper(0), " ") + 1;
        String ano = cutString(nomeArquivo, nomeArquivo.lastIndexOf("-20")+1, nomeArquivo.lastIndexOf("-20")+5);


        //Aparecem 2 ou 3 lacamentos na mesma linha
        logger.logInfo(numeroLancLinha +"+ "+ line);
        for(int y = 0; y < numeroLancLinha; y++){
            cont++;
            try {
                nomeOrigem = "";
                strValorDocumento = "";
                dataString = "";
                documento = "";
                codAux = "";
                jurosAux = "";

                //Primeiro lancamento na linha
                if(y == 0){
                    logger.logInfo("igual 0");
                    try {
                        dataString = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim(), 0, " ").replaceAll("\"","") + "/" + ano;
                        dataString = dataString.trim();

                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { dataMovimento = ""; }

                    strValorDocumento = cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("\"", "").trim(), 0, " ");

                    try{
                        valorDocumento = Double.parseDouble(strValorDocumento.replaceAll("\\.", "").replaceAll(",", ""))/100;
                    } catch (Exception dt2) { valorDocumento = 0; }

                    if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).contains("  ")){
                        nomeOrigem = cutString(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("  -  ", " -  ").trim(), 0, "  ");
                    } else {
                        nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim();
                    }

                    //Se tiverem 3 lancamentos em uma linha e algum deles nao vier separado por 2 ou mais espacos atribui o nome todo
                    if(numeroLancLinha == 3 && memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).contains("  ") && !cutString(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem), "  ").trim().contains("  ") ){
                        nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim();
                    }

                    documento = cutString(memFile.getStringFieldRemoveEspCharsUpper(idocumento).trim(), 0, memFile.getStringFieldRemoveEspCharsUpper(idocumento).indexOf(" ")).trim();

                    complemento01 = cutString(memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).trim(), 0, memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).indexOf(" ")).trim();

                    if((quantityOf(memFile.getStringFieldRemoveEspCharsUpper(icodAux), " ") + 1) < numeroLancLinha){ //Desenvolvimento para se tiver 1 cod em uma linha com 2 ou 3 lancamentos
                        if((quantityOf(memFile.getStringFieldRemoveEspCharsUpper(icodAux), " ") + 1) == 1){
                            codAux = memFile.getStringFieldRemoveEspCharsUpper(icodAux).trim();
                            jurosAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).trim();
                        }
                        if((quantityOf(memFile.getStringFieldRemoveEspCharsUpper(icodAux), " ") + 1) == 2){
                            codAux = cutString(memFile.getStringFieldRemoveEspCharsUpper(icodAux).trim(), 0, " ").trim();
                            jurosAux = cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).replaceAll("\"", "").trim(), 0, " ");
                        }
                    }
                    else {
                        if(!memFile.getStringFieldRemoveEspCharsUpper(icodAux).trim().equals("") && !memFile.getStringFieldRemoveEspCharsUpper(icodAux).startsWith("   ")){
                            codAux = cutString(memFile.getStringFieldRemoveEspCharsUpper(icodAux).trim(), 0, memFile.getStringFieldRemoveEspCharsUpper(icodAux).indexOf(" ")).trim();
                        }

                        if(!codAux.equals("") && !memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).equals("")){
                            jurosAux = cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).replaceAll("\"", "").trim(), 0, " ");
                        }
                    }
                }


                //Segundo lancamento na linha
                else if(y == 1){
                    logger.logInfo("y = 1");
                    if(numeroLancLinha == 3){
                        logger.logInfo("3 lancamentos na linha");//Para se tiver 3 lacamentos na mesma linha
                        try {
                            dataString = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim(), memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).indexOf(" "), memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).lastIndexOf(" ")).replaceAll("\"","") + "/" + ano;
                            dataString = dataString.trim();

                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { dataMovimento = ""; }

                        strValorDocumento = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("\"", "").trim();
                        strValorDocumento = cutString(strValorDocumento, strValorDocumento.indexOf(" "), strValorDocumento.lastIndexOf(" "));

                        try{
                            valorDocumento = Double.parseDouble(strValorDocumento.replaceAll("\\.", "").replaceAll(",", ""))/100;
                        } catch (Exception dt2) { valorDocumento = 0; }

                        if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).contains("  ") && quantityOf(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem), "  ") > 1){
                            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("  -  ", " -  ").trim();
                            nomeOrigem = cutString(nomeOrigem, nomeOrigem.indexOf("  "), nomeOrigem.lastIndexOf("  "));
                        } else {
                            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim();
                        }

                        //Se tiverem 3 lancamentos em uma linha e algum deles nao vier separado por 2 ou mais espacos atribui o nome todo
                        if(numeroLancLinha == 3 && memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).contains("  ") && !cutString(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem), "  ").trim().contains("  ") ){
                            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim();
                        }

                        documento = cutString(memFile.getStringFieldRemoveEspCharsUpper(idocumento).trim(), memFile.getStringFieldRemoveEspCharsUpper(idocumento).indexOf(" "), memFile.getStringFieldRemoveEspCharsUpper(idocumento).lastIndexOf(" ")).trim();

                        complemento01 = cutString(memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).trim(), memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).indexOf(" "), memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).lastIndexOf(" ")).trim();

                        if((quantityOf(memFile.getStringFieldRemoveEspCharsUpper(icodAux), " ") + 1) < numeroLancLinha){//Desenvolvimento para se tiverem 2 cod em uma linha com 3 lancamentos
                            if((quantityOf(memFile.getStringFieldRemoveEspCharsUpper(icodAux), " ") + 1) == 2){
                                codAux = cutString(memFile.getStringFieldRemoveEspCharsUpper(icodAux).trim(), " ").trim();
                                jurosAux = cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).replaceAll("\"", "").trim(), memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).replaceAll("\"", "").trim().lastIndexOf(" "));
                            }
                        }
                        else {
                            if(!memFile.getStringFieldRemoveEspCharsUpper(icodAux).trim().equals("") && !memFile.getStringFieldRemoveEspCharsUpper(icodAux).startsWith("   ")){
                                codAux = cutString(memFile.getStringFieldRemoveEspCharsUpper(icodAux).trim(), memFile.getStringFieldRemoveEspCharsUpper(icodAux).indexOf(" "), memFile.getStringFieldRemoveEspCharsUpper(icodAux).lastIndexOf(" ")).trim();
                            }

                            if(!codAux.equals("") && !memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).equals("")){
                                jurosAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).replaceAll("\"", "").trim();
                                jurosAux = cutString(jurosAux, jurosAux.indexOf(" "), jurosAux.lastIndexOf(" "));
                            }
                        }

                    } else { //Dois lacamentos na linha
                        logger.logInfo("dois lançaments na linha");
                        try {
                            dataString = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim(), memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).indexOf(" ")).replaceAll("\"","") + "/" + ano;
                            dataString = dataString.trim();

                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { dataMovimento = ""; }

                        strValorDocumento = cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("\"", "").trim(), memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("\"", "").trim().lastIndexOf(" "));

                        try{
                            valorDocumento = Double.parseDouble(strValorDocumento.replaceAll("\\.", "").replaceAll(",", ""))/100;
                        } catch (Exception dt2) { valorDocumento = 0; }

                        if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).contains("  ")){
                            nomeOrigem = cutString(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("  -  ", " -  ").trim(), "  ");
                        } else {
                            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim();
                        }

                        documento = cutString(memFile.getStringFieldRemoveEspCharsUpper(idocumento).trim(), " ").trim();

                        complemento01 = cutString(memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).trim(), memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).indexOf(" "));

                        if((quantityOf(memFile.getStringFieldRemoveEspCharsUpper(icodAux), " ") + 1) >= numeroLancLinha){

                            if(!memFile.getStringFieldRemoveEspCharsUpper(icodAux).trim().equals("") && !memFile.getStringFieldRemoveEspCharsUpper(icodAux).startsWith("   ")){
                                codAux = cutString(memFile.getStringFieldRemoveEspCharsUpper(icodAux).trim(), " ").trim();
                            }

                            if(!codAux.equals("") && !memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).equals("")){
                                jurosAux = cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).replaceAll("\"", "").trim(), memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).replaceAll("\"", "").trim().lastIndexOf(" "));
                            }
                        }

                    }
                }


                //Se tiver, terceiro lancamento na linha
                else if(y == 2){
                    logger.logInfo("se tiver terceiro lancamento na linha");
                    try {
                        dataString = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim(), memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).lastIndexOf(" ")).replaceAll("\"","") + "/" + ano;
                        dataString = dataString.trim();

                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { dataMovimento = ""; }

                    strValorDocumento = cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("\"", "").trim(), memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("\"", "").trim().lastIndexOf(" "));

                    try{
                        valorDocumento = Double.parseDouble(strValorDocumento.replaceAll("\\.", "").replaceAll(",", ""))/100;
                    } catch (Exception dt2) { valorDocumento = 0; }

                    if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).contains("  ") && quantityOf(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem), "  ") > 1){
                        nomeOrigem = cutString(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("  -  ", " -  ").trim(), memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("  -  ", " -  ").trim().lastIndexOf("  ")).trim();
                    } else {
                        nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim();
                    }

                    //Se tiverem 3 lancamentos em uma linha e algum deles nao vier separado por 2 ou mais espacos atribui o nome todo
                    if(numeroLancLinha == 3 && memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).contains("  ") && !cutString(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem), "  ").trim().contains("  ") ){
                        nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim();
                    }

                    documento = cutString(memFile.getStringFieldRemoveEspCharsUpper(idocumento).trim(), memFile.getStringFieldRemoveEspCharsUpper(idocumento).lastIndexOf(" ")).trim();

                    complemento01 = cutString(memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).trim(), memFile.getStringFieldRemoveEspCharsUpper(icomplemento01).lastIndexOf(" "));

                    if((quantityOf(memFile.getStringFieldRemoveEspCharsUpper(icodAux), " ") + 1) >= numeroLancLinha){
                        if(!memFile.getStringFieldRemoveEspCharsUpper(icodAux).trim().equals("") && !memFile.getStringFieldRemoveEspCharsUpper(icodAux).startsWith("   ")){
                            codAux = cutString(memFile.getStringFieldRemoveEspCharsUpper(icodAux).trim(), memFile.getStringFieldRemoveEspCharsUpper(icodAux).lastIndexOf(" ")).trim();
                        }

                        if(!codAux.equals("") && !memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).equals("")){
                            jurosAux = cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).replaceAll("\"", "").trim(), memFile.getStringFieldRemoveEspCharsUpper(ivalorJuros).replaceAll("\"", "").trim().lastIndexOf(" "));
                        }
                    }

                }
                logger.logInfo("antesdata");
                //Para se um lancamento vir sozinho na linha
                if(numeroLancLinha == 1){
                    logger.logInfo("para se um lancamento vir sozinho na linha");
                    try {
                        dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim().replaceAll("\"","") + "/" + ano;
                        dataString = dataString.replaceAll("JAN", "01");
                        dataString = dataString.replaceAll("FEV", "02");
                        dataString = dataString.replaceAll("MAR", "03");
                        dataString = dataString.replaceAll("ABR", "04");
                        dataString = dataString.replaceAll("MAI", "05");
                        dataString = dataString.replaceAll("JUN", "06");
                        dataString = dataString.replaceAll("JUL", "07");
                        dataString = dataString.replaceAll("AGO", "08");
                        dataString = dataString.replaceAll("SET", "09");
                        dataString = dataString.replaceAll("OUT", "10");
                        dataString = dataString.replaceAll("NOV", "11");
                        dataString = dataString.replaceAll("DEZ", "12");
                        dataString = dataString.trim();

                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { dataMovimento = ""; }
                }
                logger.logInfo(nomePortador + "|" + dataMovimento + "|" + documento + "|" + "nome origem: " + nomeOrigem + "|"+ debitoCredito+ "|" + valorDocumento);
                if (dataMovimento.equals("")) continue;

                if(!complemento01.contains("L")) continue;
                logger.logInfo("depoiscontinue");

                if(codAux.contains("4") && !jurosAux.equals("")){
                    try{
                        valorJuros = Double.parseDouble(jurosAux.replaceAll("\\.", "").replaceAll(",", ""))/100;
                    }
                    catch (Exception vlrJr) { valorJuros = 0; }
                }else{
                    valorJuros = 0;
                }

                // Este padrão roda somente recebimentos
                debitoCredito = "EXTRATO-CREDITO";

                logger.logInfo("VDOC: "  + valorDocumento);
                if (valorDocumento == 0) continue;




                // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
                // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~  Criacao de Lote / Chave
                contLinhaTexto = String.valueOf(cont);
                contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 04, "0");
                consolidaClass = contLinhaTexto;

                classificacao = dataMovimento + "0" + consolidaClass;

                lote = String.format( "%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento );

                chave = lote + contLinhaTexto;
                key	= chave  + "-CTB";

                ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                if (ttMov2 == null) {
                    ttMov2 = new ttMovimentoPadrao();
                }
                ttMov2.lote		 	    = lote;
                ttMov2.documento   	    = documento;
                ttMov2.codEmpresa 	    = codEmpresa;
                ttMov2.nomeEmpresa      = nomeEmpresa;
                ttMov2.dataMovimento    = dataMovimento;
                ttMov2.tipoMovimento    = "CTB";
                ttMov2.tipoLancamento   = tipoLancamento;
                ttMov2.historico		= "";
                ttMov2.valorDocumento   = valorDocumento;
                ttMov2.valorDesconto    = 0;
                ttMov2.valorMulta  	    = 0;
                ttMov2.valorJuros  	    = valorJuros;
                ttMov2.contaJuros    	= "";
                ttMov2.contaMulta		= "";
                ttMov2.contaDesconto  	= "";
                ttMov2.nomePortador     = nomePortador;
                ttMov2.centroCusto  	= "";
                ttMov2.nomeOrigem 	    = nomeOrigem;
                ttMov2.cpfCnpj          = cpfCnpj;
                ttMov2.chave            = chave + "-CTB";
                ttMov2.classificacao    = classificacao;
                ttMov2.tipoPlanilha     = tipoPlanilha;

                ttMov2.complemento01	= complemento01;
                ttMov2.complemento02	= complemento02;
                ttMov2.complemento03	= complemento03;
                ttMov2.complemento04	= complemento04;
                ttMov2.complemento05	= "";
                ttMov2.complemento06	= "";
                ttMov2.complemento07	= "";
                ttMov2.complemento08	= "";
                ttMov2.complemento09	= "";
                ttMov2.complemento10	= "";
                ttMov2.nomeArquivo		= nomeArquivo;
                ttMov2.naturezaContabil  = "C";
                ttMov2.contaDebito       = "";
                ttMov2.contaCredito      = "";
                mapaVariavel.put(key,ttMov2);

            } catch (Exception ex) {
            }
        }
    }
    return mapaVariavel;
}







public boolean readExtratoTransfeeraPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoLinkerPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoEfiPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoMercadoPagoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}



public HashMap readFrancesinhaSicoobPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}



public boolean readExtratoBMGExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoTargetPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-target-EXCEL @##############################################*/
public boolean readExtratoTargetExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



public boolean readExtratoCredisisPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    // logger.logInfo("read CREDISSIS PDF");

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento	 = "";
    String tipoPlanilha      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String nomeEmpresa       = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idataMovimento	= -1;
    int idocumento      = -1;
    int inomePortador	= -1;
    int inomeOrigem		= -1;
    int ivalorDocumento	= -1;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA")) tipoPlanilha = jDados.optString("TIPOPLANILHA");
    if(jDados.has("NOMEEMPRESA")) nomeEmpresa = jDados.optString("NOMEEMPRESA");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        // logger.logInfo("Line CREDISSIS pdf -> "+line);
        // logger.logInfo("MF0 Target pdf -> "+memFile.getStringFieldRemoveEspCharsUpper(0));

        idataMovimento = 0;
        idocumento = (memFile.getFieldsSize() >= 5) ? 1 : -1;
        ivalorDocumento = memFile.getFieldsSize() - 2;

        if(memFile.getFieldsSize() > 2){
            if(memFile.getFieldsSize() > 5){
                inomeOrigem = memFile.getFieldsSize() - 4;
                ivalorDocumento = memFile.getFieldsSize() - 1;
            }

            else{
                inomeOrigem = memFile.getFieldsSize() - 3;
            }
        }

        else{
            inomeOrigem = -1;
        }

        // logger.logInfo("idataMovimento -> " + idataMovimento + " inomeOrigem -> " + inomeOrigem);
        if(memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("OUVIDORIA")){
            try {
                dbIOCont.update("IO_EXTRATO")
                        .fields("HISTORICO")
                        .where("CHAVE = ? ")
                        .param(nomeOrigem + " " + memFile.getStringFieldRemoveEspCharsUpper(0))
                        .param(chaveExtrato)
                        .execute();
            } catch (Exception sqlUpdateException) {
            }
            continue;
        }

        try {
            // logger.logInfo(" MF idt -> " + memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
            String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
            try{
                dataMovimento = getCampoDate(dataString, "dd-MM-yyyy");

                dataLote	  = getCampoDate(dataMovimento, "", "yyyy-MM");
            }catch(Exception e){
                dataMovimento = "";
            }
            // logger.logInfo("data -> " + dataMovimento + " || -> " +  memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-2));
            if (dataMovimento.equals("")) continue;


            valorDocumento  = 0;
            debitoCreditoAux = "";

            // logger.logInfo("ivd -> " + memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-2));

            nomePortador = nomePortador.replaceAll("\\?","");
            complemento01 = nomePortador.replaceAll("\\?","");

            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-2);
            if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
            if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

            try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
            catch (Exception vlrd) { valorDocumento = 0; }

            // logger.logInfo("VALOR -> "+valorDocumento+" | DT == "+dataMovimento+" | "+debitoCredito);
            // logger.logInfo("VALOR 1 -> "+valorDocumento);
            if (valorDocumento == 0) continue;

            nomeOrigem      = "";
            documento      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").replaceAll("\\?","").trim();

            if(memFile.getFieldsSize() > 5){
                nomeOrigem += memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem+1);
            }
            // logger.logInfo("DM -> "+dataMovimento);
            // logger.logInfo("VD -> "+valorDocumento);

            // logger.logInfo("MF " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento) + " | " + tipoLancamento);
            // logger.logInfo("MF2 " + line + " | " + debitoCreditoAux);
            // logger.logInfo();

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // logger.logInfo("NOE " + chaveExtrato + " | " + nomeOrigem + " | " + valorDocumento);

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }

    }
    return true;
}



/*#############################################@ EXTRATO-Fibra-EXCEL @##############################################*/
public boolean readExtratoFibraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}



/*#############################################@ EXTRATO-INDUSTRIAL-EXCEL @##############################################*/
public boolean readExtratoIndustrialExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}



/*#############################################@ EXTRATO-PAULISTA-EXCEL @##############################################*/
public boolean readExtratoPaulistaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}



/*#############################################@ EXTRATO-BBM-TXT @##############################################*/
public boolean readExtratoBBMTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}



/*#############################################@ EXTRATO-Votorantim-EXCEL @##############################################*/
public boolean readExtratoVotorantimExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}



//#2307-009642 - Leal

public HashMap readFrancesinhaBradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}



/*#############################################@ EXTRATO-HDT-EXCEL @##############################################*/


//#2312-024479 By Leal

public boolean readExtratoHDTExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoUBPPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public HashMap readSicoobComprovantesPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readFrancesinhaSicrediPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String nomeEmpresa       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomePortador      = "";
    String nomeOrigem        = "";
    String dataString        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String tipoLancamento    = "";
    String tipoPlanilha      = "";
    String tipo				 = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String contLinhaTexto    = "";
    String consolidaClass    = "";
    String classificacao     = "";
    String chave             = "";
    String key               = "";
    String lote              = "";

    boolean naoLeMais = false;
    boolean cabecalho = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idocumento = -1;
    int idataMovimento = -1;
    int inomeOrigem = -1;
    int ivalorJuros = -1;
    int ivalorMulta = -1;
    int ivalorDesconto = -1;
    int icomplemento01 = -1;
    int ivalorDocumento = -1;
    int ivalorPagamento = -1;
    int icomplemento02  = -1;

    int cont = 0;
    int auxI = 0;
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))    codEmpresa = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("NOMEEMPRESA"))       nomeEmpresa = jDados.optString("NOMEEMPRESA");
    if(jDados.has("NOMEPORTADOR"))       nomePortador = jDados.optString("NOMEPORTADOR");
    if(jDados.has("TIPO"))		   		tipo 		= jDados.optString("TIPO");

    //memFile.setFieldSeparator(";");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if(line.contains(";") &&  !line.contains("|") && tipo.equals("002")){
            memFile.setFieldSeparator(";");
        }

        if(tipo.equals("001")){
            idocumento=0;
            //2401-027195 - Foi pedido para pegar a data na coluna "DATA LCTO C/C" o invés da coluna "DATA MVTO"
            //idataMovimento=3;
            idataMovimento=4;
            inomeOrigem=2;
            ivalorJuros=8;
            ivalorMulta=9;
            ivalorDesconto=7;
            icomplemento01=13;
            ivalorDocumento=5;



            // SEU NO	NOSSO NO	PAGADOR	DATA MVTO	DATA LCTO C/C	VLR NOMINAL	ABAT.	DESCONTO	JUROS	MULTA	VLR MVTO	TIPO MVTO	DESC. MVTO	CARTEIRA	AGENCIA	C/C	%	VALOR
            if(line.contains("SEU NO")&&line.contains("NOSSO NO")&&line.contains("PAGADOR")&&line.contains("DATA MVTO")&&line.contains("VLR NOMINAL")){
                cabecalho = true;
                continue;
            }

        }

        if (naoLeMais) continue;

        cont++;

        try {

            if(tipo.equals("001")){
                logger.logInfo("entrou 001");
                nomeOrigem="";
                for(int i = 0; i < memFile.getFieldsSize(); i++){
                    //2401-027195 - Nao pegava os nomeOrigem que vinham com "/". Exemplo: COOPERCARGA S/A
                    //if(!memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem+i).contains("/")&&
                    if(!memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem+i).contains("/20")&&
                            quantityOf(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem+i),"/")!=2&&cabecalho){
                        nomeOrigem+=" "+memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem+i);
                        auxI=i;
                    }else{
                        ivalorJuros=ivalorJuros+auxI;
                        ivalorMulta=ivalorMulta+auxI;
                        ivalorDesconto=ivalorDesconto+auxI;
                        icomplemento01=icomplemento01+auxI;
                        ivalorDocumento=ivalorDocumento+auxI;
                        idataMovimento=idataMovimento+auxI;
                        break;
                    }
                }
            }

            if(tipo.equals("002")){
                logger.logInfo("entrou 002");
                idocumento = 1;
                idataMovimento = 5;
                inomeOrigem = 3;
                ivalorDocumento = 6;
                ivalorPagamento = 7;
                icomplemento02 = 8;
            }

				/*if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem+auxI).contains("/") &&
					quantityOf(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem+auxI), "/") == 2){

					ivalorJuros = ivalorJuros + auxI;
					ivalorMulta = ivalorMulta + auxI;
					ivalorDesconto = ivalorDesconto + auxI;
					icomplemento01 = icomplemento01 + auxI;
					ivalorDocumento = ivalorDocumento + auxI;
					idataMovimento = idataMovimento + auxI;
					// break;
				}*/

            dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);

            if (!dataString.equals("")) {
                String dataMovimentoAux	  = getCampoDate(dataString);
                if (dataMovimentoAux.contains("/")) {
                    dataMovimento     = getCampoDate(dataString);
                    dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");

                }
            }
            // if (!dataString.equals("") && dataMovimento.equals("")) {
            // if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
            // String pattern = "";
            // if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
            // if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
            // pattern = "yyyy-MM-dd hh:mm:ss";
            // } else {
            // pattern = "yyyy-MM-dd";
            // }
            // dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
            // } else {
            // try {
            // pattern = "ddddd";
            // dataString = cutString(dataString, 0, 5);
            // Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
            // int datanum = Integer.parseInt(dataString);
            // Calendar calSerial = Calendar.getInstance();
            // calSerial.setTime(dt);
            // calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
            // dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
            // } catch (Exception dt2) {dataMovimento = "";}
            // }
            // if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
            // }
            // }
            // }
            // dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim();

            if (dataMovimento.equals("")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("") && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

            if(icomplemento01 >= 0){
                complemento01 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento01);
            }

            //2312-024918
            if(icomplemento02 >= 0){
                complemento02 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);
            }

            documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);

            if(tipo.equals("002")){
                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
            }

            try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
            catch (Exception vlrd) { valorDocumento = 0; }

            //2312-024918
            if(ivalorPagamento >= 0){
                try{valorPagamento = memFile.getDoubleField(ivalorPagamento);}
                catch (Exception vlrd) { valorPagamento = 0; }
            } else {
                valorPagamento = 0;
            }

            valorDocumento = Math.abs(valorDocumento);

            debitoCredito = "EXTRATO-CREDITO";

            try{valorJuros = memFile.getDoubleField(ivalorJuros);}
            catch (Exception vlrJr) { valorJuros = 0; }

            try{valorDesconto = memFile.getDoubleField(ivalorDesconto);}
            catch (Exception vlrDesc) { valorDesconto = 0; }

            try{valorMulta = memFile.getDoubleField(ivalorMulta);}
            catch (Exception vlrMul) { valorMulta = 0; }

            if (valorDocumento == 0) continue;

            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~  Criacao de Lote / Chave
            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 04, "0");
            consolidaClass = contLinhaTexto;

            classificacao = dataMovimento + "0" + consolidaClass;

            lote = String.format( "%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento );

            /*  A) Um movimento que serᠣriado, para a contabiliza磯 da venda. Este movimento deverᠴer:
             * No campo portador = Caixa
             * No campo complemento(02) = Venda
             * No campo Valor do movimento = Posi絥s indicadas no roteiro
             */
            chave = lote + contLinhaTexto;
            key	= chave  + "-CTB";
            //logger.logDebug("###1319### "+line);

            //2312-024918
            if(valorDocumento > 0 && valorPagamento > 0){
                if(valorPagamento > valorDocumento) valorJuros = DecimalUtil.toDecimal(String.format("%.2f", valorPagamento - valorDocumento));
                if(valorPagamento < valorDocumento) valorDesconto = DecimalUtil.toDecimal(String.format("%.2f", valorDocumento - valorPagamento));
            }

            ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
            if (ttMov2 == null) {
                ttMov2 = new ttMovimentoPadrao();
            }
            ttMov2.lote		 	    = lote;
            ttMov2.documento   	    = documento;
            ttMov2.codEmpresa 	    = codEmpresa;
            ttMov2.nomeEmpresa      = nomeEmpresa;
            ttMov2.dataMovimento    = dataMovimento;
            ttMov2.tipoMovimento    = "CTB";
            ttMov2.tipoLancamento   = tipoLancamento;
            ttMov2.historico		= "";
            ttMov2.valorDocumento   = valorDocumento;
            ttMov2.valorDesconto    = valorDesconto;
            ttMov2.valorMulta  	    = valorMulta;
            ttMov2.valorJuros  	    = valorJuros;
            ttMov2.contaJuros    	= "";
            ttMov2.contaMulta		= "";
            ttMov2.contaDesconto  	= "";
            ttMov2.nomePortador     = nomePortador;
            ttMov2.centroCusto  	= "";
            ttMov2.nomeOrigem 	    = nomeOrigem;
            ttMov2.cpfCnpj          = cpfCnpj;
            ttMov2.chave            = chave + "-CTB";
            ttMov2.classificacao    = classificacao;
            ttMov2.tipoPlanilha     = tipoPlanilha;

            ttMov2.complemento01	= complemento01;
            ttMov2.complemento02	= complemento02;
            ttMov2.complemento03	= complemento03;
            ttMov2.complemento04	= complemento04;
            ttMov2.complemento05	= "";
            ttMov2.complemento06	= "";
            ttMov2.complemento07	= "";
            ttMov2.complemento08	= "";
            ttMov2.complemento09	= "";
            ttMov2.complemento10	= "";
            ttMov2.nomeArquivo		= nomeArquivo;
            ttMov2.naturezaContabil  = "C";
            ttMov2.contaDebito       = "";
            ttMov2.contaCredito      = "";
            mapaVariavel.put(key,ttMov2);

        } catch (Exception ex) {
            logger.logInfo("ERRO = "+ex.getMessage());
        }

    }
    return mapaVariavel;
}


public HashMap readErpFolhaDominio(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoSisprimePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoPaybrokersPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public HashMap readErpFolhaWk(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoGrafenoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoGrafenoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public HashMap readFrancesinha_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String nomeEmpresa       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String nomePortador      = "";
    String dataString        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String tipoLancamento    = "";
    String tipoPlanilha      = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String contLinhaTexto    = "";
    String consolidaClass    = "";
    String classificacao     = "";
    String chave             = "";
    String key               = "";
    String lote              = "";
    String nomeOrigemAux     = "";
    String dataAux			 = "";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int idataMovimento  = 1;
    int idocumento      = 10;
    int inomeOrigem     = 1;
    int ivalorDocumento = 4;
    int ivalorJuros     = 6;
    int icomplemento02  = 10;
    int ivalorDesconto  = 7;
    int icomplemento03  = 8;

    int cont = 0;

    if(jDados.has("CODEMPRESA"))         codEmpresa = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))        nomeArquivo = jDados.optString("NOMEARQUIVO");
    if(jDados.has("NOMEEMPRESA"))        nomeEmpresa = jDados.optString("NOMEEMPRESA");
    if(jDados.has("DATAMOVIMENTO"))      dataString = jDados.optString("DATAMOVIMENTO");
    if(jDados.has("TIPOLANCAMENTO")) 	 tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA"))    	 tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("NOMEPORTADOR"))       nomePortador = jDados.optString("NOMEPORTADOR");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if(memFile.getFieldsSize() <= 3 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA")) continue;

        ivalorDocumento = 4;
        ivalorJuros     = 6;
        ivalorDesconto  = 7;
        idocumento      = 10;
        icomplemento02	= 10;
        icomplemento03  = 8;

        cont++;

        try {

            if(nomeArquivo.contains(".csv") && line.contains(";") && !line.contains("\\|")) memFile.setFieldSeparator(";");

            try{
                if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA") && memFile.getStringFieldRemoveEspCharsUpper(0).contains("DO") &&
                        memFile.getStringFieldRemoveEspCharsUpper(0).contains("MOVIMENTO")){
                    dataAux = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
                }
                dataMovimento = dataAux;
                dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");

            }
            catch(Exception e){}

            if(dataMovimento.equals("")) continue;

            nomeOrigem =  memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
            nomeOrigem = nomeOrigem.replaceAll("\"", "").trim();

            if(!memFile.getStringFieldRemoveEspCharsUpper(3).contains("/20")){
                ivalorDocumento = 3;
                ivalorJuros = 5;
                ivalorDesconto = 6;
                idocumento = 9;
                icomplemento02 = 9;
                icomplemento03 = 7;
            }

            if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\\*","").equals("")){
                documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento+1);

                complemento02 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento02+1);
            } else{
                documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
                documento = documento.replaceAll("\\*","").trim();

                complemento02 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);
                complemento02 = complemento02.replaceAll("\\*","").trim();
            }

            complemento03 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento03);

            try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
            catch (Exception vlrd) { valorDocumento = 0; }

            try{valorJuros = memFile.getDoubleField(ivalorJuros);}
            catch (Exception vlrd) { valorJuros = 0; }

            try{valorDesconto= memFile.getDoubleField(ivalorDesconto);}
            catch (Exception vlrd) { valorDesconto = 0; }


            // Este padrão roda somente recebimentos
            debitoCredito = "EXTRATO-CREDITO";

            valorDocumento = Math.abs(valorDocumento);
            valorJuros = Math.abs(valorJuros);
            valorMulta = Math.abs(valorMulta);
            valorDesconto = Math.abs(valorDesconto);

            if (valorDocumento == 0) continue;

            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~  Criacao de Lote / Chave
            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 04, "0");
            consolidaClass = contLinhaTexto;

            classificacao = dataMovimento + "0" + consolidaClass;


            lote = String.format( "%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento );
            chave = lote + contLinhaTexto;
            key = chave  + "-CTB";
            //logger.logDebug("###1319### "+line);

            ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
            if (ttMov2 == null) {
                ttMov2 = new ttMovimentoPadrao();
            }
            ttMov2.lote             = lote;
            ttMov2.documento        = documento;
            ttMov2.codEmpresa       = codEmpresa;
            ttMov2.nomeEmpresa      = nomeEmpresa;
            ttMov2.dataMovimento    = dataMovimento;
            ttMov2.tipoMovimento    = "CTB";
            ttMov2.tipoLancamento   = tipoLancamento;
            ttMov2.historico        = "";
            ttMov2.valorDocumento   = valorDocumento;
            ttMov2.valorDesconto    = valorDesconto;
            ttMov2.valorMulta       = 0;
            ttMov2.valorJuros       = valorJuros;
            ttMov2.contaJuros       = "";
            ttMov2.contaMulta       = "";
            ttMov2.contaDesconto    = "";
            ttMov2.nomePortador     = nomePortador;
            ttMov2.centroCusto      = "";
            ttMov2.nomeOrigem       = nomeOrigem;
            ttMov2.cpfCnpj          = cpfCnpj;
            ttMov2.chave            = chave + "-CTB";
            ttMov2.classificacao    = classificacao;
            ttMov2.tipoPlanilha     = tipoPlanilha;

            ttMov2.complemento01    = complemento01;
            ttMov2.complemento02    = complemento02;
            ttMov2.complemento03    = complemento03;
            ttMov2.complemento04    = complemento04;
            ttMov2.complemento05    = "";
            ttMov2.complemento06    = "";
            ttMov2.complemento07    = "";
            ttMov2.complemento08    = "";
            ttMov2.complemento09    = "";
            ttMov2.complemento10    = "";
            ttMov2.nomeArquivo      = nomeArquivo;
            ttMov2.naturezaContabil  = "C";
            ttMov2.contaDebito       = "";
            ttMov2.contaCredito      = "";
            mapaVariavel.put(key,ttMov2);

        } catch (Exception ex) {
        }

    }
    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoAbrapetite(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


//##############################################**CARTAO ALELO CSV**#######################
public HashMap readAleloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExpressDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-AMERICANEXPRESS-EXCEL @##############################################*/
public HashMap readCartaoAmericanExtratoDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-BENVISA-EXCEL @##############################################*/
public HashMap readCartaoBenVisaExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-BIN-EXCEL @##############################################*/
public HashMap readCartaoBinExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-BONUS-EXCEL @##############################################*/
public HashMap readExtratoBonus(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-CABAL-EXCEL @##############################################*/
public HashMap readCartaoCabal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-CALCARD-EXCEL @##############################################*/
public HashMap readCartaoCalcardExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCielo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartaoCieloExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

public HashMap readCartaoCieloRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-CIELO-EXCEL @##############################################*/
public HashMap readCartao_Cielo_Simples_Sem_Bandeira(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-CARREFOUR-EXCEL @##############################################*/
public HashMap readCartaoCarrefour(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-ABREAPETITE-EXCEL @##############################################*/
public HashMap readCartaoCooper(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-SANTANDERCREDITO-EXCEL @##############################################*/
public HashMap readCartaoCreditoSantander(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-ELAVON-EXCEL @##############################################*/
public HashMap readExtratoElavon(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNet2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-GETNET-EXCEL @##############################################*/
public HashMap readExtratoGetNetRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}



/*#############################################@ CARTAO-GOODCARD-EXCEL @##############################################*/
public HashMap readExtratoGoodcard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}



/*#############################################@ CARTAO-GREENCARD-EXCEL @##############################################*/
public HashMap readCartaoGreenCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-IFOOD-EXCEL @##############################################*/



/*#############################################@ EXTRATO-MASTERFARMA-EXCEL @##############################################*/
public HashMap readCartaoMasterFarma(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-MERCADOLIVRE-EXCEL @##############################################*/
public HashMap readCartaoMercadoLivre(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-MOIP-EXCEL @##############################################*/
public HashMap readExtratoMoip(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-MOOZ-EXCEL @##############################################*/
public HashMap readCartaoMoozCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoNutricard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}


/*#############################################@ CARTAO-PAGSEGURO-EXCEL @##############################################*/
public HashMap readExtratoPagSeguro(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-PAGUECOM-EXCEL @##############################################*/
public HashMap readPaguecomCSV(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-PAYPAL-EXCEL @##############################################*/
public HashMap readCartaoPayPal(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}


/*#############################################@ CARTAO-POLICARD-EXCEL @##############################################*/
public HashMap readCartaoPoliCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardNovoPadrao(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDeb(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardCred(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ EXTRATO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefaultNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardDefault(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}


/*#############################################@ CARTAO-REDECARD-EXCEL @##############################################*/
public HashMap readCartaoRedecardTxt(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-SAFRA-CSV @##############################################*/
public HashMap readCartaocSafraCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SEMPARAR-EXCEL @##############################################*/
public HashMap readExtratoSemParar2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenff(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

/*#############################################@ CARTAO-SENFF-EXCEL @##############################################*/
public HashMap readExtratoSenffLayout2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagFluxoCaixa(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}

/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipag(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}
/*#############################################@ EXTRATO-SIPAG-EXCEL @##############################################*/
public HashMap readExtratoSipagRefatorado(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-NUTRICARD-EXCEL @##############################################*/
public HashMap readExtratoSodexo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}


/*#############################################@ EXTRATO-STELO-EXCEL @##############################################*/
public HashMap readCartaoSteloCsv(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-STONE-EXCEL @##############################################*/
public HashMap readExtratoStone(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}


/*#############################################@ CARTAO-SUMUP-EXCEL @##############################################*/
public HashMap readCartaoSumup(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-TRIOCARD-EXCEL @##############################################*/
public HashMap readCartaoTrioCard(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {



    return mapaVariavel;
}


/*#############################################@ EXTRATO-VALECARD-PDF @##############################################*/
public HashMap readExtratoValeCardPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ CARTAO-VRALIMENTACAO-TXT @##############################################*/
public HashMap readExtratoVRAlimentacao(String lineParam, MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}



public HashMap readExtratoMagaLU(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readExtratoPagarME(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public HashMap readExtratoNetshoes(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}



/*#############################################@ EXTRATO-LIV-PDF @##############################################*/
public HashMap readCartaoLivPdf(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*#############################################@ CARTAO-FIDELIDADE-EXCEL @##############################################*/
public HashMap readCartaoFidelidade(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


/*     Leitura de Planilha Padrao - EXTRATO AIQUEFOME

## ################################################################################################################## */
public HashMap readExtratoAiquefome(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}




/*     Leitura de Planilha Padrao - EXTRATO UBEREATS

        ## ################################################################################################################## */
public HashMap readExtratoUbereats(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoSquidExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoAmazoniaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-TRIBANCO-PDF @##############################################*/
public boolean readExtratoTribancoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


public boolean readExtratoPagseguroExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBS2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoBanesePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}




public boolean readExtratoNordestePDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoExtrato  	 = "";
    String anoAux  			 = "";
    String nomeAntes 		 = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    double valorDocumentoAux = 0.0;
    int idataMovimento	= -1;
    int idocumento      = -1;
    int inomePortador	= -1;
    int inomeOrigem		= -1;
    int ivalorDocumento	= -1;

    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    // if(jDados.has("LINE"))  	   linha  		= jDados.optString("LINE");
    if(jDados.has("TIPOEXTRATO"))  tipoExtrato  = jDados.optString("TIPOEXTRATO");

    // logger.logInfo("LINHA NORD -> " + linha);



    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        idataMovimento = 0;
        inomeOrigem = 1;
        idocumento = 2;
        ivalorDocumento = 3;


        if(memFile.getFieldsSize() == 1 && !line.contains("/") && !line.contains("SALDO") && !line.contains("DETALHAMENTO")){
            nomeAntes = memFile.getStringFieldRemoveEspCharsUpper(0);
            continue;
        }

        if (memFile.getFieldsSize() == 1 && !nomeAntes.equals("") && !line.contains("GERADO EM")){
            nomeAntes = "";

            try {
                dbIOCont.update("IO_EXTRATO")
                        .fields("HISTORICO")
                        .where("CHAVE = ? ")
                        .param(nomeOrigem + " " + memFile.getStringFieldRemoveEspCharsUpper(0))
                        .param(chaveExtrato)
                        .execute();
            } catch (Exception sqlUpdateException) {
            }
            continue;
        }
        try {
            // #Fabrica(2019-05-20)
            try{
                if(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).matches("\\d{2}/\\d{2}/\\d{4}")){
                    dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
                    dataLote	  = getCampoDate(dataMovimento, "", "yyyy-MM");
                    //logger.logInfo("LOG DATA MOVIMENTO - " + dataMovimento);
                }
                else if(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).matches("regex aqui")){
                    dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento) + anoAux; // #27-09-2023 - Caso pare de vir ano junto de data, usar anoAux
                }
            }
            catch(Exception e){
                //exception
            }
            // logger.logInfo("DM "+idataMovimento+" -> "+dataMovimento+" MF DATA = "+memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));

            if (dataMovimento.equals("")) continue;

            valorDocumento  = 0;
            //logger.logInfo("LOG CAMPO VALOR - " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));

            try{
                valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
            catch (Exception vlrd) { valorDocumento = 0; }

            //logger.logInfo("VD "+ivalorDocumento+" -> " + valorDocumento);
            if (valorDocumento == 0) continue;


            nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
            if(!nomeAntes.equals("")){
                nomeOrigem = nomeAntes + " " + nomeOrigem;
            }
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
            complemento02   = documento;

            if(tipoExtrato.equals("001")){
                if (!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")) debitoCredito = "EXTRATO-CREDITO";
                if ( memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")) debitoCredito = "EXTRATO-DEBITO";
            }
            if(tipoExtrato.equals("002")){
                if ( memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("C")) debitoCredito = "EXTRATO-CREDITO";
                if ( memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("D")) debitoCredito = "EXTRATO-DEBITO";
            }

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
            if(chaveExtrato.length() > 200) chaveExtrato = cutString(chaveExtrato, 0 , 199);
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            //logger.logInfo("LOG EXTRATO EMPRESA - " + extratoEmpresa);
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }
    }
    return true;
}


public HashMap readErpFolhaAlterdataProgresso(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    return mapaVariavel;
}


public boolean readExtratoBancoDaycovalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoBancoPaulistaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BANESTE-EXCEL @##############################################*/
public boolean readExtratoBanesteDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


/*#############################################@ EXTRATO-BANPARA-EXCEL @##############################################*/
public boolean readExtratoBanpara(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


/*#############################################@ EXTRATO-BANPARA-TXT @##############################################*/
public boolean readExtratoBanparaTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-BANRISUL-TXT @##############################################*/
public boolean readExtratoBANRISULDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readExtratoBancoBrasilExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    logger.logInfo("--LENDO EXTRATO BB--");

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int idataMovimento	     = 0;
    int idocumento		     = 5;
    int inomeOrigem		     = 7;
    int ivalorDocumento	     = 8;
    int iauxDebitoCredito    = 9;
    int icontiNomeOrigem     = 10;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
            // logger.logInfo("MFIDM " + memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"",""));
            String colunaDaData = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
            logger.logInfo("COLUNA DATA -> " + colunaDaData);
            if (colunaDaData.replaceAll("\"","").equals("")) continue;

            logger.logInfo("PASSOU CONTINUE");



            try {
                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        // logger.logInfo("DT2 " + dt2.getMessage());
                        logger.logInfo("ENTROU CONTINUE");
                        continue; }
                }
            }



            // logger.logInfo("MFSDEVAL " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));

            valorDocumento  = 0;
            try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
            catch (Exception vlrd) { valorDocumento = 0; }
            if (valorDocumento == 0) continue;

            nomeOrigem      = "";
            nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
            if (!memFile.getStringFieldRemoveEspCharsUpper(icontiNomeOrigem).equals("")) nomeOrigem = nomeOrigem + " - " + memFile.getStringFieldRemoveEspCharsUpper(icontiNomeOrigem);

            if (nomeOrigem.replaceAll(" ", "").contains("SALDO")) {
                // logger.logInfo("NOOO " + nomeOrigem);
                continue;
            }
            complemento01   = nomePortador;
            documento		= "";
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
            complemento02	= "";
            complemento02	= documento;

            String auxDebitoCredito = memFile.getStringFieldRemoveEspCharsUpper(iauxDebitoCredito);

            if (auxDebitoCredito.contains("C")) {
                debitoCredito = "EXTRATO-CREDITO";
            } else {
                if (auxDebitoCredito.contains("D")) {
                    debitoCredito = "EXTRATO-DEBITO";
                } else {
                    // logger.logInfo("CTN DC");
                    continue;
                }
            }

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Padr?o Sicoob", readExtratoException);
        }
    }
    return true;
}


/*#############################################@ EXTRATO-BBFINANCIAMENTOS-EXCEL @##############################################*/
public boolean readExtratoBancoDoBrasilFinanciamentos(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


public boolean readExtratoBancoDoBrasilPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    //#2311-022830 - Leal
    logger.logDebug("BBPDF");

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String valorDocumentoAux = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idataMovimento	= 0;
    int idocumento      = 4;
    int inomePortador	=-1;
    int inomeOrigem		= 3;
    int ivalorDocumento	= 5;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
        // naoLeMais = false; //Nao era dado false antes da condicao para true do naoLeMais, fazendo o codigo nao ler o resto que era necessario
        // if (line.replaceAll(" ", "").contains("999") && line.replaceAll(" ", "").contains("SALDO") && !line.contains("ANTERIOR")) naoLeMais = true;
        if (line.replaceAll(" ", "").contains("999") && line.replaceAll(" ", "").contains("SALDO") && !line.contains("ANTERIOR")) continue;
        if (line.startsWith("TRANSACAO") && memFile.getFieldsSize() == 1) continue;
        if (line.startsWith("SERVICO DE ATENDIMENTO") && memFile.getFieldsSize() == 1) continue;
        if (line.startsWith("PARA DEFICIENTES") && memFile.getFieldsSize() == 1) continue;
        if (line.startsWith("---------------") && memFile.getFieldsSize() == 1) continue;
        if (memFile.getFieldsSize() == 1 && memFile.getStringFieldRemoveEspCharsUpper(0).contains("DESPESAS VINCULADAS")) naoLeMais = true;
        if (naoLeMais) continue;

        //logger.logInfo("Line -> "+line);

        if(memFile.getStringFieldRemoveEspCharsUpper(1).contains("/")){
            // logger.logInfo("TP1");
            idataMovimento	= 0;
            idocumento      = 5;
            inomePortador	=-1;
            inomeOrigem		= 4;
            ivalorDocumento	= 6;
            nomePortador = nomePortador.replaceAll("\\?","");
            complemento01 = nomePortador.replaceAll("\\?","");

            //Douglas feito para o chamado #2305-005743
            try {
                if (cutString(memFile.getStringFieldRemoveEspCharsUpper(1), " ").matches("[0-9]{4}")){
                    idataMovimento	= 0;
                    idocumento      = 4;
                    inomePortador	=-1;
                    inomeOrigem		= 3;
                    ivalorDocumento	= 5;
                }
            }catch(Exception e) {
                logger.logInfo("ERRO - "+e);
            }
        }else{
            // logger.logInfo("TP2");
            idataMovimento	= 0;
            idocumento      = 4;
            inomePortador	=-1;
            inomeOrigem		= 3;
            ivalorDocumento	= 5;
            //#2306-007500 Quando n?o h? NF (Documento) o pdf faz um deslocamento de colunas
            if(memFile.getStringFieldRemoveEspCharsUpper(5).equals("") || (memFile.getStringFieldRemoveEspCharsUpper(4).contains("C") || memFile.getStringFieldRemoveEspCharsUpper(4).contains("D"))){
                ivalorDocumento	= 4;
                idocumento      = -1;
            }
            nomePortador = nomePortador.replaceAll("\\?","");
            complemento01 = nomePortador.replaceAll("\\?","");
        }

        debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("[^A-Za-z]", "").trim();

        if (debitoCreditoAux.contains("C")) debitoCredito = "EXTRATO-CREDITO";
        if (debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-DEBITO";

        // comentado por xavier em20-04-2021
        //if(tipoLancamento.contains("PAG") && debitoCreditoAux.contains("C"))continue;
        //if(tipoLancamento.contains("REC") && debitoCreditoAux.contains("D"))continue;

        if (memFile.getFieldsSize() == 1) {
            // logger.logDebug("NOEEEEE " + chaveExtrato + " | " + nomeOrigem + " | " + valorDocumento);
            nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
            try {
                dbIOCont.update("IO_EXTRATO")
                        .fields("HISTORICO")
                        .where("CHAVE = ? ")
                        .param(nomeOrigem)
                        .param(chaveExtrato)
                        .execute();
            } catch (Exception sqlUpdateException) {
            }
        } else {
            try {
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { }
                    }
                }


                valorDocumento  = 0;
                debitoCreditoAux = "";

                //logger.logInfo("LOG VALOR TESTE - " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));

                if (memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("*")) continue;
                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }

                //#2309-016021 - Tratamento de valores que nao vem no formato correto ex: 5.000.00 em vez de 5.000,00
                if(valorDocumento == 0 && !memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains(",") &&
                        !memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")){
                    try{
                        valorDocumentoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("[.CD]", "").trim();
                        // logger.logInfo("LOG VALOR AUX - " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
                        valorDocumento = Double.parseDouble(valorDocumentoAux) / 100;
                        // logger.logInfo("LOG VALOR - " + valorDocumento);
                    } catch (Exception ex) {logger.logInfo("Erro ao capturar valor -> " + ex.getMessage());}

                }

                if (valorDocumento == 0) continue;

                //logger.logInfo("DM -> "+dataMovimento+" - VD -> "+valorDocumento);

                nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
                if(idocumento>=0) {//#2306-007500
                    documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
                    complemento02 = documento;

                }

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
                // logger.logInfo("LOG CONTLINHA - " + contLinhaExtrato);
                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;



                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                        .fields("CHAVE")
                        .param(chaveExtrato)
                        .queryUnique();

                // Inserir caso Chave nao encontrada.
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                .param(chaveExtrato)
                                .param(codEmpresa)
                                .param(dataMovimento)
                                .param(nomePortador)
                                .param(nomeOrigem)
                                .param(nomeArquivo.toUpperCase())
                                .param(complemento02)
                                .param(valorDocumento)
                                .param(debitoCredito)
                                .param(0)
                                .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(0)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}

public boolean readExtratoBancoDoBrasil2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String lineAux           = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    int idataMovimento	=  0;
    int idocumento      = -1;
    int inomePortador	= -1;
    int inomeOrigem		=  1;
    int ivalorDocumento	=  2;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        lineAux = line;
        line = StringUtil.removeSpecialCharsToUC(line);


        // logger.logInfo("coluna Valor -> " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
        //if (memFile.getStringFieldRemoveEspCharsUpper(1).replace(" ", "").startsWith("SALDO")) {continue;}

        if(line.startsWith("EXTRATO")) naoLeMais = true;

        if(line.startsWith("DIA")){
            naoLeMais = false;
            continue;
        }

        if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CONTA:")) {
            nomePortador = cutString(memFile.getStringFieldRemoveEspCharsUpper(0), "CONTA:");
        }

        if (memFile.getStringFieldRemoveEspCharsUpper(1).replace(" ", "").startsWith("SALDO")) {continue;}
        // if (line.startsWith("EXTRATO DE")) {
        //     chaveExtrato = "";
        //     continue;
        // }
        if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("INFORMACOES ADICIONAIS") ||
                memFile.getStringFieldRemoveEspCharsUpper(0).contains("TOTAL APLICACOES FINANCEIRAS")) {naoLeMais = true;}

        if (naoLeMais) continue;

        if (memFile.getFieldsSize() == 1) {

            try {
                dbIOCont.update("IO_EXTRATO")
                        .fields("HISTORICO")
                        .where("CHAVE = ? ")
                        .param(nomeOrigem + " " + memFile.getStringFieldRemoveEspCharsUpper(0))
                        .param(chaveExtrato)
                        .execute();
            } catch (Exception sqlUpdateException) {
            }
        }



        try {

            // logger.logInfo("SHR LINE = " + line + " | FS -> " + memFile.getFieldsSize());

            // if(memFile.getFieldsSize() != 2){
            if(memFile.getFieldsSize() == 2){
                //logger.logInfo("LOG LINE - " + line);
                if(memFile.getStringFieldRemoveEspCharsUpper(0).matches("\\d{2}/\\d{2}/\\d{4}")){

                    try{
                        dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));

                        //logger.logInfo("ENTROU IF INTERNO - " + dataMovimento);

                        dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");

                        nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

                        //logger.logInfo("FIELD SIZE 2 DATA - " + " NO COMPLETO -> " + nomeOrigem + "Data - " + dataMovimento);


                        continue;
                    }

                    catch(Exception e){}
                }


            }

            nomeOrigem = nomeOrigem + " " + memFile.getStringFieldRemoveEspCharsUpper(0);

            if(memFile.getFieldsSize() == 3){
                try{
                    dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));

                    dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
                }

                catch(Exception e){}

                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

                logger.logInfo("LOG NOME ORIGEM > " + nomeOrigem + " | DATA > " + dataMovimento);
            }

            // }


            // logger.logInfo(" is -> " + ivalorDocumento + " | " + inomeOrigem);
            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1);
            if (debitoCreditoAux.contains("C") || debitoCreditoAux.contains("+")) {
                debitoCredito = "EXTRATO-CREDITO";
                logger.logInfo("LOG EXTRATO CREDITO");
            }
            if (debitoCreditoAux.contains("D") || debitoCreditoAux.contains("-")) {
                logger.logInfo("LOG EXTRATO DEBITO");
                debitoCredito = "EXTRATO-DEBITO";
            }

            valorDocumento  = 0;
            try{

                String valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).replace("(-)", "").replace("(+)", "").trim();

                valorDocAux = valorDocAux.replace(".", "").replace(",", ".");
                //logger.logInfo("LOG VALOR DOC AUX - " + valorDocAux);
                valorDocumento = Math.abs(Double.parseDouble(valorDocAux));
                //logger.logInfo("LOG VALOR DOC Convertido- " + Double.toString(valorDocumento));

                //logger.logInfo("LOG CONTEUDO - " + valorDocAux);

            }
            catch (Exception vlrd) {
                valorDocumento = 0;

                //logger.logInfo("LOG CATCH- " + stringTeste);
            }

            //logger.logInfo("LOG VALOR - " + valorDocumento);
            if (valorDocumento == 0) continue;
            // if(memFile.getFieldsSize() == 2)
            // nomeOrigem		= complemento08 + " " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();


            //logger.logInfo(" VD -> " + valorDocumento + " NO COMPLETO -> " + nomeOrigem + "Data - " + dataMovimento);
            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }

    }
    return true;
}

public boolean readExtratoBancoDoBrasil3PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    int idataMovimento	=  0;
    int idocumento      =  2;
    int inomeOrigem		=  1;
    int ivalorDocumento	=  3;

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if (memFile.getStringFieldRemoveEspCharsUpper(1).replace(" ", "").startsWith("SALDO")) {continue;}

        if (naoLeMais) continue;

        try {

            try{
                dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
                dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
            } catch(Exception e){}

            if(dataMovimento.equals("")) continue;

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);

            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            if (debitoCreditoAux.contains("C")) {
                debitoCredito = "EXTRATO-CREDITO";
            }
            if (debitoCreditoAux.contains("D")) {
                debitoCredito = "EXTRATO-DEBITO";
            }

            try{
                String valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("D", "").replace("C", "").trim();
                valorDocAux = valorDocAux.replace(".", "").replace(",", ".");
                valorDocumento = Math.abs(Double.parseDouble(valorDocAux));
            } catch (Exception vlrd) {valorDocumento = 0;}

            if (valorDocumento == 0) continue;


            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }

    }
    return true;
}




/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    //USADO -> Vipcontabilidade.MiequipamentosContas_Pagas
    JSONObject extratoEmpresa = new JSONObject();
    logger.logDebug("METODO 1");
    //Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String qualPadrao        = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean f = false;
    boolean naoLeMais = false;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
            if (line.contains("S A L D O")){ f = true; continue;}
            if (line.contains("DT") && line.contains("MOVIMENTO") && line.contains("BALANCETE")){ f = false; }
            if(f) continue;
            if ((line.startsWith("AGENCIA") || line.startsWith("AGINCIA") ) || (line.startsWith("CONTA") && line.contains("CORRENTE"))) {
                String nomePortadorAuxiliar = line.substring(line.indexOf("  ")).trim();
                if (nomePortadorAuxiliar.contains(" ")) {
                    nomePortadorAuxiliar = nomePortadorAuxiliar.substring(0, nomePortadorAuxiliar.indexOf(" "));
                }
                if ((line.startsWith("AGENCIA") || line.startsWith("AGINCIA") ) && line.contains("CONTA")) {
                    // nomePortadorAuxiliar = line.substring(line.indexOf("CONTA:")).trim();
                    nomePortadorAuxiliar = cutString(line, "CONTA:", line.length());

                }

                nomePortador = String.format(
                        "%s %s",
                        nomePortador,
                        nomePortadorAuxiliar
                );

                continue;
            }


            complemento01   = nomePortador;
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            historico       = "";

            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;

            if (line.startsWith("DT. MOVIMENTO") && line.contains("LOTE")){
                qualPadrao = "PADRAO 1";
                continue;
            }
            if (line.startsWith("DT. MOVIMENTO") && !line.contains("LOTE")){
                qualPadrao = "PADRAO 2";
                continue;
            }

            if(line.contains("DATA") && line.contains("SALDO PREVISTO") && line.contains("HISTORICO") && line.contains("DOCUMENTO") && line.contains("VALOR")){
                // logger.logInfo("Valida PADRAO 03");
                qualPadrao = "PADRAO 3";
                continue;
            }

            if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {

                if (qualPadrao.equals("PADRAO 1") && line.length() < 128){
                    continue;
                }
                if (qualPadrao.equals("PADRAO 2") && line.length() > 128){
                    continue;
                }

                //Data Movimento.
                if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
                    try {
                        dataMovimento = line.substring( 0, 10 );
                        Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                        dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
                        dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
                        contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                    } catch (Exception dte) { continue; }
                }
                if (dataMovimento.equals("")) continue;
                if (qualPadrao.equals("PADRAO 1")){
                    debitoCredito = StringUtil.removeSpecialCharsToUC(line.substring( 127, 128 )).trim();

                    nomeOrigem    = StringUtil.removeSpecialChars(line.substring( 57, 90 )).trim().toUpperCase();

                    try{
                        documento = StringUtil.removeSpecialChars(line.substring( 92, 112 )).trim().toUpperCase();
                    }catch(Exception e){
                        logger.logDebug("ERRO: "+e.getMessage()+" - "+line);
                    }
                    complemento02 = "Documento:" + documento;

                    strValorDocumento = "0";
                    try{
                        strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 111, 127 )).trim().toUpperCase();
                        strValorDocumento    = strValorDocumento.replaceAll("\\.","").replaceAll("-","");

                        valorDocumento = DecimalUtil.toDecimal(strValorDocumento);
                    } catch (Exception vlrx) {
                        valorDocumento = 0;
                    }
                }
                if (qualPadrao.equals("PADRAO 2")){
                    try{
                        debitoCredito = StringUtil.removeSpecialChars(line.substring( 87, 90 )).trim().toUpperCase();
                    }catch(Exception e){
                        try{
                            debitoCredito = StringUtil.removeSpecialCharsToUC(line.substring( line.trim().length() - 1, line.trim().length() )).trim();
                        }catch(Exception e){
                            logger.logDebug("ERRO: "+e.getMessage()+" - "+line);
                        }
                    }
                    nomeOrigem    = StringUtil.removeSpecialChars(line.substring( 28, 52 )).trim().toUpperCase();

                    try{
                        documento = StringUtil.removeSpecialChars(line.substring( 52, 71 )).trim().toUpperCase();
                    }catch(Exception e){
                        logger.logDebug("ERRO: "+e.getMessage()+" - "+line);
                    }

                    complemento02 = "Documento:" + documento;

                    strValorDocumento = "0";
                    try{
                        strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 72, 86 )).trim().toUpperCase();
                        strValorDocumento    = strValorDocumento.replaceAll("\\.","").replaceAll("-","");

                        valorDocumento = DecimalUtil.toDecimal(strValorDocumento);
                    } catch (Exception vlrx) {
                        valorDocumento = 0;
                    }
                }

                if (qualPadrao.equals("PADRAO 3")){
                    // logger.logInfo("ENTROU PADRAO 3");
                    try{
                        debitoCredito = StringUtil.removeSpecialChars(line.substring( 81, 84 )).trim().toUpperCase();
                    }catch(Exception e){
                        try{
                            debitoCredito = StringUtil.removeSpecialCharsToUC(line.substring( line.trim().length() - 1, line.trim().length() )).trim();
                        }catch(Exception e){
                            logger.logDebug("ERRO: "+e.getMessage()+" - "+line);
                        }
                    }
                    nomeOrigem    = StringUtil.removeSpecialChars(line.substring( 11, 46 )).trim().toUpperCase();

                    try{
                        documento = StringUtil.removeSpecialChars(line.substring( 45, 69 )).trim().toUpperCase();
                    }catch(Exception e){
                        logger.logDebug("ERRO: "+e.getMessage()+" - "+line);
                    }

                    complemento02 = "Documento:" + documento;

                    strValorDocumento = "0";
                    try{
                        strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 67, 81 )).trim().toUpperCase();
                        strValorDocumento    = strValorDocumento.replaceAll("\\.","").replaceAll("-","");

                        valorDocumento = DecimalUtil.toDecimal(strValorDocumento);
                    } catch (Exception vlrx) {
                        valorDocumento = 0;
                    }

                    // logger.logInfo("DT -> " + dataMovimento + " |np -> " + nomePortador + " |DC _> " + debitoCredito + " |nO -> " + nomeOrigem + " |cpl02 -> " + complemento02 + " |vd -> " + valorDocumento + " |strValorDocumento -> " + strValorDocumento);
                }

                if(valorDocumento == 0) dataMovimento = "";
                if(valorDocumento == 0) continue;

                if (debitoCredito.contains("C")) {
                    debitoCredito = "EXTRATO-CREDITO";
                }else{
                    if (debitoCredito.contains("D")) {
                        debitoCredito = "EXTRATO-DEBITO";
                    } else {
                        continue;
                    }
                }


            }else{
                complemento02 = line.trim();
                nomeOrigem += " " + complemento02.trim();
                complemento02 = String.format("%s Documento:%s", complemento02, documento);
            }

            if (dataMovimento.trim().equals("")) continue;

            if(naoLeMais) continue;
            if(nomeOrigem.length() > 200)  nomeOrigem = nomeOrigem.substring(0, 199);
            //Chave para Insert/Update no Banco de Dados.
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            //Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {

                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
            } else {
                try {

                    dbIOCont.update("IO_EXTRATO")
                            .fields("COMPLEMENTO, EXTRATOLIDO, HISTORICO")
                            .where("CHAVE = ? ")
                            .param(complemento02)
                            .param(0)
                            .param(nomeOrigem)
                            .param(chaveExtrato)
                            .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }

    return true;
}


public HashMap readFaturaCartaoCredito_BradescoPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String nomeEmpresa       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String nomePortador      = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String tipoLancamento    = "";
    String tipoPlanilha      = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String contLinhaTexto    = "";
    String consolidaClass    = "";
    String classificacao     = "";
    String chave             = "";
    String key               = "";
    String lote              = "";
    String nomeOrigemAux     = "";
    String dataAux			 = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    String anoData 			 = "";

    boolean naoLeMais = false;

    int idataMovimento	= 0;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 4;

    int cont = 0;

    if(jDados.has("CODEMPRESA"))         codEmpresa = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))       nomeArquivo = jDados.optString("NOMEARQUIVO");
    if(jDados.has("NOMEEMPRESA"))       nomeEmpresa = jDados.optString("NOMEEMPRESA");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("NOMEPORTADOR"))       nomePortador = jDados.optString("NOMEPORTADOR");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        ivalorDocumento = memFile.getFieldsSize() - 1;

        cont++;
        try {

            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("MES:")){
                anoData = cutString(memFile.getStringFieldRemoveEspCharsUpper(1), "/");
            }

            if(memFile.getFieldsSize() < 3) continue;

            try{
                String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento) + "/" + anoData;
                dataMovimento = getCampoDate(dataString);
                dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
            } catch(Exception e){dataMovimento = "";}

            if (dataMovimento.equals("")) continue;

            try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
            catch (Exception vlrd) { valorDocumento = 0; }

            debitoCredito = "EXTRATO-DEBITO";

            valorDocumento = Math.abs(valorDocumento);

            if (valorDocumento == 0) continue;

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            complemento04 = nomeOrigem;
            complemento01 = nomePortador;

            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~  Criacao de Lote / Chave
            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 04, "0");
            consolidaClass = contLinhaTexto;

            classificacao = dataMovimento + "0" + consolidaClass;


            lote = String.format( "%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento );
            chave = lote + contLinhaTexto;
            key = chave  + "-CTB";

            ttMovimentoPadrao ttMov2 = new ttMovimentoPadrao();
            if (ttMov2 == null) {
                ttMov2 = new ttMovimentoPadrao();
            }
            ttMov2.lote             = lote;
            ttMov2.documento        = documento;
            ttMov2.codEmpresa       = codEmpresa;
            ttMov2.nomeEmpresa      = nomeEmpresa;
            ttMov2.dataMovimento    = dataMovimento;
            ttMov2.tipoMovimento    = "CTB";
            ttMov2.tipoLancamento   = tipoLancamento;
            ttMov2.historico        = "";
            ttMov2.valorDocumento   = valorDocumento;
            ttMov2.valorDesconto    = valorDesconto;
            ttMov2.valorMulta       = 0;
            ttMov2.valorJuros       = valorJuros;
            ttMov2.contaJuros       = "";
            ttMov2.contaMulta       = "";
            ttMov2.contaDesconto    = "";
            ttMov2.nomePortador     = nomePortador;
            ttMov2.centroCusto      = "";
            ttMov2.nomeOrigem       = nomeOrigem;
            ttMov2.cpfCnpj          = cpfCnpj;
            ttMov2.chave            = chave + "-CTB";
            ttMov2.classificacao    = classificacao;
            ttMov2.tipoPlanilha     = tipoPlanilha;

            ttMov2.complemento01    = complemento01;
            ttMov2.complemento02    = complemento02;
            ttMov2.complemento03    = complemento03;
            ttMov2.complemento04    = complemento04;
            ttMov2.complemento05    = "";
            ttMov2.complemento06    = "";
            ttMov2.complemento07    = "";
            ttMov2.complemento08    = "";
            ttMov2.complemento09    = "";
            ttMov2.complemento10    = "";
            ttMov2.nomeArquivo      = nomeArquivo;
            ttMov2.naturezaContabil  = "C";
            ttMov2.contaDebito       = "";
            ttMov2.contaCredito      = "";
            mapaVariavel.put(key,ttMov2);


        } catch (Exception ex) {
        }

    }
    return mapaVariavel;
}



public HashMap readFaturaCartaoCredito_BanrisulPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String nomeEmpresa       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String nomePortador      = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String tipoLancamento    = "";
    String tipoPlanilha      = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String contLinhaTexto    = "";
    String consolidaClass    = "";
    String classificacao     = "";
    String chave             = "";
    String key               = "";
    String lote              = "";
    String nomeOrigemAux     = "";
    String dataAux			 = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    String dataMovimentoAux  = "";
    String anoData 			 = "";

    boolean naoLeMais = true;

    int idataMovimento	= 0;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 2;
    int icomplemento02  = 2;

    int cont = 0;

    ttMovimentoPadrao ttMov2 = new ttMovimentoPadrao();

    if(jDados.has("CODEMPRESA"))         codEmpresa = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))       nomeArquivo = jDados.optString("NOMEARQUIVO");
    if(jDados.has("NOMEEMPRESA"))       nomeEmpresa = jDados.optString("NOMEEMPRESA");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("NOMEPORTADOR"))    nomePortador    = jDados.optString("NOMEPORTADOR");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("VENCIMENTO:")){
            anoData = cutString(memFile.getStringFieldRemoveEspCharsUpper(0), memFile.getStringFieldRemoveEspCharsUpper(0).lastIndexOf("/")).replaceAll("/", "");
        }

        if(line.contains("HISTORICO") && line.contains("TRANSACOES")){
            naoLeMais = false;
            continue;
        }

        if(naoLeMais) continue;

        if(memFile.getFieldsSize() == 1 && !nomeOrigem.equals("")){
            try{
                ttMov2 = (ttMovimentoPadrao)mapaVariavel.get(chave + "-CTB");
                if(ttMov2 != null){
                    ttMov2.nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
                    ttMov2.complemento04 += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
                    mapaVariavel.put(chave + "-CTB", ttMov2);
                    continue;
                }
            }

            catch(Exception e){}
        }

        if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("TOTAL") && memFile.getStringFieldRemoveEspCharsUpper(0).contains("GASTOS")) continue;

        if(memFile.getFieldsSize() > 2){
            inomeOrigem		= 1;
            ivalorDocumento	= 2;
            icomplemento02  = 2;
        } else {
            inomeOrigem		= 0;
            ivalorDocumento	= 1;
            icomplemento02  = 1;
        }

        cont++;

        try {

            try{
                //Quando tem mais de um lancamento no mesmo dia, a data so aparece no primeiro
                if(memFile.getFieldsSize() > 2){
                    String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento) + "/" + anoData;
                    dataMovimentoAux = getCampoDate(dataString);
                }
                dataMovimento = dataMovimentoAux;
                dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
            } catch(Exception e){dataMovimento = "";}

            if (dataMovimento.equals("")) continue;

            try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
            catch (Exception vlrd) { valorDocumento = 0; }

            debitoCredito = "EXTRATO-DEBITO";

            valorDocumento = Math.abs(valorDocumento);

            if (valorDocumento == 0) continue;

            nomeOrigem = "";
            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            complemento02 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);
            complemento01 = nomePortador;
            complemento04 = nomeOrigem;


            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~  Criacao de Lote / Chave
            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 04, "0");
            consolidaClass = contLinhaTexto;

            classificacao = dataMovimento + "0" + consolidaClass;


            lote = String.format( "%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento );
            chave = lote + contLinhaTexto;
            key = chave  + "-CTB";

            ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
            if (ttMov2 == null) {
                ttMov2 = new ttMovimentoPadrao();
            }
            ttMov2.lote             = lote;
            ttMov2.documento        = documento;
            ttMov2.codEmpresa       = codEmpresa;
            ttMov2.nomeEmpresa      = nomeEmpresa;
            ttMov2.dataMovimento    = dataMovimento;
            ttMov2.tipoMovimento    = "CTB";
            ttMov2.tipoLancamento   = tipoLancamento;
            ttMov2.historico        = "";
            ttMov2.valorDocumento   = valorDocumento;
            ttMov2.valorDesconto    = valorDesconto;
            ttMov2.valorMulta       = 0;
            ttMov2.valorJuros       = valorJuros;
            ttMov2.contaJuros       = "";
            ttMov2.contaMulta       = "";
            ttMov2.contaDesconto    = "";
            ttMov2.nomePortador     = nomePortador;
            ttMov2.centroCusto      = "";
            ttMov2.nomeOrigem       = nomeOrigem;
            ttMov2.cpfCnpj          = cpfCnpj;
            ttMov2.chave            = chave + "-CTB";
            ttMov2.classificacao    = classificacao;
            ttMov2.tipoPlanilha     = tipoPlanilha;

            ttMov2.complemento01    = complemento01;
            ttMov2.complemento02    = complemento02;
            ttMov2.complemento03    = complemento03;
            ttMov2.complemento04    = complemento04;
            ttMov2.complemento05    = "";
            ttMov2.complemento06    = "";
            ttMov2.complemento07    = "";
            ttMov2.complemento08    = "";
            ttMov2.complemento09    = "";
            ttMov2.complemento10    = "";
            ttMov2.nomeArquivo      = nomeArquivo;
            ttMov2.naturezaContabil  = "C";
            ttMov2.contaDebito       = "";
            ttMov2.contaCredito      = "";
            mapaVariavel.put(key,ttMov2);

        } catch (Exception ex) {
        }

    }
    return mapaVariavel;
}


public HashMap readFaturaCartaoCredito_BBPDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String nomeEmpresa       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String nomePortador      = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String tipoLancamento    = "";
    String tipoPlanilha      = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String contLinhaTexto    = "";
    String consolidaClass    = "";
    String classificacao     = "";
    String chave             = "";
    String key               = "";
    String lote              = "";
    String nomeOrigemAux     = "";
    String dataAux			 = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    String nomeOrigemAnterior = "";

    String anoData 			 = "";

    boolean naoLeMais = true;

    int idataMovimento	= 0;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 4;
    int icomplemento02  = 2;

    int numeroLancMesmaLinha = 0;
    int colunaVerificado = 0;

    int cont = 0;

    if(jDados.has("CODEMPRESA"))         codEmpresa = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))       nomeArquivo = jDados.optString("NOMEARQUIVO");
    if(jDados.has("NOMEEMPRESA"))       nomeEmpresa = jDados.optString("NOMEEMPRESA");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("NOMEPORTADOR"))       nomePortador = jDados.optString("NOMEPORTADOR");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        numeroLancMesmaLinha = 0;
        colunaVerificado = 0;

        idataMovimento	= -1;
        inomeOrigem		= -1;
        ivalorDocumento	= -1;
        icomplemento02  = -1;

        try {

            //Pega o ano para colocar nas datas
            if(line.contains("DATA DE VENCIMENTO")){
                anoData = cutString(line, line.lastIndexOf("/"), line.lastIndexOf("/")+5);
            }

            //Ignora tudo antes dos lancamentod
            if(line.contains("DETALHAMENTO DA SUA FATURA")){
                naoLeMais = false;
                continue;
            }

            if(naoLeMais) continue;

            //Cada lancamento usa 5 colunas
            if(memFile.getFieldsSize() < 10) numeroLancMesmaLinha = 1;
            else numeroLancMesmaLinha = 2;

            for(int i = 0; i < numeroLancMesmaLinha; i++){
                cont++;

                //Tratamento para pegar as colunas de cada lancamento a partir da coluna com a data
                for(int col = colunaVerificado; col < memFile.getFieldsSize(); col++){
                    if(memFile.getStringFieldRemoveEspCharsUpper(col).trim().length() == 5 && !memFile.getStringFieldRemoveEspCharsUpper(col).contains(",") &&
                            memFile.getStringFieldRemoveEspCharsUpper(col).contains("/")){
                        idataMovimento = col;
                        ivalorDocumento = col + 4;
                        inomeOrigem = col + 1;
                        icomplemento02 = col + 2;

                        colunaVerificado = col + 5;
                        break;
                    }
                }

                try{
                    String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento) + "/" + anoData;
                    dataMovimento = getCampoDate(dataString);
                    dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
                } catch(Exception e){dataMovimento = "";}

                if (dataMovimento.equals("")) continue;

                try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                catch (Exception vlrd) { valorDocumento = 0; }

                debitoCredito = "EXTRATO-DEBITO";

                valorDocumento = Math.abs(valorDocumento);

                if (valorDocumento == 0) continue;

                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

                complemento02 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);

                complemento04 = nomeOrigem;
                complemento01 = nomePortador;

                // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
                // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~  Criacao de Lote / Chave
                contLinhaTexto = String.valueOf(cont);
                contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 04, "0");
                consolidaClass = contLinhaTexto;

                classificacao = dataMovimento + "0" + consolidaClass;


                lote = String.format( "%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento );
                chave = lote + contLinhaTexto;
                key = chave  + "-CTB";

                ttMovimentoPadrao ttMov2 = new ttMovimentoPadrao();
                if (ttMov2 == null) {
                    ttMov2 = new ttMovimentoPadrao();
                }
                ttMov2.lote             = lote;
                ttMov2.documento        = documento;
                ttMov2.codEmpresa       = codEmpresa;
                ttMov2.nomeEmpresa      = nomeEmpresa;
                ttMov2.dataMovimento    = dataMovimento;
                ttMov2.tipoMovimento    = "CTB";
                ttMov2.tipoLancamento   = tipoLancamento;
                ttMov2.historico        = "";
                ttMov2.valorDocumento   = valorDocumento;
                ttMov2.valorDesconto    = valorDesconto;
                ttMov2.valorMulta       = 0;
                ttMov2.valorJuros       = valorJuros;
                ttMov2.contaJuros       = "";
                ttMov2.contaMulta       = "";
                ttMov2.contaDesconto    = "";
                ttMov2.nomePortador     = nomePortador;
                ttMov2.centroCusto      = "";
                ttMov2.nomeOrigem       = nomeOrigem;
                ttMov2.cpfCnpj          = cpfCnpj;
                ttMov2.chave            = chave + "-CTB";
                ttMov2.classificacao    = classificacao;
                ttMov2.tipoPlanilha     = tipoPlanilha;

                ttMov2.complemento01    = complemento01;
                ttMov2.complemento02    = complemento02;
                ttMov2.complemento03    = complemento03;
                ttMov2.complemento04    = complemento04;
                ttMov2.complemento05    = "";
                ttMov2.complemento06    = "";
                ttMov2.complemento07    = "";
                ttMov2.complemento08    = "";
                ttMov2.complemento09    = "";
                ttMov2.complemento10    = "";
                ttMov2.nomeArquivo      = nomeArquivo;
                ttMov2.naturezaContabil  = "C";
                ttMov2.contaDebito       = "";
                ttMov2.contaCredito      = "";
                mapaVariavel.put(key,ttMov2);

            }
        } catch (Exception ex) {
        }

    }
    return mapaVariavel;
}


/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDoc(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    //USADO -> Vipcontabilidade.MiequipamentosContas_Pagas
    JSONObject extratoEmpresa = new JSONObject();
    logger.logDebug("METODO 2");
    //Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String qualPadrao        = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if (line.startsWith("AGENCIA") || (line.startsWith("CONTA") && line.contains("CORRENTE"))) {
                String nomePortadorAuxiliar = line.substring(line.indexOf("  ")).trim();
                if (nomePortadorAuxiliar.contains(" ")) {
                    nomePortadorAuxiliar = nomePortadorAuxiliar.substring(0, nomePortadorAuxiliar.indexOf(" "));
                }
                nomePortador = String.format(
                        "%s %s",
                        nomePortador,
                        nomePortadorAuxiliar
                );

                continue;
            }


            complemento01   = nomePortador;
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            historico       = "";

            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;

            if (line.startsWith("DT. MOVIMENTO") && line.contains("LOTE")){
                qualPadrao = "PADRAO 1";
            }
            if (line.startsWith("DT. MOVIMENTO") && !line.contains("LOTE")){
                qualPadrao = "PADRAO 2";
            }

            if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
                if (qualPadrao.equals("PADRAO 1") && line.length() < 128) continue;
                if (qualPadrao.equals("PADRAO 2") && line.length() > 128) continue;
                if (line.contains("S A L D O")) continue;

                //Data Movimento.
                if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
                    try {
                        dataMovimento = line.substring( 0, 10 );
                        Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                        dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
                        dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
                    } catch (Exception dte) { continue; }
                }
                if (dataMovimento.equals("")) continue;
                if (qualPadrao.equals("PADRAO 1")){
                    debitoCredito = StringUtil.removeSpecialCharsToUC(line.substring( 127, 128 )).trim();

                    nomeOrigem    = StringUtil.removeSpecialChars(line.substring( 57, 90 )).trim().toUpperCase();

                    documento = StringUtil.removeSpecialChars(line.substring( 92, 112 )).trim().toUpperCase();

                    complemento02 = "Documento:" + documento;

                    strValorDocumento = "0";
                    try{
                        strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 111, 127 )).trim().toUpperCase();
                        strValorDocumento    = strValorDocumento.replaceAll("\\.","").replaceAll("-","");

                        valorDocumento = DecimalUtil.toDecimal(strValorDocumento);
                    } catch (Exception vlrx) {
                        valorDocumento = 0;
                    }
                }
                if (qualPadrao.equals("PADRAO 2")){
                    debitoCredito = StringUtil.removeSpecialChars(line.substring( 87, 90 )).trim().toUpperCase();
                    //debitoCredito = StringUtil.removeSpecialCharsToUC(line.substring( line.trim().length() - 1, line.trim().length() )).trim();

                    nomeOrigem    = StringUtil.removeSpecialChars(line.substring( 28, 52 )).trim().toUpperCase();

                    documento = StringUtil.removeSpecialChars(line.substring( 53, 71 )).trim().toUpperCase();

                    complemento02 = "Documento:" + documento;

                    strValorDocumento = "0";
                    try{
                        strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 72, 86 )).trim().toUpperCase();
                        strValorDocumento    = strValorDocumento.replaceAll("\\.","").replaceAll("-","");

                        valorDocumento = DecimalUtil.toDecimal(strValorDocumento);
                    } catch (Exception vlrx) {
                        valorDocumento = 0;
                    }
                }

                if(valorDocumento == 0) dataMovimento = "";
                if(valorDocumento == 0) continue;

                if (debitoCredito.contains("C")) {
                    debitoCredito = "EXTRATO-CREDITO";
                } else {
                    if (debitoCredito.contains("D")) {
                        debitoCredito = "EXTRATO-DEBITO";
                    } else {
                        continue;
                    }
                }

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            } else {
                complemento02 = line.trim();

                complemento02 = String.format("%s Documento:%s", complemento02, documento);
            }

            if (dataMovimento.trim().equals("")) continue;

            if(naoLeMais) continue;

            //Chave para Insert/Update no Banco de Dados.
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            //Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {

                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
            } else {
                try {

                    dbIOCont.update("IO_EXTRATO")
                            .fields("COMPLEMENTO, EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(complemento02)
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }

    return true;
}

/*#############################################@ EXTRATO-BB-TXT @##############################################*/
public boolean readExtratoBancoDoBrasilDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
    logger.logDebug("METODO 3");

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if (line.startsWith("AGENCIA") || (line.startsWith("CONTA") && line.contains("CORRENTE"))) {
                String nomePortadorAuxiliar = line.substring(line.indexOf("  ")).trim();
                if (nomePortadorAuxiliar.contains(" ")) {
                    nomePortadorAuxiliar = nomePortadorAuxiliar.substring(0, nomePortadorAuxiliar.indexOf(" "));
                }
                nomePortador = String.format(
                        "%s %s",
                        nomePortador,
                        nomePortadorAuxiliar
                );

                continue;
            }

            complemento01   = nomePortador;
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            documento       = "";
            historico       = "";

            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;


            if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {

                if (line.length() < 128) continue;
                if (line.contains("S A L D O")) continue;

                // Data Movimento.
                if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
                    try {
                        dataMovimento = line.substring( 0, 10 );
                        Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                        dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
                        dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
                    } catch (Exception dte) { continue; }
                }
                if (dataMovimento.equals("")) continue;

                debitoCredito = StringUtil.removeSpecialCharsToUC(line.substring( 127, 128 )).trim();

                nomeOrigem    = StringUtil.removeSpecialChars(line.substring( 57, 90 )).trim().toUpperCase();

                documento = StringUtil.removeSpecialChars(line.substring( 92, 112 )).trim().toUpperCase();

                strValorDocumento = "0";
                try{
                    strValorDocumento    = StringUtil.removeSpecialChars(line.substring( 111, 127 )).trim().toUpperCase();
                    strValorDocumento    = strValorDocumento.replaceAll("\\.","").replaceAll("-","");

                    valorDocumento = DecimalUtil.toDecimal(strValorDocumento);
                } catch (Exception vlrx) {
                    valorDocumento = 0;
                }

                if(valorDocumento == 0) dataMovimento = "";
                if(valorDocumento == 0) continue;

                if (debitoCredito.contains("C")) debitoCredito = "EXTRATO-CREDITO";
                else if (debitoCredito.contains("D")) debitoCredito = "EXTRATO-DEBITO";

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            } else {
                complemento02 = line.trim();
            }

            if (dataMovimento.trim().equals("")) continue;

            if(naoLeMais) continue;

            // Chave para Insert/Update no Banco de Dados.
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {

                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
            } else {
                try {

                    dbIOCont.update("IO_EXTRATO")
                            .fields("COMPLEMENTO, EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(complemento02)
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }

    return true;
}


/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBRADESCODefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}

/*#############################################@ EXTRATO-BRADESCO-EXCEL @##############################################*/
public boolean readExtratoBradescoDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


public boolean readExtratBradescoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BRADESCO-TXT @##############################################*/
public boolean readExtratoBradescoTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-CEF-EXCEL @##############################################*/
public boolean readExtratoCEFExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}

public HashMap readFrancesinhaSicrediExcel (MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String nomeEmpresa       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomePortador      = "";
    String nomeOrigem        = "";
    String dataString        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String tipoLancamento    = "";
    String tipoPlanilha      = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String contLinhaTexto    = "";
    String consolidaClass    = "";
    String classificacao     = "";
    String chave             = "";
    String key               = "";
    String lote              = "";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    double valorAbatimento   = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idataMovimento  = 5;
    int ivalorDocumento = 6;
    int inomeOrigem     = 3;
    //2401-026579 - Foi pedido para mudar a coluna em que pega o documento
    //int idocumento      = 1;
    int idocumento      = 0;
    int idesconto       = 8;
    int iabatimento     = 7;
    int ijuros          = 9;
    int imultas         = 10;
    int icomplemento01  = 13;


    int cont = 0;
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))    codEmpresa = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("NOMEEMPRESA"))       nomeEmpresa = jDados.optString("NOMEEMPRESA");
    if(jDados.has("NOMEPORTADOR"))       nomePortador = jDados.optString("NOMEPORTADOR");

    // memFile.setFieldSeparator(";");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        //logger.logInfo("LINHA " + line + " NAO LE MAIS " + naoLeMais);
        //if (naoLeMais) continue;

        if(memFile.getStringFieldRemoveEspCharsUpper(icomplemento01 -1).contains("DEBITO")) continue;

        valorDocumento    = 0.0;
        valorJuros        = 0.0;
        valorDesconto     = 0.0;
        valorMulta        = 0.0;
        valorPagamento    = 0.0;
        valorAbatimento   = 0.0;

        cont++;

        try {

            try {
                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try {
                        dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            dataMovimento  = getDate(dataMovimento, idataMovimento, line, false,"", memFile, logger);
                            dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
                        } catch (Exception dt2) { dataMovimento = ""; } }
                }
            }

            //logger.logInfo("DT ITAU = "+dataMovimento);

            if (dataMovimento.equals("")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("") && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            complemento01 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento01);

            documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);

            //logger.logInfo("DATA === "+dataMovimento+" | DTSTRING == "+dataString+" | CP == "+complemento01);

            try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
            catch (Exception vlrd) { valorDocumento = 0; }

            try{valorDesconto = memFile.getDoubleField(idesconto);}
            catch (Exception vlrd) { valorDesconto = 0; }

            try{valorMulta = memFile.getDoubleField(imultas);}
            catch (Exception vlrd) { valorMulta = 0; }

            try{valorJuros = memFile.getDoubleField(ijuros);}
            catch (Exception vlrd) { valorJuros = 0; }

            try{valorAbatimento = memFile.getDoubleField(iabatimento);}
            catch (Exception vlrd) { valorAbatimento = 0; }

            valorDesconto = valorDesconto + valorAbatimento;

            debitoCredito = "EXTRATO-CREDITO";


            //logger.logInfo("VALOR == "+valorDocumento+" | DATINHA == "+dataMovimento+" | NO == "+nomeOrigem);

            if (valorDocumento == 0) continue;

            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~  Criacao de Lote / Chave
            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 04, "0");
            consolidaClass = contLinhaTexto;

            classificacao = dataMovimento + "0" + consolidaClass;



            lote = String.format( "%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento );


            chave = lote + contLinhaTexto;
            key	= chave  + "-CTB";
            //logger.logDebug("###1319### "+line);

            ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
            if (ttMov2 == null) {
                ttMov2 = new ttMovimentoPadrao();
            }
            ttMov2.lote		 	    = lote;
            ttMov2.documento   	    = documento;
            ttMov2.codEmpresa 	    = codEmpresa;
            ttMov2.nomeEmpresa      = nomeEmpresa;
            ttMov2.dataMovimento    = dataMovimento;
            ttMov2.tipoMovimento    = "CTB";
            ttMov2.tipoLancamento   = tipoLancamento;
            ttMov2.historico		= "";
            ttMov2.valorDocumento   = valorDocumento;
            ttMov2.valorDesconto    = 0;
            ttMov2.valorMulta  	    = valorMulta;
            ttMov2.valorJuros  	    = valorJuros;
            ttMov2.contaJuros    	= "";
            ttMov2.contaMulta		= "";
            ttMov2.contaDesconto  	= "";
            ttMov2.nomePortador     = nomePortador;
            ttMov2.centroCusto  	= "";
            ttMov2.nomeOrigem 	    = nomeOrigem;
            ttMov2.cpfCnpj          = cpfCnpj;
            ttMov2.chave            = chave + "-CTB";
            ttMov2.classificacao    = classificacao;
            ttMov2.tipoPlanilha     = tipoPlanilha;

            ttMov2.complemento01	= complemento01;
            ttMov2.complemento02	= complemento02;
            ttMov2.complemento03	= complemento03;
            ttMov2.complemento04	= complemento04;
            ttMov2.complemento05	= "";
            ttMov2.complemento06	= "";
            ttMov2.complemento07	= "";
            ttMov2.complemento08	= "";
            ttMov2.complemento09	= "";
            ttMov2.complemento10	= "";
            ttMov2.nomeArquivo		= nomeArquivo;
            ttMov2.naturezaContabil  = "C";
            ttMov2.contaDebito       = "";
            ttMov2.contaCredito      = "";
            mapaVariavel.put(key,ttMov2);

        } catch (Exception ex) {
            logger.logInfo("ERRO = "+ex.getMessage());
        }

    }
    return mapaVariavel;
}


public boolean readExtratoCaixaPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();
    //logger.logInfo("PADRAO CAIXA PDF123");


    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPadrao  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idataMovimento	= 0;
    int idocumento      = 1;
    int inomePortador	=-1;
    int inomeOrigem		= 2;
    int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOPADRAO"))   tipoPadrao   = jDados.optString("TIPOPADRAO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if (line.contains("SALDO") && line.contains("ANTERIOR")) continue;
        if (line.contains("SALDO") && line.contains("DIA")) continue;
        if (line.contains("SAC") && line.contains("CAIXA")) continue;
        if (line.contains("PESSOAS") && line.contains("DEFICIENCIA")) continue;
        if (line.contains("OUVIDORIA") && line.contains("0800")) continue;
        if (line.contains("ALO CAIXA") && line.contains("0800")) continue;
        if (line.contains("HELP") && line.contains("DESK")) continue;
        if (line.startsWith("PAGINA") && memFile.getFieldsSize() == 1) continue;
        if (line.startsWith("SUJEITO") && memFile.getFieldsSize() == 1) continue;
        if (line.contains("INTERNETBANKING") && line.contains("IMPRIME")) continue;
        //Corre��o do chamado BUG CAIXA -> 2401-027811
        if(line.contains("LANCAMENTOS")) continue;


        if(line.toUpperCase().contains("CONTA:") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && memFile.getStringFieldRemoveEspCharsUpper(3).equals("")){
            nomePortador = "CEF - " + cutString(line,line.lastIndexOf("|"),line.length()).replaceAll(";", " ");
        }
        //Douglas. Feito para o Chamado #2304-003957 para leitura das colunas 1 2 e 3
        if(line.toUpperCase().contains("CONTA:") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(3).equals("")){
            nomePortador = "CEF - " + memFile.getStringFieldRemoveEspCharsUpper(1) + " / " + memFile.getStringFieldRemoveEspCharsUpper(2) + " / " + memFile.getStringFieldRemoveEspCharsUpper(3);
        }

        // logger.logInfo("DENTRO DO EXTRAto tipoPadrao -> " + tipoPadrao);
        //logger.logInfo("linelength " + line.length());
        if(tipoPadrao.contains("002")){
            if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOC") && line.contains("VALOR")) {
                logger.logInfo("Entrou no 002");
                idataMovimento	= -1;
                idocumento      = -1;
                inomePortador	= -1;
                inomeOrigem		= -1;
                ivalorDocumento	= -1;
                for (int i = 0; i < memFile.getFieldsSize(); i++) {
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i;
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA"))      idataMovimento = i;
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR"))     ivalorDocumento = i;
                }
                // logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento);
                continue;
            }
        }
        if(tipoPadrao.contains("001")){
            if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOC") && line.contains("VALOR")) {
                idataMovimento	= -1;
                idocumento      = -1;
                inomePortador	= -1;
                inomeOrigem		= -1;
                ivalorDocumento	= -1;
                for (int i = 0; i < memFile.getFieldsSize(); i++) {
                    //if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i+1;
                    //Corre��o do chamado BUG CAIXA -> 2401-027811
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOC"))       idocumento = i;
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA"))      idataMovimento = i;
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR"))     ivalorDocumento = i;
                }
                //logger.logInfo("001 CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento);
                continue;
            }
        }
        if(tipoPadrao.contains("003")){
            if (line.contains("MOVIMENTO") && line.contains("HISTORICO") && line.contains("DOCUMENTO")) {
                idataMovimento	= -1;
                idocumento      = -1;
                inomeOrigem		= -1;
                ivalorDocumento	= -1;
                for (int i = 0; i < memFile.getFieldsSize(); i++) {
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO"))       idocumento = i;
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("MOVIMENTO"))      idataMovimento = i;
                    ivalorDocumento = 4;
                }
                // logger.logInfo("LEITURA AUTOMATIZADA CABECALHO CEF \n DM:" + idataMovimento + " |DOC: " + idocumento + " |NO: " + inomeOrigem + "| VD: " + ivalorDocumento + " | LIN == "+line);
                continue;
            }
            if(ivalorDocumento > 0){
                if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;
            }
        }
        if(tipoPadrao.contains("004")){
            idataMovimento = 0;

            if (memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("C") || memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("D")) {
                inomeOrigem = 2;
                idocumento = 2;
                ivalorDocumento = 5;

                complemento03 = memFile.getStringFieldRemoveEspCharsUpper(3);
            }
            else {
                inomeOrigem = 1;
                idocumento = 1;
                ivalorDocumento = 4;

                complemento03 = memFile.getStringFieldRemoveEspCharsUpper(2);
            }

            if(ivalorDocumento > 0){
                if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;
            }
        }

        if (memFile.getFieldsSize() == 1) {
            nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
            try {
                dbIOCont.update("IO_EXTRATO")
                        .fields("HISTORICO")
                        .where("CHAVE = ? ")
                        .param(nomeOrigem)
                        .param(chaveExtrato)
                        .execute();
            } catch (Exception sqlUpdateException) {
            }
        } else {
            // logger.logInfo("DTS " + dataString);
            try {

                String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");


                if (dataString.equals("000000")) continue;
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { continue; }
                    }
                }



                if (dataMovimento.equals("")) continue;

                valorDocumento  = 0;
                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll("[^A-Za-z]", "").trim();
                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }



                if (valorDocumento == 0) continue;


                nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
                if (nomeOrigem.contains("SALDO C/C")) continue;
                documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
                //logger.logInfo("doc: " + documento + nomeOrigem);
                complemento02 = documento;



                if(tipoPadrao.equals("003")){
                    if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")) debitoCredito = "EXTRATO-DEBITO";
                    if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")) debitoCredito = "EXTRATO-CREDITO";
                }
                else if (tipoPadrao.equals("004")) {
                    if (complemento03.contains("D")) debitoCredito = "EXTRATO-DEBITO";
                    if (complemento03.contains("C")) debitoCredito = "EXTRATO-CREDITO";
                }
                else{
                    if (!debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-CREDITO";
                    if ( debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-DEBITO";
                }
                // logger.logInfo("BTL -> 5565|  -> " + dataMovimento  + "|  -> " + valorDocumento  + "|  -> " + debitoCredito  );



                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                        .fields("CHAVE")
                        .param(chaveExtrato)
                        .queryUnique();

                // Inserir caso Chave nao encontrada.


                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                .param(chaveExtrato)
                                .param(codEmpresa)
                                .param(dataMovimento)
                                .param(documento)
                                .param(nomePortador)
                                .param(nomeOrigem)
                                .param(nomeArquivo.toUpperCase())
                                .param(complemento02)
                                .param(valorDocumento)
                                .param(debitoCredito)
                                .param(0)
                                .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(0)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}

//####################################################################################################################################
//									EXTRATO UNICRED PDF
//####################################################################################################################################

public boolean readExtratoUnicredPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    logger.logInfo("LENDO READ EXTRATO UNICRED");

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomePortador      = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String line = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int idocumento  = -1;
    int inomeOrigem = -1;
    int idataMovimento  = -1;
    int ivalorDocumento = -1;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("NOMEPORTADOR")) nomePortador = jDados.optString("NOMEPORTADOR");
    if(jDados.has("LINE"))  line = jDados.optString("LINE");

    while (memFile.hasNextLine()) {

        if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA")){
            for(int i =0; i < memFile.getFieldsSize(); i++){
                String campo = memFile.getStringFieldRemoveEspCharsUpper(i);
                if(campo.contains("DATA")) idataMovimento = i;
                if(campo.contains("HISTORICO")) inomeOrigem = i;
                if((campo.contains("N") && campo.contains("DOCUMENTO")) || campo.contains("NO DOC")) idocumento = i;
                //#2304-002540.
                //if(campo.contains("VALOR")) ivalorDocumento = i;
                if(campo.contains("LANCAMENTO") || campo.contains("LANCAMENTOS")) ivalorDocumento = i;
            }
        }

        if(idataMovimento == -1 || inomeOrigem == -1 || idocumento == -1 || ivalorDocumento == -1){
            idataMovimento = 0;
            inomeOrigem = 2;
            idocumento = 1;
            ivalorDocumento = 3;
        }

        try {
            line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            // nomePortador    = "";
            complemento01   = "";
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            nomeOrigem      = "";
            documento       = "";
            historico       = "";


            valorDocumento  = 0;
            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;

            if (memFile.getStringField(0).equals("")) continue;


            try {
                Date dt = memFile.getDateField(idataMovimento);
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dateException01) {
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");    // --- VERIFICAR
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dateException02) {
                    continue;
                }
            }



            try {
                valorDocumento = memFile.getDoubleField(ivalorDocumento);
            } catch (Exception valorException01) {
                valorDocumento = 0;
            }



            if (valorDocumento > 0 ) debitoCredito = "EXTRATO-CREDITO";
            if (valorDocumento < 0 ) debitoCredito = "EXTRATO-DEBITO";
            if (valorDocumento == 0) continue;

            valorDocumento = Math.abs(valorDocumento);

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
            complemento02 = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");

            if(nomeOrigem.contains("R$")){
                continue;
            }

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Padr?Sofisa", readExtratoException);
        }
    }
    return true;
}

//####################################################################################################################################
//									EXTRATO UNICRED PDF
//####################################################################################################################################


public boolean readExtratoUnicred3PDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    logger.logInfo("LENDO READ EXTRATO UNICRED 3");
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa         = "";
    String nomeArquivo        = "";
    String chaveExtrato       = "";

    String documento          = "";
    String nomePortador       = "";
    String nomeOrigem         = "";
    String dataMovimento      = "";
    String dataLote           = "";
    String complemento01      = "";
    String complemento02      = "";
    String complemento03      = "";
    String complemento04      = "";
    String complemento05      = "";
    String complemento06      = "";
    String complemento07      = "";
    String complemento08      = "";
    String complemento09      = "";
    String complemento10      = "";
    String debitoCredito      = "";
    String cpfCnpj            = "";
    String historico          = "";

    String strValorDocumento  = "";
    String contLinhaExtrato   = "";
    String line = "";

    String tipo = "";

    double valorDocumento  = 0.0;
    double valorJuros         = 0.0;
    double valorDesconto      = 0.0;
    double valorMulta         = 0.0;
    double valorPagamento     = 0.0;
    double saldoAnterior      = 0.0;
    double saldoAtual         = 0.0;

    int idocumento            = -1;
    int inomeOrigem           = -1;
    int idataMovimento        = -1;
    int ivalorDocumento		  = -1;
    int isaldo                = -1;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("NOMEPORTADOR")) nomePortador = jDados.optString("NOMEPORTADOR");
    if(jDados.has("LINE"))  line = jDados.optString("LINE");

    if(jDados.has("TIPO"))  tipo = jDados.optString("TIPO");

    while (memFile.hasNextLine()) {

        idataMovimento      = 0;
        idocumento          = 1;
        inomeOrigem         = 2;
        ivalorDocumento     = 3;

        try {
            line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if(memFile.getStringFieldRemoveEspCharsUpper(0).matches("\\d+\\sDE\\s\\d+")){ // Verifica se esta no padrão 1 DE 4, 9 DE 11, etc
                idataMovimento  += 1;
                idocumento      += 1;
                inomeOrigem     += 1;
                ivalorDocumento += 1;
                //logger.logInfo("Deslocamento");
            }

            try {
                Date dt = memFile.getDateField(idataMovimento);
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dateException01) {
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dateException02) {
                    continue;
                }
            }

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).trim();
            complemento02 = nomeOrigem;
            documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"", "");

            try {
                valorDocumento = memFile.getDoubleField(ivalorDocumento);
                if (valorDocumento == 0) {
                    ivalorDocumento += 1;
                    valorDocumento = memFile.getDoubleField(ivalorDocumento);
                    //Valida��o feita para mudar a coluna onde � capturado valor, pois esta separado em duas colunas: CREDITO | DEBITO
                }
            } catch (Exception valorException01) {
                valorDocumento = 0;
            }

            valorDocumento = Math.abs(valorDocumento);

            // gui - 24/04/2024 -> DIFERENCIAÇÃO DE DEBITO E CREDITO POR TIPOS (PADRAO 03 E 04) --- 2404-036553
            // REMOVIDO POR CONTA DA VARIAÇÃO DOS NOME ORIGEM
            /*if(tipo.equals("003")) {*/

            isaldo = memFile.getFieldsSize() - 1;

            if (line.contains("SALDO ANTERIOR")) {
                try {
                    saldoAnterior = Math.abs(memFile.getDoubleField(isaldo));
                } catch (Exception vlrd) {
                    saldoAnterior = 0;
                }
                continue;
            }

            // gui - 2404-033920 - AJUSTE PARA SER CAPTURADO DEBITO CREIDTO DA FORMA CORRETA
            try {
                saldoAtual = Math.abs(memFile.getDoubleField(isaldo));
            } catch (Exception vlrd) {
                saldoAtual = 0;
            }

            if (saldoAnterior > saldoAtual) {
                debitoCredito = "EXTRATO-DEBITO";
            }

            if (saldoAnterior < saldoAtual) {
                debitoCredito = "EXTRATO-CREDITO";
            }

            saldoAnterior = saldoAtual;


                /*else if(tipo.equals("004")){
                    if(nomeOrigem.startsWith("CRED") || nomeOrigem.startsWith("RECEB") || nomeOrigem.startsWith("ARREC")){
                        debitoCredito = "EXTRATO-CREDITO";
                    }
                    if(nomeOrigem.startsWith("LIQ") || nomeOrigem.startsWith("DEB")){
                        debitoCredito= "EXTRATO-DEBITO";
                    }
                }*/

            if (valorDocumento == 0) continue;


            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato PadraUNICRED", readExtratoException);
        }
    }
    return true;
}




/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicketNovo(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    // Inicializacao de Variaveis
    String codFilial        = "";
    String codEmpresa       = "";
    String nomeEmpresa      = "";
    String nomeArquivo      = "";
    String documento        = "";
    String nomeOrigem       = "";
    String nomePortador     = "";

    String dataMovimento    = "";
    String dataLote         = "";
    String mesAnoAtual      = "";
    String mesAnoAnterior   = "";
    String mesAno2Anterior  = "";
    int mesRef              = 0;
    int anoRef              = 0;

    double valorDocumento   = 0.0;
    double valorJuros       = 0.0;
    double valorDesconto    = 0.0;
    double valorMulta       = 0.0;
    double valorPagamento   = 0.0;
    double valorLiquido     = 0.0;
    double valorAuxiliar    = 0.0;

    String complemento01    = "";
    String complemento02    = "";
    String complemento03    = "";
    String complemento04    = "";
    String complemento05    = "";
    String complemento06    = "";
    String complemento07    = "";
    String complemento08    = "";
    String complemento09    = "";
    String complemento10    = "";

    String debitoCredito    = "";
    String cpfCnpj          = "";
    String codCcOrigem      = "";
    String historico        = "";

    String contaMovimento   = "";
    String contaPortador    = "";
    String contaJuros       = "";
    String contaDesconto    = "";
    String contaMulta       = "";

    String contLinhaTexto   = "";
    String consolidaClass   = "";
    String classificacao    = "";
    String tipoLancamento   = "";
    String tipoPlanilha     = "CARTAO TICKET";
    String chave            = "";
    String key              = "";
    String lote             = "";

    double valorAux 	= 0;
    double subTotal 	= 0;
    double totalLiq 	= 0;
    double taxaAnuidade = 0;

    int ivalorDocumento  = jDados.has("IVALORDOCUMENTO") ? jDados.optInt("IVALORDOCUMENTO") : -1;
    int idataMovimento   = jDados.has("IDATAMOVIMENTO") ? jDados.optInt("IDATAMOVIMENTO") : -1;
    int inomeOrigem		 = jDados.has("INOMEORIGEM") ? jDados.optInt("INOMEORIGEM") : -1;
    int icomplemento03	= inomeOrigem;
    int ivalorAuxiliar	= ivalorDocumento;	/* USADO DIRETO NA TTMOV3 (nao calcula como em outros cartoes)*/
    int icomplemento10	= -1; 	// debito credito


    if(jDados.has("CODEMPRESA"))      codEmpresa      = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEEMPRESA"))     nomeEmpresa     = jDados.optString("NOMEEMPRESA");
    if(jDados.has("NOMEARQUIVO"))     nomeArquivo     = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO"))  tipoLancamento  = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");

    int cont = 0;

    while (memFile.hasNextLine()) {
        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            cont++;

            complemento01	= "";
            complemento02	= "";
            complemento03	= "";
            complemento04	= "";
            complemento05	= "";

            complemento06	= "";
            complemento07	= "";
            complemento08	= "";
            complemento09	= "";
            complemento10	= "";

            cpfCnpj			= "";

            nomeOrigem		= "";
            documento		= "";
            nomePortador	= "";
            historico		= "";

            valorDocumento	= 0;
            valorJuros		= 0;
            valorDesconto	= 0;
            valorMulta		= 0;
            valorPagamento	= 0;
            valorLiquido    = 0;
            //FABRICA
            complemento03 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento03);

            if (!memFile.getStringField(idataMovimento).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).startsWith("TARIFA")) {

                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy hh:mm");	// --- VERIFICAR
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) {
                            continue;
                        }
                    }
                }

                //complemento03 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento03);
                nomeOrigem    = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }
                valorAuxiliar = 0;

            }
            else {

                if (line.contains("TARIFA POR TRANSACAO")) {
                    valorDocumento = 0;
                    try{valorAuxiliar = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                    catch (Exception vlrd) { valorAuxiliar = 0; }
                    valorAux  = valorAuxiliar;

                }else  if (line.contains("TARIFA DE GESTAO")) {
                    valorDocumento = 0;
                    try{valorAuxiliar = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                    catch (Exception vlrd) { valorAuxiliar = 0; }
                    valorAux  = valorAuxiliar;

                }else  if (line.contains("TARIFA SOBRE ADIANTAMENTO")) {
                    valorDocumento = 0;
                    try{valorAuxiliar = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                    catch (Exception vlrd) { valorAuxiliar = 0; }
                    valorAux  = valorAuxiliar;

                }else if (line.toUpperCase().trim().contains("SUBTOTAL")) {
                    valorDocumento = 0;
                    try{subTotal = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                    catch (Exception vlrd) { subTotal = 0; }

                }else if (line.toUpperCase().trim().contains("TOTAL") && line.toUpperCase().trim().contains("LIQUIDO")) {
                    valorDocumento = 0;
                    try{totalLiq = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                    catch (Exception vlrd) { totalLiq = 0; }
                    valorAuxiliar = (subTotal - totalLiq) - taxaAnuidade;
                    if(valorAuxiliar < 0){
                        valorAuxiliar = subTotal - totalLiq;
                    }
                }else if (line.toUpperCase().trim().contains("TAXA") && line.toUpperCase().trim().contains("ANUIDADE")) {
                    valorDocumento = 0;
                    try{taxaAnuidade = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                    catch (Exception vlrd) { taxaAnuidade = 0; }
                    if(taxaAnuidade != 0) valorAuxiliar = Math.abs((subTotal - totalLiq) - taxaAnuidade);// taxaAnuidade = 0;

                }else if (line.toUpperCase().trim().contains("TAXA TPE")) {
                    valorDocumento = 0;
                    try{valorAuxiliar = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                    catch (Exception vlrd) { valorAuxiliar = 0; }

                } else {
                    continue;
                }

            }


            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--  Criacao de Variaveis para ttMovimentoPadrao
            if(dataMovimento.length() > 9){
                mesRef	= Integer.parseInt(dataMovimento.substring(3, 5));
                anoRef	= Integer.parseInt(dataMovimento.substring(6, 10));
                mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef), 2, "0") + "/" + String.valueOf(anoRef);

                mesRef	= mesRef - 1;
                if (mesRef	== 0) {
                    mesRef	= 12;
                    anoRef	= anoRef - 1;
                }
                mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                mesRef	= mesRef - 1;
                if (mesRef	== 0) {
                    mesRef	= 12;
                    anoRef	= anoRef - 1;
                }
                mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
            }
            nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~  Criacao de Lote / Chave
            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
            consolidaClass = contLinhaTexto;

            classificacao  = dataMovimento + consolidaClass;

            lote = String.format( "%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento );

            /*  A) Um movimento que serᠣriado, para a contabiliza磯 da venda. Este movimento deverᠴer:
             * No campo portador = Caixa
             * No campo complemento(02) = Venda
             * No campo Valor do movimento = Posi絥s indicadas no roteiro
             */
            chave = lote + "-TICKET-" + contLinhaTexto;
            key	= chave  + "-CTB";

            if (valorDocumento > 0) {
                ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                if (ttMov2 == null) {
                    ttMov2 = new ttMovimentoPadrao();
                }
                ttMov2.lote		 	    = lote;
                ttMov2.documento   	    = documento;
                ttMov2.codEmpresa 	    = codEmpresa;
                ttMov2.nomeEmpresa      = nomeEmpresa;
                ttMov2.dataMovimento    = dataMovimento;
                ttMov2.tipoMovimento    = "CTB";
                ttMov2.tipoLancamento   = tipoLancamento;
                ttMov2.historico		= "";
                ttMov2.valorDocumento   = valorDocumento;
                ttMov2.valorDesconto    = 0;
                ttMov2.valorMulta  	    = 0;
                ttMov2.valorJuros  	    = 0;
                ttMov2.contaJuros    	= contaJuros;
                ttMov2.contaMulta		= contaMulta;
                ttMov2.contaDesconto  	= contaDesconto;
                ttMov2.nomePortador     = "CAIXA-TICKET";
                ttMov2.centroCusto  	= "";
                ttMov2.nomeOrigem 	    = nomeOrigem;
                ttMov2.cpfCnpj          = cpfCnpj;
                ttMov2.chave            = chave + "-CTB";
                ttMov2.classificacao    = classificacao;
                ttMov2.tipoPlanilha     = tipoPlanilha;

                ttMov2.complemento01	= "TICKET";
                ttMov2.complemento02	= "VENDA";

                ttMov2.complemento03	= complemento03;
                ttMov2.complemento04	= complemento04;
                ttMov2.complemento05	= complemento05;
                ttMov2.complemento06	= complemento06;
                ttMov2.complemento07	= complemento07;
                ttMov2.complemento08	= complemento08;
                ttMov2.complemento09	= complemento09;
                ttMov2.complemento10	= complemento10;
                ttMov2.nomeArquivo		= nomeArquivo;
                ttMov2.naturezaContabil = "C";
                ttMov2.contaDebito      = "";
                ttMov2.contaCredito     = "";
                mapaVariavel.put(key,ttMov2);
            }

            chave = lote + "-TARIFA-TICKET-" + dataMovimento;
            key	= chave  + "-CTB";

            if (valorAuxiliar > 0) {

                ttMovimentoPadrao ttMov3      = (ttMovimentoPadrao)mapaVariavel.get(key);
                if (ttMov3 == null) {
                    ttMov3 = new ttMovimentoPadrao();
                    ttMov3.valorDocumento   = 0;
                }


                ttMov3.lote		 	    = lote;
                ttMov3.documento   	    = documento;
                ttMov3.codEmpresa 	    = codEmpresa;
                ttMov3.nomeEmpresa      = nomeEmpresa;
                ttMov3.dataMovimento    = dataMovimento;
                ttMov3.tipoMovimento    = "CTB";
                ttMov3.tipoLancamento   = tipoLancamento;
                ttMov3.historico		= "";
                ttMov3.valorDocumento   = valorAuxiliar;
                ttMov3.valorDesconto    = 0;
                ttMov3.valorMulta  	    = 0;
                ttMov3.valorJuros  	    = 0;
                ttMov3.contaJuros    	= contaJuros;
                ttMov3.contaMulta		= contaMulta;
                ttMov3.contaDesconto  	= contaDesconto;
                ttMov3.nomePortador     = "CAIXA-TICKET";
                ttMov3.centroCusto  	= "";
                ttMov3.nomeOrigem 	    = nomeOrigem;
                ttMov3.cpfCnpj          = cpfCnpj;
                ttMov3.chave            = chave + "-CTB";
                ttMov3.classificacao    = classificacao;

                ttMov3.complemento01	= "TICKET";
                ttMov3.complemento02	= "TARIFA";

                ttMov3.complemento03	= complemento03;
                ttMov3.complemento04	= complemento04;
                ttMov3.complemento05	= complemento05;
                ttMov3.complemento06	= complemento06;
                ttMov3.complemento07	= complemento07;
                ttMov3.complemento08	= complemento08;
                ttMov3.complemento09	= complemento09;
                ttMov3.complemento10	= complemento10;
                ttMov3.nomeArquivo		= nomeArquivo;
                ttMov3.naturezaContabil = "C";
                ttMov3.contaDebito      = "";
                ttMov3.contaCredito     = "";
                mapaVariavel.put(key,ttMov3);
            }

        } catch (Exception memFileException) {
            logger.logError("Erro de leitura Padrao -> Extrato - TICKET NOVO!", memFileException);
        }
    }

    return mapaVariavel;
}

/*#############################################@ EXTRATO-TICKET-EXCEL @##############################################*/
public HashMap readExtratoTicket(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    // Inicializacao de Variaveis
    String codFilial        = "";
    String codEmpresa       = "";
    String nomeEmpresa      = "";
    String nomeArquivo      = "";
    String documento        = "";
    String nomeOrigem       = "";
    String nomePortador     = "";

    String dataMovimento    = "";
    String dataLote         = "";
    String mesAnoAtual      = "";
    String mesAnoAnterior   = "";
    String mesAno2Anterior  = "";
    int mesRef              = 0;
    int anoRef              = 0;

    double valorDocumento   = 0.0;
    double valorJuros       = 0.0;
    double valorDesconto    = 0.0;
    double valorMulta       = 0.0;
    double valorPagamento   = 0.0;
    double valorLiquido     = 0.0;
    double valorAuxiliar    = 0.0;

    String complemento01    = "";
    String complemento02    = "";
    String complemento03    = "";
    String complemento04    = "";
    String complemento05    = "";
    String complemento06    = "";
    String complemento07    = "";
    String complemento08    = "";
    String complemento09    = "";
    String complemento10    = "";

    String debitoCredito    = "";
    String cpfCnpj          = "";
    String codCcOrigem      = "";
    String historico        = "";

    String contaMovimento   = "";
    String contaPortador    = "";
    String contaJuros       = "";
    String contaDesconto    = "";
    String contaMulta       = "";

    String contLinhaTexto   = "";
    String consolidaClass   = "";
    String classificacao    = "";
    String tipoLancamento   = "";
    String tipoPlanilha     = "CARTAO TICKET";
    String chave            = "";
    String key              = "";
    String lote             = "";

    int ivalorDocumento  = 10;
    int idataMovimento   = 4;
    int inomeOrigem		= 7;
    int icomplemento03	= inomeOrigem;
    int ivalorAuxiliar	= 10;	/* USADO DIRETO NA TTMOV3 (nao calcula como em outros cartoes)*/
    int icomplemento10	= -1; 	// debito credito


    if(jDados.has("CODEMPRESA"))      codEmpresa      = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEEMPRESA"))     nomeEmpresa     = jDados.optString("NOMEEMPRESA");
    if(jDados.has("NOMEARQUIVO"))     nomeArquivo     = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO"))  tipoLancamento  = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");

    int cont = 0;

    while (memFile.hasNextLine()) {
        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            cont++;

            complemento01	= "";
            complemento02	= "";
            complemento03	= "";
            complemento04	= "";
            complemento05	= "";

            complemento06	= "";
            complemento07	= "";
            complemento08	= "";
            complemento09	= "";
            complemento10	= "";

            cpfCnpj			= "";

            nomeOrigem		= "";
            documento		= "";
            nomePortador	= "";
            historico		= "";

            valorDocumento	= 0;
            valorJuros		= 0;
            valorDesconto	= 0;
            valorMulta		= 0;
            valorPagamento	= 0;
            valorLiquido    = 0;


            if (!memFile.getStringField(idataMovimento).equals("")) {

                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");	// --- VERIFICAR
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy hh:mm");	// --- VERIFICAR
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) {
                            continue;
                        }
                    }
                }

                if(inomeOrigem    >=0) nomeOrigem    = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
                if(icomplemento03 >=0) complemento03 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento03);

                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }
                valorAuxiliar = 0;
            }

            else {

                if (line.contains("SERVICO SOBRE INTERMEDIACAO")) {
                    try{valorAuxiliar = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                    catch (Exception vlrd) { valorAuxiliar = 0; }
                    continue;
                }
                if (line.contains("TARIFA DE GESTAO")) {
                    try{valorAuxiliar = valorAuxiliar + Math.abs(memFile.getDoubleField(ivalorDocumento));}
                    catch (Exception vlrd) { valorAuxiliar = 0; }
                }
                else continue;
            }



            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--  Criacao de Variaveis para ttMovimentoPadrao
            if(dataMovimento.length() > 9){
                mesRef	= Integer.parseInt(dataMovimento.substring(3, 5));
                anoRef	= Integer.parseInt(dataMovimento.substring(6, 10));
                mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef), 2, "0") + "/" + String.valueOf(anoRef);

                mesRef	= mesRef - 1;
                if (mesRef	== 0) {
                    mesRef	= 12;
                    anoRef	= anoRef - 1;
                }
                mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                mesRef	= mesRef - 1;
                if (mesRef	== 0) {
                    mesRef	= 12;
                    anoRef	= anoRef - 1;
                }
                mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
            }
            nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~  Criacao de Lote / Chave
            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
            consolidaClass = contLinhaTexto;

            classificacao  = dataMovimento + consolidaClass;

            lote = String.format( "%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento );

            /*  A) Um movimento que será criado, para a contabilização da venda. Este movimento deverá ter:
             * No campo portador = Caixa
             * No campo complemento(02) = Venda
             * No campo Valor do movimento = Posições indicadas no roteiro
             */
            chave = lote + "-TICKET-" + contLinhaTexto;
            key	= chave  + "-CTB";

            if (valorDocumento > 0) {
                ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
                if (ttMov2 == null) {
                    ttMov2 = new ttMovimentoPadrao();
                }
                ttMov2.lote		 	    = lote;
                ttMov2.documento   	    = documento;
                ttMov2.codEmpresa 	    = codEmpresa;
                ttMov2.nomeEmpresa      = nomeEmpresa;
                ttMov2.dataMovimento    = dataMovimento;
                ttMov2.tipoMovimento    = "CTB";
                ttMov2.tipoLancamento   = tipoLancamento;
                ttMov2.historico		= "";
                ttMov2.valorDocumento   = valorDocumento;
                ttMov2.valorDesconto    = 0;
                ttMov2.valorMulta  	    = 0;
                ttMov2.valorJuros  	    = 0;
                ttMov2.contaJuros    	= contaJuros;
                ttMov2.contaMulta		= contaMulta;
                ttMov2.contaDesconto  	= contaDesconto;
                ttMov2.nomePortador     = "CAIXA-TICKET";
                ttMov2.centroCusto  	= "";
                ttMov2.nomeOrigem 	    = nomeOrigem;
                ttMov2.cpfCnpj          = cpfCnpj;
                ttMov2.chave            = chave + "-CTB";
                ttMov2.classificacao    = classificacao;
                ttMov2.tipoPlanilha     = tipoPlanilha;

                ttMov2.complemento01	= "TICKET";
                ttMov2.complemento02	= "VENDA";

                ttMov2.complemento03	= complemento03;
                ttMov2.complemento04	= complemento04;
                ttMov2.complemento05	= complemento05;
                ttMov2.complemento06	= complemento06;
                ttMov2.complemento07	= complemento07;
                ttMov2.complemento08	= complemento08;
                ttMov2.complemento09	= complemento09;
                ttMov2.complemento10	= complemento10;
                ttMov2.nomeArquivo		= nomeArquivo;
                ttMov2.naturezaContabil = "C";
                ttMov2.contaDebito      = "";
                ttMov2.contaCredito     = "";
                mapaVariavel.put(key,ttMov2);
            }

            chave = lote + "-TARIFA-TICKET" + contLinhaTexto;
            key	= chave  + "-CTB";

            if (valorAuxiliar > 0) {

                ttMovimentoPadrao ttMov3      = (ttMovimentoPadrao)mapaVariavel.get(key);
                if (ttMov3 == null) {
                    ttMov3 = new ttMovimentoPadrao();
                }


                ttMov3.lote		 	    = lote;
                ttMov3.documento   	    = documento;
                ttMov3.codEmpresa 	    = codEmpresa;
                ttMov3.nomeEmpresa      = nomeEmpresa;
                ttMov3.dataMovimento    = dataMovimento;
                ttMov3.tipoMovimento    = "CTB";
                ttMov3.tipoLancamento   = tipoLancamento;
                ttMov3.historico		= "";
                ttMov3.valorDocumento   = valorAuxiliar;
                ttMov3.valorDesconto    = 0;
                ttMov3.valorMulta  	    = 0;
                ttMov3.valorJuros  	    = 0;
                ttMov3.contaJuros    	= contaJuros;
                ttMov3.contaMulta		= contaMulta;
                ttMov3.contaDesconto  	= contaDesconto;
                ttMov3.nomePortador     = "CAIXA-TICKET";
                ttMov3.centroCusto  	= "";
                ttMov3.nomeOrigem 	    = nomeOrigem;
                ttMov3.cpfCnpj          = cpfCnpj;
                ttMov3.chave            = chave + "-CTB";
                ttMov3.classificacao    = classificacao;

                ttMov3.complemento01	= "TICKET";
                ttMov3.complemento02	= "TARIFA";

                ttMov3.complemento03	= complemento03;
                ttMov3.complemento04	= complemento04;
                ttMov3.complemento05	= complemento05;
                ttMov3.complemento06	= complemento06;
                ttMov3.complemento07	= complemento07;
                ttMov3.complemento08	= complemento08;
                ttMov3.complemento09	= complemento09;
                ttMov3.complemento10	= complemento10;
                ttMov3.nomeArquivo		= nomeArquivo;
                ttMov3.naturezaContabil = "C";
                ttMov3.contaDebito      = "";
                ttMov3.contaCredito     = "";
                mapaVariavel.put(key,ttMov3);
            }

        } catch (Exception memFileException) {
            logger.logError("Erro de leitura Padrao -> Extrato - GETNET!", memFileException);
        }
    }

    return mapaVariavel;
}


/*#############################################@ EXTRATO-IFOOD-EXCEL @##############################################*/
public HashMap readExtratoIFood(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {

    // Inicializacao de Variaveis
    String codFilial         = "";
    String codEmpresa        = "";
    String nomeEmpresa       = "";
    String nomeArquivo       = "";

    String documento         = "";
    String nomeOrigem        = "";
    String nomePortador      = "";

    String dataMovimento     = "";
    String dataLote          = "";
    String mesAnoAtual       = "";
    String mesAnoAnterior    = "";
    String mesAno2Anterior   = "";
    int mesRef               = 0;
    int anoRef               = 0;

    double valorDocumento    = 0.0; //
    double valorJuros        = 0.0; //
    double valorDesconto     = 0.0; //
    double valorMulta        = 0.0; //
    double valorPagamento    = 0.0; //
    double valorLiquido      = 0.0; //

    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";

    String debitoCredito     = "";
    String cpfCnpj           = "";
    String codCcOrigem       = "";
    String historico         = "";

    String contaMovimento    = "";
    String contaPortador     = "";
    String contaJuros        = ""; //
    String contaDesconto     = ""; //
    String contaMulta        = ""; //

    String contLinhaTexto    = "";
    String consolidaClass    = "";
    String classificacao     = "";
    String tipoLancamento    = "";
    String tipoPlanilha      = "IFOOD";
    String chave             = "";
    String key               = "";
    String lote              = "";
    String line              = "";
    String tipoLeitura       = "";
    //CRIADO PARA LER O TIPO 003 como pedido no chamado 202012-0008896
    double auxValorDoc		 = 0;
    double auxValorDoc2		 = 0;
    double valorDocumento2	 = 0;
    //*****************************************


    // int    idocumento       = -1;
    // int    inomeOrigem      = -1;
    int    idataMovimento   = -1;
    int    ivalorDocumento  = -1;
    int    idocumento		= -1;
    int    icomplemento03	= -1;
    //CRIADO PARA LER O TIPO 003 como pedido no chamado 202012-0008896
    int    iauxValorDoc	  	= -1;
    int    iauxValorDoc2	= -1;
    int    ivalorDocumento2	= -1;
    //*********************************

    if(jDados.has("LINE"))            line            = jDados.optString("LINE");
    if(jDados.has("CODEMPRESA"))      codEmpresa      = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))     nomeArquivo     = jDados.optString("NOMEARQUIVO");
    if(jDados.has("NOMEEMPRESA"))     nomeEmpresa     = jDados.optString("NOMEEMPRESA");
    if(jDados.has("TIPOLEITURA"))     tipoLeitura     = jDados.optString("TIPOLEITURA");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("TIPOLANCAMENTO"))  tipoLancamento  = jDados.optString("TIPOLANCAMENTO");

    int cont = 0;

    while (memFile.hasNextLine()) {
        try {
            if(tipoLeitura.equals("002")){
                if(line.toUpperCase().trim().contains("TAXA") && line.toUpperCase().trim().contains("ENTREGA") &&
                        line.toUpperCase().trim().contains("VALOR") && line.toUpperCase().trim().contains("ITENS") &&
                        line.toUpperCase().trim().contains("DATA") && line.toUpperCase().trim().contains("AGENDAMENTO")){

                    idataMovimento  = -1;
                    ivalorDocumento = -1;
                    idocumento		= -1;
                    icomplemento03	= -1;
                    iauxValorDoc	= -1;
                    iauxValorDoc2	= -1;

                    for(int i = 0; i < memFile.getFieldsSize(); i ++){
                        String campo = memFile.getStringFieldRemoveEspCharsUpper(i);
                        if (campo.contains("DATA") 	 &&
                                idataMovimento == -1) 			idataMovimento  = i;
                        if (campo.contains("VALOR")  &&
                                campo.contains("ITEN"))     	ivalorDocumento = i;
                        if(campo.contains("FORMA") 	 &&
                                campo.contains("PAGAMENTO")) 	idocumento = i;
                        if(campo.contains("DATA") 	 &&
                                campo.contains("CANCELAMENTO")) icomplemento03 = i;
                    }


                    if (idataMovimento == -1 || ivalorDocumento == -1 || idocumento == -1 || icomplemento03 == -1){

                        idataMovimento  = 1;
                        ivalorDocumento = 5;
                        idocumento 		= 8;
                        icomplemento03	= 9;
                    }
                }
            }

            if(tipoLeitura.equals("003")){
                if(line.toUpperCase().trim().contains("DATA") && line.toUpperCase().trim().contains("INCENTIVO") &&
                        line.toUpperCase().trim().contains("PROMOCIONAL") && line.toUpperCase().trim().contains("IFOOD") &&
                        line.toUpperCase().trim().contains("FORMA") && line.toUpperCase().trim().contains("PAGAMENTO")){

                    idataMovimento  = -1;
                    ivalorDocumento = -1;
                    idocumento		= -1;
                    icomplemento03	= -1;

                    for(int i = 0; i < memFile.getFieldsSize(); i ++){
                        String campo = memFile.getStringFieldRemoveEspCharsUpper(i);
                        if (campo.contains("DATA") 	 &&
                                idataMovimento == -1) 			idataMovimento  = i;
                        if (campo.contains("VALOR")  &&
                                campo.contains("ITEN"))     	ivalorDocumento = i;
                        if(campo.contains("FORMA") 	 &&
                                campo.contains("PAGAMENTO")) 	idocumento = i;
                        if(campo.contains("DATA") 	 &&
                                campo.contains("CANCELAMENTO")) icomplemento03 = i;

                        if(campo.contains("TOTAL") 	  &&
                                campo.contains("PEDIDO")) ivalorDocumento2 = i;

                        if(campo.contains("INCENTIVO") 	  &&
                                campo.contains("PROMOCIONAL") &&
                                campo.contains("IFOOD")) iauxValorDoc = i;

                        if(campo.contains("INCENTIVO") 	  &&
                                campo.contains("PROMOCIONAL") &&
                                campo.contains("LOJA")) iauxValorDoc2 = i;
                    }

                    if (idataMovimento == -1 || ivalorDocumento == -1 || idocumento == -1 || icomplemento03 == -1){

                        idataMovimento  	= 1;
                        ivalorDocumento 	= 5;
                        idocumento 			= 9;
                        icomplemento03		= 10;
                        iauxValorDoc		= 6;
                        iauxValorDoc2		= 7;
                        ivalorDocumento2	= 8;
                    }
                }
            }


            line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
            cont++;

            complemento01	= "IFOOD";
            complemento02	= "";
            complemento03	= "";
            complemento04	= "";
            complemento05	= "";

            complemento06	= "";
            complemento07	= "";
            complemento08	= "";
            complemento09	= "";
            complemento10	= "";

            cpfCnpj			= "";

            nomeOrigem		= "IFOOD";
            documento		= "";
            nomePortador	= "";
            historico		= "";

            valorDocumento	= 0;
            valorJuros		= 0;
            valorDesconto	= 0;
            valorMulta		= 0;
            valorPagamento	= 0;
            valorLiquido    = 0;


            if(memFile.getStringField(idataMovimento).contains(" ")){
                String dataString = memFile.getStringField((idataMovimento)).split(" ")[0].replaceAll("\"","");
                if(dataString.contains("-")) {
                    String[] aux = dataString.split("-");
                    dataString = aux[2] + "/" + aux[1] + "/" + aux[0];
                }
                if (!dataString.equals("")) {
                    String dataMovimentoAux	  = getCampoDate(dataString);
                    if (dataMovimentoAux.contains("/")) {
                        dataMovimento     = getCampoDate(dataString);
                        dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                    }
                }
            }else{
                try {

                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt1) {
                        continue;
                    }
                }
            }
            documento 	  = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
            complemento03 = memFile.getStringFieldRemoveEspCharsUpper(icomplemento03);

            //JWR 04072021
            if (complemento03.equals("\"\"")) complemento03 = "";
            if(!complemento03.equals("")) continue;
            // if(!documento.contains("VIA") && !documento.contains("IFOOD")) continue; // Problema quando vem so dinheiro no documento

            nomeOrigem      = "IFOOD";
            if(!tipoLeitura.equals("003")){
                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }
            }


            if(tipoLeitura.equals("003")){
                auxValorDoc = Math.abs(memFile.getDoubleField(iauxValorDoc));
                auxValorDoc2 = Math.abs(memFile.getDoubleField(iauxValorDoc2));
                valorDocumento2 = Math.abs(memFile.getDoubleField(ivalorDocumento2));

                if(!documento.contains("DINHEIRO") || (!documento.contains("VIA") && !documento.contains("LOJA"))){
                    valorDocumento = auxValorDoc + auxValorDoc2 + valorDocumento2;

                }
                if(documento.contains("DINHEIRO") || (documento.contains("VIA") && documento.contains("LOJA"))){
                    valorDocumento = Math.abs(memFile.getDoubleField(iauxValorDoc));

                }
            }
            if (valorDocumento == 0) continue;
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--  Criacao de Variaveis para ttMovimentoPadrao
            if(dataMovimento.length() > 9){
                mesRef	= Integer.parseInt(dataMovimento.substring(3, 5));
                anoRef	= Integer.parseInt(dataMovimento.substring(6, 10));
                mesAnoAtual = StringUtil.leftPad(String.valueOf(mesRef), 2, "0") + "/" + String.valueOf(anoRef);

                mesRef	= mesRef - 1;
                if (mesRef	== 0) {
                    mesRef	= 12;
                    anoRef	= anoRef - 1;
                }
                mesAnoAnterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

                mesRef	= mesRef - 1;
                if (mesRef	== 0) {
                    mesRef	= 12;
                    anoRef	= anoRef - 1;
                }
                mesAno2Anterior = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
            }
            nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll(";","").trim();

            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~
            // --~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~--~  Criacao de Lote / Chave
            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
            consolidaClass = contLinhaTexto;

            classificacao  = dataMovimento + consolidaClass;

            lote = String.format( "%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento );

            chave = lote + "-IFOOD-PLANILHA" + contLinhaTexto;
            key	= chave  + "-CTB";

            ttMovimentoPadrao ttMov2      = (ttMovimentoPadrao)mapaVariavel.get(key);
            if (ttMov2 == null) {
                ttMov2 = new ttMovimentoPadrao();
            }
            ttMov2.lote		 	    = lote;
            ttMov2.documento   	    = documento;
            ttMov2.codEmpresa 	    = codEmpresa;
            ttMov2.nomeEmpresa      = nomeEmpresa;
            ttMov2.dataMovimento    = dataMovimento;
            ttMov2.tipoMovimento    = "CTB";
            ttMov2.tipoLancamento   = tipoLancamento;
            ttMov2.historico		= "";
            ttMov2.valorDocumento   = valorDocumento;
            ttMov2.valorDesconto    = 0;
            ttMov2.valorMulta  	    = 0;
            ttMov2.valorJuros  	    = 0;
            ttMov2.contaJuros    	= contaJuros;
            ttMov2.contaMulta		= contaMulta;
            ttMov2.contaDesconto  	= contaDesconto;
            ttMov2.nomePortador     = "CARTAO-IFOOD";
            ttMov2.centroCusto  	= "";
            ttMov2.nomeOrigem 	    = nomeOrigem;
            ttMov2.cpfCnpj          = cpfCnpj;
            ttMov2.chave            = chave + "-CTB";
            ttMov2.classificacao    = classificacao;
            ttMov2.tipoPlanilha     = tipoPlanilha;

            ttMov2.complemento01	= "IFOOD";
            ttMov2.complemento02	= "VENDA";
            ttMov2.complemento03	= complemento03;
            ttMov2.complemento04	= complemento04;
            ttMov2.complemento05	= complemento05;
            ttMov2.complemento06	= complemento06;
            ttMov2.complemento07	= complemento07;
            ttMov2.complemento08	= complemento08;
            ttMov2.complemento09	= complemento09;
            ttMov2.complemento10	= complemento10;
            ttMov2.nomeArquivo		= nomeArquivo;
            ttMov2.naturezaContabil  = "C";
            ttMov2.contaDebito       = "";
            ttMov2.contaCredito      = "";
            mapaVariavel.put(key,ttMov2);

            JSONObject histobj = new JSONObject(); 				histobj.put("nomeOrigem", nomeOrigem); 				histobj.put("documento", documento);
            histobj.put("complemento01", complemento01);		histobj.put("complemento02", complemento02);		histobj.put("complemento03", complemento03);
            histobj.put("complemento04", complemento04);		histobj.put("complemento05", complemento05);		histobj.put("complemento06", complemento06);
            histobj.put("complemento07", complemento07);		histobj.put("complemento08", complemento08);		histobj.put("complemento09", complemento09);
            histobj.put("complemento10", complemento10);		histobj.put("dataMovimento", dataMovimento);		histobj.put("mesAnoAnterior", mesAnoAnterior);
            histobj.put("mesAno2Anterior", mesAno2Anterior);	histobj.put("mesAnoAtual", mesAnoAtual);			histobj.put("nomePortador", nomePortador);
            histobj.put("contaMovimento", contaMovimento);		histobj.put("contaPortador", contaPortador);		histobj.put("contaDebito", "");
            histobj.put("contaCredito", "");					histobj.put("contaJuros", contaJuros);				histobj.put("contaDesconto", contaDesconto);
            histobj.put("contaMulta", contaMulta);				histobj.put("centroCusto", codCcOrigem);			histobj.put("valorDocumento", valorDocumento);
            histobj.put("valorJuros", valorJuros);				histobj.put("valorDesconto", valorDesconto);		histobj.put("valorMulta", valorMulta);
            histobj.put("codFilial", codFilial);				histobj.put("tipoPlanilha", tipoPlanilha);

            chave = lote + "-TARIFA-IFOOD-PLANILHA" + contLinhaTexto;
            key	= chave  + "-CTB";

            ttMovimentoPadrao ttMov3      = (ttMovimentoPadrao)mapaVariavel.get(key);
            if (ttMov3 == null) {
                ttMov3 = new ttMovimentoPadrao(ttMov2);
            }
            ttMov3.chave            = key;
            ttMov3.dataMovimento    = dataMovimento;
            ttMov3.nomePortador     = "TARIFA-IFOOD";
            ttMov3.complemento01	= "IFOOD";
            ttMov3.complemento02	= "TARIFA";

            histobj.put("complemento01", ttMov3.complemento01);
            histobj.put("complemento02", ttMov3.complemento02);
            histobj.put("nomePortador", ttMov3.nomePortador);



            ttMov3.valorDocumento   =  Math.abs(memFile.getDoubleField(ivalorDocumento) * 0.11);

            if (ttMov3.valorDocumento > 0) mapaVariavel.put(key,ttMov3);

        } catch (Exception memFileException) {
            logger.logError("Erro de leitura Padrao -> Extrato - IFOOD!", memFileException);
        }
    }

    return mapaVariavel;
}



public boolean readExtratoCredisanPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPlanilhaAux   = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;


    int idataMovimento	= 0;
    int idocumento      = 1;
    int inomePortador	= 0;
    int inomeOrigem		= 2;
    int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    if(jDados.has("TIPOPLANILHAAUX")) tipoPlanilhaAux = jDados.optString("TIPOPLANILHAAUX"); //#2311-021318 - Leal
    if (nomeArquivo.toUpperCase().contains("CSV")) {
        memFile.setFieldSeparator(";");
    }

    nomePortador = "EXTRATO CREDISAN";

    //#2311-021318 - Leal
    if(tipoPlanilhaAux.contains("005")) idataMovimento = 0;




    while (memFile.hasNextLine()) {
        try{
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
            dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));

            if (dataMovimento.equals("") || dataMovimento.contains(":")) continue;

            if (!dataMovimento.matches(".*[a-zA-Z].*")) {
                dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
            }

            if (memFile.getStringFieldRemoveEspCharsUpper(idocumento).contains(":")) continue;

            if (memFile.getStringFieldRemoveEspCharsUpper(idocumento).equals("") || memFile.getStringFieldRemoveEspCharsUpper(idocumento).matches(".*[a-zA-Z].*")){
                continue;
            }

            /*if(memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("CONTA: ")){
                nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replace("CONTA:", "");
            }*/

            documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            if (ivalorDocumento >= 0) {
                try {
                    valorDocumento = memFile.getDoubleField(ivalorDocumento);
                } catch (Exception vlrj) {
                    valorDocumento = 0;
                }
            }

            if (valorDocumento < 0) {
                debitoCredito = "EXTRATO-DEBITO";
            } else {
                debitoCredito = "EXTRATO-CREDITO";
            }
            valorDocumento = Math.abs(valorDocumento);

            logger.logInfo("Nome Portador: " + nomePortador + "|" + "Data: " + dataMovimento + "|" + "Documento: " + documento
                    + "|" + "Descri��o: " + nomeOrigem + "|" + "Valor: " + valorDocumento);

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" + dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();
            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {}
    }
    return true;
}


// aquii2
public HashMap readFaturaCartaoCredito_Sicoob_PDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String nomeEmpresa       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String nomePortador      = "";
    String dataString        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String tipoLancamento    = "";
    String tipoPlanilha      = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String contLinhaTexto    = "";
    String consolidaClass    = "";
    String classificacao     = "";
    String chave             = "";
    String key               = "";
    String lote              = "";
    String naturezaContabil = "";

    String anoAux = "";
    String codAux			 = "";
    String jurosAux			 = "";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    double valorRendimento = 0.0;
    double valorIr = 0.0;
    double valorIof = 0.0;



    int idataMovimento	= 0;
    int inomePortador = -1;
    int idocumento      = -1;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 2;
    int icomplemento01  = 7;
    int ivalorJuros     = 10;
    int icodAux			= 9;



    int numeroLancLinha = 0;
    int cont = 0;

    if(jDados.has("CODEMPRESA"))         codEmpresa = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))       nomeArquivo = jDados.optString("NOMEARQUIVO");
    if(jDados.has("NOMEEMPRESA"))       nomeEmpresa = jDados.optString("NOMEEMPRESA");
    if(jDados.has("DATAMOVIMENTO"))	     dataString = jDados.optString("DATAMOVIMENTO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("NOMEPORTADOR"))       nomePortador = jDados.optString("NOMEPORTADOR");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
        try {
            cont++;

            if(memFile.getStringFieldRemoveEspCharsUpper(0).trim().equals("TOTAL")) naoLeMais = true;
            if(naoLeMais) continue;

            if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).contains("SALDO ANTERIOR")) continue;

            if(line.contains("VENCIMENTO:")){
                anoAux = memFile.getStringFieldRemoveEspCharsUpper(1).replace("VENCIMENTO: ", "");
                anoAux = cutString(anoAux.trim(), anoAux.lastIndexOf("/"));
            }


            dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
            dataMovimento += anoAux;

            if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).equals("")){
                ttMovimentoPadrao ttMov4 = (ttMovimentoPadrao)mapaVariavel.get(chave + "-CTB");
                if(ttMov4 != null){
                    if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).equals("")) {
                        ttMov4.nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
                        mapaVariavel.put(chave + "-CTB", ttMov4);
                        continue;
                    }
                }
            }

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            if(dataMovimento.equals("")) continue;


            try {
                valorDocumento = memFile.getDoubleField(ivalorDocumento);
                logger.logInfo("VD -> " + valorDocumento);
            } catch (Exception vlrd){
                valorDocumento = 0;
            }


            if (valorDocumento == 0) continue;

            if(valorDocumento > 0){
                debitoCredito = "EXTRATO-CREDITO";
            }else{
                debitoCredito = "EXTRATO-DEBITO";
            }

            valorDocumento = Math.abs(valorDocumento);

            logger.logInfo("data -> " + dataMovimento + " VDOC: " + valorDocumento);


            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 04, "0");
            consolidaClass = contLinhaTexto;

            classificacao = dataMovimento + consolidaClass;

            lote = String.format("%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento);

            chave = lote + contLinhaTexto;
            key = chave + "-CTB";

            ttMovimentoPadrao ttMov2 = (ttMovimentoPadrao) mapaVariavel.get(key);
            if (ttMov2 == null) {
                ttMov2 = new ttMovimentoPadrao();
            }
            ttMov2.lote = lote;
            ttMov2.documento = documento;
            ttMov2.debitoCredito = debitoCredito;
            ttMov2.codEmpresa = codEmpresa;
            ttMov2.nomeEmpresa = nomeEmpresa;
            ttMov2.dataMovimento = dataMovimento;
            ttMov2.tipoMovimento = "CTB";
            ttMov2.tipoLancamento = tipoLancamento;
            ttMov2.historico = "";
            ttMov2.valorDocumento = valorDocumento;
            ttMov2.valorDesconto = 0;
            ttMov2.valorMulta = 0;
            ttMov2.valorJuros = valorJuros;
            ttMov2.contaJuros = "";
            ttMov2.contaMulta = "";
            ttMov2.contaDesconto = "";
            ttMov2.nomePortador = nomePortador;
            ttMov2.centroCusto = "";
            ttMov2.nomeOrigem = nomeOrigem;
            ttMov2.cpfCnpj = cpfCnpj;
            ttMov2.chave = chave + "-CTB";
            ttMov2.classificacao = classificacao;
            ttMov2.tipoPlanilha = tipoPlanilha;

            ttMov2.complemento01 = nomePortador;
            ttMov2.complemento02 = complemento02;
            ttMov2.complemento03 = complemento03;
            ttMov2.complemento04 = nomeOrigem;
            ttMov2.complemento05 = "";
            ttMov2.complemento06 = "";
            ttMov2.complemento07 = "";
            ttMov2.complemento08 = "";
            ttMov2.complemento09 = "";
            ttMov2.complemento10 = "";
            ttMov2.nomeArquivo = nomeArquivo;
            ttMov2.naturezaContabil = naturezaContabil;
            ttMov2.contaDebito = "";
            ttMov2.contaCredito = "";
            mapaVariavel.put(key, ttMov2);


        } catch (Exception ex) {
            logger.logInfo("ERRO AQUI = "+ex.getMessage());
        }
    }
    return mapaVariavel;
}



public HashMap readExtrato_ApliBB_PDF(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String nomeEmpresa       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String nomePortador      = "";
    String dataString        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String tipoLancamento    = "";
    String tipoPlanilha      = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String contLinhaTexto    = "";
    String consolidaClass    = "";
    String classificacao     = "";
    String chave             = "";
    String key               = "";
    String lote              = "";
    String naturezaContabil = "";

    String codAux			 = "";
    String jurosAux			 = "";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    double valorRendimento = 0.0;
    double valorIr = 0.0;
    double valorIof = 0.0;



    int idataMovimento	= 0;
    int inomePortador = -1;
    int idocumento      = -1;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 2;
    int icomplemento01  = 7;
    int ivalorJuros     = 10;
    int icodAux			= 9;



    int numeroLancLinha = 0;
    int cont = 0;

    if(jDados.has("CODEMPRESA"))         codEmpresa = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))       nomeArquivo = jDados.optString("NOMEARQUIVO");
    if(jDados.has("NOMEEMPRESA"))       nomeEmpresa = jDados.optString("NOMEEMPRESA");
    if(jDados.has("DATAMOVIMENTO"))	     dataString = jDados.optString("DATAMOVIMENTO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOPLANILHA"))    tipoPlanilha    = jDados.optString("TIPOPLANILHA");
    if(jDados.has("NOMEPORTADOR"))       nomePortador = jDados.optString("NOMEPORTADOR");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
        try {
            cont++;

            dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
            if (dataMovimento.equals("") || dataMovimento.contains(":")) continue;

            try {
                valorRendimento = Math.abs(memFile.getDoubleField(3));
            } catch (Exception vlrj) {
                valorRendimento = 0;
            }
            try {
                valorIr = Math.abs(memFile.getDoubleField(4));
            } catch (Exception vlrj) {
                valorIr = 0;
            }
            try {
                valorIof = Math.abs(memFile.getDoubleField(5));
            } catch (Exception vlrj) {
                valorIof = 0;
            }

            if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO")) continue;
            if (!dataMovimento.matches(".*[a-zA-Z].*")) {
                dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
            }

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
            if(nomeOrigem.contains("$") || nomeOrigem.equals("")) continue;

            if (ivalorDocumento >= 0) {
                try {
                    valorDocumento = memFile.getDoubleField(ivalorDocumento);
                } catch (Exception vlrj) {
                    valorDocumento = 0;
                }
            }

            if (nomeOrigem.contains("RESGATE")) {
                naturezaContabil = "D";
                debitoCredito = "EXTRATO-DEBITO";
            }
            if (nomeOrigem.contains("APLICACAO")) {
                naturezaContabil = "C";
                debitoCredito = "EXTRATO-CREDITO";
            }

            logger.logInfo("VALOR P = "+valorDocumento+" | REND = "+valorRendimento+" | IOF = "+valorIof+" | IR == "+valorIr+" ## "+nomeOrigem + " + " + debitoCredito);


            valorDocumento = Math.abs(valorDocumento);
            if (valorDocumento == 0) continue;


            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 04, "0");
            consolidaClass = contLinhaTexto;

            classificacao = dataMovimento + consolidaClass;

            lote = String.format("%s_%s_%s_%s_%s", nomeEmpresa, codEmpresa, nomeArquivo, dataLote, tipoLancamento);

            chave = lote + contLinhaTexto;
            key = chave + "-CTB";

            ttMovimentoPadrao ttMov2 = (ttMovimentoPadrao) mapaVariavel.get(key);
            if (ttMov2 == null) {
                ttMov2 = new ttMovimentoPadrao();
            }
            ttMov2.lote = lote;
            ttMov2.documento = documento;
            ttMov2.debitoCredito = debitoCredito;
            ttMov2.codEmpresa = codEmpresa;
            ttMov2.nomeEmpresa = nomeEmpresa;
            ttMov2.dataMovimento = dataMovimento;
            ttMov2.tipoMovimento = "CTB";
            ttMov2.tipoLancamento = tipoLancamento;
            ttMov2.historico = "";
            ttMov2.valorDocumento = valorDocumento;
            ttMov2.valorDesconto = 0;
            ttMov2.valorMulta = 0;
            ttMov2.valorJuros = valorJuros;
            ttMov2.contaJuros = "";
            ttMov2.contaMulta = "";
            ttMov2.contaDesconto = "";
            ttMov2.nomePortador = nomePortador;
            ttMov2.centroCusto = "";
            ttMov2.nomeOrigem = nomeOrigem;
            ttMov2.cpfCnpj = cpfCnpj;
            ttMov2.chave = chave + "-CTB";
            ttMov2.classificacao = classificacao;
            ttMov2.tipoPlanilha = tipoPlanilha;

            ttMov2.complemento01 = complemento01;
            ttMov2.complemento02 = complemento02;
            ttMov2.complemento03 = complemento03;
            ttMov2.complemento04 = complemento04;
            ttMov2.complemento05 = nomeOrigem;
            ttMov2.complemento06 = "";
            ttMov2.complemento07 = "";
            ttMov2.complemento08 = "";
            ttMov2.complemento09 = "";
            ttMov2.complemento10 = "";
            ttMov2.nomeArquivo = nomeArquivo;
            ttMov2.naturezaContabil = naturezaContabil;
            ttMov2.contaDebito = "";
            ttMov2.contaCredito = "";
            mapaVariavel.put(key, ttMov2);


            chave = lote + " - EXTRA - RENDIMENTO " + contLinhaTexto;
            key	= chave  + "-CTB";


            ttMovimentoPadrao ttMov3      = (ttMovimentoPadrao)mapaVariavel.get(key);
            cont++;
            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
            consolidaClass = contLinhaTexto;

            classificacao  = dataMovimento + consolidaClass;
            if (ttMov3 == null) {
                ttMov3 = new ttMovimentoPadrao(ttMov2);
            }
            ttMov3.chave            = key;
            ttMov3.dataMovimento    = dataMovimento;
            ttMov3.nomeOrigem       = nomeOrigem;
            ttMov3.nomePortador     = nomePortador;
            ttMov3.complemento01	= "RENDIMENTO";
            ttMov3.complemento05	= nomeOrigem;
            ttMov3.naturezaContabil = "C";
            ttMov3.classificacao    = classificacao;
            ttMov3.debitoCredito = "EXTRATO-CREDITO";

            ttMov3.valorDocumento   = Math.abs(valorRendimento);
            logger.logInfo("REND - VALOR = "+ttMov3.valorDocumento+" | "+ttMov3.nomeOrigem+" | "+ttMov3.nomeArquivo);

            mapaVariavel.put(key,ttMov3);

            chave = lote + " - EXTRA - IR " + contLinhaTexto;
            key	= chave  + "-CTB";


            ttMovimentoPadrao ttMov4      = (ttMovimentoPadrao)mapaVariavel.get(key);
            cont++;
            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
            consolidaClass = contLinhaTexto;

            classificacao  = dataMovimento + consolidaClass;
            if (ttMov4 == null) {
                ttMov4 = new ttMovimentoPadrao(ttMov2);
            }
            ttMov4.chave            = key;
            ttMov4.dataMovimento    = dataMovimento;
            ttMov4.nomeOrigem       = nomeOrigem;
            ttMov4.nomePortador     = nomePortador;
            ttMov4.complemento01	= "IR";
            ttMov4.complemento05	= nomeOrigem;
            ttMov4.naturezaContabil = naturezaContabil;
            ttMov4.classificacao    = classificacao;
            ttMov4.debitoCredito    = debitoCredito;

            ttMov4.valorDocumento   = Math.abs(valorIr);
            logger.logInfo("IR - VALOR = "+ttMov4.valorDocumento+" | "+ttMov4.nomeOrigem);
            mapaVariavel.put(key,ttMov4);

            chave = lote + " - EXTRA - IOF " + contLinhaTexto;
            key	= chave  + "-CTB";


            ttMovimentoPadrao ttMov5      = (ttMovimentoPadrao)mapaVariavel.get(key);
            cont++;
            contLinhaTexto = String.valueOf(cont);
            contLinhaTexto = StringUtil.leftPad(contLinhaTexto, 05, "0");
            consolidaClass = contLinhaTexto;

            classificacao  = dataMovimento + consolidaClass;
            if (ttMov5 == null) {
                ttMov5 = new ttMovimentoPadrao(ttMov2);
            }
            ttMov5.chave            = key;
            ttMov5.dataMovimento    = dataMovimento;
            ttMov5.nomeOrigem       = nomeOrigem;
            ttMov5.nomePortador     = nomePortador;
            ttMov5.complemento01	= "IOF";
            ttMov5.complemento05	= nomeOrigem;
            ttMov5.naturezaContabil = naturezaContabil;
            ttMov5.classificacao    = classificacao;
            ttMov5.debitoCredito    = debitoCredito;

            ttMov5.valorDocumento   = Math.abs(valorIof);

            mapaVariavel.put(key,ttMov5);




        } catch (Exception ex) {
            logger.logInfo("ERRO AQUI = "+ex.getMessage());
        }
    }
    return mapaVariavel;
}

public boolean readExtratoBTGExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPlanilhaAux   = "";

    String valorAux = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;


    int idataMovimento	= 1;
    int idocumento      = -1;
    int inomePortador	= 2;
    int inomeOrigem		= 2;
    //int ivalorDocumento	= 3;
    int ivalorDocumento	= 4;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    if(jDados.has("TIPOPLANILHAAUX")) tipoPlanilhaAux = jDados.optString("TIPOPLANILHAAUX"); //#2311-021318 - Leal
    if (nomeArquivo.toUpperCase().contains("CSV")) {
        memFile.setFieldSeparator(";");
    }


    //#2311-021318 - Leal
    if(tipoPlanilhaAux.contains("005")) idataMovimento = 0;




    while (memFile.hasNextLine()) {
        try{
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento - 1).equals("")){
                nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(1);
            }
            /*if(!dataMovimento.equals("")) {
                logger.logInfo("zerando nome origem: ");
                nomeOrigem = "";
            }*/
            /*dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(0));


            /*if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("") &&
                    !memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).matches(".*[a-zA-Z].*")) {
                valorAux = Double.parseDouble(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replaceAll(",", ".").replaceAll("\\.", "")) / 100;
            }*/

//            dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
//
//            if(memFile.getStringFieldRemoveEspCharsUpper(1).equals("CONTA")) nomePortador = memFile.getStringFieldRemoveEspCharsUpper(2);
//
//            if (dataMovimento.equals("")) continue;
//
//            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
//
//            try {
//                valorDocumento = memFile.getDoubleField(ivalorDocumento);
//            } catch (Exception vlrj) {
//                valorDocumento = 0;
//            }

            if (valorAux.contains("-")) {
                debitoCredito = "EXTRATO-DEBITO";
            } else {
                debitoCredito = "EXTRATO-CREDITO";
            }

            valorDocumento = Math.abs(Double.parseDouble(valorAux.replace("-","")));


            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" + dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();
            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {}
    }
    return true;
}



public boolean readExtratoSicoobExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPlanilhaAux   = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;

    boolean saldoInicial = false;
    boolean pegouValorDocumento = false;
    double saldoAnterior = 0.0;
    double saldo = 0.0;

    int idataMovimento	= 0;
    int idocumento      = 1;
    int inomePortador	= 0;
    int inomeOrigem		= 2;
    int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    if(jDados.has("TIPOPLANILHAAUX")) tipoPlanilhaAux = jDados.optString("TIPOPLANILHAAUX"); //#2311-021318 - Leal
    if (nomeArquivo.toUpperCase().contains("CSV")) {
        memFile.setFieldSeparator(";");
    }


    //#2311-021318 - Leal
    if(tipoPlanilhaAux.contains("005")) idataMovimento = 0;




    while (memFile.hasNextLine()) {
        try{
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
            saldoAnterior = saldo;
            //saldo = 0;
            pegouValorDocumento = false;
            valorDocumento = 0;
            /*if(memFile.getStringFieldRemoveEspCharsUpper(10).trim().equals("SICOOB")) {
                nomePortador = memFile.getStringFieldRemoveEspCharsUpper(10);
                logger.logInfo("NOMEPORT: " + nomePortador);
            }*/
            if(line.contains("SALDO INICIAL EM")) {
                saldoInicial = true;
                pegouValorDocumento = true;
            }


            for(int i = 66; i < memFile.getFieldsSize(); i++){
                if(!pegouValorDocumento){
                    try{
                        valorDocumento = memFile.getDoubleField(i);

                    }catch (Exception e){valorDocumento = 0;}
                }
                if(valorDocumento != 0 && !pegouValorDocumento){
                    pegouValorDocumento = true;
                    continue;
                }
                if(pegouValorDocumento){
                    try{saldo = memFile.getDoubleField(i);
                    }catch (Exception e){}
                    if(saldo != 0) break;
                }
                if(saldoInicial){
                    saldoInicial = false;
                    continue;
                }
            }
            logger.logInfo("SALDO ANTERIOR: " + saldoAnterior);
            logger.logInfo("SALDO ATUAL: " + saldo);
            logger.logInfo("---------------");

            if(saldoAnterior > saldo){
                debitoCredito = "EXTRATO-DEBITO";
            }else{
                debitoCredito = "EXTRATO-CREDITO";
            }
            logger.logInfo("SALDO ANTERIOR - SALDO ATUAL: " + (saldoAnterior - saldo));
            logger.logInfo("VALOR: " + valorDocumento + "|" + debitoCredito);
            logger.logInfo("               ");
            logger.logInfo("               ");
            logger.logInfo("               ");
            logger.logInfo("               ");

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(13);

            dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(0).trim());
            if(dataMovimento.equals("")) continue;

            /*if(memFile.getStringFieldRemoveEspCharsUpper(inomePortador).contains("CONTA: ")){
                nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador).replace("CONTA:", "");
            }*/

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" + dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();
            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                //pegouValorDocumento = false;
                //valorDocumento = 0;
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {}
    }
    return true;
}

public boolean readExtratoBtg2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPlanilhaAux   = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;
    boolean leuIndice = false;


    int idataMovimento	= 0;
    int idocumento      = 1;
    int inomePortador	= 4;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 2;
    String nomeOrigemAux = "";
    String dataMovimentoAux = "";
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    if(jDados.has("TIPOPLANILHAAUX")) tipoPlanilhaAux = jDados.optString("TIPOPLANILHAAUX"); //#2311-021318 - Leal
    if (nomeArquivo.toUpperCase().contains("CSV")) {
        memFile.setFieldSeparator(";");
    }


    //#2311-021318 - Leal
    //if(tipoPlanilhaAux.contains("005")) idataMovimento = 0;

    while (memFile.hasNextLine()) {
        try {
            nomeOrigemAux = "";
            dataMovimentoAux = "";
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if(!memFile.getStringFieldRemoveEspCharsUpper(inomePortador).matches(".*[a-zA-Z].*") && !memFile.getStringFieldRemoveEspCharsUpper(inomePortador).equals("")){
                nomePortador = memFile.getStringFieldRemoveEspCharsUpper(inomePortador);
                complemento01 = nomePortador;
            }
            //if n cabeca
            if (line.contains("DATA LANCAMENTO") && line.contains("DESCRICAO DO LANCAMENTO") && line.contains("ENTRADAS / SAIDAS")) {
                leuIndice = true;
                continue;
            }
            if (leuIndice) {

                if (memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).startsWith("SALDO")) {
                    continue;
                }

                dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento));
                try {
                    valorDocumento = memFile.getDoubleField(ivalorDocumento);
                } catch (Exception vlrj) {
                    valorDocumento = 0;
                }
                if (valorDocumento < 0) {
                    debitoCredito = "EXTRATO-DEBITO";
                } else {
                    debitoCredito = "EXTRATO-CREDITO";
                }
                valorDocumento = Math.abs(valorDocumento);

                if (!memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).matches("^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/(19|20)\\d\\d$") && !nomeOrigem.equals("")) {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("HISTORICO")
                                .where("CHAVE = ? ")
                                .param(nomeOrigem += memFile.getStringFieldRemoveEspCharsUpper(idataMovimento) + " " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem))
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                    }
                    continue;
                }

                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
                complemento04 = nomeOrigem;

                if (!nomeOrigem.equals("")) {
                    logger.logInfo(complemento01 + "|" + nomePortador + "|" + dataMovimento + "|" + complemento04 + "|" + nomeOrigem + "|" + valorDocumento + "|" + debitoCredito);
                    //logger.logInfo(line);
                    contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
                    chaveExtrato = codEmpresa + "-" + dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
                    // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                    extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                            .fields("CHAVE")
                            .param(chaveExtrato)
                            .queryUnique();
                    if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                        //logger.logInfo(dataMovimento + "|" + nomeOrigem + "|" + valorDocumento);
                        try {
                            dbIOCont.insert("IO_EXTRATO")
                                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                    .param(chaveExtrato)
                                    .param(codEmpresa)
                                    .param(dataMovimento)
                                    .param(documento)
                                    .param(nomePortador)
                                    .param(nomeOrigem)
                                    .param(nomeArquivo.toUpperCase())
                                    .param(complemento02)
                                    .param(valorDocumento)
                                    .param(debitoCredito)
                                    .param(0)
                                    .execute();
                        } catch (Exception sqlInsertException) {
                            logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                            continue;
                        }
                    } else {
                        try {
                            dbIOCont.update("IO_EXTRATO")
                                    .fields("EXTRATOLIDO")
                                    .where("CHAVE = ? ")
                                    .param(0)
                                    .param(chaveExtrato)
                                    .execute();
                        } catch (Exception sqlUpdateException) {
                            logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                            continue;
                        }
                    }
                }


            }
        }catch (Exception e) {}
    }
    return true;
}


public boolean readExtratoBanrisulPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPlanilhaAux   = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;


    int idataMovimento	= 3;
    int idocumento      = 0;
    int inomePortador	= 0;
    int inomeOrigem		= 2;
    int ivalorDocumento	= 4;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    if(jDados.has("TIPOPLANILHAAUX")) tipoPlanilhaAux = jDados.optString("TIPOPLANILHAAUX"); //#2311-021318 - Leal
    if (nomeArquivo.toUpperCase().contains("CSV")) {
        memFile.setFieldSeparator(";");
    }

    nomePortador = "Banrisul";

    //#2311-021318 - Leal
    if(tipoPlanilhaAux.contains("005")) idataMovimento = 0;

    while (memFile.hasNextLine()) {
        try{
            idataMovimento	= 3;
            idocumento      = 0;
            inomePortador	= 0;
            inomeOrigem		= 2;
            ivalorDocumento	= 4;

            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);


            //dataMovimento = getCampoDate(memFile.getStringFieldRemoveEspCharupper(idataMovimento));
            //logger.logInfo(dataMovimento);
            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("/") || memFile.getStringFieldRemoveEspCharsUpper(0).contains(":")) continue;

            if(!memFile.getStringFieldRemoveEspCharsUpper(1).contains("EFETIVADO")) continue;

            try {
                valorDocumento = memFile.getDoubleField(ivalorDocumento);
            } catch (Exception vlrj) {}

            dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
            if(dataMovimento.equals("")) continue;

            if(dataMovimento.matches(".*[a-zA-Z].*")){
                idataMovimento += 1;
                dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
                ivalorDocumento += 1;
                try {
                    valorDocumento = memFile.getDoubleField(ivalorDocumento);
                } catch (Exception vlrj) {}
            }
            dataMovimento = getCampoDate(dataMovimento).trim();
            if(dataMovimento.length() != 10) continue;

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
            nomeOrigem = nomeOrigem.replace("DE","").replace("PARA","").trim();

            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("PIX ENVIADO")) {
                debitoCredito = "EXTRATO-DEBITO";
            }
            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("PIX RECEBIDO")){
                debitoCredito = "EXTRATO-CREDITO";
            }

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" + dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            //logger.logInfo("chave" + chaveExtrato);
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();
            // Inserir caso Chave nao encontrada.
            if(dataMovimento.equals("") || valorDocumento == 0 || debitoCredito.equals("")) logger.logInfo("caiu");
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {}
    }
    return true;
}

public boolean readExtratoNextExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();
    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento	 = "";
    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String tipoPlanilhaAux   = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    boolean naoLeMais = false;


    int idataMovimento	= 0;
    int idocumento      = 1;
    int inomePortador	= 0;
    int inomeOrigem		= 0;
    int ivalorDocumento	= 2;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO")) tipoLancamento = jDados.optString("TIPOLANCAMENTO");

    if(jDados.has("TIPOPLANILHAAUX")) tipoPlanilhaAux = jDados.optString("TIPOPLANILHAAUX"); //#2311-021318 - Leal
    if (nomeArquivo.toUpperCase().contains("CSV")) {
        memFile.setFieldSeparator(";");
    }

    nomePortador = "EXTRATO NEXT";

    //#2311-021318 - Leal
    if(tipoPlanilhaAux.contains("005")) idataMovimento = 0;




    while (memFile.hasNextLine()) {
        try{
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            if(memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) continue;
            if(memFile.getStringFieldRemoveEspCharsUpper(5).contains("SALDO")) continue;
            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXTRATO DE:")) continue;
//            if(memFile.getStringFieldRemoveEspCharsUpper(3).matches(".*[a-zA-Z].*")) continue;

            documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);

            dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
            if(dataMovimento.contains("/202")){
                dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
                inomeOrigem = inomeOrigem - 1;
                idocumento = idocumento - 1;
                ivalorDocumento = ivalorDocumento - 1;
            }

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
            //logger.logInfo(nomeOrigem);

            documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);

            if (ivalorDocumento >= 0) {
                try {
                    valorDocumento = memFile.getDoubleField(ivalorDocumento);
                } catch (Exception vlrj) {
                    valorDocumento = 0;
                }
            }

            //nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            //nomeOrigem = cutString(nomeOrigem, 0, nomeOrigem.lastIndexOf(" "));

            /*if(!memFile.getStringFieldRemoveEspCharsUpper(idocumento).matches(".*[a-zA-Z].*") || !memFile.getStringFieldRemoveEspCharsUpper(idocumento).contains(".")){
                documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
            }else{
                continue;
            }*/
            if (valorDocumento < 0) {
                debitoCredito = "EXTRATO-DEBITO";
            } else {
                debitoCredito = "EXTRATO-CREDITO";
            }
            valorDocumento = Math.abs(valorDocumento);

//            logger.logInfo("Nome Portador: " + nomePortador + "|" + "Data: " + dataMovimento + "|" + "Documento: " + documento
//                    + "|" + "Descri��o: " + nomeOrigem + "|" + "Valor: " + valorDocumento);

            //nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
            //logger.logInfo("+" + dataMovimento.matches("[0-9]{2}/[0-9]{2}"));
            //nomeOrigem = nomeOrigem.substring(nomeOrigem.length() - 5, nomeOrigem.length());
            //logger.logInfo(nomeOrigem);
//            if(dataMovimento.contains("/")){
//                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
//                nomeOrigem = nomeOrigem.substring(0,nomeOrigem.length() - 5);
////                nomeOrigem = nomeOrigem.replace("[0-9]{2}\\/[0-9]{2}", "");

//            }

//            logger.logInfo(dataMovimento + "|" + nomeOrigem);

            //dataMovimento = cutString(dataMovimento, dataMovimento.lastIndexOf(" "));


            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" + dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();
            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    //logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    //logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {}
    }
    return true;
}

/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}

/*#############################################@ EXTRATO-CEF-TXT @##############################################*/
public boolean readExtratoCEFDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-DAYCOVAL-EXCEL @##############################################*/
public boolean readExtratoDaycoval(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-ITAU-EXCEL @##############################################*/
public boolean readExtratoItauDefault(MemoryFile memFile, String anoData, String tipoExtrato, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String anoAux 			 = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int ivalorDocumento		 = -1;
    int inomeOrigem			 = -1;
    int idataMovimento		 = -1;
    int icomplemento02		 = -1;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA").trim();
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO").trim();

    //logger.logInfo("Tipo: "+tipoExtrato);

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);


            complemento01   = nomePortador;
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            nomeOrigem      = "";
            documento       = "";
            historico       = "";

            valorDocumento  = 0;
            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;
            dataMovimento = "";

            if (tipoExtrato.equals("TIPO04")) {
                if(memFile.getStringFieldRemoveEspCharsUpper(0).equals("")){
                    ivalorDocumento	= 5;
                    inomeOrigem		= 4;
                    idataMovimento	= 1;
                } else{
                    ivalorDocumento	= 4;
                    inomeOrigem		= 3;
                    idataMovimento	= 0;
                }

                if(line.contains("EXTRATO DE")){
                    anoAux = cutString(line, line.lastIndexOf("/20"), line.lastIndexOf("/20")+5);
                }




                if (memFile.getStringFieldRemoveEspCharsUpper(0).equals(0)) continue;
                if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("NOME:")) continue;
                if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA:")) continue;
                if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXTRATO DE CONTA CORRENTE")) continue;
                if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DATA") && memFile.getStringFieldRemoveEspCharsUpper(3).contains("MENTO")) continue;
                if (memFile.getStringFieldRemoveEspCharsUpper(3).contains("S A L D O")) continue;


                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);


                String dataString = "";

                //try {
                // Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                // dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                // dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                // } catch (Exception dt1) {
                try {
                    //Date dt = memFile.getDateField(idataMovimento);
                    //dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    //dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim();
                    dataString = dataString +"/"+ anoAux;

                    Date dt2  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt2, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt2, "yyyy-MM");

                } catch (Exception dt2) {
                    try {
                        dataString = cutString(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento), 0, 10).replaceAll("\\-", "\\/");
                        Date dt  = DateUtil.stringToDate(dataString, "yyyy/MM/dd");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");

                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");

                    } catch (Exception dt2) {
                        try{
                            dataMovimento  = getDate(dataMovimento, idataMovimento, line, false,"", memFile, logger);
                            dataLote  = getCampoDate(dataMovimento, "", "yyyy-MM");
                        }catch (Exception dt2) {}
                    }
                }
                //}

                //logger.logInfo("Data: "+dataMovimento);

                if (dataMovimento.equals("")) continue;

                strValorDocumento = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);

                if (strValorDocumento.contains("-")) debitoCredito  = "EXTRATO-DEBITO";
                if (!strValorDocumento.contains("-")) debitoCredito = "EXTRATO-CREDITO";

                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrj) { valorDocumento = 0;}

                if (valorDocumento == 0) continue;

                //logger.logInfo("DT - "+ dataMovimento +" | VD - "+ valorDocumento +" | DC - "+ debitoCredito +" | NM - "+ nomeOrigem);

            }
            if (tipoExtrato.equals("TIPO03")) {
                ivalorDocumento	= 3;
                inomeOrigem		= 1;
                idataMovimento	= 0;
                icomplemento02	= 2;
                String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
                if (!dataString.equals("")) {
                    String dataMovimentoAux	= getCampoDate(dataString);
                    if (dataMovimentoAux.contains("/")) {
                        dataMovimento		= getCampoDate(dataString);
                        dataLote			= getCampoDate(dataMovimento, "", "yyyy-MM");
                    }
                }

                if(ivalorDocumento >=0){
                    try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                    catch (Exception vlrj) { valorDocumento = 0;}
                }

                if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";

                valorDocumento = Math.abs(valorDocumento);

                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
                complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);

                // logger.logInfo("OTT -> " + " |DM=" + dataMovimento + " |VD=" + valorDocumento);
            }
            if (!tipoExtrato.equals("TIPO03") && !tipoExtrato.equals("TIPO04")) {

                if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("DATA:")) continue;

                try {
                    Date dt = memFile.getDateField(1);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(1, "dd/MM/yyyy");    // --- VERIFICAR
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(1).trim();
                        if(dataMovimento.length() >= 5) dataMovimento = dataMovimento.substring(0, 5);
                    }
                }
                // logger.logInfo("OTT1 -> " + " |DM=" + dataMovimento + " |ANODATA -> " + anoData);
                dataMovimento = dataMovimento + "/" + anoData;
                // logger.logInfo("OTT2 -> " + " |DM2=" + dataMovimento + " |ANODATA2 -> " + anoData);
                try {
                    Date dt = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                } catch (Exception dateException) {
                    continue;
                }

                if (tipoExtrato.equals("TIPO01")) {
                    try {
                        valorDocumento = memFile.getDoubleField(5);
                    } catch(Exception e) {
                        valorDocumento = 0;
                    }
                }

                if (tipoExtrato.equals("TIPO02")) {
                    try {
                        valorDocumento = memFile.getDoubleField(6);
                    } catch(Exception e) {
                        valorDocumento = 0;
                    }
                    complemento02 = memFile.getStringFieldRemoveEspCharsUpper(5);
                }
                if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
                valorDocumento = Math.abs(valorDocumento);

                if (valorDocumento == 0) continue;

                nomeOrigem    = memFile.getStringFieldRemoveEspCharsUpper(4);
                if (tipoExtrato.equals("TIPO01") && !memFile.getStringFieldRemoveEspCharsUpper(8).equals("")) {
                    nomeOrigem    = memFile.getStringFieldRemoveEspCharsUpper(8);
                    complemento02 = memFile.getStringFieldRemoveEspCharsUpper(4);
                }
            }

            if(tipoExtrato.equals("TIPO02")){
                documento = memFile.getStringFieldRemoveEspCharsUpper(5);
            }

            if(tipoExtrato.equals("TIPO03")){
                documento = memFile.getStringFieldRemoveEspCharsUpper(2);
            }

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }
    return true;
}


public boolean readExtratoItauPdfInterno(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    // logger.logInfo("Entrou ITAU PDF INTERNO");

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String anoData			 = "";

    String tipo 			 = "001";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int idataMovimento	= 0;
    int idocumento      = 2;
    int inomePortador	=-1;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    String linha = "";

    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("LINHA")) 	   linha 		= jDados.optString("LINHA");
    if(jDados.has("TIPO"))		   tipo 		= jDados.optString("TIPO");


    if (!linha.equals("")) {
        if (linha.contains("LANCAMENTOS") && linha.contains("PERIODO:") && linha.contains("ATE") && tipo.equals("003")) {
            if (linha.contains(";")) {
                String [] arrayAnoData = linha.split(";");
                anoData = cutString(arrayAnoData[1], arrayAnoData[1].lastIndexOf("/")+1);
            }
        }
    }



    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if(line.startsWith("ABOUT:BLANK") || line.contains("PRE-VISUALIZACAO DE IMPRESSAO")) continue;

        // logger.logInfo("LINHA NO COMECO " + memFile.getFieldsSize() + " | " +  tipo + " | " + line);
        logger.logInfo("TPItAU " + tipo);
        if(tipo.equals("003") || tipo.equals("002") || tipo.equals("001")) ivalorDocumento	= 3;


        if (tipo.equals("002") && line.contains("LIS") && line.contains("CONTRATADO") && line.contains("UTILIZADO") && line.contains("DISPONIVEL")/* || (tipo.equals("002") && line.contains("SALDO DISPONIVEL EM CONTA") && memFile.getFieldsSize() == 1)*/) tipo = "003";

        if (line.toUpperCase().contains("EXTRATO DE")) {
            anoData = cutString(cutString(line, "DE ", " ATE"), cutString(line, "DE ", " ATE").lastIndexOf("/") + 1);
            continue;
        }
        else if (line.contains("EXTRATO - POR PERIODO")) { //2307-009209
            anoData = cutString(line, line.lastIndexOf("/")+1);
            continue;
        }
        if(tipo.equals("999") && memFile.getFieldsSize() == 1 && line.contains("/202")){
            anoData = cutString(memFile.getStringFieldRemoveEspCharsUpper(0), memFile.getStringFieldRemoveEspCharsUpper(0).lastIndexOf("/")).replaceAll("[^0-9]", "");
        }

        nomePortador = cutString(nomePortador, ":", "");
        if (line.contains("DATA") && line.contains("HORA")) continue;
        if (line.toUpperCase().contains("CONTA CORRENTE") && line.toUpperCase().contains("EXTRATOS")) continue;
        if (line.startsWith("CONSULTAR")) continue;
        if (line.toUpperCase().contains("OPCAO DE PESQUISA:")) continue;
        if (line.toUpperCase().contains("PERIODOS:")) continue;
        if (line.toUpperCase().contains("BLOQUEIO DIA")) continue;
        if (line.toUpperCase().contains("B = BLOQUEADO")) continue;
        if (line.toUpperCase().contains("LANCAMENTO PROVISIONADO")) continue;
        if (line.toUpperCase().contains("POSICAO EM")) continue;
        // if (line.toUpperCase().contains("SALDO DISPONIVEL EM CONTA") && (tipo.equals("002") || tipo.equals("003"))) continue; // Douglas #2308-013416 Adicionado esse continue

        // logger.logInfo("AD " + anoData+" Tipo - "+tipo+" LIN "+line);

        if (line.contains("PERIODO:") && line.contains("ATE") && tipo.equals("002")) {
            anoData = cutString(memFile.getStringFieldRemoveEspCharsUpper(0), memFile.getStringFieldRemoveEspCharsUpper(0).lastIndexOf("/")+1);
        }

        if (line.contains("PERIODO:") && line.contains("ATE") && tipo.equals("003")) {
            // logger.logInfo("LIN " + line);
            anoData = cutString(memFile.getStringFieldRemoveEspCharsUpper(1), memFile.getStringFieldRemoveEspCharsUpper(1).lastIndexOf("/")+1);
        }

        logger.logInfo("LOG TIPO EXTRATO - " + tipo);
        // Douglas Feito para o chamado #2307-008733
        if (tipo.equals("003")) {
            if(line.toUpperCase().contains("POSICAO CONSOLIDADA")) naoLeMais = true;
            if (line.toUpperCase().contains("(-) SALDO A LIBERAR")) continue;
            if (line.toUpperCase().contains("SALDO APLIC AUT MAIS")) continue;
            if (line.toUpperCase().contains("SALDO PARCIAL")) continue;
            if (line.toUpperCase().contains("SALDO DO DIA")) continue;
            if (line.toUpperCase().contains("SALDO FINAL")) continue;
            if (line.toUpperCase().contains("SALDO FINAL DISPONIVEL")) continue;
            if (line.toUpperCase().contains("SALDO INICIAL")) continue;
            if (line.toUpperCase().contains("SALDO FINAL DEVEDOR")) continue;
            if (line.toUpperCase().contains("SALDO DISPONIVEL SEM INVESTIMENTOS AUTOMATICOS")) continue;
            if (line.toUpperCase().contains("SALDO EM APLICACCO AUTOMATICA - APLIC AUT MAIS")) continue;
            if (line.toUpperCase().contains("SALDO TOTAL DISPONIVEL")) continue;
            if (line.toUpperCase().contains("SALDO") && line.toUpperCase().contains("DISPONIVEL") && line.toUpperCase().contains("SEM") && line.toUpperCase().contains("INVESTIMENTOS") && tipo.equals("005")) naoLeMais = true;
            if (line.toUpperCase().contains("VALOR TOTAL EM") && line.toUpperCase().contains("AUTOMATICAS")) continue;
            if (line.toUpperCase().contains("RENDIMENTOS") && line.toUpperCase().contains("AUTOMATICAS")) continue;
            if (line.toUpperCase().startsWith("LIS")) continue;
            if (line.toUpperCase().contains("TOTAL DISPONIVEL PARA USO")) continue;
        }

        //2308-013945
        if (tipo.equals("005")) {
            if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO INICIAL")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO PARCIAL")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO ANTERIOR")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO APLIC AUT MAIS")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("SALDO FINAL")) continue;
        }

        if (line.toUpperCase().contains("DESBLOQUEIO") && line.toUpperCase().contains("DIA")) continue;
        if (line.toUpperCase().replaceAll(" ", "").trim().contains("SALDO") && tipo.equals("001")) continue;
        if (memFile.getFieldsSize() < 3 && tipo.equals("001")) continue;
        if (line.toUpperCase().replaceAll(" ", "").trim().contains("SDOCTA")) continue;

        if (line.toUpperCase().contains("SALDO") && line.toUpperCase().contains("ANTERIOR") && (tipo.equals("002") || tipo.equals("003"))) continue;


        if (line.length() < 8 && tipo.equals("002")) continue;
        if (line.toUpperCase().contains("PRE") && line.toUpperCase().contains("VISUALIZACAO") && line.toUpperCase().contains("IMPRESSAO") && tipo.equals("002")) continue;

        if (line.toUpperCase().contains("SALDO") && line.toUpperCase().contains("RESUMIDO") && tipo.equals("002")) naoLeMais = true;

        if (line.toUpperCase().contains("DATA") && line.toUpperCase().contains("LANCAMENTOS") && line.toUpperCase().contains("VALOR") && line.toUpperCase().contains("SALDO") && tipo.equals("002")) {
            naoLeMais = false;
            continue;
        }
        if (line.toUpperCase().contains("POSICAO") && line.toUpperCase().contains("CONTA") && line.toUpperCase().contains("CORRENTE") && tipo.equals("002")) naoLeMais = true;

        if (line.toUpperCase().contains("SALDO") && line.toUpperCase().contains("CONTA") && line.toUpperCase().contains("CORRENTE") && tipo.equals("003")) naoLeMais = true;

        if (line.toUpperCase().contains("ATUALIZADO EM") && (tipo.equals("002") || tipo.equals("003"))) continue; // Douglas #2308-013416 Adicionado esse continue
        if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("R$") && (tipo.equals("002") || tipo.equals("003"))) continue; // Douglas #2308-013416 Adicionado esse continue

        if (line.length() < 3) continue;

        if (naoLeMais) continue;

        try {
            String dataPattern = "";
            String dataCandidate = memFile.getStringFieldRemoveEspCharsUpper(0);

            dataCandidate.replaceAll(" ", "");

            // logger.logInfo("DC " + dataCandidate);

            if (tipo.equals("002") || tipo.equals("003")) {
                if (tipo.equals("002") && line.contains("PERIODO") && line.contains("LANCAMENTOS")) { //202301-0024245
                    anoData = cutString(line, line.lastIndexOf("/")+1);
                    // logger.logInfo("ANO DATA1 " + anoData + " | " + line);
                    continue;
                }
                if (!dataCandidate.contains("/") && tipo.equals("002")) {
                    anoData = cutString(dataCandidate, " ");
                    // logger.logInfo("ANO DATA " + anoData + " | " + line);
                    continue;
                }
                dataCandidate = cutString(dataCandidate, 0, "/").replaceAll(" / ", "/") + "/" + getMonth(cutString(dataCandidate, "/")) + "/" + anoData;
                // logger.logInfo("DATA CANDIDATE " + dataCandidate);
            }


            if (dataCandidate.matches("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
                dataPattern = "yyyy-MM-dd hh:mm:ss";
            } else {
                if (dataCandidate.matches("[0-9]{4}-[0-9]{2}-[0-9]{2}")) {
                    dataPattern = "yyyy-MM-dd";
                } else {
                    dataPattern = "dd/MM/yyyy";
                }
            }

            if (!dataCandidate.equals("")) {
                if (dataCandidate.replaceAll("[0-9]", "").trim().equals("/") || dataCandidate.matches("[0-9]{2}/[0-9]{2}")) {
                    try{
                        dataMovimento     = (dataCandidate + "/" + anoData);
                        dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                    }catch(Exception e){
                        dataMovimento   = "";
                        dataLote        = "";
                    }
                } else {
                    String dataMovimentoAux	  = getCampoDate(dataCandidate, dataPattern, "dd/MM/yyyy");
                    if (dataMovimentoAux.contains("/")) {
                        try {
                            dataMovimento     = dataMovimentoAux;
                            dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                        } catch (Exception ex) {
                            dataMovimento = "";
                            dataLote = "";
                        }
                    }
                }
                if (!dataMovimento.matches("[0-9]{2}/[0-9]{2}/[0-9]{4}")) dataMovimento = "";
            }
            //#2306-006237
            if (tipo.equals("004") || tipo.equals("999") || tipo.equals("006")) {
                if(line.replaceAll(" ", "").contains("SALDO")){ //2307-009209
                    continue;
                }

                if(line.contains("LANCAMENTOS FUTUROS")){ //2310-018861
                    naoLeMais = true;
                }

                if (!anoData.equals("")) {
                    dataMovimento = memFile.getStringFieldRemoveEspCharsUpper(0) + "/" + anoData;
                    dataMovimento = dataMovimento.replaceAll(";", ""); //2307-009209
                    if (!dataMovimento.matches("[0-9]{2}/[0-9]{2}/[0-9]{4}")) {
                        dataMovimento = "";
                    }
                }
                else {
                    String colunaAno = memFile.getStringFieldRemoveEspCharsUpper(0);
                    String dataPat = "[0-9]{2}/[0-9]{2}/[0-9]{4}";
                    java.util.regex.Pattern pat = java.util.regex.Pattern.compile(dataPat);
                    java.util.regex.Matcher mat = pat.matcher(colunaAno);
                    if (mat.find()) {
                        anoData = colunaAno.substring(mat.start(), mat.end());
                        anoData = anoData.split("/")[2];
                    }
                }
            }


            if (dataMovimento.equals("")) continue;

            String nomeOrigemCandidate = memFile.getStringFieldRemoveEspCharsUpper(1);
            if (nomeOrigemCandidate.equals("D") || nomeOrigemCandidate.length() < 2) {
                // logger.logInfo("BTL -> 5392| LEU LETRA -> ==== " + nomeOrigemCandidate );
                nomeOrigemCandidate = memFile.getStringFieldRemoveEspCharsUpper(2);
                // logger.logInfo("BTL -> 5392| LEU LETRA -> NOMEORIGEM + 1 ==== " + nomeOrigemCandidate );
            }

            nomeOrigem = nomeOrigemCandidate;

            debitoCredito = "";
            debitoCreditoAux = "";

            logger.logInfo("MFFS -1 ->> " +  memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1) + " MFFS -2 ->> " + memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-2));
            // logger.logInfo("MFFS -2 ->> " + (memFile.getFieldsSize()-2));


            //#2306-006237
            //if (tipo.equals("004") && tipo.equals("005")) {
            if (tipo.equals("004") || tipo.equals("005") || tipo.equals("999")) { //2307-009209
                String colunaValor = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1);
                if (colunaValor.contains("-")) debitoCredito = "EXTRATO-DEBITO";
                else debitoCredito = "EXTRATO-CREDITO";
                String charsPermitidosNoValorRegex = "[0-9,-\\.\\s]*";
                if(tipo.equals("004") && memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).equals("-")){ //2310-018861
                    colunaValor = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 2);
                    if(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).contains("-")) debitoCredito = "EXTRATO-DEBITO";
                    else debitoCredito = "EXTRATO-CREDITO";
                }
                if (colunaValor.matches(charsPermitidosNoValorRegex)) {
                    // logger.logInfo("Entrou valor matches");
                    colunaValor = trataValor(colunaValor);
                    valorDocumento = DecimalUtil.toDecimal(colunaValor);
                    logger.logInfo("log1");
                    // logger.logInfo("Valor -> " + valorDocumento);
                    // logger.logInfo("debitoCredito -> " + debitoCredito);
                }
            }

            if(tipo.equals("999") || tipo.equals("006")){
                if(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim().equals("-") ){
                    ivalorDocumento = memFile.getFieldsSize()-2;
                    debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim();
                }else{
                    ivalorDocumento = memFile.getFieldsSize()-1;
                }

                try{
                    valorDocumento = memFile.getDoubleField(ivalorDocumento);
                    logger.logInfo("log2");

                }
                catch (Exception vlrd){ valorDocumento = 0; }

                if(debitoCreditoAux.contains("-"))  debitoCredito = "EXTRATO-DEBITO";
                if(!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
                valorDocumento = Math.abs(valorDocumento);
            }

            if(tipo.equals("003") || tipo.equals("002") || tipo.equals("001")){
                if(memFile.getFieldsSize()-1 < ivalorDocumento ) ivalorDocumento -= 1;


                // gui - 2404-035591 - AJUSTE PARA VALOR DESLOCADO QUANDO HÁ UMA LETRA NA COLUNA DO NOME ORIGEM;
                if(memFile.getStringFieldRemoveEspCharsUpper(1).trim().length() == 1){
                    ivalorDocumento += 1;
                }

                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim();

                try{
                    logger.logInfo("log3");
                    valorDocumento = memFile.getDoubleField(ivalorDocumento);
                }
                catch (Exception vlrd){ valorDocumento = 0; }

                if(debitoCreditoAux.contains("-"))  debitoCredito = "EXTRATO-DEBITO";
                if(!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
                valorDocumento = Math.abs(valorDocumento);
            }


            //logger.logInfo("log2 -- dt -> " + dataMovimento + " vdoc -> " + valorDocumento);
            if (valorDocumento == 0) continue;

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }

    }
    return true;
}

public boolean readExtratoItauPdf2(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    // logger.logInfo("Entrou ITAU PDF INTERNO");

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String anoData			 = "";

    String tipo 			 = "001";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int idataMovimento	= 0;
    int idocumento      = 2;
    int inomePortador	=-1;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 2;

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");
    String linha = "";

    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("LINHA")) 	   linha 		= jDados.optString("LINHA");
    if(jDados.has("TIPO"))		   tipo 		= jDados.optString("TIPO");


    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if(line.contains("SALDO")) continue;

        try {

            try{
                dataMovimento     = getDate(dataMovimento, idataMovimento, line, false,"", memFile, logger);
                dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
            }catch(Exception e){
                continue;
            }

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            debitoCredito = "";
            try{valorDocumento = memFile.getDoubleField(memFile.getFieldsSize() - 1);}
            catch (Exception vlrd) { valorDocumento = 0; }
            if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
            if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
            valorDocumento = Math.abs(valorDocumento);

            if (valorDocumento == 0) continue;

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }


    }
    return true;
}

public boolean readExtratoItauPdf3(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String anoData			 = "";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int idataMovimento	= 0;
    int idocumento      = 2;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 3;

    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("ANODATA"))   anoData   = jDados.optString("ANODATA");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).startsWith("SALDO")) continue;

        if(memFile.getStringFieldRemoveEspCharsUpper(2).contains(",")){ //Para quando nao aparece documento
            idocumento = -1;
            ivalorDocumento	= 2;
        } else{ //Para quando aparece
            idocumento = 2;
            ivalorDocumento	= 3;
        }

        try {

            if(line.contains("/20") && !memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains("/20")){
                anoData = cutString(line, line.indexOf("/20")+1, line.indexOf("/20")+5);
            }

            try{
                String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento) + "/" + anoData;
                dataMovimento = getCampoDate(dataString);
                dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
            } catch(Exception e){ dataMovimento = "";}

            if(dataMovimento.equals("")) continue;

            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);

            try{
                String valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("-", "").trim();
                valorDocAux = valorDocAux.replace(".", "").replace(",", ".");
                valorDocumento = Math.abs(Double.parseDouble(valorDocAux));
            } catch (Exception vlrd) { valorDocumento = 0; }

            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);

            if(debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";
            if(!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";

            documento = "";
            if(idocumento >= 0){
                documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
            }

            if (valorDocumento == 0) continue;

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }

    }
    return true;
}

public String trataValor(String valor) {
    valor = valor.replaceAll("[-\\s]", "");
    valor = valor.replaceAll(",", "\\.");
    while (quantityOf(valor, ".") > 1) {
        valor = valor.replaceFirst("\\.", "");
    }
    return valor;
}


/*#############################################@ EXTRATO-ITAU-TXT @##############################################*/
public boolean readExtratoItauTXT(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String line				 = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("LINE"))  {
        line		    = jDados.optString("LINE");
        memFile.addLine(line, memFile.getLines().size());
    }

    memFile.setFieldSeparator(";");
    logger.logInfo("DENTRO DO ITAU");

    while (memFile.hasNextLine()) {

        try {
            line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            complemento01   = nomePortador;
            complemento02   = nomePortador;
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";
            nomeOrigem      = "";
            documento       = "";
            historico       = "";

            valorDocumento  = 0;
            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;

            if (memFile.getStringField(0).equals("")) continue;
            try {
                Date dt = memFile.getDateField(0, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(0);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    continue;
                }
            }

            try {valorDocumento = memFile.getDoubleField(2);}
            catch(Exception e) { valorDocumento = 0;}

            if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
            if (valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
            if (valorDocumento == 0) continue;

            valorDocumento = Math.abs(valorDocumento);

            nomeOrigem    = memFile.getStringFieldRemoveEspCharsUpper(1);
            logger.logInfo("DT -> " + dataMovimento + " |vd -> " + valorDocumento + " |SHR");
            if(naoLeMais) continue;

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }
    return true;
}


/*#############################################@ EXTRATO-SAFRA-EXCEL @##############################################*/
public boolean readExtratoSafraExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-SANTANDER-EXCEL @##############################################*/
public boolean readExtratoSantanderDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readExtratSantanderPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String tipoLancamento    = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String dia				 = "";
    String mes				 = "";
    String ano				 = "";
    String dataAux			 = "";
    String nomeOrigemAnterior = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String anoData			 = "";
    String tipoLayout		 = "";
    String restoAux          = "";

    boolean naoLeMais = false;
    boolean somaIndex = false;
    boolean tagLcto = false;
    boolean primeiroAux = false;
    boolean eValor = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idataMovimento	= 0;
    int idocumento      = 2;
    int inomePortador	=-1;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 3;
    int icomplemento02	= -1;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO"))  tipoLancamento  = jDados.optString("TIPOLANCAMENTO");
    if(jDados.has("TIPOLAYOUT"))	tipoLayout = jDados.optString("TIPOLAYOUT"); //2308-013230 adicionado para pegar o tipo do layout pelo runextratosecartoes
    // jDados.put("TIPOLANCAMENTO", tipoLancamento);

    // logger.logInfo("LOG TIPO LAYOUT - " + tipoLayout);

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();

        // logger.logInfo("LINHA SUJA " + line);
        line = StringUtil.removeSpecialCharsToUC(line);

        if(line.contains("BANCO SANTANDER PESSOA JURIDICA")) tipoLayout = "002";

        if(nomePortador.contains("SANTANDER-PDF")) nomePortador	= cutString(nomePortador, nomePortador.lastIndexOf("AGENCIA")-1);

        if(tipoLayout.equals("001")){ //Padrao 1
            logger.logInfo("padrao 001");

            if(!memFile.getStringFieldRemoveEspCharsUpper(0).matches("\\d{2}/\\d{2}/\\d{4}")) continue; //2310-019538
            int colunaShrink = 0;
            int contador = colunaShrink;
            for (int j=colunaShrink; j<20; j++) {
                String colunaAtual = memFile.getStringField(j).replaceAll("\"","").trim();

                if (!colunaAtual.toUpperCase().equals("A") && !colunaAtual.toUpperCase().equals("B") && !colunaAtual.toUpperCase().equals("P")) {
                    memFile.setField(contador, memFile.getStringField(j).trim());
                    if (j > contador) memFile.setField(j,"");
                    contador++;
                }
            }

            if (line.toUpperCase().contains("A = BLOQUEIO DIA / ADM")) naoLeMais = true;
            if(naoLeMais) continue;
            if (line.toUpperCase().contains("CONTA CORRENTE") && line.toUpperCase().contains("EXTRATOS")) continue;
            if (line.startsWith("CONSULTAR")) continue;
            if (line.startsWith("SALDO")) continue;
            if (line.toUpperCase().contains("OPCAO DE PESQUISA:")) continue;
            if (line.toUpperCase().contains("PERIODOS:")) continue;
            if (line.toUpperCase().contains("SALDO ANTERIOR")) continue;
            if (line.toUpperCase().contains("BLOQUEIO DIA")) continue;
            if (line.toUpperCase().contains("B = BLOQUEADO")) continue;
            if (line.toUpperCase().contains("LANCAMENTO PROVISIONADO")) continue;
            if (line.toUpperCase().contains("POSICAO EM")) continue;
            if (line.toUpperCase().contains("SALDO DE CONTA CORRENTE")) continue;
            if (line.toUpperCase().contains("SALDO BLOQUEADO")) continue;
            if (line.toUpperCase().contains("SALDO DISPONIVEL")) continue;
            if (line.toUpperCase().contains("DESBLOQUEIO") && line.toUpperCase().contains("DIA")) continue;
            if (line.toUpperCase().contains("SALDO") && line.toUpperCase().contains("EM")) continue;
            if (line.toUpperCase().contains("SANTANDERNETIBE")) continue;
            if (line.toUpperCase().contains("CENTRAL DE ATENDIMENTO")) continue;
            if (line.toUpperCase().contains("INTERNET BANKING")) continue;
            if (line.toUpperCase().contains("0800 7")) continue;
            // if (memFile.getStringFieldRemoveEspCharsUpper(1).equals("A")) continue;
            // if (memFile.getStringFieldRemoveEspCharsUpper(1).equals("B")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(1).equals("P")) continue;

            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("PROVISAO DE ENCARGOS")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("JUROS ACUMULADOS ATE")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("IOF ACUMULADO ATE")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CPMF ACUMULADA")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CPMF PROVISIONADA")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("LIMITE SANTANDER")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("VENCIMENTO")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("TAXA DE JUROS")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("LIMITE")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("ULTIMA UTILIZACAO")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("VALOR UTILIZADO")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DISPONIVEL")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CENTRAL DE ATENDIMENTO")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXCETO FERIADOS")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("PESSOAS COM DEFICIENCIA")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("DEMAIS LOCALIDADES")) continue;

            if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOCUMENTO") && line.contains("VALOR")) {
                idataMovimento	= -1;
                idocumento      = -1;
                inomePortador	= -1;
                inomeOrigem		= -1;
                ivalorDocumento	= -1;
                for (int i = 0; i < memFile.getFieldsSize(); i++) {
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA")) idataMovimento = i;
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO")) idocumento = i;
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
                    if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR")) ivalorDocumento = i;
                }
                logger.logDebug("LEITURA AUTOMATIZADA " + idataMovimento +"|"+idocumento+"|"+inomeOrigem+"|"+ivalorDocumento);
                continue;
            }
            logger.logDebug("MF.NO -> " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem) + " | " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).length());
            // if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).toUpperCase().equals("A")){
            // inomeOrigem = inomeOrigem + 1;
            // ivalorDocumento = ivalorDocumento + 1;
            // }

            logger.logDebug("LIN " + line);
            if (memFile.getFieldsSize() == 1) {

                nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("HISTORICO")
                            .where("CHAVE = ? ")
                            .param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                }
            } else {
                logger.logDebug("MF 1 -> " + memFile.getStringFieldRemoveEspCharsUpper(1));
                if ((memFile.getStringFieldRemoveEspCharsUpper(1).equals("A") || memFile.getStringFieldRemoveEspCharsUpper(1).equals("B")) && somaIndex == false) {
                    // idataMovimento	+=1;
                    // continue;
                    // idocumento      +=1;
                    // inomePortador	+=1;
                    inomeOrigem		+=1;
                    ivalorDocumento	+=1;
                    somaIndex = true;
                }

                if (!memFile.getStringFieldRemoveEspCharsUpper(1).equals("A") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("B") && somaIndex) {
                    somaIndex = false;
                    // idataMovimento	-=1;
                    // idocumento      -=1;
                    // inomePortador	-=1;
                    inomeOrigem		-=1;
                    ivalorDocumento	-=1;
                }

                nomeOrigem = "";
                dataMovimento = "";
                valorDocumento = 0;
                try {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","")+"/"+anoData;
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt1) {
                        try {
                            Date dt = memFile.getDateField(idataMovimento);
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) {
                            try {
                                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                            } catch (Exception dt2) { }
                        }
                    }

                    valorDocumento  = 0;
                    debitoCredito = "";

                    try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                    catch (Exception vlrd) { valorDocumento = 0; }

                    //#2305-004548. Tem casos que na coluna vem dois valores. O movimento e saldo.
                    if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains(" ") && valorDocumento == 0){
                        try{
                            valorDocumento = Double.parseDouble(cutString(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento), 0, " ").replaceAll("\\.", "").replaceAll(",", "\\."));
                        }
                        catch (Exception vlrd) { valorDocumento = 0; }
                    }

                    logger.logDebug("IVD " + ivalorDocumento + " | " + valorDocumento);

                    if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                    if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
                    if(tipoLancamento.contains("PAG") && debitoCredito.contains("CREDITO")) continue;
                    if(tipoLancamento.contains("REC") && debitoCredito.contains("DEBITO")) continue;
                    valorDocumento = Math.abs(valorDocumento);

                    if (valorDocumento == 0) continue;

                    nomeOrigem      = "";
                    nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();

                    //#2305-004548. Limpa caractere inválido
                    if(cutString(nomeOrigem, 0, " ").length() == 1){
                        nomeOrigem = cutString(nomeOrigem, 1);
                    }

                    documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
                    complemento02 = documento;

                    contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
                    chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                    chaveExtrato = chaveExtrato.replaceAll("[^0-9a-zA-Z]*", "");
                    if(chaveExtrato.length() > 100) chaveExtrato = cutString(chaveExtrato, 0, 99);

                    if(tipoLayout.equals("001")){
                        nomePortador = cutString(nomePortador, "CONTA: ", "PE").trim();
                    }

                    // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                    extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                            .fields("CHAVE")
                            .param(chaveExtrato)
                            .queryUnique();

                    // Inserir caso Chave nao encontrada.
                    if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                        try {
                            dbIOCont.insert("IO_EXTRATO")
                                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                    .param(chaveExtrato)
                                    .param(codEmpresa)
                                    .param(dataMovimento)
                                    .param(nomePortador)
                                    .param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
                                    .param(nomeArquivo.toUpperCase())
                                    .param(complemento02)
                                    .param(valorDocumento)
                                    .param(debitoCredito)
                                    .param(0)
                                    .execute();
                        } catch (Exception sqlInsertException) {
                            logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                            continue;
                        }
                    } else {
                        try {
                            dbIOCont.update("IO_EXTRATO")
                                    .fields("EXTRATOLIDO")
                                    .where("CHAVE = ? ")
                                    .param(0)
                                    .param(chaveExtrato)
                                    .execute();
                        } catch (Exception sqlUpdateException) {
                            logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                            continue;
                        }
                    }
                } catch (Exception ex) {
                }
            }
        }


        // Douglas Feito para o novo padrão chamado #2305-005228
        if(tipoLayout.equals("002")){
            if (line.toUpperCase().contains("0800 7")) continue;
            if (line.toUpperCase().contains("4004-2125")) continue;
            if (line.toUpperCase().contains("CENTRAL DE ATENDIMENTO")) continue;
            if (line.toUpperCase().contains("EXIBINDO RESULTADOS PARA 01/02/2023 A 28/02/2023")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("?") && memFile.getStringFieldRemoveEspCharsUpper(1).equals("1") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("?")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("?") && memFile.getStringFieldRemoveEspCharsUpper(1).equals("EXPORTAR")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(1).equals("-") && memFile.getStringFieldRemoveEspCharsUpper(3).equals("?")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("QUARTA, 08 DE FEVEREIRO DE 2023") && memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) continue;

            idataMovimento	= 1;
            idocumento      = -1;
            icomplemento02	= 1;
            inomeOrigem		= 0;
            ivalorDocumento	= 2;
            nomePortador = nomePortador.replaceAll("\\?","");
            complemento01 = nomePortador.replaceAll("\\?","");

            try {
                if(memFile.getStringFieldRemoveEspCharsUpper(0).equals("?") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("")){
                    dia	= cutString(memFile.getStringFieldRemoveEspCharsUpper(1), ",", "DE");
                    try {
                        mes	= getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(1), "DE", memFile.getStringFieldRemoveEspCharsUpper(1).lastIndexOf("DE")));
                    }catch(Exception e) {
                        mes = "";
                    }
                    try {
                        ano	= cutString(memFile.getStringFieldRemoveEspCharsUpper(1), memFile.getStringFieldRemoveEspCharsUpper(1).lastIndexOf(" ")+1);
                    }catch(Exception e) {
                        logger.logInfo("CATCH"+e);
                    }
                    dataAux = dia+"/"+mes+"/"+ano;
                    continue;
                }
                try {
                    if(!memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) dataMovimento = dataAux;
                    else dataMovimento = "";
                }catch(Exception e) {
                    logger.logInfo("CATCH1"+e);
                }
                if (dataMovimento.equals("")) continue;
                if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

                valorDocumento  = 0;
                debitoCreditoAux = "";
                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
                if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
                if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }
                if (valorDocumento == 0) continue;

                nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
                complemento01	= nomePortador;
                complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);
                complemento04	= nomeOrigem;

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                        .fields("CHAVE")
                        .param(chaveExtrato)
                        .queryUnique();

                // Inserir caso Chave nao encontrada.
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, COMPLEMENTO03, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                .param(chaveExtrato)
                                .param(codEmpresa)
                                .param(dataMovimento)
                                .param(documento)
                                .param(nomePortador)
                                .param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
                                .param(nomeArquivo.toUpperCase())
                                .param(complemento02)
                                .param(complemento02)
                                .param(valorDocumento)
                                .param(debitoCredito)
                                .param(0)
                                .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(0)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }


        if(tipoLayout.equals("003")){ //Esse e o padrao 2.2

            idataMovimento	= 1;
            idocumento      = -1;
            icomplemento02	= 1;
            inomeOrigem		= 1;
            ivalorDocumento	= memFile.getFieldsSize() - 1;
            nomePortador = nomePortador.replaceAll("\\?","");
            complemento01 = nomePortador.replaceAll("\\?","");
            boolean fieldAux = false;


            //Continue para nao cair nas validacoes abaixo
            if(line.contains("SALDO DO DIA")) continue;

            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("ABOUT") && memFile.getStringFieldRemoveEspCharsUpper(0).contains("BLANK")) continue;
            if(memFile.getStringFieldRemoveEspCharsUpper(1).trim().equals("IBPJ")) continue;
            //if(line.contains("H - LIMITE CHEQUE EMPRESAS")) continue;

            if(memFile.getStringField(2).contains("R$")) fieldAux = true;

            else{fieldAux = false;}

            //2401-027236 - Para quando aparece valor sozinho em 2 linhas em seguida - Feito pq o valor de "A - SALDO DE CONTA CORRENTE" era
            //jogado para cima que criava um lancamento com esse valor e o resto das informacoes do lancamento anterior
            if((!memFile.getStringFieldRemoveEspCharsUpper(0).contains("R$") && !memFile.getStringFieldRemoveEspCharsUpper(1).contains("R$")) || memFile.getFieldsSize() > 2) eValor = false;
            if(((memFile.getStringFieldRemoveEspCharsUpper(0).contains("R$") && memFile.getFieldsSize() == 1) || (memFile.getStringFieldRemoveEspCharsUpper(1).contains("R$")) && memFile.getFieldsSize() == 2) && eValor) continue;
            if(((memFile.getStringFieldRemoveEspCharsUpper(0).contains("R$") && memFile.getFieldsSize() == 1) || (memFile.getStringFieldRemoveEspCharsUpper(1).contains("R$")) && memFile.getFieldsSize() == 2)) eValor = true;

            //Condicao para nao ler final do arquivo
            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("A - SALDO DE CONTA CORRENTE")) naoLeMais = true;

            if(memFile.getStringFieldRemoveEspCharsUpper(1).contains("VALORES DEDUZIDOS DO SALDO DISPONIVEL")) naoLeMais = true;

            if(naoLeMais == true) continue;

            String nomeOrigemAux = memFile.getStringFieldRemoveEspCharsUpper(0);

            //Captura de nomeOrigem que quebrou sem o valor
            if(memFile.getFieldsSize() == 2 && memFile.getStringFieldRemoveEspCharsUpper(0).contains("?") && !line.contains(" DE 20")){
                nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(1);
            }

            //Captura de nomeOrigem que quebrou junto com o valor
            if(memFile.getFieldsSize() == 2 && memFile.getStringField(1).contains("R$")){
                nomeOrigemAux = memFile.getStringFieldRemoveEspCharsUpper(0);
            }

            //Captura de nomeOrigem que vem com valor normalmente
            if(memFile.getFieldsSize() == 3){
                nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(1);
            }

            if(((memFile.getFieldsSize() == 1 && memFile.getStringField(0).contains("R$")) || memFile.getStringField(0).contains("SALDO DO DIA")) && !fieldAux && !primeiroAux){
                primeiroAux = true;
            }

            //2401-027236 - Para quando nao aparece ? na primeira coluna e o valor quebra para baixo
            if(memFile.getFieldsSize() < 3 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO") &&
                    !memFile.getStringField(0).contains("R$") && !fieldAux && primeiroAux && !line.contains(" DE 20")){
                if(memFile.getFieldsSize() ==1) nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(0).trim();
                if(memFile.getFieldsSize() ==2) nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(1).trim();
                primeiroAux = false;
                continue;
            }

            if(memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO") &&
                    !memFile.getStringField(0).contains("R$") && !fieldAux && !primeiroAux){
                nomeOrigemAnterior += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
                nomeOrigemAnterior = nomeOrigemAnterior.trim();
            }

            //Update para atualizar o nomeOrigem com a quebra
            if(memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO") &&
                    !memFile.getStringField(0).contains("R$") && fieldAux == true){
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("HISTORICO")
                            .where("CHAVE = ? ")
                            .param(StringUtil.removeSpecialCharsToUC(nomeOrigemAnterior + " " + nomeOrigemAux))
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                }
            }

            //Tratamento de data
            if((memFile.getStringFieldRemoveEspCharsUpper(0).contains("?") || memFile.getStringFieldRemoveEspCharsUpper(0).equals("")) && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("")){
                //2401-027290 - Os "DE" foram mudados para "DE " pq estava pegando errado no mes dezembro

                if(memFile.getStringFieldRemoveEspCharsUpper(1).contains("HOJE")){
                    dia	= cutString(memFile.getStringFieldRemoveEspCharsUpper(1), ",", "DE ");
                }

                else{
                    dia = memFile.getStringFieldRemoveEspCharsUpper(1).substring(0,2);
                }

                try {
                    mes	= getMonth(cutString(memFile.getStringFieldRemoveEspCharsUpper(1), "DE ", memFile.getStringFieldRemoveEspCharsUpper(1).lastIndexOf("DE ")));

                }catch(Exception e) {
                    mes = "";

                    logger.logInfo("LOG CATCH MES");
                }

                try {
                    ano	= cutString(memFile.getStringFieldRemoveEspCharsUpper(1),"DE ", ",");

                    ano = cutString(ano, "DE ", ano.length());

                    //logger.logInfo("ano - " + ano);

                }catch(Exception e) {
                    logger.logInfo("CATCH"+e);
                }

                if((dia + "/" + mes + "/" + ano).matches("\\b\\d{2}/\\d{2}/\\d{4}\\b")){
                    dataAux = dia+"/"+mes+"/"+ano;
                    continue;
                }
                //logger.logInfo("LOG DATA - " + dataAux);


            }

            dataMovimento = dataAux;

            try {
                if (dataMovimento.equals("")) continue;
                if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;

                valorDocumento  = 0;
                debitoCreditoAux = "";
                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
                if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
                if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

                try{
                    if(memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("R$")){
                        valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));
                    } else { valorDocumento = 0; }
                }
                catch (Exception vlrd) { valorDocumento = 0; }
                if (valorDocumento == 0) continue;

                nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
                complemento01	= nomePortador;

                //Caso haja quebra do valor, mas sem quebra de nomeOrigem || nao tiver ? na primeira coluna e quebra valor e pode ou nao ter quebra no nomeOrigem
                if(memFile.getFieldsSize() == 1 && memFile.getStringField(0).contains("R$")){
                    nomeOrigem = nomeOrigemAnterior;
                }

                //Caso haja quebra de valor, junto de quebra de nomeOrigem
                if(memFile.getFieldsSize() == 2 && memFile.getStringField(1).contains("R$")){
                    nomeOrigem = nomeOrigemAnterior + " " + nomeOrigemAux;
                }

                complemento02	= nomeOrigem;
                complemento04	= nomeOrigem;

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                        .fields("CHAVE")
                        .param(chaveExtrato)
                        .queryUnique();

                // Inserir caso Chave nao encontrada.
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, COMPLEMENTO03, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                .param(chaveExtrato)
                                .param(codEmpresa)
                                .param(dataMovimento)
                                .param(documento)
                                .param(nomePortador)
                                .param(nomeOrigem.replaceAll("[^a-z A-Z0-9]", ""))
                                .param(nomeArquivo.toUpperCase())
                                .param(complemento02.replaceAll("[^a-z A-Z0-9]", ""))
                                .param(complemento02.replaceAll("[^a-z A-Z0-9]", ""))
                                .param(valorDocumento)
                                .param(debitoCredito)
                                .param(0)
                                .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(0)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }

        }

        if(tipoLayout.equals("004")){
            // logger.logInfo("ENTROU TIPO 4");
            idataMovimento	= 3;
            idocumento      = -1;
            icomplemento02	= 1;
            inomeOrigem		= 0;
            ivalorDocumento	= 4;
            nomePortador = nomePortador.replaceAll("\\?","").replaceAll(";","");
            complemento01 = nomePortador.replaceAll("\\?","");
            String dataString = "";



            //Condicao para ler apenas o bloco de movimento
            if(tagLcto == false) naoLeMais = true;
            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("01 - ADVISORY - USD")) {
                tagLcto = true;
            }
            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("MOVIMENTO") && tagLcto) naoLeMais = false;
            if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("POR FAVOR LEIA ATENTAMENTE A SEGUINTE INFORMACAO")) naoLeMais = true;
            if(naoLeMais == true) continue;
            // logger.logInfo("LIN ->> " + line + " || nLemais -> " + naoLeMais + " ||tagLcto -> " + tagLcto);
            //DETALHAMENTO	 MOEDA	DATA VALOR	DATA LANCAMENTO	CREDITOS	RETIROS	SALDO


            if(line.contains("DETALHAMENTO") && line.contains("MOEDA") && line.contains("DATA VALOR") && line.contains("DATA LANCAMENTO")
                    && line.contains("CREDITOS") &&  line.contains("RETIROS") && line.contains("SALDO")){
                // logger.logInfo("ENTROU FOR");
                for(int i =0; i < memFile.getFieldsSize(); i++){
                    if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("MOEDA")) icomplemento02 = i;
                    if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DETALHAMENTO")) inomeOrigem = i;
                    if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("CREDITOS")) ivalorDocumento = i;
                    if(memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA") &&
                            memFile.getStringFieldRemoveEspCharsUpper(i).contains("LANCAMENTO")) idataMovimento = i;
                }

                if(ivalorDocumento == -1 || idataMovimento == -1 || inomeOrigem == -1 || icomplemento02 == -1){
                    idataMovimento	= 3;
                    icomplemento02	= 1;
                    inomeOrigem		= 0;
                    ivalorDocumento	= 4;
                }
                continue;
            }

            // logger.logInfo("ivalorDocumento -> " + ivalorDocumento + " |idataMovimento -> " + idataMovimento + " |inomeOrigem -> " + inomeOrigem + " |icomplemento02 -> " + icomplemento02);

            try {

                try {
                    dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                    dataString = cutString(dataString, 0, 2) + "/" + getMonth(cutString(dataString, 3, 6)) + "/20" + cutString(dataString, dataString.length()-2, dataString.length());
                    // logger.logInfo("dataString -> " + dataString +  " cuts - " + cutString(dataString, 0, 2) + " | " + cutString(dataString, 3, 5) + " | " +  cutString(dataString, dataString.length()-2, dataString.length()));
                    if (!dataString.equals("")) {
                        String dataMovimentoAux	  = getCampoDate(dataString);
                        if (dataMovimentoAux.contains("/")) {
                            dataMovimento     = getCampoDate(dataString);
                            dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                        }
                    }
                } catch (Exception dt1) {}

                // logger.logInfo(" dataMov -> " + dataMovimento + "\n");
                if(dataMovimento.equals("")) continue;
                valorDocumento  = 0;
                debitoCreditoAux = "";
                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
                if (!debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-CREDITO";
                if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }
                // logger.logInfo(" valorDocumento -> " + valorDocumento + "\n");
                if (valorDocumento == 0) continue;

                nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
                complemento01	= nomePortador;
                complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02);


                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                        .fields("CHAVE")
                        .param(chaveExtrato)
                        .queryUnique();

                // Inserir caso Chave nao encontrada.
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, COMPLEMENTO03, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                .param(chaveExtrato)
                                .param(codEmpresa)
                                .param(dataMovimento)
                                .param(documento)
                                .param(nomePortador)
                                .param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
                                .param(nomeArquivo.toUpperCase())
                                .param(complemento02)
                                .param(complemento02)
                                .param(valorDocumento)
                                .param(debitoCredito)
                                .param(0)
                                .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(0)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }

        if(tipoLayout.equals("005")){ //Padrao 6
            idataMovimento	= 0;
            idocumento      = 2;
            inomeOrigem		= 1;
            ivalorDocumento	= memFile.getFieldsSize() - 2;
            nomePortador = nomePortador.replaceAll("\\?","").replaceAll(";","");

            //if(line.contains("SALDO") && line.contains("CONTA") && line.contains("CORRENTE") ) naoLeMais = true;
            if(line.contains("EXTRATO") && line.contains("CONTA") && line.contains("CORRENTE") ) naoLeMais = true;

            if(naoLeMais) continue;

            try {

                //Pega o resto do nomeOrigem quando tem quebra de linha, fiz tratamento para nao pegar o numero da pagina. Ex: 1/6
                if (memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO") && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("ANTERIOR")) {
                    if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("/")){
                        restoAux = memFile.getStringFieldRemoveEspCharsUpper(0);
                        continue;
                    } else {
                        nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
                        try {
                            dbIOCont.update("IO_EXTRATO")
                                    .fields("HISTORICO")
                                    .where("CHAVE = ? ")
                                    .param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
                                    .param(chaveExtrato)
                                    .execute();
                        } catch (Exception sqlUpdateException) {
                        }
                        continue;
                    }
                }

                //Para quando o resto do nomeOrigem possui /
                if(!line.contains("DATA") && !line.contains("SALDO") && !line.contains("DESCRI") && !restoAux.equals("")){
                    nomeOrigem += " " + restoAux;
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("HISTORICO")
                                .where("CHAVE = ? ")
                                .param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                    }
                }

                restoAux = "";

                if (memFile.getFieldsSize() < 4 ) continue;

                try {
                    dataMovimento  = getDate(dataMovimento, idataMovimento, line, false,"", memFile, logger);
                    dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
                } catch (Exception dt1) {
                    dataMovimento = "";
                }

                if(dataMovimento.equals("")) continue;

                valorDocumento  = 0;
                debitoCredito = "";

                try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                catch (Exception vlrd) { valorDocumento = 0; }

                if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";

                valorDocumento = Math.abs(valorDocumento);

                if (valorDocumento == 0) continue;

                nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();

                documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                        .fields("CHAVE")
                        .param(chaveExtrato)
                        .queryUnique();

                // Inserir caso Chave nao encontrada.
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                .param(chaveExtrato)
                                .param(codEmpresa)
                                .param(dataMovimento)
                                .param(documento)
                                .param(nomePortador)
                                .param(StringUtil.removeSpecialCharsToUC(nomeOrigem))
                                .param(nomeArquivo.toUpperCase())
                                .param(valorDocumento)
                                .param(debitoCredito)
                                .param(0)
                                .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(0)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }

    }
    return true;
}


/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefaultNovo(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int idataMovimento	= 0;
    int idocumento		= 1;
    int inomeOrigem		= 2;
    int ivalorDocumento	= 3;
    int icomplemento02	= 1;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        // logger.logDebug("MFF " + memFile.getStringFieldRemoveEspCharsUpper(2));

        if (memFile.getStringFieldRemoveEspCharsUpper(2).contains("SALDO") && memFile.getStringFieldRemoveEspCharsUpper(2).contains("DIA")) continue;

        if(!memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("")
                && !memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).equals("") && memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).equals("")) continue;
        // logger.logDebug("LIN " + memFile.getFieldsSize() + " | " + line);
        if (memFile.getFieldsSize() == 3) {
            nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
            try {
                dbIOCont.update("IO_EXTRATO")
                        .fields("HISTORICO")
                        .where("CHAVE = ? ")
                        .param(nomeOrigem)
                        .param(chaveExtrato)
                        .execute();
            } catch (Exception sqlUpdateException) {
                logger.logDebug("ERRO AO DAR UPDATE NA IO_EXTRATO " + sqlUpdateException.getMessage());
            }
            continue;
        }else{
            nomeOrigem = "";
            dataMovimento = "";
            valorDocumento = 0;
            try {
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { }
                    }
                }

                valorDocumento  = 0;
                try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
                catch (Exception vlrd) { valorDocumento = 0; }
                if (valorDocumento == 0) continue;

                nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","");
                complemento01   = nomePortador;
                complemento02	= "";
                complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
                documento		= "";
                documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");

                if (memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("C")) debitoCredito = "EXTRATO-CREDITO";
                if (memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("D")) debitoCredito = "EXTRATO-DEBITO";

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                        .fields("CHAVE")
                        .param(chaveExtrato)
                        .queryUnique();

                // Inserir caso Chave nao encontrada.
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                .param(chaveExtrato)
                                .param(codEmpresa)
                                .param(dataMovimento)
                                .param(documento)
                                .param(nomePortador)
                                .param(nomeOrigem)
                                .param(nomeArquivo.toUpperCase())
                                .param(complemento02)
                                .param(valorDocumento)
                                .param(debitoCredito)
                                .param(0)
                                .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                    // Atualizar Chave caso encontrada.
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(0)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception readExtratoException) {
                logger.logError("Erro de leitura de Extrato Padr?Sicoob", readExtratoException);
            }
        }

    }
    return true;
}

/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoSicoobDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int idataMovimento	= 0;
    int idocumento		= 1;
    int inomeOrigem		= 2;
    int ivalorDocumento	= 3;
    int icomplemento02	= 3;
    String dataAux = "";
    String cont = "";
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
            if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).toUpperCase().trim().startsWith("SALDO")) continue;
            if (memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","").equals("")) dataAux = dataMovimento;

            try {
                Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
            } catch (Exception dt1) {
                try {
                    Date dt = memFile.getDateField(idataMovimento);
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt2) {
                    try {
                        String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                        Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) { }
                }
            }

            valorDocumento  = 0;
            try{valorDocumento = Math.abs(memFile.getDoubleField(ivalorDocumento));}
            catch (Exception vlrd) { valorDocumento = 0; }
            if(valorDocumento != 0){ nomeOrigem = ""; cont = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");}
            nomeOrigem		+= " " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").trim();
            complemento01   = nomePortador;
            complemento02	= "";
            complemento02	= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","");
            documento		= "";
            documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","");
            if (complemento02.contains("C")) debitoCredito = "EXTRATO-CREDITO";
            if (complemento02.contains("D")) debitoCredito = "EXTRATO-DEBITO";

            contLinhaExtrato = cont;

            chaveExtrato = codEmpresa  + "-" + debitoCredito + "-" + nomePortador + "-" + contLinhaExtrato;
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO, HISTORICO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(nomeOrigem)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Padr?o Sicoob", readExtratoException);
        }
    }
    return true;
}


public boolean readExtratoSicoobPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String linha        	 = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String anoData			 = "";
    String dataSemAno        = "";
    String tipoLayout		 = "";
    String anoAux 			 = "";

    boolean naoLeMais = false;
    boolean auxDebitoCredito = false;
    boolean ignoraNomeOrigem = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    // double valorDocumentoAcima = memFile.getDoubleField(0);
    // double valorDocumentoAcima = 0.0;

    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idataMovimento	= 0;
    int idocumento      = 1;
    int inomePortador	=-1;
    int inomeOrigem		= 2;
    int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");



    if (jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if (jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("LINE"))  	    linha  		 = jDados.optString("LINE");
    if(jDados.has("ANODATA"))  	    anoData  	 = jDados.optString("ANODATA");
    if(jDados.has("TIPO"))  	    tipoLayout   = jDados.optString("TIPO");
    if(linha.contains(";") && !linha.contains("\\|")){
        memFile.setFieldSeparator(";");
    }

    anoAux = anoData;


    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if (memFile.getStringFieldRemoveEspCharsUpper(3).equals("") || tipoLayout.equals("002")) inomeOrigem = 1;
        else inomeOrigem = 2;

        //if(!line.contains("DEP") && !line.contains("CHEQUE")){
        //if(line.toUpperCase().contains("SALDO DO DIA")){
        //	auxDebitoCredito = false;
        //}


        if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("PERIODO:")) continue;
        if (line.toUpperCase().contains("PLATAFORMA DE SERVICOS FINANCEIROS")) continue;
        if (line.toUpperCase().contains("SALDO ANTERIOR")) continue;
        if (line.toUpperCase().startsWith("PREVISAO ")) continue;
        if (line.toUpperCase().startsWith("TAXA ")) continue;
        if (line.toUpperCase().startsWith("PREVISAO ")) continue;
        if (line.toUpperCase().startsWith("OUVIDORIA SICOOB")) continue;
        if (line.toUpperCase().startsWith("EXTRATO NO.:")) continue;
        if (line.toUpperCase().startsWith("SALDO DE APLICACOES EM")) continue;
        //if (line.toUpperCase().contains("LIMITE CONTA GARANTIDA")) continue; //2312-025567 - Tem no arquivo um lancamento que usa esse termo
        if (line.toUpperCase().contains("LIMITE CONTA GARANTIDA") && line.contains("\\(")  && line.contains(":")) continue;
        if (line.toUpperCase().startsWith("SALDO EM CONTA")) continue;
        if (line.toUpperCase().startsWith("SALDO BLOQUEADO")) continue;
        if (line.toUpperCase().startsWith("SALDO DISPONIVEL")) continue;
        if (line.toUpperCase().startsWith("SALDO DO DIA ===== >")) continue;
        if (line.toUpperCase().contains("SALDO DO DIA")) continue;
        if (line.matches(".*[[0-9]{2}/[0-9]{2}/[0-9]{4}].*") && line.contains(" OF ")) continue;
        if (line.toUpperCase().startsWith("REM.:") && line.toUpperCase().contains("FINCO")) continue;
        //*Sergio* chamado 202005-0007053 e 202005-0007052
        if (line.contains("EXTRATOS") && line.contains("EMITIDOS") && line.contains("ATE")) continue;
        // if (line.contains("**")) continue;
        if (line.toUpperCase().contains("SALDO EM CONTA CORRENTE")) continue;
        if (line.toUpperCase().contains("LIMITE CHEQUE ESPECIAL")) continue;
        if (line.toUpperCase().contains("SALDO DEVEDOR")) continue;
        if (line.toUpperCase().contains("VENCIMENTO CHEQUE")) continue;
        if (line.toUpperCase().contains("TAXA CHEQUE")) continue;
        if (line.toUpperCase().contains("EXTRATOS EMITIDOS")) continue;
        if (line.contains("RESUMO")) return true;
        if (line.toUpperCase().startsWith("MENSAGENS") || line.toUpperCase().contains("MENSAGENS"))naoLeMais = true;
        if (memFile.getFieldsSize() > 1) naoLeMais = false;
        // 2310-019753 descomentado if abaixo
        if (line.contains("DOC.:")) continue;
        if (naoLeMais == true) continue;
        //}

        if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("DOCUMENTO") && line.contains("VALOR")) {
            logger.logInfo("entrou1");
            idataMovimento	= -1;
            idocumento      = -1;
            inomePortador	= -1;
            inomeOrigem		= -1;
            ivalorDocumento	= -1;
            for (int i = 0; i < memFile.getFieldsSize(); i++) {
                if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA")) idataMovimento = i;
                if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DOCUMENTO")) idocumento = i;
                if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
                if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR")) ivalorDocumento = i;
            }

            continue;
        }
        if (line.contains("DATA") && line.contains("HISTORICO") && line.contains("VALOR") && !line.contains("DOCUMENTO")) {
            logger.logInfo("entrou2");
            idataMovimento	= -1;
            idocumento      = -1;
            inomePortador	= -1;
            inomeOrigem		= -1;
            ivalorDocumento	= -1;
            for (int i = 0; i < memFile.getFieldsSize(); i++) {
                if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("DATA")) idataMovimento = i;
                if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("HISTORICO")) inomeOrigem = i;
                if (memFile.getStringFieldRemoveEspCharsUpper(i).contains("VALOR")) ivalorDocumento = i;
            }



            continue;
        }

        if (memFile.getFieldsSize() == 1) {

            //#2309-015855
            //Captura a data quando o ano vem deslocado uma linha abaixo
            if (line.length() == 5 && memFile.getStringFieldRemoveEspCharsUpper(0).matches("\\d{2}/\\d{2}")) {
                dataSemAno = memFile.getStringFieldRemoveEspCharsUpper(0).trim();
                // logger.logInfo("DATA SEM ANO -> "+ dataSemAno);
            }

            if (ignoraNomeOrigem) continue;

            // if(memFile.getStringFieldRemoveEspCharsUpper(0).length() > 4){
            if(memFile.getStringFieldRemoveEspCharsUpper(0).length() > 1){
                nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
                logger.logInfo("nomeorigem: " + nomeOrigem);
            }

            if(memFile.getStringFieldRemoveEspCharsUpper(0).length() == 1 && auxDebitoCredito == true){
                complemento03 = memFile.getStringFieldRemoveEspCharsUpper(0);
                if(complemento03.equals("C")) debitoCredito = "EXTRATO-CREDITO";
                if(complemento03.equals("D")) debitoCredito = "EXTRATO-DEBITO";


                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("DEBITOCREDITO")
                            .where("CHAVE = ? ")
                            .param(debitoCredito)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                }
                complemento03 = "";
                continue;
            }

            try {
                dbIOCont.update("IO_EXTRATO")
                        .fields("HISTORICO")
                        .where("CHAVE = ? ")
                        .param(nomeOrigem)
                        .param(chaveExtrato)
                        .execute();
            } catch (Exception sqlUpdateException) {
            }
            // ignoraNomeOrigem = true;

        } else {
            ignoraNomeOrigem = false;
            // nomeOrigem = "";



            dataMovimento = "";
            valorDocumento = 0;
            try {
                try {
                    String dataString;
                    if(anoData.length() < 4 || anoData.contains("SALDO")){
                        dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim().replaceAll("\"","")+"/"+anoAux;
                    } else{
                        dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim().replaceAll("\"","")+"/"+anoData;
                    }
                    //String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).trim().replaceAll("\"","")+"/"+anoData;
                    dataString = dataString.replaceAll("//", "/"); //anoAux
                    Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) {
                            try {
                                //#2309-015855
                                String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
                                anoData = cutString(dataString, dataString.lastIndexOf("/")).trim();
                                dataString = cutString(dataString, 0, dataString.lastIndexOf("/")).trim() + anoData;
                                Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                                dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                            } catch (Exception dt3) {}
                        }
                    }
                }

                //#2305-005913
                //Captura a data no formato 01/jan (ano acima da principal)
                String dataAux = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
                if (dataMovimento.equals("") && dataAux.matches("(\\d){2,2}\\/(\\w){3,3}.*") && !line.startsWith("/202")) {
                    dataMovimento = cutString(dataAux, 0, "/"); //dia
                    dataMovimento += "/" + getMonth(dataAux.substring(dataAux.indexOf("/") + 1)) + "/" + anoData;
                }

                //#2309-015855
                //Captura a data quando o ano vem deslocado uma linha abaixo
                if (dataSemAno.matches("\\d{2}/\\d{2}") && memFile.getStringFieldRemoveEspCharsUpper(0).matches("/\\d{4}")) {
                    dataSemAno += memFile.getStringFieldRemoveEspCharsUpper(0);
                    dataMovimento = dataSemAno.matches("\\d{2}/\\d{2}/\\d{4}") ? dataSemAno.replaceAll("\\s+", " ") : "";
                }

                valorDocumento  = 0;
                debitoCredito = "";
                strValorDocumento =  "";

                ////#2308-013175 - Novo indice em valorDocumento devido a quebra de Strings
                if(valorDocumento == 0){
                    try{
                        valorDocumento = memFile.getDoubleField(memFile.getFieldsSize() - 1);
                        strValorDocumento = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).replaceAll("D", "").replaceAll("C", "");
                    }
                    catch (Exception vlrd) { valorDocumento = 0; }

                    //if(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).equals("D") || memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).equals("C")){ //
                    if((memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).equals("D") || memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).equals("C") || memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).equals("*")) && memFile.getFieldsSize() > 3){ //
                        try{
                            valorDocumento = memFile.getDoubleField(memFile.getFieldsSize() - 2);
                            strValorDocumento = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 2);
                        }
                        catch (Exception vlrd) { valorDocumento = 0; }
                    }
                }

                //Douglas #
                // valorDocumentoAcima = memFile.getDoubleField(0);
                // if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("/") && valorDocumento == 0){
                // try{
                // valorDocumento = valorDocumentoAcima;
                // }
                // catch (Exception vlrAc) {}
                // }

                // logger.logInfo("DT -> " + dataMovimento + " |VD ->  " + valorDocumento + " |MFvd -> " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento) + " |mfVD+1 " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento+1) + " |CPL03 -> " + complemento03);
                if (memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).contains("D")) debitoCredito = "EXTRATO-DEBITO";
                if (memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).contains("C")) debitoCredito = "EXTRATO-CREDITO";
                // complemento03 = "";
                // if (debitoCredito.equals("")) debitoCredito = "EXTRATO-DEBITO"; //202303-0026660 JWR vai dar problema retirar essa linha

                //#2305-004552 e #2305-004348. Alguns casos não era identificado se o registro era débito ou crédito.
                if(debitoCredito.equals("")){
                    if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("CR ")) debitoCredito = "EXTRATO-CREDITO";

                    if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("DEP.")) debitoCredito = "EXTRATO-CREDITO";

                    if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("CRED")) debitoCredito = "EXTRATO-CREDITO";

                    if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("PIX RECEB.")) debitoCredito = "EXTRATO-CREDITO";

                    if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("DEB.") || memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("DEB ")) debitoCredito = "EXTRATO-DEBITO";

                    //if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("DEB.") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("CHEQUE")) debitoCredito = "EXTRATO-CREDITO";

                    if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("DB.")) debitoCredito = "EXTRATO-DEBITO";

                    if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("PIX EMIT") || memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("PIX.EMIT.")) debitoCredito = "EXTRATO-DEBITO";

                    if (memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("CHQ CMP")) debitoCredito = "EXTRATO-DEBITO";

                    if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("CHQ") && memFile.getStringFieldRemoveEspCharsUpper(1).startsWith("DEV")) debitoCredito = "EXTRATO-DEBITO";

                }

                if (debitoCredito.equals("")){
                    auxDebitoCredito = true;
                } else {
                    auxDebitoCredito = false;
                }


                valorDocumento = Math.abs(valorDocumento);

                // logger.logInfo("INFOS " + debitoCredito + " | " + memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento) + " | " + nomeOrigem + " | " + line);

                if (valorDocumento == 0) continue;

                nomeOrigem      = "";

                // #2312-024018 - Leal - Inicio
                int tamanhoCampoDoc = memFile.getStringFieldRemoveEspCharsUpper(idocumento).length() - 1;
                int inomeOrigemAux = inomeOrigem;

                int tamanhoCampoNome = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).length() - 1;
                String nomeOrigemAux = "";

                //logger.logInfo("LOG SUBSTRING - " + memFile.getStringFieldRemoveEspCharsUpper(idocumento).substring(tamanhoCampoDoc));

                //2402-028413 - 2 lancamentos pegavam o valor como nomeOrigem pq o documento termina com -
                //if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).substring(tamanhoCampoDoc).equals("-")){
                if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).substring(tamanhoCampoDoc).equals("-") && memFile.getFieldsSize() > 4){
                    documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento) + " " + memFile.getStringFieldRemoveEspCharsUpper(idocumento + 1);
                    inomeOrigemAux = inomeOrigem + 1;

                    //logger.logInfo("LOG ENTROU IF TAMANHOCAMPO - " + inomeOrigemAux + " " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigemAux) + " " + documento);
                }

                else{
                    if (idocumento > -1) documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
                }

                if(memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).substring(tamanhoCampoNome).equals("-")){
                    nomeOrigemAux = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem + 1);
                }


                //#2308-013175 - Concatenação de Strings que estavam quebrando no conversor
                //if (memFile.getFieldsSize() > 3 && tipoLayout.equals("002") && !memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 2).replaceAll(",", "").replaceAll(".", "").matches("[0-9]*"))
                if (memFile.getFieldsSize() > 3 && tipoLayout.equals("002") && !memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 2).contains(strValorDocumento))
                    nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim() + " " + memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 2); //
                else
                    nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigemAux).replaceAll("\"","").replaceAll("\\?","").trim() + " " + nomeOrigemAux;

                // #2312-024018 - Leal - Fim

                // logger.logInfo("INOMEORIGEM: "+ inomeOrigem);
                //#2308-013175
                // complemento03 = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
                //if (idocumento > -1) documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();
                complemento02 = documento;
                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                        .fields("CHAVE")
                        .param(chaveExtrato)
                        .queryUnique();

                // Inserir caso Chave nao encontrada.

                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
//                    if (!documento.equals("") && !documento.contains("/")){
//                        logger.logInfo("documento entrando no banco: " + documento);
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, DOCUMENTO, COMPLEMENTO, COMPLEMENTO03, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                .param(chaveExtrato)
                                .param(codEmpresa)
                                .param(dataMovimento)
                                .param(nomePortador)
                                .param(nomeOrigem)
                                .param(nomeArquivo.toUpperCase())
                                .param(documento)
                                .param(complemento02)
                                .param(complemento03)
                                .param(valorDocumento)
                                .param(debitoCredito)
                                .param(0)
                                .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(0)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}

//2311-021100 - Padrao 4
public boolean readExtratoSicoob2PDF(MemoryFile memFile,String nomePortador,JSONObject jDados,DataBase dbIOCont,InoutLogger logger)throws Exception{
    JSONObject extratoEmpresa=new JSONObject();

    // Inicializacao de Variaveis
    String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String dataString 		 = "";
    String nomeOrigemBackup	 = "";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    double valorDocumentoCredito    = 0.0;
    double valorDocumentoDebito    = 0.0;

    int inomePortador	= -1;
    int idataMovimento	= 0;
    int inomeOrigem		= 1;
    int idocumento 		= 2;
    int ivalorDocumento	= 3;

    nomePortador = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))codEmpresa=jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))nomeArquivo=jDados.optString("NOMEARQUIVO");

    while(memFile.hasNextLine()){
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        if(memFile.getFieldsSize() < 3){
            continue;
        }

        try{
            try{
                dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
                dataMovimento = getCampoDate(dataString);
                dataLote = getCampoDate(dataMovimento, "", "yyyy-MM");
            } catch(Exception e){

            }

            if(dataMovimento.equals(""))continue;

            valorDocumento = 0;
            debitoCreditoAux = "";
            debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);

            if(!debitoCreditoAux.contains("-")) debitoCredito="EXTRATO-CREDITO";
            if(debitoCreditoAux.contains("-")) debitoCredito="EXTRATO-DEBITO";

            try{valorDocumento=Math.abs(memFile.getDoubleField(ivalorDocumento));}
            catch(Exception vlrd){valorDocumento=0;}

            if(valorDocumento==0) continue;

            nomeOrigem = "";
            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();

            documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").replaceAll("\\?","").trim();

            contLinhaExtrato=StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()),05,"0");

            chaveExtrato=codEmpresa+"-"+dataMovimento+"-"+debitoCredito+"-"+String.format("%.2f",valorDocumento)+"-"+nomePortador+"-"+contLinhaExtrato;

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa=dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();


            // Inserir caso Chave nao encontrada.
            if(extratoEmpresa==null||!extratoEmpresa.has("CHAVE")){
                try{
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                }catch(Exception sqlInsertException){
                    logger.logError("Error inserting to IO_EXTRATO",sqlInsertException);
                    continue;
                }
            }else{
                try{
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                }catch(Exception sqlUpdateException){
                    logger.logError("Error updating IO_EXTRATO",sqlUpdateException);
                    continue;
                }
            }
        }catch(Exception ex){
        }
    }

    return true;
}

// LEITURA DE EXTRATO SICOOB     -->      COMPROVANTE DE PAGAMENTO DE BOLETO
public boolean readExtratoSicoob3PDF(MemoryFile memFile,String nomePortador,JSONObject jDados,DataBase dbIOCont,InoutLogger logger)throws Exception{
    JSONObject extratoEmpresa=new JSONObject();


    // Inicializacao de Variaveis
    String linha             = "";
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String dataString 		 = "";
    String nomeOrigemBackup	 = "";

    boolean naoLeMais = false;
    boolean validou = false;

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    double valorDocumentoCredito    = 0.0;
    double valorDocumentoDebito    = 0.0;

    int inomePortador	= -1;
    int idataMovimento	= 0;
    int inomeOrigem		= 1;
    int idocumento 		= 2;
    int ivalorDocumento	= 3;
    int cont = 0;

    nomePortador = nomePortador.replaceAll("\\?","");


    if(jDados.has("CODEMPRESA"))codEmpresa=jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))nomeArquivo=jDados.optString("NOMEARQUIVO");

    while(memFile.hasNextLine()){
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        String mf1 = memFile.getStringFieldRemoveEspCharsUpper(0);
        String mf2 = memFile.getStringFieldRemoveEspCharsUpper(1);


        try{

            if(line.startsWith("CONTA")){
                if(mf2.matches(".*[a-zA-Z].*")){
                    nomePortador = mf2.replaceAll("[a-zA-Z]" , "").replace(" /", "").trim();
                    complemento01 = nomePortador;
                }
            }

            if(line.startsWith("N DOCUMENTO")){
                documento = mf2.trim();
            }

            if(line.startsWith("NOME/RAZAO SOCIAL DO BENEFICIARIO")){
                nomeOrigem = mf2.trim();
                complemento04 = nomeOrigem;
            }

            if(line.startsWith("DATA PAGAMENTO")){
                dataMovimento = getCampoDate(mf2);
            }

            if(line.startsWith("VALOR PAGO")){
                try{valorDocumento = Math.abs(memFile.getDoubleField(1));
                }catch (Exception e) {}
            }
            if(valorDocumento == 0) continue;
            debitoCredito = "EXTRATO-DEBITO";

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" + dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();


            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                if (!nomeOrigem.equals("") && !dataMovimento.equals("") && !documento.equals("") && valorDocumento != 0){
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                .param(chaveExtrato)
                                .param(codEmpresa)
                                .param(dataMovimento)
                                .param(documento)
                                .param(nomePortador)
                                .param(nomeOrigem)
                                .param(nomeArquivo.toUpperCase())
                                .param(complemento02)
                                .param(valorDocumento)
                                .param(debitoCredito)
                                .param(0)
                                .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                }
                nomeOrigem = "";
                documento = "";
                valorDocumento = 0;
                dataMovimento = "";
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }

        }catch(Exception ex){
        }
    }

    return true;
}

/*#############################################@ EXTRATO-SICOOB-TXT @##############################################*/
public boolean readExtratoSicoobTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    boolean naoLeMais = false;

    String cont = "";

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);
            if(line.contains("-----------------------------")) continue;
            if(line.contains(".........................")) continue;
            if (line.contains("SALDO")) continue;
            if (line.contains("RESUMO") && line.length()==6) continue;
            if (line.contains("EXTRATO NO.:")) continue;
            if (line.contains("OUVIDORIA SICOOB:")) continue;
            if (line.length() > 85 && line.endsWith("*")) continue;

            if (line.startsWith("CONTA:")) {
                nomePortador = cutString(line, "CONTA:",  line.lastIndexOf("-")).trim();
                continue;
            }

            complemento01   = "";
            complemento02   = "";
            complemento03   = "";
            complemento04   = "";
            complemento05   = "";

            complemento06   = "";
            complemento07   = "";
            complemento08   = "";
            complemento09   = "";
            complemento10   = "";

            cpfCnpj         = "";

            documento       = "";
            historico       = "";

            valorJuros      = 0;
            valorDesconto   = 0;
            valorMulta      = 0;
            valorPagamento  = 0;


            if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {

                //if (line.length() < 128) continue;

                // Data Movimento.
                if (line.substring(2,3).equals("/") && line.substring(5,6).equals("/")) {
                    try {
                        dataMovimento = line.substring( 0, 10 );
                        Date dt 	  = DateUtil.stringToDate( dataMovimento, "dd/MM/yyyy" );
                        dataMovimento = DateUtil.dateToString( dt, "dd/MM/yyyy" );
                        dataLote      = DateUtil.dateToString( dt,"yyyy-MM" );
                    } catch (Exception dte) { }
                }
                if (dataMovimento.equals("")) continue;

                String valorDocumentoAux = line.substring( 61, line.length());
                logger.logInfo("valorDocAux 1 -> " + valorDocumentoAux);
                if (valorDocumentoAux.contains("C")) debitoCredito = "EXTRATO-CREDITO";
                else if (valorDocumentoAux.contains("D")) debitoCredito = "EXTRATO-DEBITO";

                complemento01 = StringUtil.removeSpecialChars(line.substring( 12, 30 )).trim().toUpperCase();
                documento = StringUtil.removeSpecialChars(line.substring( 12, 30 )).trim().toUpperCase();

                strValorDocumento = "0";
                try{
                    strValorDocumento    = StringUtil.removeSpecialChars(valorDocumentoAux.replaceAll("[A-Za-z]", "")).trim().toUpperCase();
                    strValorDocumento    = strValorDocumento.replaceAll("\\.","").replaceAll("-","");

                    logger.logInfo("valorDocAux 2 -> " + valorDocumentoAux);

                    valorDocumento = DecimalUtil.toDecimal(strValorDocumento);
                    logger.logInfo("VD -> " + valorDocumento);

                } catch (Exception vlrx) {
                    valorDocumento = 0;
                }
                nomeOrigem    = StringUtil.removeSpecialChars(line.substring( 32, 75 )).trim().toUpperCase();
                cont = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                if(valorDocumento == 0) dataMovimento = "";
                if(valorDocumento == 0) continue;

                contLinhaExtrato = cont;
            } else {
                complemento02 = line.trim();
                nomeOrigem	   += " " + line.trim();
            }

            if (dataMovimento.trim().equals("")) continue;

            if(naoLeMais) continue;

            // Chave para Insert/Update no Banco de Dados.
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {

                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento01)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
            } else {
                try {

                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO, HISTORICO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(nomeOrigem)
                            .param(chaveExtrato)
                            .execute();
                } catch(Exception e1) {
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }

    return true;
}


/*#############################################@ EXTRATO-SICREDI-EXCEL @##############################################*/

public boolean readExtratoSicrediDefault(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readExtratoSicrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idataMovimento	= 0;
    int idocumento      = 2;
    int inomePortador	=-1;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 3;
    nomePortador = nomePortador.replaceAll("\\?","").replaceAll("\\|", "");
    complemento01 = nomePortador.replaceAll("\\?","").replaceAll("\\|", "");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");

    boolean naoLeMais = false;

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);
        // logger.logInfo("LINHAAAAAA " + line);
        if (line.startsWith("SICREDI FONE")) continue;
        if (line.startsWith("0800")) continue;
        if (line.startsWith("SAC")) continue;
        if (line.startsWith("OUVIDORIA")) continue;
        if (line.startsWith("VENCIMENTO DO CHEQUE")) {
            naoLeMais = true;
            continue;
        }
        if (naoLeMais) continue;
        if (memFile.getFieldsSize() == 2) continue;
        //if (memFile.getFieldsSize() == 1) {
        if (memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO")) { //2310-019873
            // logger.logInfo("MFSC " + memFile.getStringFieldRemoveEspCharsUpper(0));
            nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(0);
            try {
                dbIOCont.update("IO_EXTRATO")
                        .fields("HISTORICO")
                        .where("CHAVE = ? ")
                        .param(nomeOrigem)
                        .param(chaveExtrato)
                        .execute();
            } catch (Exception sqlUpdateException) {
            }
        } else {
            try {
                try {
                    Date dt = memFile.getDateField(idataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    try {
                        Date dt = memFile.getDateField(idataMovimento);
                        dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                        dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                    } catch (Exception dt2) {
                        try {
                            String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).replaceAll("\"","");
                            Date dt  = DateUtil.stringToDate(dataString, "dd/MM/yyyy");
                            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                            dataLote = DateUtil.dateToString(dt, "yyyy-MM");
                        } catch (Exception dt2) { }
                    }
                }
                documento = "";
                // logger.logInfo("BTL -> 5737|  -> " + line  + "|  -> " + memFile.getFieldsSize()  );
                if (memFile.getFieldsSize() == 4) {
                    nomeOrigem      = "";
                    nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();

                    valorDocumento  = 0;
                    try{valorDocumento = memFile.getDoubleField(ivalorDocumento - 1);}
                    catch (Exception vlrd) { valorDocumento = 0; }
                } else {
                    nomeOrigem      = "";
                    nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();

                    documento		= memFile.getStringFieldRemoveEspCharsUpper(idocumento).replaceAll("\"","").trim();

                    valorDocumento  = 0;
                    try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                    catch (Exception vlrd) { valorDocumento = 0; }

                }
                // logger.logInfo("SIVALOR " + valorDocumento + " | " + dataMovimento);

                if (valorDocumento == 0) continue;
                if (valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
                if (valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                valorDocumento = Math.abs(valorDocumento);

                complemento02 = documento;

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                        .fields("CHAVE")
                        .param(chaveExtrato)
                        .queryUnique();

                // Inserir caso Chave nao encontrada.


                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                .param(chaveExtrato)
                                .param(codEmpresa)
                                .param(dataMovimento)
                                .param(nomePortador)
                                .param(nomeOrigem)
                                .param(nomeArquivo.toUpperCase())
                                .param(complemento02)
                                .param(valorDocumento)
                                .param(debitoCredito)
                                .param(0)
                                .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;
                    }
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(0)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }
            } catch (Exception ex) {
            }
        }
    }
    return true;
}


/*#############################################@ EXTRATO-SICREDI-TXT @##############################################*/
public boolean readExtratoSicrediTxt(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/*#############################################@ EXTRATO-TRIBANCO-EXCEL @##############################################*/
public boolean readExtratoTribancoExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


/*#############################################@ EXTRATO-UNICRED-EXCEL @##############################################*/
public boolean readExtratoUnicredDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


/*#############################################@ EXTRATO-UNICRED-TXT @##############################################*/
public boolean readExtratoUNICREDTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}


/*#############################################@ EXTRATO-UNIPRIME-EXCEL @##############################################*/
public boolean readExtratoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}



/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoBancoUniprime(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}

/*#############################################@ EXTRATO-UNIPRIME-TXT @##############################################*/
public boolean readExtratoUniprimeTxt(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoViacrediPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}




public boolean readExtratBradesco2PDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();
    // logger.logInfo("ENTROU ARRRRR BRAD");
    logger.logInfo("ENTROU BRADESCO");

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String documentoAux      = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";
    String nomeContabilidade = "";
    String nomeEmpresa       = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String anoData			 = "";
    String tipoExtrato		 = "";
    String colunaB   		 = "";
    String camposBanco       = "";

    boolean naoLeMais = false;

    double valorDocumento    = 0.0;
    double valorAlternativo  = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    int idataMovimento	= 0;
    int idocumento      = 2;
    int inomePortador	=-1;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 3;
    String nomeOrigemAnterior = "";
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOEXTRATO"))  tipoExtrato  = jDados.optString("TIPOEXTRATO");
    if(jDados.has("NOMECONTABILIDADE")) nomeContabilidade = jDados.optString("NOMECONTABILIDADE");
    if(jDados.has("NOMEEMPRESA")) nomeEmpresa = jDados.optString("NOMEEMPRESA");

    int cont = 0;
    int contAuxiliar = 0;
    int contadorAuxiliar = 0;


    boolean valorColB = false;
    boolean linhaPrincipal = false;
    boolean umCampo = true;
    boolean quebraFolha = false;
    boolean quebraFolha2 = false;

    boolean achouData = false;
    boolean lerPortador = false;
    String tipoPadrao = "";

    // logger.logInfo("TE " + tipoExtrato);

    while (memFile.hasNextLine()) {

        try {



            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            // logger.logInfo("TIPO EXTRATO BRADESCO 2 == "+nomeArquivo.toUpperCase());

            if(line.contains("DATA") && (line.contains("HISTORICO") || line.contains("LANCAMENTO")) && (line.contains("DOCTO") || line.contains("DCTO")) && line.contains("CREDITO") && line.contains("DEBITO") && tipoExtrato.contains("002")){
                tipoPadrao = "002";
                // logger.logInfo("ENTROU 002 bradesco pdf");
                // continue;
            }


            // logger.logInfo("tipoPdrao -> " + tipoPadrao);

            if(!tipoPadrao.equals("002")){

                //Alguns arquivos vem separados por "  "
                if (!line.contains(";") && line.contains("  ")) {
                    // logger.logInfo("Entrou SEPARATOR");
                    memFile.setFieldSeparator("  ");
                }

                if(line.startsWith("ULTIMOS LANCAMENTOS")) naoLeMais = true;

                //if (line.startsWith("SALDOS INVEST")) naoLeMais = true; - #2307-010918
                //if (line.startsWith("OS DADOS ACIMA")) naoLeMais = true; - #2307-010918
                if (line.startsWith("HTTPS")) continue;
                if (line.startsWith("NOME DO")) continue;
                if (line.startsWith("EXTRATO MENSAL")) continue;
                if (line.startsWith("DATA DA OPERACAO")) continue;
                if (line.contains("CNPJ:") && line.contains("/") && line.contains(".") && line.contains("-")) continue;

                // logger.logInfo("UC " + line);

                if (umCampo && memFile.getFieldsSize() > 1) {
                    quebraFolha = false;
                    quebraFolha2 = false;
                    // logger.logInfo("ENTROU IF1| "+line+" | "+memFile.getFieldsSize()+" | "+umCampo); Douglas
                }

                if (quebraFolha && memFile.getFieldsSize() == 1) {
                    quebraFolha = false;
                    quebraFolha2 = false;
                }

                if (!umCampo && quebraFolha2 && memFile.getFieldsSize() == 1) {
                    // logger.logInfo("DEU CERTO FOLHA " + nomeOrigem + " | " + line);
                    // logger.logInfo("QF2 " + line);

                    String nomeOrigemAux = nomeOrigem/*.replaceAll("TESTEJOTA", "") + " "*/ + " " + memFile.getStringFieldRemoveEspCharsUpper(0);
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("HISTORICO")
                                .where("CHAVE = ? ")
                                .param(nomeOrigemAux)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                    }
                    quebraFolha2 = false;
                    continue;
                }
                if (quebraFolha2 && memFile.getFieldsSize() == 1) {
                    // logger.logInfo("QF3 " + line);
                    quebraFolha2 = false;
                }
				/*if (quebraFolha && memFile.getFieldsSize() == 1) {
					logger.logInfo("QF4 " + line);
					quebraFolha = false;
				}*/
                if  (quebraFolha && memFile.getFieldsSize() > 1) {
                    // logger.logInfo("QF5 " + line);
                    quebraFolha2 = true;
                    quebraFolha = false;
                }

                if (memFile.getFieldsSize() > 1 && !line.startsWith("FOLHA")) umCampo = false;
                if (memFile.getFieldsSize() == 1 && !line.startsWith("FOLHA")) umCampo = true;

				/*if (quebraFolha2 && memFile.getFieldsSize() == 1) {

					logger.logInfo("DEU CERTO FOLHA " + nomeOrigem + " | " + memFile.getStringFieldRemoveEspCharsUpper(0) + " | " + chaveExtrato);

					String nomeOrigemAux = nomeOrigem.replaceAll("TESTEJOTA", "") + " " + memFile.getStringFieldRemoveEspCharsUpper(0);

					try {
						dbIOCont.update("IO_EXTRATO")
						.fields("HISTORICO")
						.where("CHAVE = ? ")
						.param(nomeOrigemAux)
						.param(chaveExtrato)
						.execute();
					} catch (Exception sqlUpdateException) {
					}
					quebraFolha2 = false;
					continue;
				}

				if (quebraFolha && memFile.getFieldsSize() > 1) {
					quebraFolha = false;
					quebraFolha2 = true;
				}*/

                // if (quebraFolha && memFile.getFieldsSize() > 1) quebraFolha = false;
                if (line.startsWith("FOLHA")&& memFile.getFieldsSize() == 1) {
                    // nomeOrigem = "";
                    // complemento02 = "";
                    // nomeOrigemAnterior = "";
                    quebraFolha = true;
                    // logger.logInfo("NOFOLHA " + nomeOrigem);
                    continue;
                }
                if (naoLeMais) continue;



                if ((achouData &&
                        memFile.getStringFieldRemoveEspCharsUpper(0).equals("BRADESCO VIDA E PREVIDENCIA SA") &&
                        memFile.getStringFieldRemoveEspCharsUpper(1).equals("") &&
                        memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) || (achouData && tipoExtrato.equals("003") && //#2306-006655
                        colunaB.matches("[0-9]+") && //#2306-006655
                        memFile.getFieldsSize() == 1)) { //#2306-006655

                    achouData = false;

                    extratoEmpresa = dbIOCont.sql("SELECT CHAVE,HISTORICO,COMPLEMENTO FROM IO_EXTRATO WHERE CHAVE = ?")
                            .fields("CHAVE,HISTORICO,COMPLEMENTO")
                            .param(chaveExtrato)
                            .queryUnique();

                    if (extratoEmpresa != null && extratoEmpresa.has("CHAVE")) {
                        try {

                            dbIOCont.update("IO_EXTRATO")
                                    .fields("HISTORICO,COMPLEMENTO")
                                    .where("CHAVE = ? ")
                                    .param(extratoEmpresa.optString("HISTORICO")    + " - " + memFile.getStringFieldRemoveEspCharsUpper(0))
                                    .param(extratoEmpresa.optString("COMPLEMENTO") + " - " + memFile.getStringFieldRemoveEspCharsUpper(0))
                                    .param(chaveExtrato)
                                    .execute();
                        } catch (Exception sqlUpdateException) {
                            logger.logDebug("Erro no update: " + sqlUpdateException);
                        }
                    }
                    continue;
                }

                if (memFile.getStringFieldRemoveEspCharsUpper(0).equals("VALOR DISPONIVEL") && memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) continue;

                achouData = false;

                colunaB = memFile.getStringFieldRemoveEspCharsUpper(1); //#2306-006655

                String dataExtrato = "";
                try{
                    // logger.logInfo("ENTROU TRY");Douglas
                    //if (!memFile.getStringFieldRemoveEspCharsUpper(4).equals("")) dataExtrato     = getDate(dataExtrato, 0, line, false, "", memFile, logger);
                    //else if (cutString(line, 0, "\\|").contains("/") && !memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) dataExtrato     = getDate(dataExtrato, 0, line, false, "", memFile, logger);
                    if (!memFile.getStringFieldRemoveEspCharsUpper(4).equals("") && memFile.getStringFieldRemoveEspCharsUpper(0).trim().length() <= 10) dataExtrato = getDate(dataExtrato, 0, line, false, "", memFile, logger);
                    else if (cutString(line, 0, "\\|").contains("/") &&
                            !memFile.getStringFieldRemoveEspCharsUpper(3).equals("") &&
                            memFile.getStringFieldRemoveEspCharsUpper(0).trim().length() <= 10) dataExtrato = getDate(dataExtrato, 0, line, false, "", memFile, logger);
                    else if(memFile.getStringFieldRemoveEspCharsUpper(0).contains("/")){

                    }
                }catch(Exception e){
                    // dataMovimento   = "";
                    // dataLote        = "";
                    // logger.logInfo("ENTROU CATCH");Douglas
                }
                if (dataExtrato.equals("")) {
                    nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(0);
                    complemento02  = memFile.getStringFieldRemoveEspCharsUpper(1);
                }
                else {
                    if(!memFile.getStringFieldRemoveEspCharsUpper(1).matches("[0-9]+") && tipoExtrato.equals("003")){
                        nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(1); //#2306-006655
                    }
                    if(!tipoExtrato.equals("003")){
                        nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(1); //#2306-006655
                    }
                    complemento02  = memFile.getStringFieldRemoveEspCharsUpper(2);
                    // logger.logInfo("ENTROU ELSE1| "+tipoExtrato);Douglas
                }
                if (!dataExtrato.equals("")) {
                    achouData = true;
                    dataMovimento = dataExtrato;
                    dataLote	  = getCampoDate(dataMovimento, "", "yyyy-MM");
                    // logger.logInfo("ENTROU IF2| "+dataMovimento+" | "+line);Douglas
                }

                // if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXTRATO DE:")) {
                // 	nomePortador = memFile.getStringFieldRemoveEspCharsUpper(1);
                // 	continue;
                // }


                //O portador eh lido na linha que sucede a linha que contem 'AGENCIA' e 'CONTA'
                //Felipe - 18/04/23
                if (lerPortador) {
                    nomePortador = memFile.getStringFieldRemoveEspCharsUpper(1);
                    lerPortador = false;
                }
                else if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("AGENCIA") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("CONTA")) {
                    lerPortador = true;
                    // logger.logInfo("ENTROU ELSE2");Douglas
                }
                //----------------------------------------------------------------------------------------------

                // logger.logDebug("LINHA " + line);
                if (!memFile.getStringFieldRemoveEspCharsUpper(4).equals("")) {
                    // logger.logInfo("ENTROU IF3| "+memFile.getStringFieldRemoveEspCharsUpper(4));Douglas
                    try { valorDocumento = memFile.getDoubleField(3);
                        // logger.logInfo("ENTROU TRY1| "+memFile.getDoubleField(3));Douglas
                    } catch (Exception e) { valorDocumento = 0;}
                } else if (!memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) {
                    try { valorDocumento = memFile.getDoubleField(2);
                        // logger.logInfo("ENTROU TRY2| "+memFile.getDoubleField(2));Douglas
                    } catch (Exception e) { valorDocumento = 0;}
                } else {
                    try { valorDocumento = memFile.getDoubleField(1);
                    } catch (Exception e) { valorDocumento = 0;}

                    valorColB = true;
                }
                if(tipoExtrato.contains("003")){
                    // logger.logInfo("TIPO == "+tipoPadrao+" | LINE == "+line);
                    if(!achouData){
                        if (!memFile.getStringFieldRemoveEspCharsUpper(4).equals("")) {
                            try { valorDocumento = memFile.getDoubleField(4);
                                // logger.logInfo("ENTROU TRY3| ");Douglas
                            } catch (Exception e) { valorDocumento = 0;}
                        } else if (!memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) {
                            try { valorDocumento = memFile.getDoubleField(3);
                                // logger.logInfo("ENTROU TRY3| ");
                            } catch (Exception e) { valorDocumento = 0;}
                        } else {

                            if(!memFile.getStringFieldRemoveEspCharsUpper(2).equals("")){
                                if(memFile.getStringFieldRemoveEspCharsUpper(0).matches("[0-9]+")){//#2306-006655
                                    // logger.logInfo("ENTROU IF9");
                                    try { valorDocumento = memFile.getDoubleField(1);
                                        // logger.logInfo("ENTROU TRY4| ");
                                    } catch (Exception e) { valorDocumento = 0;}
                                }else{
                                    try { valorDocumento = memFile.getDoubleField(2);
                                        // logger.logInfo("ENTROU TRY5| ");
                                    } catch (Exception e) { valorDocumento = 0;}
                                }
                            }
                            valorColB = true;
                        }
                        if(memFile.getFieldsSize() > 3){
                            try { valorDocumento = memFile.getDoubleField(memFile.getFieldsSize()-2);
                            } catch (Exception e) { valorDocumento = 0;}
                        }
                    }
                    // if(achouData){
                    // logger.logInfo("LINE EXT BRDSC 2 == "+line);
                    // extratoEmpresa = dbIOCont.sql("SELECT CHAVE,HISTORICO,COMPLEMENTO FROM IO_EXTRATO WHERE CHAVE = ?")
                    // .fields("CHAVE,HISTORICO,COMPLEMENTO")
                    // .param(chaveExtrato)
                    // .queryUnique();

                    // if (extratoEmpresa != null && extratoEmpresa.has("CHAVE")) {
                    // try {

                    // dbIOCont.update("IO_EXTRATO")
                    // .fields("VALORDOCUMENTO")
                    // .where("CHAVE = ? ")
                    // .param(valorAlternativo)
                    // .param(chaveExtrato)
                    // .execute();
                    // } catch (Exception sqlUpdateException) {
                    // logger.logDebug("Erro no update: " + sqlUpdateException);
                    // }
                    // }
                    // logger.logInfo("data === "+dataMovimento+" | valorA == "+valorAlternativo + " | CHAVE == "+chaveExtrato);
                    // }
                }


                if (valorDocumento > 0)  debitoCredito = "EXTRATO-CREDITO";
                if (valorDocumento < 0)  debitoCredito = "EXTRATO-DEBITO";

                valorDocumento = Math.abs(valorDocumento);
                // logger.logInfo("dataMOvimento - > " + dataMovimento + " |valorDocumento -> " + valorDocumento);

                cont++;
                contLinhaExtrato = String.valueOf(cont);
                contLinhaExtrato = StringUtil.leftPad(contLinhaExtrato, 05, "0");
                // logger.logInfo("NO == "+nomeOrigem+" | LINE == "+line);
                if (nomeOrigem.startsWith("TRANSF CC PARA") ||
                        nomeOrigem.startsWith("TRANSF.AUT. C/C") || //#2306-006655
                        nomeOrigem.startsWith("DEB DESCONTO") ||
                        nomeOrigem.startsWith("TED-T ELET DISP") || //#2306-006655
                        nomeOrigem.startsWith("TED D") ||
                        nomeOrigem.startsWith("TRANSF.POUP") ||
                        nomeOrigem.startsWith("TED-TRANSF") ||
                        nomeOrigem.startsWith("TRANSFE PIX") || //#2306-006655
                        nomeOrigem.startsWith("TRANSF CONTAS") || //#2306-006655
                        nomeOrigem.startsWith("TRANSF.MM") || //#2306-006655
                        nomeOrigem.startsWith("TRANSF AUTORIZ") ||
                        nomeOrigem.startsWith("DEP.DINHEIRO") ||
                        nomeOrigem.startsWith("DEP DINH") ||
                        nomeOrigem.startsWith("SAQUE C") ||
                        nomeOrigem.startsWith("TRANSFERENCIA PIX") ||
                        nomeOrigem.startsWith("ENCARGOS") ||
                        nomeOrigem.startsWith("TARIFA") ||
                        nomeOrigem.startsWith("PAGTO ELETRO") ||
                        nomeOrigem.startsWith("PGTO ELET TRIB") || //#2306-006655
                        nomeOrigem.startsWith("PAGTO COBRANCA") || //#2306-006655
                        nomeOrigem.startsWith("TEDQ DIF") ||
                        nomeOrigem.startsWith("DEP CH") ||
                        nomeOrigem.startsWith("DEVOL.CHEQUE") ||
                        nomeOrigem.startsWith("DOC/TED") ||
                        nomeOrigem.startsWith("CONTA DE") ||
                        nomeOrigem.startsWith("RECEBIMENTO FORNECEDOR") ||
                        nomeOrigem.startsWith("RECEB PAGFOR") || //#2306-006655
                        nomeOrigem.startsWith("DEBITO AUTOMATICO") ||
                        nomeOrigem.startsWith("CIELO VDA") ||
                        // nomeOrigem.startsWith("CARTAO") ||	202302-0025621
                        nomeOrigem.startsWith("CARTAO ALIMENTACAO") ||	//alterada essa validacao pois estava atrapalhando um caso de cartao refeicao 202302-0025621
                        nomeOrigem.startsWith("DEPOSITO CHEQUE") ||
                        nomeOrigem.startsWith("ANTECIPACAO DE") ||
                        nomeOrigem.startsWith("CHO PAGO OUTRA AGENCIA") ||
                        nomeOrigem.startsWith("DEP. IDENT.") ||
                        nomeOrigem.startsWith("SISPAG FORNECEDORES") ||
                        nomeOrigem.startsWith("BRADESCO NET EMPRESA") ||
                        nomeOrigem.startsWith("TRANSF FDOS DOC-E H BANK") ||
                        nomeOrigem.startsWith("DOC CREDITO AUTOMATICO") ||
                        nomeOrigem.startsWith("GETNET VISA CREDITO") ||
                        nomeOrigem.startsWith("CIELO VDA CREDITO") ||
                        nomeOrigem.startsWith("CIELO AMEX") ||
                        nomeOrigem.startsWith("AMEX ANTECIPACAO") ||
                        nomeOrigem.startsWith("ELO ANTECIPACAO") ||
                        nomeOrigem.startsWith("VISA ANTECIPACAO") ||
                        nomeOrigem.startsWith("MASTER ANTECIPACAO") ||
                        nomeOrigem.startsWith("ESTORNO DE DEPOSITO") ||
                        nomeOrigem.startsWith("CHQ.PAGO OUTRA AGENCIA") ||
                        nomeOrigem.startsWith("TRANSF.AUTORIZ") ||
                        nomeOrigem.startsWith("DEPOSIT TRANSFER") ||
                        nomeOrigem.startsWith("TARIFA CHEQUE") ||
                        nomeOrigem.startsWith("VIDA E PREVIDEN") ||
                        nomeOrigem.startsWith("PARCELA OPER") ||
                        nomeOrigem.startsWith("LIQUIDACAO DE COBRANCA") ||
                        nomeOrigem.startsWith("DEPOSITO C/CORRENTE") ||
                        nomeOrigem.startsWith("MASTER DEBITO") ||
                        nomeOrigem.startsWith("REDE ELO DEBITO") ||
                        nomeOrigem.startsWith("MASTER DEBITO") ||
                        nomeOrigem.startsWith("DESCONTO DE CHEQUES") ||
                        nomeOrigem.startsWith("DEBITO DESCONTO") ||
                        nomeOrigem.startsWith("TAR COMANDADA") ||
                        nomeOrigem.startsWith("TARIFA BANCARIA") ||
                        nomeOrigem.startsWith("DEPOSITO EM DINHEIRO") ||
                        nomeOrigem.startsWith("BX.ANT.FINANC/EMP") ||
                        nomeOrigem.startsWith("DESCONTO ESCRITURAL") ||
                        nomeOrigem.startsWith("LIQUIDACAO COBRANCA DESC") ||
                        nomeOrigem.startsWith("CARGA CARTAO TRANSPORTES") ||
                        nomeOrigem.startsWith("RECIBO DE RETIRADA") || //#2304-003842
                        nomeOrigem.startsWith("OPERACAO CAPITAL GIRO") || //#2304-003842
                        nomeOrigem.startsWith("DEVOLUCAO PIX") || //#2304-003842
                        nomeOrigem.startsWith("DEBITO ANTECIPE CARTOES") || //#2304-003842
                        nomeOrigem.startsWith("PEND EM MORA") || //#2306-006148
                        nomeOrigem.startsWith("TRANSF/DEP") || //#2306-006148
                        nomeOrigem.startsWith("CARTAO VISA E") || //#2306-006148
                        nomeOrigem.startsWith("CIELO HIPER C") || //#2306-006148
                        nomeOrigem.startsWith("CIELO ANTECIPACAO O") || //#2306-006148
                        nomeOrigem.startsWith("CIELO VISA ANT") || //#2306-006148
                        nomeOrigem.startsWith("CIELO MASTER ANT") || //#2306-006148
                        nomeOrigem.startsWith("REDE VISA DEBITO") || //#2306-006148
                        nomeOrigem.startsWith("REDE MASTER DEBITO") || //#2306-006148
                        nomeOrigem.startsWith("REDE MASTER CREDITO") || //#2306-006148
                        nomeOrigem.startsWith("MASTER CREDITO") || //#2306-006148
                        nomeOrigem.equals("VISA CREDITO") || //#2306-006148
                        nomeOrigem.equals("ELO CREDITO") || //#2306-006148
                        nomeOrigem.equals("CABAL DEBITO") || //#2306-006148
                        nomeOrigem.equals("RECEBIMENTO FORNECEDOR") || //#2306-006148
                        nomeOrigem.startsWith("ANTECIPACAO DE CARTAO") || //#2306-006148
                        nomeOrigem.startsWith("ENCARGO ANTECIP") || //#2306-006148
                        nomeOrigem.startsWith("ESTORNO TARIFAS") || //#2306-006148
                        nomeOrigem.startsWith("BANESCARD CREDITO") || //#2306-006148
                        nomeOrigem.startsWith("PIX QR CODE DINAMICO") || //#2401-026567
                        nomeOrigem.startsWith("PIX QR CODE ESTATICO") || //#2401-026567
                        (nomeOrigem.startsWith("ADI") && nomeOrigem.contains("MENTO") && nomeOrigem.contains("OPER D")) || //#2306-006148
                        // nomeOrigem.startsWith("CARGA CRT") ||
                        (nomeOrigem.startsWith("CHEQUE") && !nomeOrigemAnterior.startsWith("TARIFA")) ) nomeOrigemAnterior = nomeOrigem;

                //2303-001843 - Necessário verificar a linha principal para gravar o contador, a fim de utilizá-lo na hora de manipular o nomeOrigem.
                if(memFile.getStringFieldRemoveEspCharsUpper(0).matches("[0-9]+(BRADESCO)?") && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && valorColB){
                    contAuxiliar = cont;
                    valorColB = false;
                }
                // logger.logInfo("MF FS -> " + memFile.getFieldsSize() + " |MF 0 ->> " + memFile.getStringFieldRemoveEspCharsUpper(0) + " |cont ->> " + cont + " |contAuxiliar -> " + contAuxiliar + " |NOA -> " + nomeOrigemAnterior);
                if(memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && (cont == contAuxiliar + 1) && contAuxiliar > 0 && nomeOrigemAnterior.equals("")){

                    // logger.logInfo("ENTROU UPDATE 456 == "+line);

                    extratoEmpresa = dbIOCont.sql("SELECT CHAVE,HISTORICO,COMPLEMENTO FROM IO_EXTRATO WHERE CHAVE = ?")
                            .fields("CHAVE,HISTORICO,COMPLEMENTO")
                            .param(chaveExtrato)
                            .queryUnique();

                    if (extratoEmpresa != null && extratoEmpresa.has("CHAVE")) {
                        try {

                            dbIOCont.update("IO_EXTRATO")
                                    .fields("HISTORICO")
                                    .where("CHAVE = ? ")
                                    .param(extratoEmpresa.optString("HISTORICO").replaceAll("[0-9]", "")    + " - " + memFile.getStringFieldRemoveEspCharsUpper(0))
                                    .param(chaveExtrato)
                                    .execute();
                        } catch (Exception sqlUpdateException) {
                            logger.logDebug("Erro no update: " + sqlUpdateException);
                        }
                    }
                    continue;
                }

                if(memFile.getFieldsSize() > 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(1).equals("") && !memFile.getStringFieldRemoveEspCharsUpper(2).equals("") && valorColB){
                    contadorAuxiliar = cont;
                    valorColB = false;
                    linhaPrincipal = true;
                }

                if(memFile.getFieldsSize() == 1 && !memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && (cont == contadorAuxiliar + 1) && contadorAuxiliar > 0 && nomeOrigemAnterior.equals("") && linhaPrincipal){

                    //logger.logInfo("LINE EXT BRDSC 2 == "+line);
                    // logger.logInfo("ENTROU UPDATE sergio == "+line);

                    extratoEmpresa = dbIOCont.sql("SELECT CHAVE,HISTORICO,COMPLEMENTO FROM IO_EXTRATO WHERE CHAVE = ?")
                            .fields("CHAVE,HISTORICO,COMPLEMENTO")
                            .param(chaveExtrato)
                            .queryUnique();

                    if (extratoEmpresa != null && extratoEmpresa.has("CHAVE")) {
                        try {

                            dbIOCont.update("IO_EXTRATO")
                                    .fields("HISTORICO")
                                    .where("CHAVE = ? ")
                                    .param(extratoEmpresa.optString("HISTORICO").replaceAll("[0-9]", "")    + " " + memFile.getStringFieldRemoveEspCharsUpper(0))
                                    .param(chaveExtrato)
                                    .execute();
                        } catch (Exception sqlUpdateException) {
                            logger.logDebug("Erro no update: " + sqlUpdateException);
                        }
                    }
                    linhaPrincipal = false;
                    continue;
                }

                // logger.logInfo("LINE EXT BRDSC 2 == "+line+" NP -> "+nomePortador);

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;


                // logger.logInfo("DMVV " + nomeOrigem + " | " + nomeOrigemAnterior + " | " + dataMovimento + " | " + valorDocumento + " | " + line);
                // logger.logInfo("DEE " + dataExtrato);
                // logger.logInfo("LINHAZINHA " + line);
                //logger.logInfo("dataMOvimento - > " + dataMovimento + " |valorDocumento -> " + valorDocumento + " |achouData -> " + achouData + " |no -> " + nomeOrigem);

                if (dataMovimento.equals("")) continue;
                if (valorDocumento == 0) continue;

                if (nomeOrigem.equals("TOTAL") && nomeOrigemAnterior.equals("")) continue;
                if (nomeOrigem.startsWith("SALDO") && !nomeOrigem.startsWith("SALDO DEV")) continue;
                if (complemento02.startsWith("SALDO") && !complemento02.startsWith("SALDO DEV")) continue;

                if (!nomeOrigemAnterior.equals("")) {
                    complemento02      = nomeOrigem;
                    if (!nomeOrigemAnterior.contains(complemento02) || nomeOrigemAnterior.contains("TED INTERNET")) nomeOrigem = nomeOrigemAnterior + " " + complemento02;
                    else if (nomeOrigemAnterior.contains(complemento02)) nomeOrigem = nomeOrigemAnterior;
                    nomeOrigemAnterior = "";
                }


                //Chamado #2311-022674 Leal
                idocumento = memFile.getFieldsSize() - 3;
                //Chamado #2311-022674 Leal
                if(memFile.getStringFieldRemoveEspCharsUpper(idocumento).matches("[0-9]+")){
                    documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);
                    documentoAux = documento;
                }
                nomeOrigem    = nomeOrigem.replaceAll("RECEBIMENTO FORNECEDOR","RECEBIMENTO FORNECEDOR ");
                complemento02 = complemento02.replaceAll("RECEBIMENTO FORNECEDOR","RECEBIMENTO FORNECEDOR ");

                if(nomeOrigem.contains("CHEQUE") && nomeOrigem.contains("COMPENSADO")){
                    if (dataExtrato.equals("")) {
                        complemento02  = memFile.getStringFieldRemoveEspCharsUpper(1);
                    }
                    else {
                        complemento02  = memFile.getStringFieldRemoveEspCharsUpper(2);
                    }
                }
            }

            if(tipoPadrao.equals("002")){


                achouData = false;

                String dataExtrato = "";

                if(memFile.getStringFieldRemoveEspCharsUpper(0).length() <= 10 && quantityOf(memFile.getStringFieldRemoveEspCharsUpper(0), "/") == 2) achouData = true;
                if(!memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && achouData == false && memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) nomeOrigemAnterior = memFile.getStringFieldRemoveEspCharsUpper(0);

                try{
                    if (!memFile.getStringFieldRemoveEspCharsUpper(4).equals("")) dataExtrato     = getDate(dataExtrato, 0, line, false, "", memFile, logger);
                    else if (cutString(line, 0, "\\|").contains("/") && !memFile.getStringFieldRemoveEspCharsUpper(3).equals("")) dataExtrato     = getDate(dataExtrato, 0, line, false, "", memFile, logger);
                }catch(Exception e){
                    // dataMovimento   = "";
                    // dataLote        = "";
                }
                if (achouData == false) {
                    nomeOrigem = nomeOrigemAnterior + " " +memFile.getStringFieldRemoveEspCharsUpper(0);
                    complemento02  = memFile.getStringFieldRemoveEspCharsUpper(1);
                    // Douglas # 202301-0024144
                    if(!memFile.getStringFieldRemoveEspCharsUpper(0).equals("") && achouData == false && !memFile.getStringFieldRemoveEspCharsUpper(2).equals("")) nomeOrigemAnterior = "";
                    try { valorDocumento = memFile.getDoubleField(2);
                    } catch (Exception e) { valorDocumento = 0;}
                }
                else {
                    nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(1);
                    complemento02  = memFile.getStringFieldRemoveEspCharsUpper(2);
                    try { valorDocumento = memFile.getDoubleField(3);
                    } catch (Exception e) { valorDocumento = 0;}
                }
                if (achouData == true) {
                    dataMovimento = dataExtrato;
                    dataLote	  = getCampoDate(dataMovimento, "", "yyyy-MM");
                }

                // if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXTRATO DE:")) {
                // nomePortador = memFile.getStringFieldRemoveEspCharsUpper(1);
                // continue;
                // }



                if (valorDocumento > 0)  debitoCredito = "EXTRATO-CREDITO";
                if (valorDocumento < 0)  debitoCredito = "EXTRATO-DEBITO";

                valorDocumento = Math.abs(valorDocumento);
                logger.logInfo("dataMOvimento - > " + dataMovimento + " |valorDocumento -> " + valorDocumento + " |achouData -> " + achouData + " |no -> " + nomeOrigem);

                cont++;
                contLinhaExtrato = String.valueOf(cont);
                contLinhaExtrato = StringUtil.leftPad(contLinhaExtrato, 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;


                if (dataMovimento.equals("")) continue;
                if (valorDocumento == 0) continue;

                // if (nomeOrigem.equals("TOTAL") && nomeOrigemAnterior.equals("")) continue;



                if (nomeOrigem.startsWith("SALDO") && !nomeOrigem.startsWith("SALDO DEV")) continue;
                if (complemento02.startsWith("SALDO") && !complemento02.startsWith("SALDO DEV")) continue;

                // if (!nomeOrigemAnterior.equals("")) {
                // complemento02      = nomeOrigem;
                // if (!nomeOrigemAnterior.contains(complemento02) || nomeOrigemAnterior.contains("TED INTERNET")) nomeOrigem = nomeOrigemAnterior + " " + complemento02;
                // else if (nomeOrigemAnterior.contains(complemento02)) nomeOrigem = nomeOrigemAnterior;
                // nomeOrigemAnterior = "";
                // }

                // nomeOrigem    = nomeOrigem.replaceAll("RECEBIMENTO FORNECEDOR","RECEBIMENTO FORNECEDOR ");
                // complemento02 = complemento02.replaceAll("RECEBIMENTO FORNECEDOR","RECEBIMENTO FORNECEDOR ");

                // if(nomeOrigem.contains("CHEQUE") && nomeOrigem.contains("COMPENSADO")){
                // if (dataExtrato.equals("")) {
                // complemento02  = memFile.getStringFieldRemoveEspCharsUpper(1);
                // }
                // else {
                // complemento02  = memFile.getStringFieldRemoveEspCharsUpper(2);
                // }
                // }
            }


            // Buscar Extrato por Chave na Tabela IO_EXTRATO.


            // logger.logInfo("NORG " + nomeOrigem + " | " + complemento02 + " | " + quebraFolha + " | " + quebraFolha2 + " | " + umCampo);
            // logger.logInfo("TipoPadrao " + tipoPadrao + " |cp02 " + complemento02 + " |nP " + nomePortador+ " |LIN "+line);
            // logger.logInfo("LINHA AQ " + valorDocumento + " | " + line);

            // Inserir caso Chave nao encontrada.

            // logger.logInfo("LOG CAMPOS - NOME ORIGEM - " + nomeOrigem);
            // logger.logInfo("LOG CAMPOS - VALOR - " + valorDocumento);
            // logger.logInfo("LOG CAMPOS - DATA - " + dataMovimento);

            //#2312-024394 - Leal - Validacao feita dentro do read pois era preciso enviar o documento apenas para essa empresa
            // O documento era enviado atraves do complemento02, com essa alteracao agora e enviado no campo DOCUMENTO do banco
            if(!nomeContabilidade.toUpperCase().contains("SYSTEMA") && !nomeEmpresa.toUpperCase().contains("CAMFPRESTACAO")){
                documentoAux = null;
            }

            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(documentoAux)
                            .param(nomePortador)
                            .param(nomeOrigem/* + " TESTEJOTA "*/)
                            .param(nomeArquivo.toUpperCase())
                            .param(documento)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }


        } catch (Exception ex) {
        }
    }
    return true;
}




public boolean readExtratoInterPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();


    return true;
}



public HashMap readExtratoFolhaSageExcel(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}

public HashMap readExtratoFolhaSageExcelv2(MemoryFile memFile, JSONObject jDados, HashMap mapaVariavel, InoutLogger logger) throws Exception {


    return mapaVariavel;
}








/*#############################################@ EXTRATO-SICOOB-EXCEL @##############################################*/
public boolean readExtratoViacredi(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


public boolean readExtratoItauConsolidadoPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
    // logger.logDebug("PADRAO ITAU CONSOLIDADO");

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String anoDataExtrato	 = "";
    String tipoLancamento	 = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDescDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    // 11/12/2019|0000|13013|807 ESTORNO DE D?BITO|23.068|285,50 C|0,00 C |  -> 7
    int idataMovimento	= -1;
    int idocumento      = -1;
    int inomePortador	=-1;
    int inomeOrigem		= 0;
    int ivalorDocumento	= 1;
    nomePortador = nomePortador.replaceAll("\\?","");
    complemento01 = nomePortador.replaceAll("\\?","");

    boolean naoLeMais = true;
    boolean fazExtra = false;

    if(jDados.has("ANO"))  		   anoDataExtrato  = jDados.optString("ANO");
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOLANCAMENTO"))  tipoLancamento  = jDados.optString("TIPOLANCAMENTO");

    int contLinhaExtratoInt = 0;
    int contLinhaExtratoIntFora = 0;

    memFile.setFieldSeparator("\\|");

    logger.logInfo("ADE " + anoDataExtrato);

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        //2311-021540
        if (anoDataExtrato.length() > 4) {
            anoDataExtrato = cutString(anoDataExtrato, 0, "|").trim();
            logger.logInfo("TEMPIPE " + anoDataExtrato);
        }

        // logger.logDebug("Line -> "+line);

        boolean linhaComData = false;
        inomeOrigem		= 0;
        ivalorDocumento	= 1;

        logger.logInfo("LINHACOMNLM " + line + " | " + memFile.getStringFieldRemoveEspCharsUpper(0) + " | " + naoLeMais);

        if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("EXTRATO") && memFile.getStringFieldRemoveEspCharsUpper(1).contains("MENSAL")) {
            logger.logInfo("CONTINUE2 " + line);
            continue;
        }

        if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("NA") && memFile.getStringFieldRemoveEspCharsUpper(0).contains("CONTA")
                && memFile.getStringFieldRemoveEspCharsUpper(0).contains("CORRENTE")) {
            logger.logInfo("CONTINUE3 " + line);
            naoLeMais = true;
        }

        if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("COMPOSICAO") && memFile.getStringFieldRemoveEspCharsUpper(0).contains("SALDO")
                && memFile.getStringFieldRemoveEspCharsUpper(0).contains("DEVEDOR")) {
            logger.logInfo("CONTINUE4 " + line);
            naoLeMais = true;
        }

        if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("RENDIMENTO") && memFile.getStringFieldRemoveEspCharsUpper(0).contains("APURADOS")
                && memFile.getStringFieldRemoveEspCharsUpper(0).contains("MES")) {
            naoLeMais = false;
            continue;
        }

        if (memFile.getStringFieldRemoveEspCharsUpper(0).contains("CREDITOS")
                && memFile.getStringFieldRemoveEspCharsUpper(1).contains("DEBITOS")
                && naoLeMais) {
            naoLeMais = false;
            continue;
        }

        if (memFile.getStringFieldRemoveEspCharsUpper(1).contains("CREDITOS")
                && memFile.getStringFieldRemoveEspCharsUpper(2).contains("DEBITOS")
                && memFile.getStringFieldRemoveEspCharsUpper(0).contains("ACOES MOVIMENTADAS") && naoLeMais) {
            logger.logInfo("ENTROU NLM " + naoLeMais);
            logger.logDebug("CONTINUE5 " + line);
            naoLeMais = false;
            continue;
        }
        if (naoLeMais) continue;

        if (line.contains("SALDO") && !line.startsWith("JUROS SALDO")) {
            // logger.logInfo("CONTINUE6 " + line);
            continue;
        }
        if (line.contains("DATA") && line.contains("REALIZADAS")) {
            continue;
        }
        if (line.contains("APLICACOES") && line.contains("VALOR") && line.contains("PRINCIPAL")) {
            continue;
        }

        if (fazExtra) {

            String rotulos = "RENDIMENTO BRUTO PAGO;IOF RETIDO;IRRF RETIDO;RENDIMENTO LIQUIDO PAGO";
            String rotuloColuna = "";
            String [] rotuloArray  = rotulos.split(";");

            String dataAuxiliarExtra = memFile.getStringFieldRemoveEspCharsUpper(0);
            dataMovimento = dataAuxiliarExtra+"/"+anoDataExtrato;

            if(dataMovimento.length() != 10)
                dataMovimento = cutString(dataMovimento, 10);

            try {
                Date dts = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
            } catch (Exception dt1) {
                logger.logInfo("Catch DM");
                continue;
            }

            int iv = 0;
            for (int j = 3; j < 7; j++) {
                try {
                    rotuloColuna = rotuloArray[iv];
                }
                catch (Exception xx) {
                    logger.logInfo("Catch Rotulo");
                    continue;
                }
                iv ++;

                nomeOrigem      = "";
                nomeOrigem      = rotuloColuna;

                chaveExtrato = "";

                //if (tipoLancamento.contains("PAG")) debitoCredito = "EXTRATO-DEBITO";
                //if (tipoLancamento.contains("REC")) debitoCredito = "EXTRATO-CREDITO";

                debitoCredito = "EXTRATO-CREDITO"; //Testar

                strValorDocumento = memFile.getStringFieldRemoveEspCharsUpper(j);
                strValorDocumento = strValorDocumento.replaceAll("\\.","").replaceAll(",","");

                if (memFile.getStringFieldRemoveEspCharsUpper(j).contains("-")){
                    strValorDocumento = strValorDocumento.replaceAll("-","");
                }

                logger.logDebug("strVD -> "+strValorDocumento);
                valorDocumento  = 0;
                try{valorDocumento = Double.parseDouble(strValorDocumento)/100;}
                catch (Exception vlrd) { valorDocumento = 0; }

                if (valorDocumento == 0) {
                    continue;
                }
                contLinhaExtratoInt ++;
                contLinhaExtrato = StringUtil.leftPad(String.valueOf(contLinhaExtratoInt), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                logger.logInfo("BD " + dataMovimento);

                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logDebug("PROBLEMA NO INSERT " + line);
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            }
            continue;
        }

        if (line.contains("MOVIMENTACAO") && line.contains("APLICACOES") && line.contains("RESGATES")) {
            fazExtra = true;
            continue;
        }
        logger.logDebug("MF0 " + memFile.getStringFieldRemoveEspCharsUpper(0));
        //LEITURA DA DATA
        if (line.contains("/")) {
            for (int i = 0; i < memFile.getFieldsSize(); i++) {
                String dataAuxiliar = memFile.getStringFieldRemoveEspCharsUpper(i);
                if (dataAuxiliar.contains("/") && (dataAuxiliar.replaceAll("[a-zA-Z]", "").length() == dataAuxiliar.length())) {
                    idataMovimento = i;

                    try{
                        dataMovimento     = getDate(dataMovimento, idataMovimento, line, false, "", memFile, logger);
                    }catch(Exception e){
                    }
                    linhaComData = true;
                    dataMovimento = dataAuxiliar+"/"+anoDataExtrato;
                    logger.logInfo("MDEEEE " + dataMovimento + " | " + dataMovimento.length());
                }
            }
        }

        //logger.logInfo("Data: "+dataMovimento);

        if (dataMovimento.equals("")) continue;
        if (dataMovimento.length() < 10) continue;

        try {
            contLinhaExtratoInt ++;

            if (linhaComData) {
                inomeOrigem = idataMovimento+1;
                ivalorDocumento = idataMovimento+2;
            }
            linhaComData = false;

            strValorDocumento = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
            strValorDocumento = strValorDocumento.replaceAll("\\.","").replaceAll(",","");

            if (memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")){
                strValorDocumento = strValorDocumento.replaceAll("-","");
            }

            valorDocumento  = 0;
            try{valorDocumento = Double.parseDouble(strValorDocumento)/100;}
            catch (Exception vlrd) { valorDocumento = 0; }

            if (valorDocumento == 0) {
                int indiceValorAuxiliar = 0;
                for (int k = 0; k < memFile.getFieldsSize(); k++) {
                    indiceValorAuxiliar = k;
                    strValorDocumento = memFile.getStringFieldRemoveEspCharsUpper(indiceValorAuxiliar);
                    strValorDocumento = strValorDocumento.replaceAll("\\.","").replaceAll(",","");

                    if (memFile.getStringFieldRemoveEspCharsUpper(indiceValorAuxiliar).contains("-")){
                        strValorDocumento = strValorDocumento.replaceAll("-","");
                    }
                    try{valorDocumento = Double.parseDouble(strValorDocumento)/100;}
                    catch (Exception vlrd) { valorDocumento = 0; }

                    if (valorDocumento > 0) {
                        ivalorDocumento = indiceValorAuxiliar;
                        inomeOrigem = indiceValorAuxiliar - 1;
                        break;
                    }

                }
            }

            logger.logInfo("Valor: "+valorDocumento);


            nomeOrigem = "";
            nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();
            // nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(2);
            // Soares

            if (memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).contains("-")) debitoCredito = "EXTRATO-DEBITO";
            else debitoCredito = "EXTRATO-CREDITO";

            logger.logInfo("StringValor: "+memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));
            logger.logInfo("DC: "+debitoCredito);

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(contLinhaExtratoInt), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            try {
                dbIOCont.insert("IO_EXTRATO")
                        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                        .param(chaveExtrato)
                        .param(codEmpresa)
                        .param(dataMovimento)
                        .param(nomePortador)
                        .param(nomeOrigem)
                        .param(nomeArquivo.toUpperCase())
                        .param(complemento02)
                        .param(valorDocumento)
                        .param(debitoCredito)
                        .param(0)
                        .execute();
            } catch (Exception sqlInsertException) {
                logger.logDebug("PROBLEMA NO INSERT");
                logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                continue;
            }
        } catch (Exception ex) {
        }

    }
    return true;
}



/*#############################################@ EXTRATO-CREDISAN-EXCEL @##############################################*/
public boolean readExtratoCredisanExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String portador			 = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

    int idataMovimento	= 0;
    int idocumento      = 1;
    int inomeOrigem		= 2;
    int ivalorDocumento	= 3;
    int icomplemento02	= 1;
    int icomplemento04	= 2;

    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = StringUtil.removeSpecialCharsToUC(jDados.optString("NOMEARQUIVO")).replaceAll(".XLSX","");

    while (memFile.hasNextLine()) {

        try {
            String line = memFile.nextLine();
            line = StringUtil.removeSpecialCharsToUC(line);

            logger.logDebug("MGFS -> "+memFile.getFieldsSize()+" - line -> "+line);

            if (memFile.getFieldsSize() == 3) {
                nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("HISTORICO")
                            .where("CHAVE = ? ")
                            .param(nomeOrigem)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                }
            }else{
                String dataString = memFile.getStringFieldRemoveEspCharsUpper(idataMovimento);
                if (!dataString.equals("")) {
                    String dataMovimentoAux	  = getCampoDate(dataString);
                    if (dataMovimentoAux.contains("/")) {
                        dataMovimento     = getCampoDate(dataString);
                        dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");

                    }
                    if (!dataString.equals("") && dataMovimento.equals("")) {
                        if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*") || dataString.matches ("[0-9]{5}.*")) {
                            String pattern = "";
                            if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {
                                if (dataString.matches ("[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}")) {
                                    pattern = "yyyy-MM-dd hh:mm:ss";
                                } else {
                                    pattern = "yyyy-MM-dd";
                                }
                                dataMovimento = getCampoDate(dataString, pattern, "dd/MM/yyyy");
                            } else {
                                try {
                                    pattern = "ddddd";
                                    dataString = cutString(dataString, 0, 5);
                                    Date dt  = DateUtil.stringToDate("01/01/1900", "dd/MM/yyyy");
                                    int datanum = Integer.parseInt(dataString);
                                    Calendar calSerial = Calendar.getInstance();
                                    calSerial.setTime(dt);
                                    calSerial.add(Calendar.DAY_OF_YEAR, datanum -2);
                                    dataMovimento = DateUtil.dateToString(calSerial.getTime(), "dd/MM/yyyy");
                                } catch (Exception dt2) {dataMovimento = "";}
                            }
                            if(!dataMovimento.equals("")) dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                        }
                    }
                }

                valorDocumento  = 0;
                try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                catch (Exception vlrd) { valorDocumento = 0; }

                if (valorDocumento == 0) continue;

                nomeOrigem = "";
                nomeOrigem = memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem);
                documento = "";
                documento = memFile.getStringFieldRemoveEspCharsUpper(idocumento);

                complemento02 = memFile.getStringField(icomplemento02);

                if ( valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
                if ( valorDocumento < 0 ) debitoCredito = "EXTRATO-DEBITO";

                valorDocumento = Math.abs(valorDocumento);

                nomePortador = nomeArquivo;

                contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

                chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

                // Buscar Extrato por Chave na Tabela IO_EXTRATO.
                extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                        .fields("CHAVE")
                        .param(chaveExtrato)
                        .queryUnique();

                // Inserir caso Chave nao encontrada.
                if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                    try {
                        dbIOCont.insert("IO_EXTRATO")
                                .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                                .param(chaveExtrato)
                                .param(codEmpresa)
                                .param(dataMovimento)
                                .param(documento)
                                .param(nomePortador)
                                .param(nomeOrigem)
                                .param(nomeArquivo.toUpperCase())
                                .param(complemento02)
                                .param(valorDocumento)
                                .param(debitoCredito)
                                .param(0)
                                .execute();
                    } catch (Exception sqlInsertException) {
                        logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                        continue;

                    }

                    // Atualizar Chave caso encontrada.
                } else {
                    try {
                        dbIOCont.update("IO_EXTRATO")
                                .fields("EXTRATOLIDO")
                                .where("CHAVE = ? ")
                                .param(0)
                                .param(chaveExtrato)
                                .execute();
                    } catch (Exception sqlUpdateException) {
                        logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                        continue;
                    }
                }

            }
        } catch (Exception readExtratoException) {
            logger.logError("Erro de leitura de Extrato Correntete Excel", readExtratoException);
        }
    }
    return true;
}



/*#############################################@ EXTRATO-CONTASIMPLES-EXCEL @##############################################*/
public boolean readExtratoContaSimplesExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
    return true;
}



/*#############################################@ EXTRATO-ORIGINAL-PDF @##############################################*/
public boolean readExtratoOriginalPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    JSONObject extratoEmpresa = new JSONObject();
    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padr?o EXTRATO - SOFISA
## ################################################################################################################## */
public boolean readExtratoSofisaExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


/* ##################################################################################################################
                                        Leitura de Planilha Padr?o EXTRATO - ABC
## ################################################################################################################## */
public boolean readExtratoAbcExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {


    return true;
}


//####################################################################################################################################
//									EXTRATO UNICRED PDF
//####################################################################################################################################



/*#############################################@ EXTRATO-EWALLY-EXCEL @##############################################*/
public boolean readExtratoEwallyExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


/*#############################################@ EXTRATO-BANCONORDESTE-EXCEL @##############################################*/
public boolean readExtratoBancoNordesteExcel(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-BMPMONEYPLUS-EXCEL @##############################################*/
public boolean readExtratoBMPMoneyPlusExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-STONE-EXCEL @##############################################*/
public boolean readExtratoStoneExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-JUNO-EXCEL @##############################################*/
public boolean readExtratoJunoDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-CRESOL-EXCEL @##############################################*/
public boolean readExtratoCresolExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


//#############################################@ EXTRATO-ORIGINAL-EXCEL @##############################################/

public boolean readExtratoOriginalExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    return true;
}


public boolean readExtratoPagbankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


public boolean readExtratoCresolPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONObject extratoEmpresa = new JSONObject();

    // logger.logInfo("ENTROU EXTRATO CRESOL PDF");

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";

    String documento         = "";
    String nomeOrigem        = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";
    String debitoCreditoAux  = "";


    String strValorDocumento = "";
    String contLinhaExtrato  = "";
    String valorDocAux       = "";
    String tipoExtrato       = "";
    String anoAux			 = ""; //
    String dataString		 = ""; //

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;
    int idataMovimento	= 0;
    int icomplemento02  = 2;
    int idocumento      = 1;
    int inomePortador	= -1;
    int inomeOrigem		= 1;
    int ivalorDocumento	= 3;




    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA");
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO");
    if(jDados.has("TIPOEXTRATO"))  tipoExtrato  = jDados.optString("TIPOEXTRATO");


    if(tipoExtrato.equals("001")){
        //nomePortador = "EXTRATO CRESOL - "+nomePortador;
        complemento01 = nomePortador.replaceAll("\\?","");
    }

    if(tipoExtrato.equals("002") && nomePortador.startsWith("202")){
        anoAux = cutString(nomePortador, 0, 4).trim();
        nomePortador = cutString(nomePortador, nomePortador.indexOf("CRESOL"));
    }

    boolean naoLeMais = false;

    while (memFile.hasNextLine()) {
        String line = memFile.nextLine();
        line = StringUtil.removeSpecialCharsToUC(line);

        // 202303-0026638 JWR descomentar caso der problema
        idataMovimento	= 0;
        idocumento      = 1;
        inomePortador	= -1;
        inomeOrigem		= 1;
        ivalorDocumento	= 3;
        // logger.logInfo("TIPOEXTRATO ->> " + tipoExtrato);

        if(tipoExtrato.equals("002")){
            idataMovimento	= 0;
            inomeOrigem		= 1;
            ivalorDocumento	= 2;
        }

        if (line.contains("SEGUNDO") && line.contains("TITULAR")) naoLeMais = true;

        if(line.contains("PERIODO") && line.contains("/20") && line.contains(":") && tipoExtrato.equals("001")) naoLeMais = true;

        if(tipoExtrato.equals("001") && line.contains("LANCAMENTOS") && line.contains("FUTUROS") && line.contains("PENDENTES")) naoLeMais = true;

        if (line.contains("DATA") && line.contains("AMENTO") && line.contains("IDENTIFICA") && line.contains("VALOR")) {
            naoLeMais = false;
            continue;
        }


        if (naoLeMais) continue;

        // if (memFile.getFieldsSize() == 1) {
        // logger.logInfo("DEU CERTO FOLHA " + nomeOrigem + " | " + memFile.getStringFieldRemoveEspCharsUpper(0));
        // logger.logInfo("QF2 " + line);

        // String nomeOrigemAux = nomeOrigem/*.replaceAll("TESTEJOTA", "") + " "*/ + " " + memFile.getStringFieldRemoveEspCharsUpper(0);



        // try {
        // dbIOCont.update("IO_EXTRATO")
        // .fields("HISTORICO")
        // .where("CHAVE = ? ")
        // .param(nomeOrigemAux)
        // .param(chaveExtrato)
        // .execute();
        // } catch (Exception sqlUpdateException) {
        // }
        // continue;
        // }


        try {
            // #Fabrica(2019-05-20)
            if(tipoExtrato.equals("001")){

                //2312-025337
                //if (line.contains("SALDO")) continue;
                if (line.contains("SALDO") && line.contains("ANTERIOR")) continue;

                if(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize() - 1).contains("*")) continue;

                try{
                    dataMovimento     = getDate(dataMovimento, idataMovimento, line, false,"", memFile, logger);
                    dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");


                }catch(Exception e){
                    // dataMovimento   = "";
                    // dataLote        = "";
                }

                if (dataMovimento.equals("")) continue;

                valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("+", "").replace("-", "").replace(".", "").replace(",", ".").replace("R$", "").replace("D", "").replace("C", "").trim();
                valorDocumento  = 0;
                try{valorDocumento = Double.parseDouble(valorDocAux);}
                catch (Exception vlrd) { valorDocumento = 0; }
                //try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                //catch (Exception vlrd) { valorDocumento = 0; }



                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
                // logger.logInfo("VALOR == "+memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));

                if(memFile.getFieldsSize() > 4){//memFile.getFieldsSize()
                    if(memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim().equals("D") ||
                            memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1).trim().equals("C")){
                        ivalorDocumento = memFile.getFieldsSize()-2;
                    } else {
                        ivalorDocumento = memFile.getFieldsSize()-1;
                    }
                    valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("+", "").replace("-", "").replace(".", "").replace(",", ".").replace("R$", "").replace("D", "").replace("C", "").trim();
                    valorDocumento  = 0;
                    try{valorDocumento = Double.parseDouble(valorDocAux);}
                    catch (Exception vlrd) { valorDocumento = 0; }

                    debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(memFile.getFieldsSize()-1);
                }

                if (valorDocumento == 0) continue;

                nomeOrigem      = "";
                //nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem) + " " + memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem+1);

                for(int i = inomeOrigem; i < ivalorDocumento; i++){
                    nomeOrigem += " " + memFile.getStringFieldRemoveEspCharsUpper(i);
                }

                nomeOrigem		= nomeOrigem.replaceAll("\"","").replaceAll("\\?","").trim();

                //if (nomeOrigem.contains("SALDO")) continue;

                complemento02		= memFile.getStringFieldRemoveEspCharsUpper(icomplemento02).replaceAll("\"","").trim();

                if(memFile.getFieldsSize() > 4){
                    complemento02 = "";
                }


                if (debitoCreditoAux.contains("C")) debitoCredito = "EXTRATO-CREDITO";
                if (debitoCreditoAux.contains("D")) debitoCredito = "EXTRATO-DEBITO";
            }

            if(tipoExtrato.equals("002")){

                if(memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).length() == 10 && memFile.getStringFieldRemoveEspCharsUpper(idataMovimento).contains("/")){
                    try{
                        dataMovimento     = getDate(dataMovimento, idataMovimento, line, false,"", memFile, logger);
                        dataLote		  = getCampoDate(dataMovimento, "", "yyyy-MM");
                    }catch(Exception e){
                        // dataMovimento   = "";
                        // dataLote        = "";
                    }
                }

                if(!memFile.getStringFieldRemoveEspCharsUpper(0).contains(anoAux) && anoAux.contains("202")){
                    try{
                        dataString = memFile.getStringFieldRemoveEspCharsUpper(0).replace("/202", "/") + anoAux;
                        dataMovimento = getCampoDate(dataString);
                    } catch(Exception e){

                    }
                }

                if (dataMovimento.equals("")) continue;

                valorDocAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento).replace("+", "").replace("-", "").replace(".", "").replace(",", ".").replace("R$", "").trim();
                valorDocumento  = 0;
                try{valorDocumento = Double.parseDouble(valorDocAux);}
                catch (Exception vlrd) { valorDocumento = 0; }
                //try{valorDocumento = memFile.getDoubleField(ivalorDocumento);}
                //catch (Exception vlrd) { valorDocumento = 0; }

                if (valorDocumento == 0) continue;

                debitoCreditoAux = memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento);
                // logger.logInfo("VALOR == "+memFile.getStringFieldRemoveEspCharsUpper(ivalorDocumento));

                nomeOrigem      = "";
                nomeOrigem		= memFile.getStringFieldRemoveEspCharsUpper(inomeOrigem).replaceAll("\"","").replaceAll("\\?","").trim();

                if (nomeOrigem.contains("SALDO DO DIA")) continue;

                if (debitoCreditoAux.contains("+")) debitoCredito = "EXTRATO-CREDITO";
                if (debitoCreditoAux.contains("-")) debitoCredito = "EXTRATO-DEBITO";

                //logger.logInfo("Lancamento: "+dataMovimento+" - "+valorDocumento+" - "+nomeOrigem+" - "+debitoCredito);


            }

            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");

            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;

            if(nomePortador.length() > 100) nomePortador = cutString(nomePortador, 0 , 100);
            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
                    .fields("CHAVE")
                    .param(chaveExtrato)
                    .queryUnique();

            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
                    dbIOCont.insert("IO_EXTRATO")
                            .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                            .param(chaveExtrato)
                            .param(codEmpresa)
                            .param(dataMovimento)
                            .param(nomePortador)
                            .param(nomeOrigem)
                            .param(nomeArquivo.toUpperCase())
                            .param(complemento02)
                            .param(valorDocumento)
                            .param(debitoCredito)
                            .param(0)
                            .execute();
                } catch (Exception sqlInsertException) {
                    logger.logError("Error inserting to IO_EXTRATO", sqlInsertException);
                    continue;
                }
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                            .fields("EXTRATOLIDO")
                            .where("CHAVE = ? ")
                            .param(0)
                            .param(chaveExtrato)
                            .execute();
                } catch (Exception sqlUpdateException) {
                    logger.logError("Error updating IO_EXTRATO", sqlUpdateException);
                    continue;
                }
            }
        } catch (Exception ex) {
        }
    }
    return true;
}


public boolean readExtratoC6BankPDF(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


//####################################################################################################################################
//									EXTRATO BRB PDF
//####################################################################################################################################

public boolean readExtratoBRBPDF(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    return true;
}


/*#############################################@ EXTRATO-TOPAZIO-EXCEL @##############################################*/
public boolean readExtratoTopazioExcel(MemoryFile memFile, String nomePortador, JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {



    return true;
}

