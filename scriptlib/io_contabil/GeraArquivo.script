//######################################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
//                             Implementa o metodo validaDataMovimento.                          //
///////////////////////////////////////////////////////////////////////////////////////////////////
public String validaDataMovimento(String dataMovimento, String ERP, String contabilidade) throws Exception {
    Date dt = new Date();
    boolean converter = false;
    contabilidade = contabilidade.toUpperCase();

    //if (ERP.contains(".")) ERP = ERP.substring(ERP.indexOf(".")+1).trim();

    //  if Testa SCI pois sua data ÃƒÂ© em formato inverso;
    //  teste("/") ÃƒÂ© para que integraÃƒÂ§ÃƒÂµes SCI posteriores a 08/06/16 nao tenham problemas;
    //  teste ERP ("") para nao precisar exportar todas as rotas antigas.

    if (((!ERP.equals("SCI") && !ERP.equals("SCI UNICO")) || dataMovimento.contains("/")) && !ERP.equals("")){
        if (dataMovimento.length() > 8){                                                //dd/MM/yyyy
            dt = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
        }else if (dataMovimento.length() == 8 && dataMovimento.contains("/")){          //dd/MM/yy
            dt = DateUtil.stringToDate(dataMovimento, "dd/MM/yy");
        }else if (dataMovimento.length() == 8 && !dataMovimento.contains("/")){         //ddMMyyyy
            dt = DateUtil.stringToDate(dataMovimento, "ddMMyyyy");
        }else if (dataMovimento.length() < 8 && !dataMovimento.contains("/")){          //ddMMyy
            dt = DateUtil.stringToDate(dataMovimento, "ddMMyy");
        }
        converter = true;
    }
     if(converter){
        //////////////////////////////////////////////////////////////
        /////////   SCI Unico e SCI = yyyyMMdd  //////////////////////
        if (ERP.equals("SCI") || ERP.equals("SCI UNICO")){
            dataMovimento = DateUtil.dateToString(dt, "yyyyMMdd");
         }
		//////////////////////////////////////////////////////////////
        /////////      CONSISANET = yyyyMMdd    //////////////////////
		if (ERP.equals("CONSISANET")){
            dataMovimento = DateUtil.dateToString(dt, "yyyyMMdd");
        }
        /////////   Contmatic = dd/MM   //////////////////////
        if (ERP.equals("CONTMATIC")){
            dataMovimento = DateUtil.dateToString(dt, "dd/MM");
        }
        //////////////////////////////////////////////////////////////
        ////////    QUESTOR (inclusive Organo)= dd/MM/yy   ///////////

        if (ERP.equals("QUESTOR") && !contabilidade.contains("LUZ") && !contabilidade.contains("OLIVEIRA")){
            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yy");
        }
        //////////////////////////////////////////////////////////////
        ////    DOMINIO (inclusive Marlian)  e  WK = dd/MM/yyyy   ////
        if (ERP.equals("DOMINIO") || ERP.equals("WK SOFTWARE") || ERP.equals("DATACEMPRO")){
            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
        }
        //////////////////////////////////////////////////////////////
        ////////////    CORDILHEIRA  e  JB = ddMMyyyy   //////////////
        if (ERP.equals("CORDILHEIRA") || ERP.equals("JB SOFTWARE") || ERP.equals("NBS")){
            dataMovimento = DateUtil.dateToString(dt, "ddMMyyyy");
        }
        //////////////////////////////////////////////////////////////
        ////////    luzoliveira (questor !PADRAO)   = ddMMyy    //////
        if (ERP.equals("QUESTOR") && contabilidade.contains("LUZ") && contabilidade.contains("OLIVEIRA")){
            dataMovimento = DateUtil.dateToString(dt, "ddMMyy");
        }
        if (ERP.equals("QUESTOR") && contabilidade.contains("ESCRITORIOGOMES")){
            dataMovimento = DateUtil.dateToString(dt, "ddMMyyyy");
        }
        /*if (ERP.equals("QUESTOR") && contabilidade.contains("SECEA")){
            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
        }*/
		if (ERP.equals("QUESTOR") && contabilidade.contains("AUDITAR")){
            dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
        }
    }
     return dataMovimento;
}

/*

{
    "Authorization": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjMzMzg2MzcsInVzZXJfbmFtZSI6ImFkbWluQGltZXJzYW8uY29tLmJyIiwiYXV0aG9yaXRpZXMiOlsiUkVBRCIsIkFETUlOIiwiV1JJVEUiXSwianRpIjoiYmRmM2Q1MTUtODU0MC00MTMzLWI1YmItZDgwNDRkYTNiNjY3IiwiY2xpZW50X2lkIjoiOWFlMmIzZTcxYjhlZTlhMDgxMGIiLCJzY29wZSI6WyJyZWFkIiwid3JpdGUiLCJ0cnVzdCJdfQ.Gdh02aFuzZNv4Ve2eMdTBAy5gwfIk4azX3JMhhK9W8YTEaoENjJUj3bu200rhdU1ZgZiszht3Uq_-NqFiHrKhUwIXZAZdAc549ROB6XxHe196ehjCLRYN3W5ZfiKTKhXpQI_QKWWZGUhB4uVR1EcNbh8B2ZzdGx4AwhL1VBs46FIrJaz-shvmAVBJb_Gd0gtHBguMQuPZ-kkpfHsE0h5wdTd4fZk3Wby9fpY30rNwhuDxtEY6Q0xUGMqubVq5BLDclYvNPdz5XhRX1BEXGqBnlnJH5w_yTqh6PO89hyzKt3Gw31K30ZUHlJNuM35zq3c0D7ZlzYeUknAWm55sD862ZFLWfpLBv8UazojyoqTzRl4wyzkicmvM8porRWP3db5IOXj5IuIoQwpt_7spqSkhgoY3hMVqiRoVepectscVQ6RkJgy843H7iS7CUsa06d9NJl5tF3nhPg1DNyxI2SWX8esGIdFiHuPHfwh0rYVASW0D1hR4DEaIoCJ2zczk8L2LbjesuGMgqfuz5LLfdmgzWj69nYbyy00cMPWzcVFKSRqFllJuohnYnCtMty-3kRwuawVV0uPWqxpm4QXaWGY2wkmiYwBJ6TjbDOIlm6JwpMw4FUT9afaoqg5Vf7MX2unWloQ89apPRPmDVEUCZViXQ6fh-qyKGoCfcR4s_uSHNg",
    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhcHBfaWQiOiIzMXM0MnZwdCIsImFwcF9oYXNoIjoiNjJTXC84aThiR2lZaWFLdGMzM3IxWmVGeHhFU1g4RUllMnA5R3JFSnY5NmI3T1cyZ3FXaVlWcE1vSmZUUXI4OXIiLCJleHAiOjE2OTM0Mzk2NDMsInVpZCI6IjNuanVvMnNlIiwidXVpZCI6IjRDNzY4NzI0LUQzMEYtNEM0Ni05NzEzLTg5MzIwMDJBODQ1RiIsImVtYWlsIjoib3R0aW1penphQG9taWUuY2xvdWQifQ.KEAMN4spAVwYVWIj6Pp0P7iLBjMGxx94PR68aroYpYg",
    "cnpj": "22986033000195",
    "contabilidade": "07944284000113",
    "data": "15/09/2022",
    "valor": 200,
    "partidas": [
        {
            "codigoReduzido": "4139",
            "d_c": "D",
            "valor": 100,
            "codigoHp": "",
            "historico": "Historico do Lancamento",
            "razaoSocial": "Ottimizza Sistemas Contabeis"
        },
        {
            "codigoReduzido": "1007",
            "d_c": "C",
            "valor": 100,
            "codigoHp": "",
            "historico": "Historico do Lancamento",
            "razaoSocial": "Ottimizza Sistemas Contabeis"
        }
    ]
}

*/
 
public JSONObject createItemsToCloud(JSONObject recMov, JSONObject recAux) { 	//#20210126
	
	JSONObject bodyObject	= new JSONObject();
	String contaDebito		= recMov.optString("CONTADEBITO");
	String contaCredito		= recMov.optString("CONTACREDITO");
	String historico		= recMov.optString("HISTORICO");
	String dataMovimento	= recMov.optString("DATAMOVIMENTO");
	String tipoLancamento	= recMov.optString("TIPOLANCAMENTO");
    String tipoMovimento	= recMov.optString("TIPOMOVIMENTO");
	
	String cnpjCont			= recAux.optString("cnpjContabilidade");
	String cnpjEmpresa		= recAux.optString("cnpjEmpresa");
	String erpContabil		= recAux.optString("erpContabil");
	String codigoErp		= recAux.optString("codigoErp");
	String lote				= recAux.optString("lote");
	
	dataMovimento			= getCampoDate(dataMovimento, "", "yyyy-MM-dd");

	if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
		String contaInv		= contaDebito.replaceAll("INVERTE","");
		contaDebito			= contaCredito.replaceAll("INVERTE","");
		contaCredito		= contaInv.replaceAll("INVERTE","");
	} else {
		if (historico.contains("INVERTECONTA")) {
			String contaInv	= contaDebito;
			contaDebito		= contaCredito;
			contaCredito	= contaInv;
		}
	}
	
	contaDebito 	= contaDebito.replaceAll("T","").replaceAll("t","").trim();
	contaCredito	= contaCredito.replaceAll("T","").replaceAll("t","").trim();
	
	historico = historico.replaceAll("INVERTECONTA","").trim();
	
	for (int xy=0;xy<20;xy++) 
		historico	= historico.replaceAll("  "," ");
	
	String codigoCentroPort	= "";
	if (historico.contains("CENTROPORT:")) {
		codigoCentroPort	= historico.substring(historico.indexOf("CENTROPORT:")+11).trim();
		historico			= historico.substring(0,historico.indexOf("CENTROPORT:")).trim();
	}
	String codigoFilial		= "";
	if (historico.contains("Filial:")) {
		codigoFilial		= cutString(historico, "Filial:", " ");
		historico			= historico.substring(0,historico.indexOf("Filial:")).trim();
	}
	String codigoHistorico	= "0";
	if (historico.contains("CodigoHistorico:")) {
		codigoHistorico		= historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
		historico			= historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
	}
	if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
	if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
	if (historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
	if (historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
	if (historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
	if (historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

	bodyObject.put("cnpjContabilidade",	cnpjCont);
    bodyObject.put("cnpjEmpresa",		cnpjEmpresa);
    bodyObject.put("dataMovimento",		dataMovimento);
    bodyObject.put("contaDebito",		contaDebito);
    bodyObject.put("contaCredito",		contaCredito);
    bodyObject.put("tipoLancamento",	tipoLancamento);
    bodyObject.put("tipoMovimento",		tipoMovimento);
    bodyObject.put("codigoHistorico",	codigoHistorico);
    bodyObject.put("historico",			historico);
    bodyObject.put("erpContabil",		erpContabil);
    bodyObject.put("codigoErp",			codigoErp);
    bodyObject.put("lote",				lote);
	
	return bodyObject;
}

public JSONArray sendToCloud(JSONArray toCloud, JSONObject recAux, int i, LancamentosApi apiWeb, InoutLogger logger) {	//#20210126
	if (toCloud.length() > 0 && ((i > 0 && i % 100 == 0) || i < 0)) {	// i < 0 pra mandar o que nao fecha 100 (restante)

		JSONObject objCloud = new JSONObject();
		objCloud.put("cnpjContabilidade",	recAux.optString("cnpjContabilidade"));
		objCloud.put("cnpjEmpresa", 		recAux.optString("cnpjEmpresa"));
		objCloud.put("arquivos",			toCloud);
		
		try {
			String uriIntegrador = String.format("%s%s",LancamentosApi.SERVER_INTEGRADOR, IMPORTAR_GERA_ARQUIVO);
			String response01	 = apiWeb.genericPost(uriIntegrador, objCloud, logger);
		} catch (Exception et) { 
			logger.logDebug("Erro em 'post' pra integrador "+et.getMessage());
		}
		toCloud = new JSONArray();
	}
	return toCloud;
}



public JSONArray sendToMeuIntegrador(JSONObject recAux,   LancamentosApi apiWeb, InoutLogger logger) {	//#20210126

	 
	try {
		
		
		//logger.logDebug("recAux = " + recAux.toString());


		// LancamentosApi.SERVER_INTEGRADOR 
		String uriIntegrador = String.format("%s%s","https://integrador-contabil.herokuapp.com", "/api/v1/lancamentos_espelho");
		String response01	 = apiWeb.genericPost(uriIntegrador, recAux, logger);
		
 		
		
	} catch (Exception et) { 
		logger.logDebug("Erro em 'post' pra integrador "+et.getMessage());
	}
	 
 	JSONArray toCloud = new JSONArray();
 	return toCloud;
}


public JSONArray sendToCloudONEFLOW(JSONObject objCloud, String tokenOneFlow, String token, InoutLogger logger) {	//#20210126
 
	 
	
	try {
		String uriIntegrador = String.format("%s%s","https://rest.oneflow.com.br", "/api/lancamentoscontabeis");
		String response01	 = genericPostONEFLOW(uriIntegrador, objCloud, tokenOneFlow, logger);
	} catch (Exception et) { 
		logger.logDebug("Erro em 'post' pra integrador "+et.getMessage());
	}
	JSONArray toCloud = new JSONArray();
 	return toCloud;
}



//#################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
//                Implementa o metodo GeraArquivo do EndpointB. (@GeraArquivoPadrao)             //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoPadrao(Object dataIn, InoutLogger logger) throws Exception {
 
    // Depaula -> Questor
    // Marlian -> DominioPipe
    // Maxima -> Dominio
	
	//xTeste
	logger.logDebug("Entrou 1");

    String[] erpDominio = {"Anexo", "Ativacontabil", "Colaco", "Nossoescritorio", "Uppercontabil"};
    String[] erpQestor = {"Allfisco", "Duatto", "Eniltec", "Epoca", "Escritorioprudente", "Igo", "Sistemamaringa"};
    String[] erpQuestorCNPJ = {"Escontec", "Escritoriogomes"};
    String[] erpQuestorFiscal = {""};

    List list = (List) dataIn;
    FilaInout filaInout = null;

    String  nomeContabilidade = "";
    String  erpContabilidade  = "";
    String  codEmpresa        = "";
    String  nomeEmpresa       = "";
    String  lote              = "";
	int     nLote             = 0;

    try {
        // Percorre a lista de objetos
        for (int i=0; i < list.size(); i++) {

            // Obtem objeto de FilaINout
            filaInout = (FilaInout) list.get(i);
            String message = filaInout.getMessage();
            JSONObject msg = new JSONObject(message);

            nomeContabilidade   = msg.optString("NOMECONTABILIDADE");
            codEmpresa          = msg.optString("CODEMPRESA");
            nomeEmpresa         = msg.optString("NOMEEMPRESA");
            lote                = msg.optString("LOTE");
			nLote               = i + 1;
			
			logger.logInfo("GERA ARQUIVO PADRAO = "+msg);

            // Carrega o arquivo '.properties' da contabilidade
            SysProperties properties  = SysProperties.getInstance();
            properties.load(String.format("contabil/%s/contabil.properties", nomeContabilidade));

            erpContabilidade  = properties.get("ERP_CONTABILIDADE");
			String erpEmpresa = properties.get(nomeEmpresa.toUpperCase() + "_ERP_EMPRESA");
			
			logger.logInfo("erpContabilidade dps -> " + erpContabilidade);
			
 			if (erpEmpresa != null && !erpEmpresa.equals("")) erpContabilidade = erpEmpresa;
			
			logger.logDebug("nome erpContabilidade -> " + nomeContabilidade);
			logger.logDebug("erpContabilidade dps -> " + erpContabilidade);
           
			// Como GeraArquivo.script possui apenas um metodo GeraArquivoSci
            // Ele verifica se nome do metodo contem nome erp,
            // Se erp for "SCI UNICO" ele nao ira encontrar, pois metodo nao possui o nome unico
            if(erpContabilidade.toUpperCase().contains("SCI") && erpContabilidade.toUpperCase().contains("UNICO")) {
                erpContabilidade = "SCIUNICO";
            }
            // Como GeraArquivo.script possui apenas um metodo GeraArquivoWk
            // Se erp for "WK SOFTWARE" ele nao ira encontrar, pois metodo nao possui o nome SOFTWARE
            if(erpContabilidade.toUpperCase().contains("WK") && erpContabilidade.toUpperCase().contains("SOFTWARE")) {
                erpContabilidade = "WK";
            }

            // if (nomeContabilidade.toUpperCase().contains("CENTRALCONTABIL") && (nomeEmpresa.toUpperCase().contains("BLUEVIX") || nomeEmpresa.toUpperCase().contains("FAVORITADOBRASIL") || nomeEmpresa.toUpperCase().contains("KERNELIMPORTACAO"))) erpContabilidade = "ATHENAS";
			
			// if (nomeEmpresa.toUpperCase().contains("TOPABRASIVOS") && nomeContabilidade.toUpperCase().contains("MEIRA")) erpContabilidade ="QUESTOR";
 
			boolean methodFound = false;
            try {
                JSONObject jDadosLote = new JSONObject();

                jDadosLote.put("NOMECONTABILIDADE", nomeContabilidade);
                jDadosLote.put("CODEMPRESA", codEmpresa);
                jDadosLote.put("NOMEEMPRESA", nomeEmpresa);
                jDadosLote.put("LOTE", lote);
				if(erpContabilidade.contains("MEGAPROG")){
                    jDadosLote.put("NUMLOTE", String.valueOf(nLote));
                }
				if (msg.has("HISTORICO")) jDadosLote.put("HISTORICO", msg.optString("HISTORICO"));
				
				// logger.logDebug("ERP DA CONTABILIDADE ==>> "+erpContabilidade+" - Contabilidade ==>> "+nomeContabilidade);
 
                boolean executou = false;
				
				if (erpContabilidade.contains("CONTABIT")) {
                    GeraArquivoCONTABIT(jDadosLote, logger);
                    continue;
                }
				
                if (erpContabilidade.contains("QUESTOR")) {
                    for (int xx= 0 ; xx<erpQestor.length;xx++) {
                        if (nomeContabilidade.equals(erpQestor[xx])) {
                            GeraArquivoQestor(jDadosLote, logger);
                            executou = true;
                        }
                    }
                    if (executou) continue;

                    for (int xx= 0 ; xx<erpQuestorCNPJ.length;xx++) {
                        if (nomeContabilidade.equals(erpQuestorCNPJ[xx])) {
                            GeraArquivoQuestorCNPJ(jDadosLote, logger);
                            executou = true;
                        }
                    }
                    if (executou) continue;
                    GeraArquivoQuestor(jDadosLote, logger);
                    continue;
                }
				
				//#2304-003551. Novo modelo de exportação
				if (erpContabilidade.contains("DOMINIO2")) {
                    GeraArquivoDominioPipeUnico(jDadosLote, logger);
                    continue;
                }

                if (erpContabilidade.contains("DOMINIO")) {					
					
                    for (int xx= 0 ; xx<erpDominio.length;xx++) {
                        if (nomeContabilidade.equals(erpDominio[xx]) || (lote.contains("OTFOLHA") && nomeContabilidade.toUpperCase().contains("CONSULTAB"))) {
                            GeraArquivoDominio(jDadosLote, logger);
                            executou = true;
                        }
                    }
                    if (executou) continue;
                    GeraArquivoDominioPipe(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("SCI") && erpContabilidade.contains("UNICO")) {
                    GeraArquivoSciUNICO(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("SCI") && !erpContabilidade.contains("UNICO")) {
                    GeraArquivoSci(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("LEDWARE")) {
                    GeraArquivoLedware(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("CONTABYTE")) {
                    GeraArquivoCONTABYTE(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("CALIMA")) {
                    GeraArquivoCALIMA(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("DPCOMP")) {
                    GeraArquivoDPComp(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("MEGAPROG")) {
                    GeraArquivoMEGAPROG(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("PROSIS")     || 
                    erpContabilidade.contains("FXSISTEMAS") || 
                    erpContabilidade.contains("FXSISTEMAS-PROSIS")) {
                    GeraArquivoPROSIS(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("Glandata")) {
                    GeraArquivoGlandata(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("ONEFLOW")) {
                    GeraArquivoONEFLOW(jDadosLote, logger);
                    continue;
                }
				
				if (erpContabilidade.contains("SAAM")) {
                    GeraArquivoSAAM(jDadosLote, logger);
                    continue;
                }

                if (erpContabilidade.contains("PROSOFT")) {
                    GeraArquivoProsoft(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("PHSOFTWARE")) {
                    GeraArquivoPhsoftware(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("WK")) {
                    GeraArquivoWk(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("CONTMATIC")) {
                    GeraArquivoContmatic(jDadosLote, logger);
                    continue;
                }
				
				if (erpContabilidade.contains("ENGENHO")) {
                    GeraArquivoEngenho(jDadosLote, logger);
                    continue;
                }

                if (erpContabilidade.contains("MAKROWEB")) {
                    GeraArquivoMakroweb(jDadosLote, logger);
                    continue;
                }

				if (erpContabilidade.contains("ASTREA")) {
                    GeraArquivoASTREA(jDadosLote, logger);
                    continue;
                }

                if (erpContabilidade.contains("MXM")) {
                    GeraArquivoMXM(jDadosLote, logger);
                    continue;
                }

                if (erpContabilidade.contains("FOLHAMATIC")) {
                    GeraArquivoFolhamatic(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("CORDILHEIRA")) {
                    GeraArquivoCordilheira(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("ALTERDATA")) {
                    GeraArquivoAlterdata(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("MEGABIT")) {
                    GeraArquivoMegabitContabil(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("XTDC")) {
                    GeraArquivoXTDC(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("ASPLAN2")) {
                    GeraArquivoASPLAN2(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("SULPROG")) {
                    GeraArquivoSULPROG(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("TRON")) {
                    GeraArquivoTRON(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("JBSOFTWARE")) {
                    GeraArquivoJBSOFTWARE(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("SIBRAX")) {
                    GeraArquivoSIBRAX(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("LIDER")) {
                    GeraArquivoLIDER(jDadosLote, logger);
                    continue;
                }
				 
                if (erpContabilidade.contains("SIESCON")) {
                    GeraArquivoSIESCON(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("INFOBANC")) {
                    GeraArquivoINFOBANC(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("FORTES")) {
                    GeraArquivoFORTES(jDadosLote, logger);
                    continue;
                }if (erpContabilidade.contains("SIEC")) {
                    GeraArquivoSIEC(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("NASAJON")) {
                    GeraArquivoNASAJON(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("DATACEMPRO")) {
                    GeraArquivoDATACEMPRO(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("CUCA-FRESCA")) {
                    GeraArquivoCUCAFRESCA(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("ATHENAS")) {
                    GeraArquivoATHENAS(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("DEXION")) {
                    GeraArquivoDEXION(jDadosLote, logger);
                    continue;
                }	
				if (erpContabilidade.contains("MAKROSYSTEM")) {
                    GeraArquivoMAKROSYSTEM(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("CONSISANET")) {
                    GeraArquivoCONSISANET(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("DYAD")) {
                    GeraArquivoDYAD(jDadosLote, logger);
                    continue;
                }
				if (erpContabilidade.contains("NETSPEED")) {
					// logger.logDebug("UEPA?NET SPEED?");
                    GeraArquivoNETSPEED(jDadosLote, logger);
                    continue;
                }
				/*if (erpContabilidade.contains("FXSISTEMAS")) {
					// logger.logDebug("UEPA?FX PROSIS?");
                    GeraArquivoFXPROSIS(jDadosLote, logger);
                    continue;
                }*/
				if (erpContabilidade.equals("TOTVS")) {
                    // logger.logDebug("UEPA?FX PROSIS?");
                    GeraArquivoTOTVS(jDadosLote, logger);
                    continue;
                }
                if (erpContabilidade.contains("TOTVS2")) {
                    // logger.logDebug("UEPA?FX PROSIS?");
                    GeraArquivoTOTVS2(jDadosLote, logger);
                    continue;
                }
				 if (erpContabilidade.contains("MODULOS")) {
                    // logger.logDebug("UEPA?FX PROSIS?");
                    GeraArquivoMODULOS(jDadosLote, logger);
                    continue;
                }

                // Classe Principal SC
                Class<?> sc = this.getClass();

                // Instancia da Classe Principal
                Object scInstance = sc.newInstance();

                // Get all Methods from superclass 'SC'.
                java.lang.reflect.Method[] methods = sc.getDeclaredMethods();

                // ForEach Method from superclass.
                for(java.lang.reflect.Method method : methods) {
                    String methodName = method.getName();

                    if(erpContabilidade.toUpperCase().contains("QUESTOR")) {
                        if(methodName.toUpperCase().contains("QESTOR")) {
                            if(java.util.Arrays.asList(erpQestor).contains(nomeContabilidade)) {
                                methodFound = true;
                            } else {
                                continue;
                            }
                        }
                    }

                    if(methodName.toUpperCase().contains(erpContabilidade.toUpperCase())) {
                        // Casos Especiais quando ERP Contabilidade -> @Questor.
                        if(methodName.toUpperCase().contains("QUESTOR")) {
                            if(methodName.toUpperCase().contains("FISCAL")) {
                                if(java.util.Arrays.asList(erpQuestorFiscal).contains(nomeContabilidade)) {
                                    methodFound = true;
                                } else {
                                    continue;
                                }
                            } else if(methodName.toUpperCase().contains("CNPJ")) {
                                if(java.util.Arrays.asList(erpQuestorCNPJ).contains(nomeContabilidade)) {
                                    methodFound = true;
                                } else {
                                    continue;
                                }
                            } else {
                                if(java.util.Arrays.asList(erpQuestorCNPJ).contains(nomeContabilidade) ||
                                   java.util.Arrays.asList(erpQuestorFiscal).contains(nomeContabilidade)||
                                   java.util.Arrays.asList(erpQestor).contains(nomeContabilidade)) {
                                    continue;
                                } else {
                                    methodFound = true;
                                }
                            }
                            // Casos Especiais quando ERP Contabilidade -> @Dominio.
                        } else if(methodName.toUpperCase().contains("DOMINIO")) {
                            if(methodName.toUpperCase().contains("PIPE")) {


                                if(!java.util.Arrays.asList(erpDominio).contains(nomeContabilidade)) {
                                    methodFound = true;
                                } else {
                                    continue;
                                }
                            } else if(!methodName.toUpperCase().contains("PIPE")) {
                                if(java.util.Arrays.asList(erpDominio).contains(nomeContabilidade)) {
                                    methodFound = true;
                                } else {
                                    continue;
                                }
                            }
                        }else {
                            methodFound = true;
                        }
                    }

                    if(methodFound) {
                        // Invoca metodo GeraArquivo do ERP da Contabilidade.
                        logger.logDebug(String.format("Invoking method %s...", method.getName()));
                        method.invoke(scInstance, jDadosLote, logger);
                        break;
                    }
                }
            } catch (Exception ee) {
                logger.logError("Error trying to invoke method 'GeraArquivo'.", ee);
            }

        }
    } catch (Exception eee) {
        logger.logError("Error GeraArquivo ", eee);
    }
}

// ################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Dominio).         //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoDominio(JSONObject jDadosLote, InoutLogger logger) throws Exception {
	// logger.logDebug("ENTROUU PIPE DOMINIO");
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento = "";
    String codEmpresa = "";
    String notafiscal = "";
    String tipoMovimento = "";
    String dataMovimento = "";
    String contaDebito = "";
    String contaCredito = "";
    String valorLiquidacao = "";
    String valorDocumento = "";
    String documento = "";
    String nomeOrigem = "";
    String centroCusto = "";
    String valorJuros = "";
    String valorDesconto = "";
    String valorMulta  = "";
    String historico = "";
    String naturezaContabil = "";
    String tipoLancamento = "";
    String nomeEmpresa = "";
    String classificacao = "";
    String ERP = "";                            //  <---<

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String linha = " ";
        int indice   = 0;

        logger.logDebug("MENSAGEM " + codEmpresa  + " "  +  jDadosLote.toString());
        
        int contador = 0;
        String classifica = " ";

        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");
        //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);

        int totalRegistros = 0;

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
			
 
            for (int t=0; t<records.length(); t++) {

                JSONObject recMov = records.optJSONObject(t);
				
				// if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//////toCloud.put(createItemsToCloud(recMov, recAux));
					// //toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				// }
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");

                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;

                String codigoHistorico = StringUtil.leftPad("0", 7, "0");
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                String dataMovimentoOriginal = dataMovimento;
                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                historico = historico.replaceAll(",","\\.").replaceAll(";","");

                if(classificacao.equals("LOTE_ENCERRADO"))continue;
                if(contaCredito.contains("IGNOR"))continue;
                if(contaDebito.contains("IGNOR"))continue;

                classificacao = classificacao.substring(0,16).trim();

                String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");

                // ITEM CRIADO PARA TRATAR QUANDO EM UMA PLANILHA VEM FILIAIS DA EMPRESA
                // E TEMOS QUE SEPARAR O TXT POR EMPRESA, APESAR DE VIR EM UMA UNICA PLANILHA OS DADOS.
                // A SAIDA FOI COLOCAR NO LOTE O CNPJ DA FILIAL E EXPORTAR AQUI POR CNPJ DA FILIAL.
                if (loteMovimento.toUpperCase().contains("_CNPJ FILIAL")) {
                    cnpjEmpresa = loteMovimento.substring(loteMovimento.indexOf("_CNPJ FILIAL")+13,loteMovimento.indexOf("_CNPJ FILIAL")+27);
                }


                //  Busca o mes e ano de procecessamento no nome do lote para exibir o periodo de fechamento do cliente
                String dataAno = loteMovimento.substring(loteMovimento.lastIndexOf("_" + tipoLancamento)-7,loteMovimento.lastIndexOf("_" + tipoLancamento)-3);
                String dataMes = loteMovimento.substring(loteMovimento.lastIndexOf("_" + tipoLancamento)-2,loteMovimento.lastIndexOf("_" + tipoLancamento));

                Date dtFinal = DateUtil.stringToDate("01/" + dataMes + "/" + dataAno, "dd/MM/yyyy");

                Calendar cal = Calendar.getInstance();
                cal.setTime(dtFinal);
                String ultimoDia = String.valueOf(cal.getActualMaximum(Calendar.DAY_OF_MONTH));
                String dataInicial = "01/" + dataMes + "/" + dataAno;
                String dataFinal   = ultimoDia + "/" +  dataMes + "/" + dataAno;

                if (contador == 0) {
                    linha = "01" + StringUtil.leftPad(codEmpresa, 7, "0") + cnpjEmpresa + dataInicial + dataFinal + "N0500000018";
                    txt.append(linha);
                    txt.append(rn);
                    classifica = " ";
                }

                if (!classifica.equals(classificacao)) {
                    logger.logDebug("CLASSIFICACAO:" + classifica + ":" + classificacao);
                    contador++;
                    String sContador = String.valueOf(contador);
                    linha = "02" + StringUtil.leftPad(sContador, 7, "0") + classificacao.substring(0,1) + dataMovimento + "GERENTE" + "";
                    txt.append(linha);
                    txt.append(rn);
                }

                classifica = classificacao;

                String valorFinal = valorLiquidacao;
                String sContador  = String.valueOf(contador);


                if (!classificacao.startsWith("X") && tipoLancamento.equals("PAGAR")) {
                    if (tipoMovimento.equals("CTBPORT")) contaDebito  = "0";
                    if (tipoMovimento.equals("CTB"))     contaCredito = "0";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        contaCredito = "0";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        contaCredito = "0";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        contaDebito = "0";
                        valorFinal   = valorDesconto;
                    }
                }


                if (!classificacao.startsWith("X") && tipoLancamento.equals("RECEBER")) {
                    if (tipoMovimento.equals("CTBPORT")) contaCredito  = "0";
                    if (tipoMovimento.equals("CTB"))     contaDebito = "0";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        contaDebito = "0";
                        valorFinal  = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        contaDebito = "0";
                        valorFinal  = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        contaCredito = "0";
                        valorFinal   = valorDesconto;
                    }
                }

                String valorResumoTxt = valorFinal;
                valorFinal   = valorFinal.replaceAll("\\,", "");
                valorFinal   = valorFinal.replaceAll("\\.", "");

                contaCredito = StringUtil.leftPad(contaCredito, 7, "0");
                contaDebito  = StringUtil.leftPad(contaDebito, 7, "0");

                linha = "03" + StringUtil.leftPad(sContador, 7, "0") + StringUtil.leftPad(contaDebito, 7, "0") +
                    StringUtil.leftPad(contaCredito, 7, "0") + StringUtil.leftPad(valorFinal, 15, "0") +
                    StringUtil.leftPad(codigoHistorico, 7, "0") + StringUtil.rightPad(historico, 512, " ") + StringUtil.leftPad(" ", 100, " ");
                txt.append(linha);
                txt.append(rn);


                String descricaoDebito = "";
                String descricaoCredito = "";

                if (!tipoMovimento.contains("CC")) {
                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebitoOriginal)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCreditoOriginal)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorResumoTxt + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }

                logger.logDebug("* PASSO 1 - TOTAL REGISTROS");
                if(!tipoMovimento.contains("PORT")) totalRegistros++;

            } //For arrayMov
			
			// if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				// //toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			// }
            
			linha = "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999";
            txt.append(linha);
            txt.append(rn);

            // Gravacao do Arquivo TXT
            if (totalRegistros > 0) {

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************

                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logDebug("*** PASSO 3 - CATCH BD");
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

//#################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@DominioPipe).     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoDominioPipe(JSONObject jDadosLote, InoutLogger logger) throws Exception {
	// logger.logDebug("ENT DOMINIO PIPE");
    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento = "";
    String codEmpresa    = "";
    String notafiscal    = "";
    String tipoMovimento = "";
    String dataMovimento = "";
    String contaDebito   = "";
    String contaCredito  = "";
    String valorLiquidacao = "";
    String valorDocumento = "";
    String documento     = "";
    String nomeOrigem    = "";
    String centroCusto   = "";
    String valorJuros    = "";
    String valorDesconto = "";
    String valorMulta    = "";
    String historico     = "";
    String naturezaContabil = "";
    String tipoLancamento = "";
    String nomeEmpresa   = "";
    String classificacao = "";
    String ERP           = "";                          //  <---<
    String complemento02 = "";
	HashMap mapaPlano   		= new HashMap();  

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

	// JSONArray toCloud		= new JSONArray();	//#20210126	
	// LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");
		
		// logger.logInfo("MENSAGEM " + loteMovimento);

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
		
		if (!ERP.equals(props.get(nomeEmpresa.toUpperCase() +"_ERP_EMPRESA"))) ERP = props.get(nomeEmpresa.toUpperCase() +"_ERP_EMPRESA");
		
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");


        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String linha = " ";
        int indice   = 0;

        int contador = 0;
        String classifica = " ";
        int totalRegistros = 0;
        ResumoTxt = new StringBuilder();


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            // String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
			String cnpjEmpresa  = "";
			try {
				cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
			} catch (Exception e) {
				logger.logInfo("ERRO " + e.getMessage());
			}
            String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
            String emailCanal = props.get("EMAIL_CANAL");
            //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;
			
			// logger.logDebug("LEU MOVS");

            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);

 
            for (int t=0; t<records.length(); t++) {
				
				

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//////toCloud.put(createItemsToCloud(recMov, recAux));
					// //toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
				complemento02  = recMov.optString("COMPLEMENTO02");
				classificacao   = classificacao.substring(0,16).trim();
				// if(historico.contains("TIPO EDECONSIL")){
					// historico = cutString(historico, "TIPO EDECONSIL ## ");
					// contaDebito = recMov.optString("CONTACREDITO");
					// contaCredito = recMov.optString("CONTADEBITO");
				// }
				
				// logger.logInfo("LEU MOVS2 = "+valorDocumento+" | DT = "+dataMovimento+" | HST = "+historico);
				

                historico       = historico.replaceAll(" \\.","\\.");
                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}



                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;
				
				// logger.logDebug("CC == "+contaCredito+" | CD == "+contaDebito);

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

				// quando temos uma filial no contabil, o CNPJ que vai no cabecalho deve ser o da matriz
				// para isto funcionar, o analista tem que criar uma regra de filial no CRM
				// e colocar codigo filial = 12CNPJ:00000000000000 (sendo este cnpj o da matriz
				if (historico.contains("CNPJ:")) {
                    cnpjEmpresa = cutString(historico, "CNPJ:", " ");
                    historico   = historico.replaceAll("CNPJ:","").replaceAll(cnpjEmpresa, "");
                }
				
                if (contador == 0) {
                    linha = "|0000|" + cnpjEmpresa + "|";
                    txt.append(linha);
                    txt.append(rn);
                    classifica = " ";
                }
				
				// logger.logDebug("LEU MOVS3");

                // xxxxxxxxxxxxxxxxxxx
                String codigoSCP = "";
                 if (historico.contains("SCP:")) {
                    codigoSCP = historico.substring(historico.indexOf("SCP:")+4).trim();
                    historico       = historico.substring(0,historico.indexOf("SCP:")).trim();
					
                }
                String codigoFilial = "";
                if (historico.contains("Filial:")) {
					 
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
					// logger.logDebug("FILIAL -> "+codigoFilial);
                    historico       = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
				String codigoCentroPort = "";
                if (historico.contains("CENTROPORT:")) {
                     codigoCentroPort = historico.substring(historico.indexOf("CENTROPORT:")+11).trim();
                    historico       = historico.substring(0,historico.indexOf("CENTROPORT:")).trim();
                }

                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

                String itemDFC = "";
                if (historico.contains("ItemDFC:")) {
                    itemDFC    = historico.substring(historico.indexOf("ItemDFC:")+8).trim();
                    historico  = historico.substring(0,historico.indexOf("ItemDFC:")).trim();
                }
				
				// logger.logDebug("LEU MOVS4");

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                valorLiquidacao   = valorLiquidacao.replaceAll("\\.", ",");
                valorJuros        = valorJuros.replaceAll("\\.", ",");
                valorMulta        = valorMulta.replaceAll("\\.", ",");
                valorDesconto     = valorDesconto.replaceAll("\\.", ",");

                String valorFinal = valorLiquidacao;
                String sContador  = String.valueOf(contador);
				
                // N?o exporta valores zerados
                double valorDouble = DecimalUtil.toDecimal(valorFinal);
				// logger.logDebug("LEU MOVS4 " + valorDouble + " | " + nomeEmpresa.toUpperCase());
                if (valorDouble == 0 && !nomeEmpresa.toUpperCase().contains("EMPREENDEDORSHOPPINGCIDADE")) {
                    continue;
                }
				// if(!contaDebito.contains("ANULAR") && !contaCredito.contains("ANULAR")){
					// classificacao = classificacao.replace("A", "X");
				// }
				// if(contaDebito.contains("ANULAR") && contaCredito.contains("ANULAR")){
					// classificacao = classificacao.replace("X", "A");
				// }
				// logger.logDebug("Dominio Classificacao -> "+classificacao+" - classifica -> "+classifica);
				// logger.logDebug("Dominio loteMovimento-> "+loteMovimento);
				// logger.logDebug(" CD -> " + contaDebito + " CC -> " + contaCredito);
                // if (!classifica.equals(classificacao) && !contaDebito.contains("ANULAR") && !contaCredito.contains("ANULAR")) {
                if (!classifica.equals(classificacao) ) {
                    // logger.logDebug("Classifica Igual Gera X");
                    contador++;
                    sContador = String.valueOf(contador);
                    // logger.logDebug("contador -> " + contador);
					// if (!nomeEmpresa.toUpperCase().contains("ENSEADA") || (nomeEmpresa.toUpperCase().contains("ENSEADA") && contador == 1)) {
					
						linha = "|6000|" + classificacao.substring(0,1) + "||||";
						txt.append(linha);
						txt.append(rn);
					// }
                }

                classifica = classificacao;

                
                if (!classificacao.startsWith("X") && tipoLancamento.equals("PAGAR")) {
                    if (tipoMovimento.equals("CTBPORT")) contaDebito  = " ";
                    if (tipoMovimento.equals("CTB"))     contaCredito = " ";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        contaCredito = " ";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        contaCredito = " ";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        contaDebito = " ";
                        valorFinal   = valorDesconto;
                    }
                }
                if (tipoMovimento.contains("CC")) {
                    if (tipoMovimento.equals("CTBCC"))       valorFinal   = valorLiquidacao;
                    if (tipoMovimento.equals("CTBJURCC"))    valorFinal   = valorJuros;
                    if (tipoMovimento.equals("CTBMULCC"))    valorFinal   = valorMulta;
                    if (tipoMovimento.equals("CTBDESCC"))    valorFinal   = valorDesconto;
                }

				
                if (!classificacao.startsWith("X") && tipoLancamento.equals("RECEBER") ) {
					// if(!contaCredito.contains("ANULAR")){
					if (tipoMovimento.equals("CTBPORT") && !contaCredito.contains("INVERTE")) contaCredito  = " ";
					// }
					// if(!contaDebito.contains("ANULAR")){
					if (tipoMovimento.equals("CTB") && !contaDebito.contains("INVERTE"))     contaDebito = " ";
					// }
					
                    if (tipoMovimento.equals("CTBJUR"))  {
                        contaDebito = " ";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        contaDebito = " ";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        contaCredito = " ";
                        valorFinal   = valorDesconto;
                    }
                }

                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.toUpperCase().contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
						if (naturezaContabil.equals("D")) naturezaContabil = "TC";
						if (naturezaContabil.equals("C")) naturezaContabil = "TD";
						naturezaContabil = naturezaContabil.replaceAll("T","");
					}
				}
				historico = historico.toUpperCase().replaceAll("INVERTECONTA","").trim();
				
				// transforma e primeira maiuscula e demais minusculas
                if (nomeContabilidade.toUpperCase().contains("ELITECONSULTORIA")) historico = toDisplayCase(historico);
                if (nomeContabilidade.toUpperCase().contains("CUNHATAVARES")) historico = toDisplayCase(historico);
                if (nomeContabilidade.toUpperCase().contains("JJCHAVES")) historico = toDisplayCase(historico);


                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.",""); 
				// @sergio 202301-0024357 feito ajuste para trocar a conta anular por vazio 
				contaDebito  = contaDebito.replaceAll("ANULAR","");
                contaCredito = contaCredito.replaceAll("ANULAR","");
                if (contaDebito.contains("E"))  contaDebito = contaDebito.substring(0, contaDebito.indexOf("E"));
                if (contaCredito.contains("E")) contaCredito = contaCredito.substring(0, contaCredito.indexOf("E"));
				
				// if(contaDebito.contains("ANULAR")) contaDebito = "";	
				// if(contaCredito.contains("ANULAR")) contaCredito = "";
			
				// logger.logInfo("VALOR == "+valorFinal+" | DATINHA = "+dataMovimento+" | HST = "+historico);
				
                valorDouble = DecimalUtil.toDecimal(valorFinal);
                if (valorDouble == 0  && !nomeEmpresa.toUpperCase().contains("EMPREENDEDORSHOPPINGCIDADE")) {
                    continue;
                }
                if (!tipoMovimento.contains("CC")) {
					// logger.logDebug("DM ->> "+dataMovimento+" - CONTADEBITO ->> " + contaDebito + " - CONTACREDITO ->> " + contaCredito + " - VF ->> "+valorFinal);
                    linha = "|6100|" + dataMovimento + "|" + contaDebito + "|" + contaCredito + "|" + valorFinal + "|" + codigoHistorico + "|" + historico.trim() + "||" + codigoFilial + "|" + codigoSCP +"|";
					
					//Felipe - 01/04/2023
					//Desenvolvimento para o chamado #2303-000325
					if (nomeContabilidade.toUpperCase().contains("CERCONT")) {
                        linha = "6100" + ";" + codigoFilial + ";" + dataMovimento + ";" + documento + ";" + contaDebito + ";" + contaCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico.trim();
                    }
					
                    txt.append(linha);
                    txt.append(rn);
                }

                if(!itemDFC.equals("")) {
                    linha = "|6130|" + itemDFC + "|" + valorFinal + "|";
                    txt.append(linha);
                    txt.append(rn);
                }

                if (tipoMovimento.contains("CC")) {
                    if (naturezaContabil.equals("D")) linha = "|6110|" + centroCusto + "|" + codigoCentroPort + "|" + valorFinal + "|";
                    if (naturezaContabil.equals("C")) linha = "|6110|" + codigoCentroPort + "|" + centroCusto + "|" + valorFinal + "|";
                    txt.append(linha);
                    txt.append(rn);
                }
				
				//LCDPR
				//Felipe - 07/10/22
				//Adicionar o nome da empresa no ArrayList "empresasLCDPR" para gerar LCDPR
				ArrayList<String> empresasLcdpr = new ArrayList<String>(Arrays.asList("OTAVIOFAZENDASAOJOSE", "ALEXFAZBATISTA", "FERNANDOFAZENDA", "MILVOFAZENDA", "DAYANFAZENDA", "MARIANGELAFAZAMPARO", "NILSONBEDIN", "LUCIANOB"));
				empresasLcdpr.add("ARGINOBEDIN");
				// empresasLcdpr.add("Nilsonerwinoloterman".toUpperCase());
				
				boolean fazLcdpr = false;
				
				for (String empresaLcdpr : empresasLcdpr) {
					if (nomeEmpresa.toUpperCase().contains(empresaLcdpr))
						fazLcdpr = true;
				}
				
				if (tipoMovimento.equals("CTB") && (nomeEmpresa.toUpperCase().contains("LOINIRGATTO") && nomeContabilidade.toUpperCase().contains("AQUARIUS")) || fazLcdpr) {
					// logger.logDebug("CP02 " + complemento02);
					String classificacaoPgRc = "1";
					
					if (tipoLancamento.equals("PAGAR")) {
						naturezaContabil = "C";
						classificacaoPgRc = "2";
					}
					if (tipoLancamento.equals("RECEBER")) naturezaContabil = "D";
					linha = "|6140|" + classificacaoPgRc + "|" + documento + "|1|" + complemento02 + "|1|" + naturezaContabil + "|";
					txt.append(linha);
                    txt.append(rn);
					linha = "|6141|" + "1|" + valorFinal + "|";
					txt.append(linha);
                    txt.append(rn);
				}

                String descricaoDebito = "";
				String descricaoCredito = "";
				
                if (!tipoMovimento.contains("CC")) {
				
					ttPlanoConta ttP  = (ttPlanoConta)mapaPlano.get(contaDebitoOriginal);
					if (ttP == null) {					
						ttP  = new ttPlanoConta(); 
						ttP.descricaoPlano = "";
 
						JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
						.fields("DESCRICAOPLANO")
						.param(codEmpresa)
						.param(contaDebitoOriginal)
						.queryUnique();
						if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
							descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
							ttP.descricaoPlano = descricaoDebito;
						}
						ttP.contaContabil     = contaDebitoOriginal;
						mapaPlano.put(contaDebitoOriginal,ttP);

					}
					descricaoDebito = ttP.descricaoPlano;

					ttP  = (ttPlanoConta)mapaPlano.get(contaCreditoOriginal);
					if (ttP == null) {					
						ttP  = new ttPlanoConta(); 
						ttP.descricaoPlano = "";
 
						JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
						.fields("DESCRICAOPLANO")
						.param(codEmpresa)
						.param(contaCreditoOriginal)
						.queryUnique();
						if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
							descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
							ttP.descricaoPlano = descricaoCredito;
						}
						ttP.contaContabil     = contaCreditoOriginal;
						mapaPlano.put(contaCreditoOriginal,ttP);
					}
					descricaoCredito = ttP.descricaoPlano;

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }
				
                if(!tipoMovimento.contains("PORT")) totalRegistros++;


            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				// //toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			
            if (totalRegistros > 0) {

                // Gravacao do Arquivo TXT
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }

                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

// ################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Questor).         //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoQuestor(JSONObject jDadosLote, InoutLogger logger) throws Exception {
	logger.logDebug("Entrou Questor");
     // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";
	
	HashMap mapaPlano		= new HashMap();  

    Date dtAgora			= new Date();

    StringBuilder txt		= new StringBuilder();
    StringBuilder txtFolha	= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//lctosEspelho
	String loteId = "";
	JSONObject objetoLancamento = new JSONObject();
	JSONArray  lancamentosA     = new JSONArray();
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	//lctosEspelho

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");
        String codEmpresaOriginal = codEmpresa;
		String historicoTipoPlanilha = "";
		if (jDadosLote.has("HISTORICO")) historicoTipoPlanilha = jDadosLote.optString("HISTORICO");
		
		//xTeste
		logger.logDebug("ENTROU QUESTOR " + nomeContabilidade);
		
		// Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
			
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");
		
		//----Substitui pelo ERP da empresa (se houver)----
		String ERPAux = props.get(nomeEmpresa.toUpperCase() +"_ERP_EMPRESA");
		 
		if (ERPAux != null) {
			if (!ERPAux.equals("")) ERP = ERPAux;
			//-----------------------------------------------
		}
        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");
        //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;

        ResumoTxt = new StringBuilder();
        if(nomeContabilidade.toUpperCase().equals("ESCONTEC")) {
            ResumoTxt.append("REGISTROS COM DESCONTO MAIOR QUE VALOR PAGO/RECEBIDO");
            ResumoTxt.append(rn);
            ResumoTxt.append(rn);
            ResumoTxt.append("DATA;CLIENTE/FORNECEDOR;DOCUMENTO;VALOR DOC;VALOR DESCONTO;CONTA DEBITO;CONTA CREDITO;LOTE");
            ResumoTxt.append(rn);
        } else{
            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);
        }

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            int ultimoCodigo = 0;

            if (nomeContabilidade.toUpperCase().equals("M12")){
                try {

                    /*
					String sql = "SELECT ULTIMO FROM IO_SEQUENCIA";
					JSONArray recf = dbIOCont.sql(sql)
					.setFields("ULTIMO")
					.debug(logger)
					.query();

					if (recf != null && recf.length() > 0 ) {
						recf.getJSONObject(0);

						JSONObject recMov = recf.optJSONObject(0);
						if (recMov.has("ULTIMO")) ultimoCodigo = recMov.optInt("ULTIMO");
					}

					ultimoCodigo++;

					dbIOCont.update("IO_SEQUENCIA")
					.fields("ULTIMO")
					.where("ULTIMO > 0")
					.param(ultimoCodigo)
					.execute();
					*/

                    ultimoCodigo = 18;

                } catch (Exception eDel) {
                    logger.logError("EndpointB: ERRO AO DAR UPDATE DELETE IO_MOVIMENTO", eDel);
                }
            }

            String sequencia		 = String.valueOf(ultimoCodigo);
            sequencia        		 = StringUtil.leftPad(sequencia, 4, "0");
			boolean folhaPagamento   = false;
			boolean folhaPagamento2   = false;
			
			if(nomeContabilidade.toUpperCase().contains("PROCONTA")) logger.logDebug("LOTE GERA == "+loteMovimento);
			
			// logger.logDebug("records -> "+records.length());
			for (int t=0; t<records.length(); t++) {
				
				logger.logDebug("EMP Questor " + nomeEmpresa);

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//////toCloud.put(createItemsToCloud(recMov, recAux));
					// //toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
			 
				

                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                String cpfCnpj  = recMov.optString("CPFCNPJ").replaceAll("[\\.|\\/|\\-]","");

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
				contaDebito  = contaDebito.replaceAll("ANULAR","");
                contaCredito = contaCredito.replaceAll("ANULAR","");
				
				String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
				
				
                // loteMovimento   = recMov.optString("LOTE");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
				String complemento01 = recMov.optString("COMPLEMENTO01");
                String complemento02 = recMov.optString("COMPLEMENTO02");
                String complemento03 = recMov.optString("COMPLEMENTO03");
				
				if(nomeContabilidade.contains("SYSTEMA") && nomeEmpresa.contains("CAMFPRESTACAO")){
					documento = complemento02;
				}
                
                String especialOrgano = "";
                String especialOrganoEspaco = "";
                String separador = ";";
                int tamData = 8;
				
				int tipoFolhaRSM = 0;
				//LctosEspelho
				if (loteMovimento.toUpperCase().contains("_ID")) {
				    loteId = cutString(loteMovimento.toUpperCase(), loteMovimento.toUpperCase().lastIndexOf("_ID")+3, "_");
					 
				}
				
				
				// cria o objeto padrao para envio dos lancamentos
				if (!objetoLancamento.has("loteId") && !loteId.equals("")) {
				
					//apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
				
					objetoLancamento.put("loteId", loteId);
					objetoLancamento.put("parceiro", "QUESTOR"); // MUDAR SEMPRE O NOME DO PARCEIRO
					objetoLancamento.put("cnpjContabilidade", props.get("CONTABILIDADE_CNPJ"));
					objetoLancamento.put("cnpjEmpresa", props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
					
					
				}
				//fim LctosESPELHO
				
				if(nomeContabilidade.toUpperCase().contains("PROCONTA")) logger.logDebug("LOTE FOR GERA == "+loteMovimento+" | DT MOV == "+dataMovimentoOriginal+" | NME EMP == "+nomeEmpresa);
 				
				if (historico.contains("FOLHARSM1")) tipoFolhaRSM = 1;
				if (historico.contains("FOLHARSM2")) tipoFolhaRSM = 2;

				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				
				contaDebito 	= contaDebito.replaceAll("T","").trim();
				contaCredito	= contaCredito.replaceAll("T","").trim();
				contaDebito 	= contaDebito.replaceAll("t","").trim();
				contaCredito	= contaCredito.replaceAll("t","").trim();
				
				historico = historico.replaceAll("INVERTECONTA","").trim();
                String transacaoNli = "";
				
				// logger.logInfo("HST " + historico + " | " + tipoMovimento);
				
                if (historico.contains("TR:") && historico.contains("#")) {
                    transacaoNli = historico.substring(0, historico.indexOf("#"));
                    transacaoNli = transacaoNli.replaceAll("TR:","").trim();
                    historico    = historico.substring(historico.indexOf("#")+1).trim();
                }

                String documentoNli = "";
                if (historico.contains("DOC:") && historico.contains("#")) {
                    documentoNli = historico.substring(0, historico.indexOf("#"));
                    documentoNli = documentoNli.replaceAll("DOC:","").trim();
                    historico    = historico.substring(historico.indexOf("#")+1).trim();
                }
				//logger.logInfo("HST2 " + transacaoNli + " | " + documentoNli + " | " + historico + " | " + tipoMovimento + " | " + codEmpresa + " | " + especialOrgano);

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                
				

                String codigoFilial = "";
                if (!nomeContabilidade.toUpperCase().equals("ORGANO") && !nomeContabilidade.toUpperCase().equals("GEMEOS")) codEmpresa = "01";
				
				String codigoCentroPort = "";
                if (historico.contains("CENTROPORT:")) {
                    codigoCentroPort = historico.substring(historico.indexOf("CENTROPORT:")+11).trim();
                    historico       = historico.substring(0,historico.indexOf("CENTROPORT:")).trim();
                }
				
                if (historico.contains("Filial:")) {
                    codEmpresa   = cutString(historico, "Filial:", " ");
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }

 				
                String codigoHistorico = "0";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|") && !nomeContabilidade.toUpperCase().contains("RSCONTABILIDADE")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
				
				 


				if(historico.startsWith("-") || historico.startsWith("|")) {
				
					// if (!codEmpresa.equals("1624") || nomeContabilidade.toUpperCase().equals("RSCONTABILIDADE")) 	historico = historico.substring(1).trim();
				}
				
 				
				
				
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                // transforma e primeira maiuscula e demais minusculas
                // if (nomeContabilidade.toUpperCase().contains("RODERJAN")) historico = toDisplayCase(historico);

                if (nomeContabilidade.toUpperCase().equals("ORGANO")){
                    especialOrgano = "C;";
                    especialOrganoEspaco = "          ;";
                    valorLiquidacao = valorLiquidacao.replaceAll("\\.","");
                    valorJuros = valorJuros.replaceAll("\\.","");
                    valorDesconto = valorDesconto.replaceAll("\\.","");
                    valorMulta = valorMulta.replaceAll("\\.","");
                }
                if (nomeContabilidade.toUpperCase().equals("LUZOLIVEIRA")){
                    separador = ",";
                    tamData = 6;
                }
                if (nomeContabilidade.toUpperCase().equals("ESCRITORIOGOMES")){
                    separador = ",";
                    tamData = 8;
                }
                if (nomeContabilidade.toUpperCase().equals("SECEA")){
                    separador = ",";
                    tamData = 10;
                }
				if (nomeContabilidade.toUpperCase().equals("AUDITAR")){
                    tamData = 10;
                }
                if (nomeContabilidade.toUpperCase().equals("WOELFER")){
                    separador = ",";
                }
				
                if (nomeContabilidade.toUpperCase().equals("SECEA") && cpfCnpj.length() > 7) {
                    if (tipoLancamento.equals("PAGAR") && tipoMovimento.equals("CTB")) contaDebito = cpfCnpj;
                    // if (tipoLancamento.equals("PAGAR") && tipoMovimento.equals("CTBJUR")) contaCredito = cpfCnpj;
                    // if (tipoLancamento.equals("PAGAR") && tipoMovimento.equals("CTBDES")) contaDebito = cpfCnpj;
                    // if (tipoLancamento.equals("PAGAR") && tipoMovimento.equals("CTBMUL")) contaCredito = cpfCnpj;

                    if (tipoLancamento.equals("RECEBER") && tipoMovimento.equals("CTB"))    contaCredito = cpfCnpj;
                    // if (tipoLancamento.equals("RECEBER") && tipoMovimento.equals("CTBJUR")) contaDebito = cpfCnpj;
                    // if (tipoLancamento.equals("RECEBER") && tipoMovimento.equals("CTBDES")) contaCredito = cpfCnpj;
                    // if (tipoLancamento.equals("RECEBER") && tipoMovimento.equals("CTBMUL")) contaDebito = cpfCnpj;

                    if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                        String contaInvertida = contaDebito;
                        contaDebito = contaCredito.replaceAll("INVERTE","").trim();
                        contaCredito = contaInvertida.replaceAll("INVERTE","").trim();
                    }
                }
                if (nomeContabilidade.toUpperCase().equals("SECEA") && contaDebito.length() <= 7) {
                    contaDebito = StringUtil.leftPad(contaDebito.trim(), 10, "");
                }
                if (nomeContabilidade.toUpperCase().equals("SECEA") && contaCredito.length() <= 7) {
                    contaCredito = StringUtil.leftPad(contaCredito.trim(), 10, "");
                }
                String valorQUE = "";
				
				// logger.logDebug("TM -> "+tipoMovimento);
				
                if (tipoMovimento.equals("CTB")) valorQUE = valorLiquidacao;
                if (tipoMovimento.equals("CTBPORT")) valorQUE = valorLiquidacao;
                if (tipoMovimento.equals("CTBJUR")) valorQUE = valorJuros;
                if (tipoMovimento.equals("CTBDES")) valorQUE= valorDesconto;
                if (tipoMovimento.equals("CTBMUL")) valorQUE = valorMulta;
				
				if (nomeContabilidade.toUpperCase().contains("DEPAULA") && valorLiquidacao.contains("-")) valorLiquidacao = valorLiquidacao.replaceAll("-", "");

				// QUANDO O ARQUIVO VIER COM FOLHAQUESTOR, VAMOS GERAR UM ARQUIVO .CSV PARA GERAR NO FORMATO DA FOLHA DO QUESTOR.

				if(historico.contains("FOLHAQUESTOR")){
				
					// gera apenas para o CTB.  Outros tipos, como CTBCC devem ser ignorados.
					if (tipoMovimento.equals("CTB")) {
						if (tipoFolhaRSM > 0) {
							txt.append(dataMovimento);
							txt.append(";");
							txt.append(valorQUE);
							txt.append(";");
							txt.append(contaDebito);
							txt.append(";");
							txt.append(contaCredito);
							txt.append(";");
							txt.append(historico.replaceAll("FOLHAQUESTOR","").replaceAll("FOLHARSM1", "").replaceAll("FOLHARSM2", ""));
							txt.append(";");
							if (tipoFolhaRSM == 1) {
								txt.append("1");
								txt.append(";");
								txt.append(centroCusto);
								txt.append(";");
								txt.append(contaDebito);
							}
							if (tipoFolhaRSM == 2) {
								txt.append("-1");
								txt.append(";");
								txt.append(centroCusto);
								txt.append(";");
								txt.append(contaCredito);
							
							}
							txt.append(rn);
						}
						if (tipoFolhaRSM == 0) {
							folhaPagamento2 = true;
							
							txtFolha.append(dataMovimento);
							txtFolha.append(";");
							txtFolha.append(valorQUE);
							txtFolha.append(";");
							txtFolha.append(contaDebito);
							txtFolha.append(";");
							txtFolha.append(contaCredito);
							txtFolha.append(";");
							txtFolha.append(historico.replaceAll("FOLHAQUESTOR","").replaceAll("FOLHARSM1", "").replaceAll("FOLHARSM2", ""));
							txtFolha.append(";");
							txtFolha.append(";;;");
							txtFolha.append(rn);
						}
						
						totalRegistros++;
						folhaPagamento = true;
					}
					continue;
					
				}
                String valorFinal = valorLiquidacao;
				if(valorFinal.equals("0.00")){
					continue;
				}
				// logger.logDebug("VF -> "+valorFinal+" - CC -> "+contaCredito+" - CD -> "+contaDebito+" - DM -> "+dataMovimento);

                // transforma e primeira maiuscula e demais minusculas
				//nomeContabilidade.toUpperCase().contains("SOCIN") || COMENTADO 09/04/2020
                if (nomeContabilidade.toUpperCase().equals("CSI") ) {
                    historico = toDisplayCase(historico);
                    historico = historico.replaceAll(" De ", " de ").replaceAll(" Da ", " da ").replaceAll(" Da ", " da ").replaceAll(" E ", " e ").replaceAll(" Do ", " do ").replaceAll(" Ltda ", " LTDA ").replaceAll(" Me ", " ME ").replaceAll(" Epp ", " EPP ").replaceAll(" Eireli ", " EIRELI ").replaceAll("bndes", "BNDES").replaceAll(" Bndes ", " BNDES ").replaceAll(" Cef ", " CEF ").replaceAll("S\\.a\\.", "SA").replaceAll(" Sa ", " SA ").replaceAll(" A ", " a ");
                    if (historico.endsWith(" Me")) historico = historico.substring(0, historico.length()-1) + historico.substring(historico.length()).toUpperCase();
                }


                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                historico = historico.replaceAll("_ ","");
                historico = historico.replaceAll(" _","");
                historico = historico.replaceAll("_","");
				
				if (nomeContabilidade.toUpperCase().contains("CONCEITOCONTABILIDADE")) historico = toDisplayCase(historico);
				
                if (!nomeContabilidade.toUpperCase().equals("ESCRITORIOGOMES") && !nomeContabilidade.toUpperCase().contains("RUICADETE")) if (historico.length() > 200) historico = historico.substring(0,200).trim();

                if (nomeContabilidade.toUpperCase().equals("DEPAULA")) historico = historico.toUpperCase().trim();

                //if (nomeContabilidade.toUpperCase().equals("ASERCOMG")) historico = historico + ";" + documento;

                if (nomeContabilidade.toUpperCase().equals("M12")) documentoNli =  sequencia;
				
				if (nomeContabilidade.toUpperCase().equals("ASERCOMG") && codEmpresaOriginal.equals("1965")){
                    especialOrgano = "L;";                  
                }
             

                if (nomeContabilidade.toUpperCase().equals("SECEA")) {
                    txt.append("\"").append(StringUtil.leftPad(codEmpresa, 2, "0")).append("\",\"").append(StringUtil.leftPad(dataMovimento, tamData, "0")).append("\",\"").append(contaDebito).append("\",\"").append(contaCredito).append("\",\"").append(valorQUE).append("\",\"").append(codigoHistorico).append("\",\"").append(historico).append("\",\"").append(centroCusto).append("\"");
                    txt.append(rn);
                    valorFinal = valorQUE;

                }
                else {   // layout padrao para todas as contabilidades.
					// logger.logDebug("TM -> " + tipoMovimento + " codCentroPort -> " + codigoCentroPort + " NTZC ->" + naturezaContabil + " |valorLiquidacao =" + valorLiquidacao);
					
						// prepara array para envio ao 4.0 oneflow
					if (!loteId.equals("")) {
						JSONObject lancamentoO = new JSONObject();
						lancamentoO.put("dataMovimento", dataMovimento);
						lancamentoO.put("contaDebito", contaDebito);
						lancamentoO.put("contaCredito", contaCredito);
						lancamentoO.put("d_c", "D");
						lancamentoO.put("historico", historico.trim());
						lancamentoO.put("codHistorico", codigoHistorico);
						lancamentoO.put("valorLancamento", valorQUE);


						
						lancamentoO.put("tipoMovimento", cutString(tipoLancamento, 0, 3));
						lancamentosA.put(lancamentoO);
					}
					
                    if (tipoMovimento.equals("CTB")) {
                        txt.append(especialOrgano);
                        txt.append(StringUtil.leftPad(codEmpresa.trim(), 4, "0"));
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(StringUtil.leftPad(dataMovimento, tamData, "0"));
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(especialOrganoEspaco);
                        txt.append(contaDebito);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(contaCredito);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(valorLiquidacao);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(codigoHistorico);
                        txt.append(StringUtil.leftPad(separador, 1, ""));

                        if (!nomeContabilidade.toUpperCase().equals("ORGANO") && !nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                        txt.append(historico.trim());
                        if (!nomeContabilidade.toUpperCase().equals("ORGANO") && !nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("ESCOPLAN")) txt.append(StringUtil.leftPad(separador, 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("M12")) txt.append(StringUtil.leftPad(separador, 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("ASERCOMG")) txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(documentoNli);
                        if (!transacaoNli.equals("")) {
                            txt.append(StringUtil.leftPad(separador, 1, ""));
                            txt.append(transacaoNli);
                        }
                        txt.append(rn);

                    }

                    if (tipoMovimento.equals("CTBCC") && !nomeContabilidade.toUpperCase().equals("SECEA")) {
						
						if (nomeContabilidade.toUpperCase().equals("ASERCOMG") && codEmpresaOriginal.equals("1965")){
							txt.append(StringUtil.leftPad("G;", 2, ""));
						} else {
							if (nomeContabilidade.toUpperCase().equals("ESCRITORIOGOMES")){
								txt.append(StringUtil.leftPad("XX;", 3, ""));
							}
							else {
								txt.append(StringUtil.leftPad("XX", 2, ""));
								txt.append(StringUtil.leftPad(separador, 1, ""));
							}
						}

                        txt.append(StringUtil.leftPad(naturezaContabil, 1, ""));
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(centroCusto);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(valorLiquidacao);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(rn);
                    }

                    if (tipoMovimento.equals("CTBJUR")) {
                        txt.append(especialOrgano);
                        txt.append(StringUtil.leftPad(codEmpresa.trim(), 4, "0"));
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(StringUtil.leftPad(dataMovimento, tamData, "0"));
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(especialOrganoEspaco);
                        txt.append(contaDebito);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(contaCredito);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(valorJuros);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(codigoHistorico);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        if (!nomeContabilidade.toUpperCase().equals("ORGANO") && !nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                        txt.append(historico);
                        if (!nomeContabilidade.toUpperCase().equals("ORGANO") && !nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("ESCOPLAN")) txt.append(StringUtil.leftPad(separador, 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("M12"))      txt.append(StringUtil.leftPad(separador, 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("ASERCOMG")) txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(documentoNli);
                        if (!transacaoNli.equals("")) {
                            txt.append(StringUtil.leftPad(separador, 1, ""));
                            txt.append(transacaoNli);
                        }
                        txt.append(rn);
                        valorFinal   = valorJuros;
                    }

                    if (tipoMovimento.equals("CTBMUL")) {
                        txt.append(especialOrgano);
                        txt.append(StringUtil.leftPad(codEmpresa.trim(), 4, "0"));
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(StringUtil.leftPad(dataMovimento, tamData, "0"));
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(especialOrganoEspaco);
                        txt.append(contaDebito);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(contaCredito);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(valorMulta);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(codigoHistorico);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        if (!nomeContabilidade.toUpperCase().equals("ORGANO") && !nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                        txt.append(historico);
                        if (!nomeContabilidade.toUpperCase().equals("ORGANO") && !nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("ESCOPLAN")) txt.append(StringUtil.leftPad(separador, 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("M12"))      txt.append(StringUtil.leftPad(separador, 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("ASERCOMG")) txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(documentoNli);
                        if (!transacaoNli.equals("")) {
                            txt.append(StringUtil.leftPad(separador, 1, ""));
                            txt.append(transacaoNli);
                        }
                        txt.append(rn);
                        valorFinal   = valorMulta;
                    }

                    if (tipoMovimento.equals("CTBJURCC")) {
                        if (nomeContabilidade.toUpperCase().equals("ASERCOMG") && codEmpresaOriginal.equals("1965")){
							txt.append(StringUtil.leftPad("G;", 2, ""));
						} else {
							txt.append(StringUtil.leftPad("XX", 2, ""));
							txt.append(StringUtil.leftPad(separador, 1, ""));
						}
                        txt.append(StringUtil.leftPad(naturezaContabil, 1, ""));
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(centroCusto);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(valorJuros);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(rn);
                    }
                    if (tipoMovimento.equals("CTBMULCC")) {
                        if (nomeContabilidade.toUpperCase().equals("ASERCOMG") && codEmpresaOriginal.equals("1965")){
							txt.append(StringUtil.leftPad("G;", 2, ""));
						} else {
							txt.append(StringUtil.leftPad("XX", 2, ""));
							txt.append(StringUtil.leftPad(separador, 1, ""));
						}
                        txt.append(StringUtil.leftPad(naturezaContabil, 1, ""));
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(centroCusto);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(valorMulta);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(rn);
                    }

                    if (tipoMovimento.equals("CTBDES")) {
						// logger.logDebug("Passou desconto");
                        txt.append(especialOrgano);
                        txt.append(StringUtil.leftPad(codEmpresa.trim(), 4, "0"));
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(StringUtil.leftPad(dataMovimento, tamData, "0"));
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(especialOrganoEspaco);
                        txt.append(contaDebito);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(contaCredito);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(valorDesconto);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(codigoHistorico);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        if (!nomeContabilidade.toUpperCase().equals("ORGANO") && !nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                        txt.append(historico);
                        if (!nomeContabilidade.toUpperCase().equals("ORGANO") && !nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("ESCOPLAN")) txt.append(StringUtil.leftPad(separador, 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("M12"))      txt.append(StringUtil.leftPad(separador, 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("ASERCOMG")) txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(documentoNli);
                        if (!transacaoNli.equals("")) {
                            txt.append(StringUtil.leftPad(separador, 1, ""));
                            txt.append(transacaoNli);
                        }
                        txt.append(rn);
                        valorFinal   = valorDesconto;
                    }

                    if (tipoMovimento.equals("CTBDESCC")) {
                        if (nomeContabilidade.toUpperCase().equals("ASERCOMG") && codEmpresaOriginal.equals("1965")){
							txt.append(StringUtil.leftPad("G;", 2, ""));
						} else {
							txt.append(StringUtil.leftPad("XX", 2, ""));
							txt.append(StringUtil.leftPad(separador, 1, ""));
						}
                        txt.append(StringUtil.leftPad(naturezaContabil, 1, ""));
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(centroCusto);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(valorDesconto);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(rn);
                    }

                    if (tipoMovimento.equals("PORTADOR") || tipoMovimento.equals("CTBPORT")) {
                        txt.append(especialOrgano);
                        txt.append(StringUtil.leftPad(codEmpresa.trim(), 4, "0"));
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(StringUtil.leftPad(dataMovimento, tamData, "0"));
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(especialOrganoEspaco);
                        txt.append(contaDebito);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(contaCredito);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(valorLiquidacao);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(codigoHistorico);
                        txt.append(StringUtil.leftPad(separador, 1, ""));
                        if (!nomeContabilidade.toUpperCase().equals("ORGANO") && !nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                        txt.append(historico);
                        if (!nomeContabilidade.toUpperCase().equals("ORGANO") && !nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("ESCOPLAN")) txt.append(StringUtil.leftPad(separador, 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("M12"))      txt.append(StringUtil.leftPad(separador, 1, ""));
                        if (nomeContabilidade.toUpperCase().equals("ASERCOMG")) txt.append(StringUtil.leftPad(separador, 1, ""));
                        txt.append(documentoNli);
                        if (!transacaoNli.equals("")) {
                            txt.append(StringUtil.leftPad(separador, 1, ""));
                            txt.append(transacaoNli);
                        }
                        txt.append(rn);
                    }
					
					if (!codigoCentroPort.equals("") && !tipoMovimento.contains("CC")) {
						if (nomeContabilidade.toUpperCase().equals("ASERCOMG") && codEmpresaOriginal.equals("1965")){
							txt.append(StringUtil.leftPad("G;", 2, ""));
						} else {
							txt.append(StringUtil.leftPad("XX", 2, ""));
							txt.append(StringUtil.leftPad(separador, 1, ""));
						}
						// txt.append(StringUtil.leftPad(naturezaContabil, 1, ""));
						
						if(tipoMovimento.equals("CTB") && naturezaContabil.equals("C")){
							txt.append(StringUtil.leftPad("D", 1, ""));
						}
						
						if(tipoMovimento.equals("CTB") && naturezaContabil.equals("D")){
							txt.append(StringUtil.leftPad("C", 1, ""));
						}
						
						if((tipoMovimento.equals("CTBPORT") || tipoMovimento.equals("PORTADOR")) && naturezaContabil.equals("D")){
							txt.append(StringUtil.leftPad("C", 1, ""));
						}
						
						
						txt.append(StringUtil.leftPad(separador, 1, ""));
						txt.append(codigoCentroPort);
						txt.append(StringUtil.leftPad(separador, 1, ""));
						txt.append(valorLiquidacao);
						txt.append(StringUtil.leftPad(separador, 1, ""));
						txt.append(rn);
					}
                }


                if(nomeContabilidade.toUpperCase().equals("ESCONTEC")) {
                    try {
                        double valorDescontoDouble   = Double.parseDouble(valorDesconto);
                        double valorLiquidacaoDouble = Double.parseDouble(valorLiquidacao);

                        if ((valorDescontoDouble > valorLiquidacaoDouble && tipoMovimento.equals("CTB")) || contaCredito.equals("5")) {
                            ResumoTxt.append(dataMovimento + ";" + nomeOrigem + ";" + documento + ";" + valorLiquidacao + ";" + valorDesconto + ";" + contaDebito + ";" + contaCredito + ";" + loteMovimento);
                            ResumoTxt.append(rn);
                        }
                    } catch (Exception vx) {}
                } else {

                   if (!tipoMovimento.contains("CC")) {
					
						String descricaoDebito = "";
                        String descricaoCredito = "";
				
						ttPlanoConta ttP  = (ttPlanoConta)mapaPlano.get(contaDebitoOriginal);
						if (ttP == null) {					
							ttP  = new ttPlanoConta(); 
							ttP.descricaoPlano = "";
	 
							JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
							.fields("DESCRICAOPLANO")
							.param(codEmpresa)
							.param(contaDebitoOriginal)
							.queryUnique();
							if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
								descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
								ttP.descricaoPlano = descricaoDebito;
							}
							ttP.contaContabil     = contaDebitoOriginal;
							mapaPlano.put(contaDebitoOriginal,ttP);

						}
						descricaoDebito = ttP.descricaoPlano;

						ttP  = (ttPlanoConta)mapaPlano.get(contaCreditoOriginal);
						if (ttP == null) {					
							ttP  = new ttPlanoConta(); 
							ttP.descricaoPlano = "";
	 
							JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
							.fields("DESCRICAOPLANO")
							.param(codEmpresa)
							.param(contaCreditoOriginal)
							.queryUnique();
							if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
								descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
								ttP.descricaoPlano = descricaoCredito;
							}
							ttP.contaContabil     = contaCreditoOriginal;
							mapaPlano.put(contaCreditoOriginal,ttP);
						}
						descricaoCredito = ttP.descricaoPlano;

						ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
						ResumoTxt.append(rn);
					}
                }
				
				
 				
                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				// //toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			
             // Gravacao do Arquivo TXT
			// logger.logDebug("GRAVA AEW, totalRegistros -> "+totalRegistros);
            if(totalRegistros > 0){

                if (nomeContabilidade.toUpperCase().equals("M12") /*|| nomeContabilidade.toUpperCase().equals("EXAM")*/) { // Soares Codigo comentado como pedido nos chamados 202203-0013647 e 202203-0013632
                    // logger.logDebug("T1");
					String filename  = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "LOTD" + sequencia + "_" + loteMovimento + ".txt";

                    FileWriter writer = new FileWriter(filename);
                    writer.writeNewFile(txt.toString());

                    String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + sequencia + "_" + loteMovimento + ".csv";

                    FileWriter writerResumo = new FileWriter(filenameRESUMO);
                    writerResumo.writeNewFile(ResumoTxt.toString());
                    enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "LOTD" + sequencia + ".txt - " + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                }
                else {
					// logger.logInfo("T2 " + nomeEmpresa);
                    String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                    String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".QUE";
                    // logger.logDebug("T3");
					if (folhaPagamento) filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".csv";
                    FileWriter writer = new FileWriter(filename);
                    // logger.logInfo("T4 -> "+filename);
					// logger.logDebug("WWNF -> "+txt.toString());
					writer.writeNewFile(txt.toString());
					// logger.logDebug("T5");
					if (folhaPagamento2) {
						filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + "_2" + ".csv";
						writer = new FileWriter(filename);
						writer.writeNewFile(txtFolha.toString());
					}
					// logger.logDebug("T6");
                    String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                    if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                        filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                    }
                    FileWriter writerResumo = new FileWriter(filenameRESUMO);
                    writerResumo.writeNewFile(ResumoTxt.toString());
                    enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);
                }

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
 					
 					sForce.append(";").append(historicoTipoPlanilha);
					 

                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
				//lctosEspelho
				try {
					if (!loteId.equals("")) {
					
						logger.logInfo("Lentod lancamentos espelho " + objetoLancamento.toString());
						objetoLancamento.put("lancamentos", lancamentosA);
						objetoLancamento.put("nomeArquivo", loteMovimento + ".QUE");
						
						//JSONArray toCloudArray = sendToMeuIntegrador(objetoLancamento, apiWeb, logger);
						
					}
				} catch (Exception eDel) {
					logger.logError("EndpointB: ERROR sendToMeuIntegrador", eDel);
				}
				//lctosEspelho
            }
			
		
            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

//#################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@QuestorFiscal).   //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoQuestorFiscal(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String cpfCnpj          = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";               //  <---<
    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {

                JSONObject recMov = records.optJSONObject(t);
                
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                contaDebito  = contaDebito.replaceAll("[^0-9]*", "");
                contaCredito = contaCredito.replaceAll("[^0-9]*", "");


                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                cpfCnpj         = recMov.optString("CPFCNPJ");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                String especialOrgano = "";
                String especialOrganoEspaco = "";
                String separador = ";";

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}

                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }

                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                }
                String codigoHistorico = "0";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                valorLiquidacao = valorLiquidacao.replaceAll("\\.",",");
                valorJuros = valorJuros.replaceAll("\\.",",");
                valorDesconto = valorDesconto.replaceAll("\\.",",");
                valorMulta = valorMulta.replaceAll("\\.",",");
                txt.append(documento);
                txt.append(";");
                txt.append(cpfCnpj);
                txt.append(";1;");
                txt.append(historico);
                txt.append(";");
                txt.append(dataMovimento);
                txt.append(";");
                txt.append(valorLiquidacao);
                txt.append(";0,00;");
                txt.append(valorJuros);
                txt.append(";");
                txt.append(valorMulta);
                txt.append(";");
                txt.append(valorDesconto);
                txt.append(";");
                txt.append(contaCredito);
                txt.append(";");
                txt.append(rn);
                totalRegistros++;

            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}

            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String loteSemArquivo = loteMovimento.toLowerCase();
                if (loteSemArquivo.contains("_arquivo_")) loteSemArquivo = loteSemArquivo.substring(0,loteSemArquivo.indexOf("_arquivo")).trim();

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteSemArquivo + ".QUE";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteSemArquivo + ".QUE";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                if (loteMovimento.toLowerCase().contains("email_") && loteMovimento.toUpperCase().contains("__")) {
                    emailResponsavel = loteMovimento.toLowerCase();
                    emailResponsavel = emailResponsavel.substring(emailResponsavel.indexOf("email_")+6,emailResponsavel.indexOf("__"));
                    emailResponsavel = emailResponsavel.replaceAll("_","@");
                }
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filename, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }

    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

//#################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@QuestorCNPJ).     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoQuestorCNPJ(JSONObject jDadosLote, InoutLogger logger) throws Exception {
     // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String cpfCnpj          = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";               //  <---<

    Date dtAgora			= new Date();

    StringBuilder txt		= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");
        //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;

        ResumoTxt = new StringBuilder();

        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);
        //}

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {

                JSONObject recMov = records.optJSONObject(t);
                
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");

                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                cpfCnpj         = recMov.optString("CPFCNPJ");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                String especialOrgano = "";
                String especialOrganoEspaco = "";
                String separador = ";";
                int tamData = 8;
                historico = historico.replaceAll(" \\|","|").trim();
                historico = historico.replaceAll("\\| ","|").trim();

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                if (cpfCnpj.length() > 7) {

                    if (tipoLancamento.equals("PAGAR") && tipoMovimento.equals("CTB")) contaDebito = "F"+cpfCnpj;
                    if (tipoLancamento.equals("PAGAR") && tipoMovimento.equals("CTBJUR")) contaCredito = "F"+cpfCnpj;
                    if (tipoLancamento.equals("PAGAR") && tipoMovimento.equals("CTBDES")) contaDebito = "F"+cpfCnpj;
                    if (tipoLancamento.equals("PAGAR") && tipoMovimento.equals("CTBMUL")) contaCredito = "F"+cpfCnpj;

                    if (tipoLancamento.equals("RECEBER") && tipoMovimento.equals("CTB"))    contaCredito = "C"+cpfCnpj;
                    if (tipoLancamento.equals("RECEBER") && tipoMovimento.equals("CTBJUR")) contaDebito = "C"+cpfCnpj;
                    if (tipoLancamento.equals("RECEBER") && tipoMovimento.equals("CTBDES")) contaCredito = "C"+cpfCnpj;
                    if (tipoLancamento.equals("RECEBER") && tipoMovimento.equals("CTBMUL")) contaDebito = "C"+cpfCnpj;


                }
                 
                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();

                String codigoHistorico = "0";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
				if(historico.startsWith("-") || historico.startsWith("|")) {
				
					if (!codEmpresa.equals("1624") || nomeContabilidade.toUpperCase().equals("RSCONTABILIDADE")) 	historico = historico.substring(1).trim();
				}
				
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<


                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                historico = historico.replaceAll("_ ","");
                historico = historico.replaceAll(" _","");
                historico = historico.replaceAll("_","");
                historico = historico.replaceAll(" \\|","\\|");

                if (nomeContabilidade.toUpperCase().equals("ORGANO")){
                    especialOrgano = "C;";
                    especialOrganoEspaco = "          ;";
                    valorLiquidacao = valorLiquidacao.replaceAll("\\.","");
                    valorJuros = valorJuros.replaceAll("\\.","");
                    valorDesconto = valorDesconto.replaceAll("\\.","");
                    valorMulta = valorMulta.replaceAll("\\.","");
                }
                if (nomeContabilidade.toUpperCase().equals("LUZOLIVEIRA")){
                    separador = ",";
                    tamData = 6;
                }
                if (nomeContabilidade.toUpperCase().equals("ESCRITORIOGOMES")){
                    separador = ",";
                    tamData = 8;
                }
                else {
                    contaCredito = contaCredito.replaceAll("F","");
                    contaCredito = contaCredito.replaceAll("C","");
                    contaDebito  = contaDebito.replaceAll("F","");
                    contaDebito  = contaDebito.replaceAll("C","");
                }

                String valorFinal = valorLiquidacao;

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();

                if (!nomeContabilidade.toUpperCase().equals("ESCRITORIOGOMES") && historico.length() > 100) historico = historico.substring(0,100).trim();

                separador = StringUtil.rightPad(separador, 2, " ");

                if (tipoMovimento.equals("CTB")) {
                    txt.append(especialOrgano);
                    txt.append(StringUtil.leftPad(codEmpresa.trim(), 4, "0"));
                    txt.append(separador);
                    txt.append(StringUtil.leftPad(dataMovimento, tamData, "0"));
                    txt.append(separador);
                    txt.append(especialOrganoEspaco);
                    txt.append(contaDebito);
                    txt.append(separador);
                    txt.append(contaCredito);
                    txt.append(separador);
                    txt.append(valorLiquidacao);
                    txt.append(separador);
                    txt.append(codigoHistorico);
                    txt.append(separador);

                    if (!nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(historico.trim());
                    if (!nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                    if (nomeContabilidade.toUpperCase().equals("SECEA")) {
                        txt.append(separador);
                        txt.append(centroCusto);
                        txt.append(separador);
                    }
                    txt.append(rn);

                }

                if (tipoMovimento.equals("CTBCC") && !nomeContabilidade.toUpperCase().equals("SECEA")) {
                    if (nomeContabilidade.toUpperCase().equals("ESCRITORIOGOMES")){
                        txt.append(StringUtil.leftPad("XX;", 3, ""));
                    }
                    else {
                        txt.append(StringUtil.leftPad("XX", 2, ""));
                        txt.append(separador);
                    }

                    txt.append(StringUtil.leftPad(naturezaContabil, 1, ""));
                    txt.append(separador);
                    txt.append(centroCusto);
                    txt.append(separador);
                    txt.append(valorLiquidacao);
                    txt.append(separador);
                    txt.append(rn);
                }

                if (tipoMovimento.equals("CTBJUR")) {
                    txt.append(especialOrgano);
                    txt.append(StringUtil.leftPad(codEmpresa.trim(), 4, "0"));
                    txt.append(separador);
                    txt.append(StringUtil.leftPad(dataMovimento, tamData, "0"));
                    txt.append(separador);
                    txt.append(especialOrganoEspaco);
                    txt.append(contaDebito);
                    txt.append(separador);
                    txt.append(contaCredito);
                    txt.append(separador);
                    txt.append(valorJuros);
                    txt.append(separador);
                    txt.append(codigoHistorico);
                    txt.append(separador);
                    if (!nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(historico);
                    if (!nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(rn);
                    valorFinal   = valorJuros;
                }

                if (tipoMovimento.equals("CTBMUL")) {
                    txt.append(especialOrgano);
                    txt.append(StringUtil.leftPad(codEmpresa.trim(), 4, "0"));
                    txt.append(separador);
                    txt.append(StringUtil.leftPad(dataMovimento, tamData, "0"));
                    txt.append(separador);
                    txt.append(especialOrganoEspaco);
                    txt.append(contaDebito);
                    txt.append(separador);
                    txt.append(contaCredito);
                    txt.append(separador);
                    txt.append(valorMulta);
                    txt.append(separador);
                    txt.append(codigoHistorico);
                    txt.append(separador);
                    if (!nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(historico);
                    if (!nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(rn);
                    valorFinal   = valorMulta;
                }

                if (tipoMovimento.equals("CTBJURCC") && !nomeContabilidade.toUpperCase().equals("SECEA")) {
                    txt.append(StringUtil.leftPad("XX", 2, ""));
                    txt.append(separador);
                    txt.append(StringUtil.leftPad(naturezaContabil, 1, ""));
                    txt.append(separador);
                    txt.append(centroCusto);
                    txt.append(separador);
                    txt.append(valorJuros);
                    txt.append(separador);
                    txt.append(rn);
                }
                if (tipoMovimento.equals("CTBMULCC") && !nomeContabilidade.toUpperCase().equals("SECEA")) {
                    txt.append(StringUtil.leftPad("XX", 2, ""));
                    txt.append(separador);
                    txt.append(StringUtil.leftPad(naturezaContabil, 1, ""));
                    txt.append(separador);
                    txt.append(centroCusto);
                    txt.append(separador);
                    txt.append(valorMulta);
                    txt.append(separador);
                    txt.append(rn);
                }

                if (tipoMovimento.equals("CTBDES")) {
                    txt.append(especialOrgano);
                    txt.append(StringUtil.leftPad(codEmpresa.trim(), 4, "0"));
                    txt.append(separador);
                    txt.append(StringUtil.leftPad(dataMovimento, tamData, "0"));
                    txt.append(separador);
                    txt.append(especialOrganoEspaco);
                    txt.append(contaDebito);
                    txt.append(separador);
                    txt.append(contaCredito);
                    txt.append(separador);
                    txt.append(valorDesconto);
                    txt.append(separador);
                    txt.append(codigoHistorico);
                    txt.append(separador);
                    if (!nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(historico);
                    if (!nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(rn);
                    valorFinal   = valorDesconto;
                }

                if (tipoMovimento.equals("CTBDESCC") && !nomeContabilidade.toUpperCase().equals("SECEA")) {
                    txt.append(StringUtil.leftPad("XX", 2, ""));
                    txt.append(separador);
                    txt.append(StringUtil.leftPad(naturezaContabil, 1, ""));
                    txt.append(separador);
                    txt.append(centroCusto);
                    txt.append(separador);
                    txt.append(valorDesconto);
                    txt.append(separador);
                    txt.append(rn);
                }

                if (tipoMovimento.equals("PORTADOR") || tipoMovimento.equals("CTBPORT")) {
                    txt.append(especialOrgano);
                    txt.append(StringUtil.leftPad(codEmpresa.trim(), 4, "0"));
                    txt.append(separador);
                    txt.append(StringUtil.leftPad(dataMovimento, tamData, "0"));
                    txt.append(separador);
                    txt.append(especialOrganoEspaco);
                    txt.append(contaDebito);
                    txt.append(separador);
                    txt.append(contaCredito);
                    txt.append(separador);
                    txt.append(valorLiquidacao);
                    txt.append(separador);
                    txt.append(codigoHistorico);
                    txt.append(separador);
                    if (!nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(historico);
                    if (!nomeContabilidade.toUpperCase().equals("ESCONTEC")) txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(rn);
                }

                if (!tipoMovimento.contains("CC")) {

                    String descricaoDebito = "";
                    String descricaoCredito = "";

                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebitoOriginal)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCreditoOriginal)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }

                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".QUE";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".QUE";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }

    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}


public void GeraArquivoDominioPipeUnico(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
    // logger.logInfo("TESTE ENTROU DOMINIO");
    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento = "";
    String codEmpresa    = "";
    String notafiscal    = "";
    String tipoMovimento = "";
    String dataMovimento = "";
    String contaDebito   = "";
    String contaCredito  = "";
    String valorLiquidacao = "";
    String valorDocumento = "";
    String documento     = "";
    String nomeOrigem    = "";
    String centroCusto   = "";
    String valorJuros    = "";
    String valorDesconto = "";
    String valorMulta    = "";
    String historico     = "";
    String naturezaContabil = "";
    String tipoLancamento = "";
    String nomeEmpresa   = "";
    String classificacao = "";
    String ERP           = "";                          //  <---<
    String complemento02 = "";
	HashMap mapaPlano   		= new HashMap();  

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

	// JSONArray toCloud		= new JSONArray();	//#20210126	
	// LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");


        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String linha = " ";
        int indice   = 0;

        int contador = 0;
        String classifica = " ";
        int totalRegistros = 0;
        ResumoTxt = new StringBuilder();


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
            String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
            String emailCanal = props.get("EMAIL_CANAL");
            //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;

            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);

 
            for (int t=0; t<records.length(); t++) {
				
				

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//////toCloud.put(createItemsToCloud(recMov, recAux));
					// //toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
				complemento02  = recMov.optString("COMPLEMENTO02");
                classificacao   = classificacao.substring(0,16).trim();
				

                historico       = historico.replaceAll(" \\.","\\.");
                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}



                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;
				
				
                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

				// quando temos uma filial no contabil, o CNPJ que vai no cabecalho deve ser o da matriz
				// para isto funcionar, o analista tem que criar uma regra de filial no CRM
				// e colocar codigo filial = 12CNPJ:00000000000000 (sendo este cnpj o da matriz
				if (historico.contains("CNPJ:")) {
                    cnpjEmpresa = cutString(historico, "CNPJ:", " ");
                    historico   = historico.replaceAll("CNPJ:","").replaceAll(cnpjEmpresa, "");
                }
				
                // if (contador == 0) {
                    // linha = "|0000|" + cnpjEmpresa + "|";
                    // txt.append(linha);
                    // txt.append(rn);
                    // classifica = " ";
                // }

                // xxxxxxxxxxxxxxxxxxx
                String codigoSCP = "";
                 if (historico.contains("SCP:")) {
                    codigoSCP = historico.substring(historico.indexOf("SCP:")+4).trim();
                    historico       = historico.substring(0,historico.indexOf("SCP:")).trim();
					
                }
                String codigoFilial = "";
                if (historico.contains("Filial:")) {
					 
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
					// logger.logInfo("FILIAL -> "+codigoFilial);
                    historico       = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
				String codigoCentroPort = "";
                if (historico.contains("CENTROPORT:")) {
                     codigoCentroPort = historico.substring(historico.indexOf("CENTROPORT:")+11).trim();
                    historico       = historico.substring(0,historico.indexOf("CENTROPORT:")).trim();
                }

                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

                String itemDFC = "";
                if (historico.contains("ItemDFC:")) {
                    itemDFC    = historico.substring(historico.indexOf("ItemDFC:")+8).trim();
                    historico  = historico.substring(0,historico.indexOf("ItemDFC:")).trim();
                }

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                valorLiquidacao   = valorLiquidacao.replaceAll("\\.", ",");
                valorJuros        = valorJuros.replaceAll("\\.", ",");
                valorMulta        = valorMulta.replaceAll("\\.", ",");
                valorDesconto     = valorDesconto.replaceAll("\\.", ",");

                String valorFinal = valorLiquidacao;
                String sContador  = String.valueOf(contador);
                // N?o exporta valores zerados
                double valorDouble = DecimalUtil.toDecimal(valorFinal);
                if (valorDouble == 0 && !nomeEmpresa.toUpperCase().contains("EMPREENDEDORSHOPPINGCIDADE")) {
                    continue;
                }
				
				// logger.logInfo("Dominio Classificacao -> "+classificacao+" - classifica -> "+classifica);
				// logger.logInfo("Dominio loteMovimento-> "+loteMovimento);
				
                if (!classifica.equals(classificacao)) {
                    contador++;
                    sContador = String.valueOf(contador);
                    
					
                    // linha = "|6000|" + classificacao.substring(0,1) + "||||";
                    // txt.append(linha);
                    // txt.append(rn);
					
                }

                classifica = classificacao;

                
                if (!classificacao.startsWith("X") && tipoLancamento.equals("PAGAR")) {
                    if (tipoMovimento.equals("CTBPORT")) contaDebito  = " ";
                    if (tipoMovimento.equals("CTB"))     contaCredito = " ";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        contaCredito = " ";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        contaCredito = " ";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        contaDebito = " ";
                        valorFinal   = valorDesconto;
                    }
                }
                if (tipoMovimento.contains("CC")) {
                    if (tipoMovimento.equals("CTBCC"))       valorFinal   = valorLiquidacao;
                    if (tipoMovimento.equals("CTBJURCC"))    valorFinal   = valorJuros;
                    if (tipoMovimento.equals("CTBMULCC"))    valorFinal   = valorMulta;
                    if (tipoMovimento.equals("CTBDESCC"))    valorFinal   = valorDesconto;
                }


                if (!classificacao.startsWith("X") && tipoLancamento.equals("RECEBER")) {
                    if (tipoMovimento.equals("CTBPORT") && !contaCredito.contains("INVERTE")) contaCredito  = " ";
                    if (tipoMovimento.equals("CTB") && !contaDebito.contains("INVERTE"))     contaDebito = " ";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        contaDebito = " ";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        contaDebito = " ";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        contaCredito = " ";
                        valorFinal   = valorDesconto;
                    }
                }

                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.toUpperCase().contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
						if (naturezaContabil.equals("D")) naturezaContabil = "TC";
						if (naturezaContabil.equals("C")) naturezaContabil = "TD";
						naturezaContabil = naturezaContabil.replaceAll("T","");
					}
				}
				historico = historico.toUpperCase().replaceAll("INVERTECONTA","").trim();
				
				// transforma e primeira maiuscula e demais minusculas
                if (nomeContabilidade.toUpperCase().contains("ELITECONSULTORIA")) historico = toDisplayCase(historico);
                if (nomeContabilidade.toUpperCase().contains("CUNHATAVARES")) historico = toDisplayCase(historico);
                if (nomeContabilidade.toUpperCase().contains("JJCHAVES")) historico = toDisplayCase(historico);


                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
				// @sergio 202301-0024357 feito ajuste para trocar a conta anular por vazio 
				contaDebito  = contaDebito.replaceAll("ANULAR","");
                contaCredito = contaCredito.replaceAll("ANULAR","");
                if (contaDebito.contains("E"))  contaDebito = contaDebito.substring(0, contaDebito.indexOf("E"));
                if (contaCredito.contains("E")) contaCredito = contaCredito.substring(0, contaCredito.indexOf("E"));

				// if(contaDebito.contains("ANULAR")) contaDebito = "";
				// if(contaCredito.contains("ANULAR")) contaCredito = "";
				
                valorDouble = DecimalUtil.toDecimal(valorFinal);
                if (valorDouble == 0  && !nomeEmpresa.toUpperCase().contains("EMPREENDEDORSHOPPINGCIDADE")) {
                    continue;
                }


                if (!tipoMovimento.contains("CC")) {
                    String codigoEmpresa = codEmpresa;
                    
                    if (!codigoFilial.equals("")) {codigoEmpresa = codigoFilial;}

                    linha = "C" + ";" + codigoEmpresa + ";" + dataMovimento + ";" + documento + ";" + contaDebito + ";" + contaCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico.trim();
					
					txt.append(linha);
					txt.append(rn);
				
				}

                // if(!itemDFC.equals("")) {
                //     linha = "|6130|" + itemDFC + "|" + valorFinal + "|";
                //     txt.append(linha);
                //     txt.append(rn);
                // }

                // if (tipoMovimento.contains("CC")) {
                //     if (naturezaContabil.equals("D")) linha = "|6110|" + centroCusto + "|" + codigoCentroPort + "|" + valorFinal + "|";
                //     if (naturezaContabil.equals("C")) linha = "|6110|" + codigoCentroPort + "|" + centroCusto + "|" + valorFinal + "|";
                //     txt.append(linha);
                //     txt.append(rn);
                // }
				
				
				//LCDPR
				//Felipe - 07/10/22
				//Adicionar o nome da empresa no ArrayList "empresasLCDPR" para gerar LCDPR
				ArrayList<String> empresasLcdpr = new ArrayList<String>(Arrays.asList("OTAVIOFAZENDASAOJOSE", "ALEXFAZBATISTA", "FERNANDOFAZENDA", "MILVOFAZENDA", "DAYANFAZENDA", "MARIANGELAFAZAMPARO", "NILSONBEDIN", "LUCIANOB"));
				empresasLcdpr.add("ARGINOBEDIN");
				
				
				boolean fazLcdpr = false;
				
				for (String empresaLcdpr : empresasLcdpr) {
					if (nomeEmpresa.toUpperCase().contains(empresaLcdpr))
						fazLcdpr = true;
				}
				
				if (tipoMovimento.equals("CTB") && (nomeEmpresa.toUpperCase().contains("LOINIRGATTO") && nomeContabilidade.toUpperCase().contains("AQUARIUS")) || fazLcdpr)  {
					// logger.logInfo("CP02 " + complemento02);
					String classificacaoPgRc = "1";
					
					if (tipoLancamento.equals("PAGAR")) {
						naturezaContabil = "C";
						classificacaoPgRc = "2";
					}
					if (tipoLancamento.equals("RECEBER")) naturezaContabil = "D";
					linha = "|6140|" + classificacaoPgRc + "|" + documento + "|1|" + complemento02 + "|1|" + naturezaContabil + "|";
					txt.append(linha);
                    txt.append(rn);
					linha = "|6141|" + "1|" + valorFinal + "|";
					txt.append(linha);
                    txt.append(rn);
				}

                String descricaoDebito = "";
				String descricaoCredito = "";
				
                if (!tipoMovimento.contains("CC")) {
				
					ttPlanoConta ttP  = (ttPlanoConta)mapaPlano.get(contaDebitoOriginal);
					if (ttP == null) {					
						ttP  = new ttPlanoConta(); 
						ttP.descricaoPlano = "";
 
						JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
						.fields("DESCRICAOPLANO")
						.param(codEmpresa)
						.param(contaDebitoOriginal)
						.queryUnique();
						if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
							descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
							ttP.descricaoPlano = descricaoDebito;
						}
						ttP.contaContabil     = contaDebitoOriginal;
						mapaPlano.put(contaDebitoOriginal,ttP);

					}
					descricaoDebito = ttP.descricaoPlano;

					ttP  = (ttPlanoConta)mapaPlano.get(contaCreditoOriginal);
					if (ttP == null) {					
						ttP  = new ttPlanoConta(); 
						ttP.descricaoPlano = "";
 
						JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
						.fields("DESCRICAOPLANO")
						.param(codEmpresa)
						.param(contaCreditoOriginal)
						.queryUnique();
						if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
							descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
							ttP.descricaoPlano = descricaoCredito;
						}
						ttP.contaContabil     = contaCreditoOriginal;
						mapaPlano.put(contaCreditoOriginal,ttP);
					}
					descricaoCredito = ttP.descricaoPlano;

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }
				
                if(!tipoMovimento.contains("PORT")) totalRegistros++;


            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				// //toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			
            if (totalRegistros > 0) {

                // Gravacao do Arquivo TXT
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }

                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

//#################################################################################################
///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Qestor).          //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoQestor(JSONObject jDadosLote, InoutLogger logger) throws Exception {
     // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP				= "";                            //  <---<
    Date dtAgora			= new Date();

    StringBuilder txt		= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");
        String codEmpresaOriginal = codEmpresa;

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");
        //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;

        ResumoTxt = new StringBuilder();
        if(nomeContabilidade.toUpperCase().equals("ESCONTEC")) {
            ResumoTxt.append("REGISTROS COM DESCONTO MAIOR QUE VALOR PAGO/RECEBIDO");
            ResumoTxt.append(rn);
            ResumoTxt.append(rn);
            ResumoTxt.append("DATA;CLIENTE/FORNECEDOR;DOCUMENTO;VALOR DOC;VALOR DESCONTO;CONTA DEBITO;CONTA CREDITO;LOTE");
            ResumoTxt.append(rn);
        } else{
            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);
        }


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {

                JSONObject recMov = records.optJSONObject(t);
                
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                String dataMovimentoOriginal = dataMovimento;

                contaDebito  = contaDebito.toUpperCase();
                contaCredito = contaCredito.toUpperCase();
                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {					
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                }
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;
 
                String codigoFilial = "";
                if (!nomeContabilidade.toUpperCase().equals("ORGANO")) codEmpresa = "01";
                String codigoCentroPort = "";
                
                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }

                String codigoHistorico = "0";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

				if (historico.contains("CENTROPORT:")) {
                    codigoCentroPort = historico.substring(historico.indexOf("CENTROPORT:")+11).trim();
                    historico       = historico.substring(0,historico.indexOf("CENTROPORT:")).trim();
                }
				
                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                String valorFinal = valorLiquidacao;

                historico = historico.replaceAll(",","\\.").replaceAll(";","");
                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
				if(historico.startsWith("-") || historico.startsWith("|")) {
				
					if (!codEmpresa.equals("1624") || nomeContabilidade.toUpperCase().equals("RSCONTABILIDADE")) 	historico = historico.substring(1).trim();
				}
				               
			   if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                if (tipoMovimento.equals("CTB")) {
                    txt.append(StringUtil.leftPad(codEmpresa, 3, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(dataMovimento, 8, "0"));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(contaDebito, 17, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(contaCredito, 17, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(valorLiquidacao, 13, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(codigoHistorico, 5, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(StringUtil.rightPad(historico, 100, ""));
                    txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(rn);
                }

                if (tipoMovimento.equals("CTBCC")) {
                    txt.append(StringUtil.leftPad("XX", 2, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(naturezaContabil, 1, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(centroCusto, 12, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(valorLiquidacao, 14, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(rn);
                }

                if (tipoMovimento.equals("CTBJUR")) {
                    txt.append(StringUtil.leftPad("000", 3, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(dataMovimento, 8, "0"));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(contaDebito, 17, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(contaCredito, 17, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(valorJuros, 13, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(codigoHistorico, 5, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(StringUtil.rightPad(historico, 100, ""));
                    txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(rn);
                    valorFinal = valorJuros;
                }

                if (tipoMovimento.equals("CTBMUL")) {
                    txt.append(StringUtil.leftPad("000", 3, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(dataMovimento, 8, "0"));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(contaDebito, 17, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(contaCredito, 17, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(valorMulta, 13, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(codigoHistorico, 5, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(StringUtil.rightPad(historico, 100, ""));
                    txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(rn);
                    valorFinal = valorMulta;
                }

                if (tipoMovimento.equals("CTBJURCC")) {
                    txt.append(StringUtil.leftPad("XX", 2, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(naturezaContabil, 1, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(centroCusto, 12, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(valorJuros, 14, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(rn);
                }
                if (tipoMovimento.equals("CTBMULCC")) {
                    txt.append(StringUtil.leftPad("XX", 2, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(naturezaContabil, 1, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(centroCusto, 12, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(valorMulta, 14, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(rn);
                }

                if (tipoMovimento.equals("CTBDES")) {
                    txt.append(StringUtil.leftPad("000", 3, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(dataMovimento, 8, "0"));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(contaDebito, 17, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(contaCredito, 17, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(valorDesconto, 13, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(codigoHistorico, 5, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(StringUtil.rightPad(historico, 100, ""));
                    txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(rn);
                    valorFinal = valorDesconto;
                }

                if (tipoMovimento.equals("CTBDESCC")) {
                    txt.append(StringUtil.leftPad("XX", 2, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(naturezaContabil, 1, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(centroCusto, 12, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(valorDesconto, 14, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(rn);
                }

                if (tipoMovimento.equals("PORTADOR") || tipoMovimento.equals("CTBPORT")) {
                    txt.append(StringUtil.leftPad("000", 3, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(dataMovimento, 8, "0"));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(contaDebito, 17, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(contaCredito, 17, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(valorLiquidacao, 13, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(codigoHistorico, 5, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(StringUtil.rightPad(historico, 100, ""));
                    txt.append(StringUtil.leftPad("\"", 1, ""));
                    txt.append(rn);
                }
                if (!codigoCentroPort.equals("")) {
                    if (nomeContabilidade.toUpperCase().equals("ASERCOMG") && codEmpresaOriginal.equals("1965")){
                        txt.append(StringUtil.leftPad("G;", 2, ""));
                    } else {
                        txt.append(StringUtil.leftPad("XX", 2, ""));
                        txt.append(StringUtil.leftPad(";", 1, ""));
                    }
                    // txt.append(StringUtil.leftPad(naturezaContabil, 1, ""));
                    
                    if(tipoMovimento.equals("CTB") && naturezaContabil.equals("C")){
                        txt.append(StringUtil.leftPad("D", 1, ""));
                    }
                    if((tipoMovimento.equals("CTBPORT") || tipoMovimento.equals("PORTADOR")) && naturezaContabil.equals("D")){
                        txt.append(StringUtil.leftPad("C", 1, ""));
                    }
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(codigoCentroPort, 12, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(StringUtil.leftPad(valorLiquidacao, 14, ""));
                    txt.append(StringUtil.leftPad(";", 1, ""));
                    txt.append(rn);
                }
                if(nomeContabilidade.toUpperCase().equals("ESCONTEC")) {
                    try {
                        double valorDescontoDouble   = Double.parseDouble(valorDesconto);
                        double valorLiquidacaoDouble = Double.parseDouble(valorLiquidacao);

                        if ((valorDescontoDouble > valorLiquidacaoDouble && tipoMovimento.equals("CTB")) || contaCredito.equals("5")) {
                            ResumoTxt.append(dataMovimento + ";" + nomeOrigem + ";" + documento + ";" + valorLiquidacao + ";" + valorDesconto + ";" + contaDebito + ";" + contaCredito + ";" + loteMovimento);
                            ResumoTxt.append(rn);
                        }
                    } catch (Exception vx) {}
                } else {

                    if (!tipoMovimento.contains("CC")) {
                        String descricaoDebito = "";
                        String descricaoCredito = "";

                        JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO")
                        .param(codEmpresa)
                        .param(contaDebitoOriginal)
                        .queryUnique();
                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                        }

                        JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO")
                        .param(codEmpresa)
                        .param(contaCreditoOriginal)
                        .queryUnique();
                        if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                            descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                        }

                        ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico  + ";" + nomeOrigem);
                        ResumoTxt.append(rn);
                    }

                }


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				// //toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".QUE";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".QUE";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }

    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}
//######################################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@SCI).             //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoSciUNICO(JSONObject jDadosLote, InoutLogger logger) throws Exception {
	logger.logInfo("ENTROU SCIUNICO");
	// Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento	= "";
    String codEmpresa		= "";
    String tipoMovimento	= "";
    String dataMovimento	= "";
    String contaDebito		= "";
    String contaCredito		= "";
    String valorLiquidacao	= "";
    String documento		= "";
    String nomeOrigem		= "";
    String cpfCnpj			= "";
    String centroCusto		= "";
    String valorJuros		= "";
    String valorMulta		= "";
    String valorDesconto	= "";
    String historico		= "";
    String naturezaContabil	= "";
    String tipoLancamento	= "";
    String nomeEmpresa		= "";
    String ERP				= "";                            //  <---<

    Date dtAgora			= new Date();

    StringBuilder txt		= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	// LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	
	String ERPAux = "";

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);

        ERP = props.get("ERP_CONTABILIDADE");
		ERPAux = props.get(nomeEmpresa.toUpperCase() +"_ERP_EMPRESA");
		 
		if (!ERPAux.equals("")) ERP = ERPAux;
		
		
         String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");
        //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;

        int contador  = 0;

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            ResumoTxt = new StringBuilder();
            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;PARTICIPANTE;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);


            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {
                JSONObject recMov = records.optJSONObject(t);
                
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					// //toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento	= recMov.optString("TIPOMOVIMENTO");
                dataMovimento	= recMov.optString("DATAMOVIMENTO");
                contaDebito		= recMov.optString("CONTADEBITO");
                contaCredito	= recMov.optString("CONTACREDITO");
				// logger.logDebug("SCIu >>> CC -> "+contaCredito+" - CD -> "+contaDebito);
                valorLiquidacao	= recMov.optString("VALORLIQUIDACAO");
                cpfCnpj			= recMov.optString("CPFCNPJ");
                documento		= recMov.optString("DOCUMENTO");
                nomeOrigem		= recMov.optString("NOMEORIGEM");
                centroCusto		= recMov.optString("CENTROCUSTO");
                valorJuros		= recMov.optString("VALORJUROS");
                valorMulta		= recMov.optString("VALORMULTA");
                valorDesconto	= recMov.optString("VALORDESCONTO");
                historico		= recMov.optString("HISTORICO");
				// logger.logDebug("SCIu >>> Hist -> "+historico);
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento	= recMov.optString("TIPOLANCAMENTO");

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                String dataMovimentoOriginal = dataMovimento;
				
 
                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;

                historico = historico.replaceAll(",","\\.").replaceAll(";","");
				
				if (nomeContabilidade.toUpperCase().contains("TUPA")) historico = toDisplayCase(historico);

                String codigoParticipante = "";
                if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }

				if(nomeContabilidade.toUpperCase().equals("VERSATIL") && !tipoMovimento.equals("CTB")) codigoParticipante = "";

				String codigoFilial = "";
                if (historico.contains("Filial:")) {
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico       = historico.substring(0,historico.indexOf("Filial:")).trim();
                }

                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
				if (nomeContabilidade.toUpperCase().contains("TUPA") && historico.contains("Codigohistorico:")) {
					 codigoHistorico = historico.substring(historico.indexOf("Codigohistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("Codigohistorico:")).trim();
				}
				
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                if(contaDebito.contains("IGNOR"))  continue;
                if(contaCredito.contains("IGNOR")) continue;
				// if (tipoMovimento.contains("CC")) continue;
				
				if(nomeContabilidade.toUpperCase().contains("VELEVCONTABILIDADE") && (tipoMovimento.contains("CC") || tipoMovimento.contains("CTBJUR") || tipoMovimento.contains("CTBDES") || tipoMovimento.contains("CTBMUL"))) continue;
				
                contador++;

                String valorFinal = valorLiquidacao;

                if (tipoMovimento.equals("CTBJUR")) valorFinal = valorJuros;
                if (tipoMovimento.equals("CTBDES")) valorFinal = valorDesconto;
                if (tipoMovimento.equals("CTBMUL")) valorFinal = valorMulta;

                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                }
                String participante = "";  // VER QUE PARTICIPANTE USAMOS APENAS COM SCI UNICO
				
				if (!codigoParticipante.equals("") || contaDebito.toUpperCase().contains("P") || contaCredito.toUpperCase().contains("P")) {
					
					// Comentado pois estava impactando no chamado 202207-0016792
					
					// if(nomeContabilidade.toUpperCase().contains("PIONEIRASERVCONTABEIS")){
						// if(!contaDebito.toUpperCase().contains("P")){
							// codigoParticipante = contaDebito;
						// }
					// }
					
					if (contaDebito.toUpperCase().contains("P")) {
						if(!codigoParticipante.equals("")) participante = codigoParticipante;
						String [] contaArray = contaDebito.toUpperCase().split("P");
						if (contaArray.length > 1) {
							participante = cutString(contaDebito, "P").trim();
                            contaDebito  = cutString(contaDebito, 0, "P").trim();
						}
						if (contaArray.length == 1) {
							String aux = participante;
							participante = contaDebito.toUpperCase().replaceAll("P", "").trim();
							contaDebito = aux;
						}
					}

					if (contaCredito.toUpperCase().contains("P")) {
						if(!codigoParticipante.equals("")) participante = codigoParticipante;
						String [] contaArray = contaCredito.toUpperCase().split("P");
						if (contaArray.length > 1) {
							participante = cutString(contaCredito, "P").trim();
							contaCredito = cutString(contaCredito, 0, "P").trim();
						}
						if (contaArray.length == 1) {
							String aux = participante;
							participante = contaCredito.toUpperCase().replaceAll("P", "").trim();
							contaCredito = aux;
						}
					}
				}

 
				// logger.logDebug("CONTACREDITO -> " + contaCredito + " codigoParticipante -> " + codigoParticipante + " contaDebito -> " + contaDebito + " participante -> " + participante);
				
                if (tipoMovimento.equals("CTB") && !nomeContabilidade.toUpperCase().contains("FISCONTALCONTABIL") && !nomeContabilidade.toUpperCase().contains("COSTASERVICOSCONTABEIS") && !nomeContabilidade.toUpperCase().contains("METACOMPANY")) {
					if(tipoLancamento.contains("PAGAR")){
                        if (contaDebito.length() > 9) cpfCnpj = contaDebito.replaceAll("P", "");
                        if (cpfCnpj.length() > 0) {
                            participante = cpfCnpj;
                            // xavier contaDebito = "100005";
                            if (!codigoParticipante.equals("")) contaDebito = codigoParticipante;
                        }
                    }

                    if(tipoLancamento.contains("RECEBER")){
                        if (contaCredito.length() > 9) cpfCnpj = contaCredito.replaceAll("P", "");
                        if (cpfCnpj.length() > 0) {
                            participante = cpfCnpj;
                            // xavier contaCredito = "100005";
                            if (!codigoParticipante.equals("")) contaCredito = codigoParticipante;
                        }
                    }
                }
				
                if (nomeContabilidade.toUpperCase().equals("TUPA")){
                    historico = toDisplayCase(historico);
                    if (ERP.equals("SCI UNICO") && tipoLancamento.contains("PAGAR") && tipoMovimento.equals("CTBDES")) {
                        if (contaDebito.length() > 9) cpfCnpj = contaDebito;
                        if (cpfCnpj.length() > 0) {
                            participante = cpfCnpj;
                            contaDebito  = "100005";
                        }
                    }
                }

                String documentoHistorico = "DCTO";
				
				/* xavier
                if(contaDebito.toUpperCase().contains("P") && !nomeContabilidade.toUpperCase().equals("JMF") && !nomeContabilidade.toUpperCase().equals("ALENCASTROESILVA") && !nomeContabilidade.toUpperCase().contains("COSTASERVICOSCONTABEIS") && !nomeContabilidade.toUpperCase().contains("MNCONTABIL")) {
 					participante = contaDebito.replaceAll("P","").replaceAll("p","").trim();
                    if (codigoParticipante.equals("") && !nomeContabilidade.toUpperCase().equals("METACOMPANY")) {
                        codigoParticipante = "100005";
                    }
                    contaDebito  = codigoParticipante;
                    if (!codigoParticipante.equals("") && tipoLancamento.contains("PAGAR") && (tipoMovimento.equals("CTB") || tipoMovimento.equals("CTBDES"))) {
                        contaDebito = codigoParticipante;
                        if (documentoHistorico.length() > 15) documentoHistorico = documentoHistorico.substring(0,15);
                    }
                    if (!codigoParticipante.equals("") && tipoLancamento.contains("RECEBER") && (tipoMovimento.equals("CTB") || tipoMovimento.equals("CTBDES"))) {
                        contaCredito = codigoParticipante;
                        if (documentoHistorico.length() > 15) documentoHistorico = documentoHistorico.substring(0,15);
                    }
                }  */
				
				
				
				//padrão de participante para fornecedor na conta CREDITO
				// logger.logDebug("CONTACREDITO -> " + contaCredito + " codigoParticipante -> " + codigoParticipante + " contaDebito -> " + contaDebito);
				logger.logInfo("CONTACREDITO -> " + contaCredito + " codigoParticipante -> " + codigoParticipante + " contaDebito -> " + contaDebito);
				if(contaCredito.toUpperCase().contains("P")) {
					
					participante = contaCredito.replaceAll("P","").replaceAll("p","").trim();
					// xavier if (codigoParticipante.equals("") && !nomeContabilidade.toUpperCase().equals("METACOMPANY") && !nomeContabilidade.toUpperCase().contains("MNCONTABIL")) codigoParticipante = "100005";
					if(!codigoParticipante.equals("")) contaCredito = codigoParticipante; 
					if(nomeContabilidade.toUpperCase().contains("CENTRALCONTABIL") || nomeContabilidade.toUpperCase().contains("TOIGOCONTADORES")) contaCredito  = cutString(contaCredito, 0, "P").trim();
				}
				if(contaDebito.toUpperCase().contains("P") && (nomeContabilidade.toUpperCase().equals("JMF") || nomeContabilidade.toUpperCase().contains("COSTASERVICOSCONTABEIS") || nomeContabilidade.toUpperCase().contains("CENTRALCONTABIL") || nomeContabilidade.toUpperCase().contains("TOIGOCONTADORES"))) {
					// contaDebito  = cutString(contaDebito, "P").trim();
					participante = cutString(contaDebito, "P").replaceAll("P","").replaceAll("p","").trim();
					contaDebito  = cutString(contaDebito, 0, "P").trim();
				}
				
                
                if(contaCredito.toUpperCase().contains("P") && (nomeContabilidade.toUpperCase().equals("GRUPOFATOSSP"))) {
                    participante = contaCredito.replaceAll("P","").replaceAll("p","").trim();
                    contaCredito  = "159";
					
					if(!codigoParticipante.equals("")) contaCredito = codigoParticipante;
                }
				
				//#2308-012857
				if(contaDebito.contains("ANULAR")) contaDebito  = contaDebito.replaceAll("ANULAR","");
                if(contaCredito.contains("ANULAR")) contaCredito = contaCredito.replaceAll("ANULAR","");
				
				// logger.logDebug("CONTACREDITO -> clear'" + contaCredito + " codigoParticipante -> " + codigoParticipante + " contaDebito -> " + contaDebito + " participante -> " + participante);
								
                if(nomeContabilidade.toUpperCase().contains("GRUPOFATOSSP"))  documentoHistorico = "DCTO" + documento;//@DiMaz
                if(nomeContabilidade.toUpperCase().contains("VELEVCONTABILIDADE"))  documentoHistorico = "DCTO" + documento;//#BTL
				if(nomeContabilidade.toUpperCase().contains("COSTASERVICOSCONTABEIS"))  documentoHistorico = "DCTO" + documento;//@Jw
				if(nomeContabilidade.toUpperCase().contains("CONTAUDITORIA"))  documentoHistorico = "DCTO" + documento;//@Sergio
				
				if(nomeEmpresa.toUpperCase().contains("PRODIPANI"))  documentoHistorico = "DCTO";//@Jw
				
				if(tipoLancamento.contains("PAGAR")){ //2310-020826
					if(nomeContabilidade.toUpperCase().contains("MGCONTECNICA"))  documentoHistorico = "DCTO" + documento;
				}
				if(nomeContabilidade.toUpperCase().contains("SERVICECONTABILIDADE"))  documentoHistorico = "DCTO" + documento; //2311-021527
				if(nomeContabilidade.toUpperCase().contains("GMCONTADORES"))  documentoHistorico = "DCTO" + documento; //2310-019621
				
				
                if (documentoHistorico.length() > 15) documentoHistorico = documentoHistorico.substring(0,15);
				
				//09/06/2021 - @Sergio - Colocar "DCTO"...
				// if(nomeContabilidade.toUpperCase().equals("CONTAUDITORIA")){
                    // documentoHistorico = documento;
                // }
				
				if(nomeContabilidade.toUpperCase().equals("VERSATIL")) {
                    valorFinal = valorFinal.replaceAll("\\.",",");

					if (!codigoFilial.equals("")) {
						txt.append(codigoFilial);
						txt.append("|");
					}
                    txt.append(dataMovimentoOriginal);
                    txt.append("|");
                    txt.append(contaDebito);
                    txt.append("|");
                    txt.append(contaCredito);
                    txt.append("|");
                    txt.append(valorFinal);
                    txt.append("|");
                    txt.append(codigoHistorico);
                    txt.append("|");
                    txt.append(historico);
                    txt.append("|");
                    txt.append(participante);
                    txt.append("|");
					txt.append(documento);
					txt.append(rn);
                }
				
                if(nomeContabilidade.toUpperCase().equals("FISCONTALCONTABIL")) {
                    valorFinal = valorFinal.replaceAll("\\.",",");

                    txt.append(dataMovimentoOriginal);
                    txt.append(";");
                    txt.append(contaDebito);
                    txt.append(";");
                    txt.append(contaCredito);
                    txt.append(";");
                    txt.append(valorFinal);
                    txt.append(";");
                    txt.append(documento);
                    txt.append(";");
                    txt.append(historico);
                    txt.append(rn);
                }
				
				logger.logInfo("CONTINHAS " + contaDebito + " | " + contaCredito + " | " + participante);
				
                if(!nomeContabilidade.toUpperCase().equals("VERSATIL") && !nomeContabilidade.toUpperCase().equals("FISCONTALCONTABIL")) {
                    txt.append(StringUtil.leftPad(String.valueOf(contador), 6, "000000"));  //OK1
                    txt.append(",");
                    txt.append(StringUtil.leftPad(dataMovimento, 8, ""));                   //OK2
                    txt.append(",");
                    txt.append(contaDebito);                                                //OK3
                    txt.append(",");
                    txt.append(contaCredito);                                               //OK4
                    txt.append(",");
                    txt.append(valorFinal);                                                 //OK5
                    txt.append(",");
                    txt.append(codigoHistorico);                                            //OK6
                    txt.append(",");
                    txt.append(historico);                                                  //OK7
                    txt.append(",");
					if (nomeContabilidade.toUpperCase().equals("ASSEMPREL") || nomeContabilidade.toUpperCase().equals("EMLCONTABIL")) txt.append(documentoHistorico+documento);
					else if (nomeContabilidade.toUpperCase().equals("PIONEIRASERVCONTABEIS")) txt.append(documentoHistorico+documento);//@yuri 
					else txt.append(documentoHistorico);
                    txt.append(",");                    //LOTE                              //OK8	
                    txt.append(",");                    //LOTE                              //OK9	
                    if (tipoLancamento.contains("PAGAR")) {
                        if (centroCusto.equals("")) {
                            txt.append(participante);
                            txt.append(",A,,");
                        } else {
                            if (nomeContabilidade.toUpperCase().contains("VELEVCONTABILIDADE") || nomeContabilidade.toUpperCase().contains("GRUPOFATOSSP")) {
                                    if (tipoLancamento.contains("PAGAR"))  txt.append("C,"); else  txt.append("D,");
                            } else {
                                    if (tipoLancamento.contains("PAGAR"))  txt.append("D,"); else  txt.append("C,");
                            }
                            txt.append(centroCusto);
                            txt.append(",");
                            txt.append(valorFinal);
                            txt.append(",");
                            txt.append(participante);
                            txt.append(",");						
                        }
                    }
                    if (!tipoLancamento.contains("PAGAR")) {
                        if (centroCusto.equals("")) {
                            txt.append(",");						
                            txt.append(participante);
                            txt.append(",A,");
                        } else {
                            if (nomeContabilidade.toUpperCase().contains("VELEVCONTABILIDADE") || nomeContabilidade.toUpperCase().contains("GRUPOFATOSSP")) {
                                    if (tipoLancamento.contains("PAGAR"))  txt.append("C,"); else  txt.append("D,");
                            } else {
                                    if (tipoLancamento.contains("PAGAR"))  txt.append("D,"); else  txt.append("C,");
                            }
                            txt.append(centroCusto);
                            txt.append(",");
                            txt.append(valorFinal);
                            txt.append(",");
                            txt.append(",");						
							txt.append(participante);					
                        }
                    }
                    txt.append(rn);

                }
                String descricaoDebito = "";

                String descricaoCredito = "";

                if (!tipoMovimento.contains("CC")) {
                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebitoOriginal)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCreditoOriginal)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";"+ participante + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }

                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				// //toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}

            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }

    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@SCI).             //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoSci(JSONObject jDadosLote, InoutLogger logger) throws Exception {
	// Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento	= "";
    String codEmpresa		= "";
    String tipoMovimento	= "";
    String dataMovimento	= "";
    String contaDebito		= "";
    String contaCredito		= "";
    String valorLiquidacao	= "";
    String documento		= "";
    String nomeOrigem		= "";
    String cpfCnpj			= "";
    String centroCusto		= "";
    String valorJuros		= "";
    String valorMulta		= "";
    String valorDesconto	= "";
    String historico		= "";
    String naturezaContabil	= "";
    String tipoLancamento	= "";
    String nomeEmpresa		= "";
    String ERP				= "";                            //  <---<

    Date dtAgora			= new Date();

    StringBuilder txt		= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
		if (nomeEmpresa.toUpperCase().equals("ELISETE") && nomeContabilidade.toUpperCase().equals("ORTECONT")) ERP ="SCI";
		if (nomeEmpresa.toUpperCase().equals("AMMOTALANCHES") && nomeContabilidade.toUpperCase().equals("ORTECONT")) ERP ="SCI";
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");
        //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;
        int contador  = 0;

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            ResumoTxt = new StringBuilder();
            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;PARTICIPANTE;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);

            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {
                JSONObject recMov = records.optJSONObject(t);
                
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					////toCloud.put(createItemsToCloud(recMov, recAux));
					////toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
				tipoMovimento = recMov.optString("TIPOMOVIMENTO");
                dataMovimento = recMov.optString("DATAMOVIMENTO");
                contaDebito = recMov.optString("CONTADEBITO");
                contaCredito = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                cpfCnpj = recMov.optString("CPFCNPJ");
                documento = recMov.optString("DOCUMENTO");
                nomeOrigem = recMov.optString("NOMEORIGEM");
                centroCusto = recMov.optString("CENTROCUSTO");
                valorJuros = recMov.optString("VALORJUROS");
                valorMulta = recMov.optString("VALORMULTA");
                valorDesconto = recMov.optString("VALORDESCONTO");
                historico = recMov.optString("HISTORICO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento = recMov.optString("TIPOLANCAMENTO");
				
				

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                String dataMovimentoOriginal = dataMovimento;

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;

                historico = historico.replaceAll(",","\\.").replaceAll(";","");

                String codigoParticipante = "";
                if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }

                if(nomeContabilidade.toUpperCase().equals("VERSATIL") && !tipoMovimento.equals("CTB")) codigoParticipante = "";
					
				if(nomeContabilidade.toUpperCase().equals("VERSATIL") && !contaDebito.toUpperCase().contains("P") && !contaCredito.toUpperCase().contains("P")) codigoParticipante = "";
				
				String codigoFilial = "";
                if (historico.contains("Filial:")) {
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico       = historico.substring(0,historico.indexOf("Filial:")).trim();
                }

                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
				
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();
				

                if(contaDebito.contains("IGNOR"))  continue;
                if(contaCredito.contains("IGNOR")) continue;
				if (tipoMovimento.contains("CC")) continue;
                contador++;

                String valorFinal = valorLiquidacao;

                if (tipoMovimento.equals("CTBJUR")) valorFinal = valorJuros;
                if (tipoMovimento.equals("CTBDES")) valorFinal = valorDesconto;
                if (tipoMovimento.equals("CTBMUL")) valorFinal = valorMulta;

                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                }
                String participante = "";  // VER QUE PARTICIPANTE USAMOS APENAS COM SCI UNICO
				if(nomeContabilidade.toUpperCase().contains("DIRETRIZES") || nomeContabilidade.toUpperCase().contains("GUMZ")){
					if (cpfCnpj.length() > 0) {
						participante = cpfCnpj;
						if (!codigoParticipante.equals("")){
							if(tipoLancamento.contains("RECEBER"))
								contaCredito = codigoParticipante;
							if(tipoLancamento.contains("PAGAR"))
								contaDebito = codigoParticipante;
						}
					}
				}
				
				// if(nomeContabilidade.toUpperCase().contains("ESCSAMPAIO")){
					// if(tipoLancamento.contains("PAGAR")){
                        // if (contaDebito.length() > 11){
							// participante = contaDebito.replaceAll("[^0-9]","");
							// contaDebito = codigoParticipante;
						// }
                    // }
				// }
				
				//#2307-009103
				//if(contaDebito.toUpperCase().contains("P") && (nomeContabilidade.toUpperCase().contains("ASSESUL") || nomeContabilidade.toUpperCase().contains("KAIROSSERVICOSCONTABEIS"))) {            
				//2312-025176 - Esse tratamento foi feito para quando as contas sao preenchidas no formato conta participante + "P" + conta, mas estava afetando quando a contas sao preenchidas de forma conta + "P"
				if(contaDebito.toUpperCase().contains("P") && ((nomeContabilidade.toUpperCase().contains("ASSESUL") && cutString(contaDebito.trim(), 0, contaDebito.length() -1).toUpperCase().contains("P")) || nomeContabilidade.toUpperCase().contains("KAIROSSERVICOSCONTABEIS"))) {            
					participante = cutString(contaDebito, "P").replaceAll("P","").replaceAll("p","").trim();
					contaDebito  = cutString(contaDebito, 0, "P").trim();
				}
				
				//2311-022209
				if(contaCredito.toUpperCase().contains("P") && nomeContabilidade.toUpperCase().contains("KAIROSSERVICOSCONTABEIS") && cutString(contaCredito.trim(), 0, contaCredito.length() -1).contains("P")){
					participante = cutString(contaCredito, "P").replaceAll("P","").replaceAll("p","").trim();
					contaCredito = cutString(contaCredito, 0, "P").trim();				
				}
				
                if(contaDebito.toUpperCase().contains("P") /*&& nomeContabilidade.toUpperCase().equals("VERSATIL")*/) {
                    String participanteVersatil = codigoParticipante;
                    codigoParticipante = contaDebito.replaceAll("P","").replaceAll("p","").trim();
                    participante = codigoParticipante;
                    contaDebito  = participanteVersatil;
                }

                String documentoHistorico = "DCTO";
				
				/*  xavier
                if(contaDebito.toUpperCase().contains("P") && !nomeContabilidade.toUpperCase().equals("JMF") && !nomeContabilidade.toUpperCase().equals("ALENCASTROESILVA") && !nomeContabilidade.toUpperCase().contains("COSTASERVICOSCONTABEIS") && !nomeContabilidade.toUpperCase().contains("METACOMPANY")) {
                    participante = contaDebito.replaceAll("P","").replaceAll("p","").trim();
                    if (codigoParticipante.equals("")) {
                    // xavier    codigoParticipante = "100005";
                    }
                    contaDebito  = codigoParticipante;
                    if (!codigoParticipante.equals("") && tipoLancamento.contains("PAGAR") && (tipoMovimento.equals("CTB") || tipoMovimento.equals("CTBDES"))) {
                        contaDebito = codigoParticipante;
                        if (documentoHistorico.length() > 15) documentoHistorico = documentoHistorico.substring(0,15);
                    }
                    if (!codigoParticipante.equals("") && tipoLancamento.contains("RECEBER") && (tipoMovimento.equals("CTB") || tipoMovimento.equals("CTBDES"))) {
                        contaCredito = codigoParticipante;
                        if (documentoHistorico.length() > 15) documentoHistorico = documentoHistorico.substring(0,15);
                    }
                }
				
				*/
				
				
				//padrão de participante para fornecedor na conta CREDITO
				if(contaCredito.toUpperCase().contains("P")) {
                    participante = contaCredito.replaceAll("P","").replaceAll("p","").trim();
                    // xavier if (codigoParticipante.equals("") && !nomeContabilidade.toUpperCase().contains("METACOMPANY")) codigoParticipante = "100005";
					if(!codigoParticipante.equals("")) contaCredito = codigoParticipante;
				}
                if(contaDebito.toUpperCase().contains("P") && nomeContabilidade.toUpperCase().equals("ALENCASTROESILVA")) {
                    participante = contaDebito.replaceAll("P","").replaceAll("p","").trim();
                    contaDebito  = "1201";
                }
                if(contaCredito.toUpperCase().contains("P") && (nomeContabilidade.toUpperCase().equals("ALENCASTROESILVA"))) {
                    participante = contaCredito.replaceAll("P","").replaceAll("p","").trim();
                    contaCredito  = "159";
					
					if(!codigoParticipante.equals("")) contaCredito = codigoParticipante;
                }
				
				//#2308-012857
				if(contaDebito.contains("ANULAR")) contaDebito  = contaDebito.replaceAll("ANULAR","");
                if(contaCredito.contains("ANULAR")) contaCredito = contaCredito.replaceAll("ANULAR","");
				
				if (!participante.equals("")) {
					if (nomeContabilidade.toUpperCase().contains("GUMZ")) documentoHistorico = "DCTO" + documento;
				}
				
				if(nomeContabilidade.toUpperCase().contains("ROTACONTABILIDADE"))  documentoHistorico = "DCTO" + documento;
                if (documentoHistorico.length() > 15) documentoHistorico = documentoHistorico.substring(0,15);
				
                if (nomeContabilidade.toUpperCase().equals("VERSATIL")) {
                    valorFinal = valorFinal.replaceAll("\\.",",");

					if (!codigoFilial.equals("")) {
						txt.append(codigoFilial);
						txt.append("|");
					}
                    txt.append(dataMovimentoOriginal);
                    txt.append("|");
                    txt.append(contaDebito);
                    txt.append("|");
                    txt.append(contaCredito);
                    txt.append("|");
                    txt.append(valorFinal);
                    txt.append("|");
                    txt.append(codigoHistorico);
                    txt.append("|");
                    txt.append(historico);
                    txt.append("|");
                    txt.append(codigoParticipante);
                    txt.append("|");
					txt.append(documento);
					txt.append(rn);
                }
                if (!nomeContabilidade.toUpperCase().equals("VERSATIL") && !nomeContabilidade.toUpperCase().equals("FISCONTALCONTABIL")) {
                    
					if (nomeContabilidade.toUpperCase().equals("ROTACONTABILIDADE")) {
						if (historico.startsWith("0")) {										
							for (int xx=0;xx<10;xx++) {
								if (historico.length() > 1 && historico.startsWith("0")) historico = historico.substring(1);
							}
						}
						
						if (documentoHistorico.startsWith("0")) {										
							for (int xx=0;xx<10;xx++) {
								if (documentoHistorico.length() > 1 && documentoHistorico.startsWith("0")) documentoHistorico = documentoHistorico.substring(1);
							}
						}
					}
					
					
					txt.append(StringUtil.leftPad(String.valueOf(contador), 6, "000000"));  //OK1
                    txt.append(",");
                    txt.append(StringUtil.leftPad(dataMovimento, 8, ""));                   //OK2
                    txt.append(",");
                    txt.append(contaDebito);                                                //OK3
                    txt.append(",");
                    txt.append(contaCredito);                                               //OK4
                    txt.append(",");
                    txt.append(valorFinal);                                                 //OK5
                    txt.append(",");
                    txt.append(codigoHistorico);                                            //OK6
                    txt.append(",");
                    txt.append(historico);                                                  //OK7
                    txt.append(",");
                    txt.append(documentoHistorico);	
                    txt.append(",");                    //LOTE                              //OK8	
                    txt.append(",");                    //LOTE                              //OK9	
                    if (tipoLancamento.contains("PAGAR")) {
                        if (centroCusto.equals("")) {
                            txt.append(participante);
                            txt.append(",A,,");
                        } else {
                            if (nomeContabilidade.toUpperCase().contains("VELEVCONTABILIDADE") || nomeContabilidade.toUpperCase().contains("GRUPOFATOSSP")) {
                                    if (tipoLancamento.contains("PAGAR"))  txt.append("C,"); else  txt.append("D,");
                            } else {
                                    if (tipoLancamento.contains("PAGAR"))  txt.append("D,"); else  txt.append("C,");
                            }
                            txt.append(centroCusto);
                            txt.append(",");
                            txt.append(valorFinal);
                            txt.append(",");
                            txt.append(participante);
                            txt.append(",");						
                        }
                    }
                    if (!tipoLancamento.contains("PAGAR")) {
                        if (centroCusto.equals("")) {
                            txt.append(participante);
                            txt.append(",A,");
                        } else {
                            if (nomeContabilidade.toUpperCase().contains("VELEVCONTABILIDADE") || nomeContabilidade.toUpperCase().contains("GRUPOFATOSSP")) {
                                    if (tipoLancamento.contains("PAGAR"))  txt.append("C,"); else  txt.append("D,");
                            } else {
                                    if (tipoLancamento.contains("PAGAR"))  txt.append("D,"); else  txt.append("C,");
                            }
                            txt.append(centroCusto);
                            txt.append(",");
                            txt.append(valorFinal);
                            txt.append(",");
                            txt.append(",");						
							txt.append(participante);					
                        }
                    }
                    txt.append(rn);
                }
                String descricaoDebito = "";

                String descricaoCredito = "";

                if (!tipoMovimento.contains("CC")) {
                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebitoOriginal)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCreditoOriginal)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";"+ participante + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }

                if (!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				////toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			
			logger.logDebug("TT REGISTROS -- "+totalRegistros+" | LOTE == "+loteMovimento+" | VERSAO == "+versaoPlataforma+" | TXT = "+txt.toString());
            // Gravacao do Arquivo TXT
            if (totalRegistros > 0){
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();
        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@GLANDATA).             //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoGlandata(JSONObject jDadosLote, InoutLogger logger) throws Exception {
	// Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento	= "";
    String codEmpresa		= "";
    String tipoMovimento	= "";
    String dataMovimento	= "";
    String contaDebito		= "";
    String contaCredito		= "";
    String valorLiquidacao	= "";
    String documento		= "";
    String nomeOrigem		= "";
    String cpfCnpj			= "";
    String centroCusto		= "";
    String valorJuros		= "";
    String valorMulta		= "";
    String valorDesconto	= "";
    String historico		= "";
    String naturezaContabil	= "";
    String tipoLancamento	= "";
    String nomeEmpresa		= "";
    String ERP				= "";                            //  <---<
    String classificacao    = "";
    String complemento03    = "";

    HashMap mapaArquivo = new HashMap();

    Date dtAgora			= new Date();

    StringBuilder txt		= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");
        //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;
        int contador  = 0;

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            ResumoTxt = new StringBuilder();
            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;PARTICIPANTE;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);

            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {
                JSONObject recMov = records.optJSONObject(t);
                
				
				tipoMovimento = recMov.optString("TIPOMOVIMENTO");
                dataMovimento = recMov.optString("DATAMOVIMENTO");
                contaDebito = recMov.optString("CONTADEBITO");
                contaCredito = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                cpfCnpj = recMov.optString("CPFCNPJ");
                documento = recMov.optString("DOCUMENTO");
                nomeOrigem = recMov.optString("NOMEORIGEM");
                centroCusto = recMov.optString("CENTROCUSTO");
                valorJuros = recMov.optString("VALORJUROS");
                valorMulta = recMov.optString("VALORMULTA");
                valorDesconto = recMov.optString("VALORDESCONTO");
                historico = recMov.optString("HISTORICO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento = recMov.optString("TIPOLANCAMENTO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                complemento03   = recMov.optString("COMPLEMENTO03"); //O complemento03 contem o codigo da filial (Caso haja regra de filial)

                

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                String dataMovimentoOriginal = dataMovimento;

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;

                historico = historico.replaceAll(",","\\.").replaceAll(";","");

                
				
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                String codigoFilial = "";
                if (historico.contains("Filial:")) {
					 
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
					// logger.logDebug("FILIAL -> "+codigoFilial);
                    historico       = historico.substring(0,historico.indexOf("Filial:")).trim();
					

                    
                    
                }
				
				historico       = historico.replaceAll("(CodigoHistorico:[\\d\\w]{0,})", "");

                //Pega o StringBuilder relacionado a filial do movimento  (cada filial tem seu proprio StringBuilder pois precisamos gerar um arquivo por filial)
                try {
                    txt = (StringBuilder) mapaArquivo.get(codigoFilial.trim());
                    if (txt == null) {
                        txt = new StringBuilder();
                    }
                }
                catch (Exception ex) {logger.logDebug("Erro geraArquivoGlandata -- 01");}

                if(contaDebito.contains("IGNOR"))  continue;
                if(contaCredito.contains("IGNOR")) continue;
				//if (tipoMovimento.contains("CC")) continue;
                contador++;

                String valorFinal = valorLiquidacao;

                if (tipoMovimento.equals("CTBJUR")) valorFinal = valorJuros;
                if (tipoMovimento.equals("CTBDES")) valorFinal = valorDesconto;
                if (tipoMovimento.equals("CTBMUL")) valorFinal = valorMulta;

                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                }
                
                
							
                String historicoDebitoCredito = "";

                if (naturezaContabil.contains("D")) historicoDebitoCredito = "0000PAG";
                else historicoDebitoCredito = "0000REC";

                String contaRegistro1 = "";
                String contraPartidaRegistro1 = "";

                
				
                //<Registro 01>
                if (!tipoMovimento.contains("CTBCC")) {
                    //00 - Conta
                    txt.append(StringUtil.rightPad(contaDebito, 20, " "));
                    txt.append(" ");

                    //01 - Contra Partida
                    txt.append(StringUtil.rightPad(contaCredito, 20, " "));
                    txt.append(" ");

                    //02 - Dia
                    txt.append(dataMovimento.substring(0, 2));
                    txt.append(" ");

                    //03 - Tipo de Lancamento
                    if (tipoMovimento.contains("CTBDES") || tipoMovimento.contains("CTBJUR") || tipoMovimento.contains("CTBMUL")) {
                        txt.append(naturezaContabil);
                    }
                    else {
                        txt.append("A");
                    }
                    txt.append(" ");

                    //04 - Valor
                    txt.append(StringUtil.leftPad(valorFinal, 15, "0"));
                    txt.append(" ");

                    //05 - Historico debito
                    txt.append(historicoDebitoCredito);
                    txt.append(" ");

                    //06 - Descricao Historico Debito
                    txt.append(StringUtil.rightPad(historico, 100, " "));
                    txt.append(" ");

                    //07 - Historico Credito
                    txt.append(historicoDebitoCredito);
                    txt.append(" ");

                    //08 - Descricao Historico Credito
                    txt.append(StringUtil.rightPad(historico, 100, " "));

                    //09 - 19   (Deixaremos em branco por enquanto)
                    txt.append(StringUtil.rightPad(" ", 219, " "));
                    //---------------------------------------------

                    //20 - Tipo do Registro
                    txt.append("1");
                    
                    txt.append(rn);
                }
                //</Registro 01>----------------------------------------------

                //<Registro 02>
                if (tipoMovimento.contains("CTBCC")) {
                    //00 - Centro de Custo
                    txt.append(StringUtil.rightPad(centroCusto, 9, " "));

                    //01 - Valor do centro de custo
                    txt.append(StringUtil.leftPad(valorFinal, 15, "0"));

                    //02 - Rateio
                    txt.append(StringUtil.leftPad("0", 6, "0"));

                    //03 - Filler
                    txt.append(StringUtil.leftPad(" ", 468, " "));
                    txt.append(" ");

                    //04 - Tipo do Registro
                    txt.append("2");

                    txt.append(rn);
                }
                //</Registro 02>----------------------------------------------
                
                String descricaoDebito = "";

                String descricaoCredito = "";

                if (!tipoMovimento.contains("CC")) {
                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebitoOriginal)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCreditoOriginal)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }

                if (!tipoMovimento.contains("PORT")) totalRegistros++;

                try {
                    mapaArquivo.put(codigoFilial.trim(), txt);
                }
                catch (Exception ex) {logger.logDebug("Erro geraArquivoGlandata -- 02");}
            } //For arrayMov

			

            // Gravacao do Arquivo TXT
            if (totalRegistros > 0){
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }

                try {
                    //Gera um arquivo para cada filial
                    Iterator itMapaArquivo = mapaArquivo.keySet().iterator();
                    while (itMapaArquivo.hasNext()) {
                        String codigoFilial = (String) itMapaArquivo.next();

                        txt = (StringBuilder) mapaArquivo.get(codigoFilial);
                        if (txt == null) {continue;}
                        

                        String erpFilename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + "_FILIAL_" + codigoFilial.trim() + ".txt";
                        if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                            erpFilename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + "_FILIAL_" + codigoFilial.trim() + ".txt";
                        }

                        FileWriter writer = new FileWriter(erpFilename);
                        writer.writeNewFile(txt.toString());
                    }
                }
                catch (Exception ex) {logger.logDebug("Erro geraArquivoGlandata -- 03 -> " + ex.getMessage());}

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();
        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}



//######################################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Contmatic).       //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoContmatic(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento	= "";
    String codEmpresa		= "";
    String tipoMovimento	= "";
    String dataMovimento	= "";
    String contaDebito		= "";
    String contaCredito		= "";
    String classifica		= "";
    String classificacao	= "";
    String valorLiquidacao	= "";
    String documento		= "";
    String nomeOrigem		= "";
    String cpfCnpj			= "";
    String centroCusto		= "";
    String valorJuros		= "";
    String valorMulta		= "";
    String valorDesconto	= "";
    String historico		= "";
    String naturezaContabil	= "";
    String tipoLancamento	= "";
    String nomeEmpresa		= "";
    String ERP				= "";
	HashMap mapaPlano		= new HashMap();

    Date dtAgora			= new Date();

    String contaCreditoPai	= "";
    String contaDebitoPai	= "";

    StringBuilder txt		= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	String loteId = "";
	JSONObject objetoLancamento = new JSONObject();
	JSONArray  lancamentosA     = new JSONArray();

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        int contador  = 0;
        classifica = "";

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            ResumoTxt = new StringBuilder();
            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);

            int totalRegistros = 0;
            String anoMovimento = "";

            for (int t=0; t<records.length(); t++) {
                JSONObject recMov = records.optJSONObject(t);

				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					////toCloud.put(createItemsToCloud(recMov, recAux));
					////toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
				tipoMovimento = recMov.optString("TIPOMOVIMENTO");
                dataMovimento = recMov.optString("DATAMOVIMENTO");
                contaDebito = recMov.optString("CONTADEBITO");
                contaCredito = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                cpfCnpj = recMov.optString("CPFCNPJ");
                documento = recMov.optString("DOCUMENTO");
                nomeOrigem = recMov.optString("NOMEORIGEM");
                centroCusto = recMov.optString("CENTROCUSTO");
                valorJuros = recMov.optString("VALORJUROS");
                valorMulta = recMov.optString("VALORMULTA");
                valorDesconto = recMov.optString("VALORDESCONTO");
                historico = recMov.optString("HISTORICO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento = recMov.optString("TIPOLANCAMENTO");
                classificacao = recMov.optString("CLASSIFICACAO");

                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                }
				
				if (loteMovimento.toUpperCase().contains("_ID")) {
				    // loteId = cutString(loteMovimento.toUpperCase(), "_ID", "_");
					loteId = cutString(loteMovimento.toUpperCase(), loteMovimento.toUpperCase().lastIndexOf("_ID")+3, "_");
				}
				
				
				// cria o objeto padrao para envio dos lancamentos
				if (!objetoLancamento.has("loteId") && !loteId.equals("")) {
				
					apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
				
					objetoLancamento.put("loteId", loteId);
					objetoLancamento.put("parceiro", "CONTMATIC");
					objetoLancamento.put("cnpjContabilidade", props.get("CONTABILIDADE_CNPJ"));
					objetoLancamento.put("cnpjEmpresa", props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
					objetoLancamento.put("nomeArquivo", loteMovimento + ".csv");
				}

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                String dataMovimentoOriginal = dataMovimento;
                if (dataMovimento.contains("/")) anoMovimento = dataMovimento.substring(dataMovimento.lastIndexOf("/")+3).trim();

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;

                historico = historico.replaceAll(",","\\.").replaceAll(";","");
				
				String codigoCentroPort = "";
                if (historico.contains("CENTROPORT:")) {
                    codigoCentroPort = historico.substring(historico.indexOf("CENTROPORT:")+11).trim();
                    historico       = historico.substring(0,historico.indexOf("CENTROPORT:")).trim();
                }
				
                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
				
				if (historico.contains("INVERTECONTA")) {
					String contaInvertida = contaDebito;
					contaDebito = contaCredito;
					contaCredito = contaInvertida;
					historico = historico.replaceAll("INVERTECONTA", "");
				}

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                if(contaDebito.contains("IGNOR"))  continue;
                if(contaCredito.contains("IGNOR")) continue;

                classificacao   = classificacao.substring(0,16).trim();

                contaCredito = StringUtil.leftPad(contaCredito, 7, "0");
                contaDebito  = StringUtil.leftPad(contaDebito, 7, "0");
                if (!classifica.equals(classificacao)) {
                    contador++;
                    contaCreditoPai = StringUtil.leftPad(contaCredito, 7, "0");
                    contaDebitoPai  = StringUtil.leftPad(contaDebito, 7, "0");

					if (classificacao.startsWith("V") && Double.parseDouble(valorDesconto) > 0 && (Double.parseDouble(valorJuros) > 0 || Double.parseDouble(valorMulta) > 0)) {
						double valorTotalMultipla = 0;
						
						if (tipoLancamento.equals("PAGAR")) {
							if(naturezaContabil.equals("C")) valorTotalMultipla = Double.parseDouble(valorLiquidacao) + Double.parseDouble(valorDesconto);
							else valorTotalMultipla = Double.parseDouble(valorLiquidacao) + Double.parseDouble(valorJuros) + Double.parseDouble(valorMulta);
						}
						if (tipoLancamento.equals("RECEBER")){
							if(naturezaContabil.equals("D")) valorTotalMultipla = Double.parseDouble(valorLiquidacao) + Double.parseDouble(valorDesconto);
							else valorTotalMultipla = Double.parseDouble(valorLiquidacao) + Double.parseDouble(valorJuros) + Double.parseDouble(valorMulta);
						}						
						
						String valorMultipla = Double.toString(valorTotalMultipla);
						txt.append(StringUtil.leftPad(String.valueOf(contador), 7, "0"));
						txt.append(StringUtil.leftPad(dataMovimento, 5, ""));
						txt.append(StringUtil.rightPad("M      ", 7, ""));
						txt.append(StringUtil.rightPad("M      ", 7, ""));
						txt.append(StringUtil.leftPad(valorMultipla, 17, "0"));
						txt.append(rn);
                    }
					if (tipoLancamento.equals("PAGAR")) {	 // conceito de multiplos nao considera  PAGAR / RECEBER apenas se o multiplo e de 'C' ou 'D'
                        if (classificacao.startsWith("C")) contaDebito   = "M      ";
                        if (classificacao.startsWith("D")) contaCredito  = "M      ";
                        // if (classificacao.startsWith("V")) contaDebito   = "M      ";
                    }
                    if (tipoLancamento.equals("RECEBER")) {	 // conceito de multiplos nao considera  PAGAR / RECEBER apenas se o multiplo e de 'C' ou 'D'
                        if (classificacao.startsWith("C")) contaDebito   = "M      ";
                        if (classificacao.startsWith("D")) contaCredito  = "M      ";
                    }
                    classifica = classificacao;

                } else if (!contaCredito.equals("0000000") && !contaDebito.equals("0000000"))  contador++;
				
				if(classificacao.startsWith("V") && Double.parseDouble(valorDesconto) > 0 && (Double.parseDouble(valorJuros) > 0 || Double.parseDouble(valorMulta) > 0)){
					if(contaCredito.equals("0000000")) contaCredito = "T      ";
					if(contaDebito.equals("0000000"))  contaDebito  = "T      ";
				}

                if (contaDebito.equals("") || contaDebito.equals("0000000"))   contaDebito  = contaDebitoPai;
                if (contaCredito.equals("") || contaCredito.equals("0000000")) contaCredito = contaCreditoPai;

                String valorFinal = valorLiquidacao;

                if (tipoMovimento.equals("CTBJUR")) valorFinal = valorJuros;
                if (tipoMovimento.equals("CTBDES")) valorFinal = valorDesconto;
                if (tipoMovimento.equals("CTBMUL")) valorFinal = valorMulta;

                String participante = "";

                txt.append(StringUtil.leftPad(String.valueOf(contador), 7, "0"));
                txt.append(StringUtil.leftPad(dataMovimento, 5, ""));
                txt.append(StringUtil.rightPad(contaDebito, 7, ""));
                txt.append(StringUtil.rightPad(contaCredito, 7, ""));
                txt.append(StringUtil.leftPad(valorFinal, 17, "0"));
                txt.append(StringUtil.leftPad(codigoHistorico, 5, "0"));
                txt.append(StringUtil.rightPad(historico, 200, " "));
                if (tipoLancamento.equals("PAGAR")) {
                        txt.append(StringUtil.rightPad(centroCusto, 41, " "));
                        txt.append(StringUtil.rightPad(codigoCentroPort, 41, " "));
                    }
                if (tipoLancamento.equals("RECEBER")) {
                        txt.append(StringUtil.rightPad(codigoCentroPort, 41, " "));
                        txt.append(StringUtil.rightPad(centroCusto, 41, " "));
                    }
                txt.append(rn);

                String descricaoDebito = "";
                String descricaoCredito = "";

               if (!tipoMovimento.contains("CC")) {
				
					ttPlanoConta ttP  = (ttPlanoConta)mapaPlano.get(contaDebitoOriginal);
					if (ttP == null) {					
						ttP  = new ttPlanoConta(); 
						ttP.descricaoPlano = "";
 
						JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
						.fields("DESCRICAOPLANO")
						.param(codEmpresa)
						.param(contaDebitoOriginal)
						.queryUnique();
						if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
							descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
							ttP.descricaoPlano = descricaoDebito;
						}
						ttP.contaContabil     = contaDebitoOriginal;
						mapaPlano.put(contaDebitoOriginal,ttP);

					}
					descricaoDebito = ttP.descricaoPlano;

					ttP  = (ttPlanoConta)mapaPlano.get(contaCreditoOriginal);
					if (ttP == null) {					
						ttP  = new ttPlanoConta(); 
						ttP.descricaoPlano = "";
 
						JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
						.fields("DESCRICAOPLANO")
						.param(codEmpresa)
						.param(contaCreditoOriginal)
						.queryUnique();
						if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
							descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
							ttP.descricaoPlano = descricaoCredito;
						}
						ttP.contaContabil     = contaCreditoOriginal;
						mapaPlano.put(contaCreditoOriginal,ttP);
					}
					descricaoCredito = ttP.descricaoPlano;

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }
				
				// prepara array para envio ao 4.0
				if (!loteId.equals("")) {
					JSONObject lancamentoO = new JSONObject();
					lancamentoO.put("dataMovimento", dataMovimento);
					lancamentoO.put("contaDebito", contaDebito);
					lancamentoO.put("contaCredito", contaCredito);
					lancamentoO.put("d_c", "D");
					
					if (tipoLancamento.equals("RECEBER")) lancamentoO.put("d_c", "C");
						
					lancamentoO.put("historico", historico.trim());
					lancamentoO.put("codHistorico", codigoHistorico);
					lancamentoO.put("valorLancamento", valorLiquidacao);


					
					lancamentoO.put("tipoMovimento", cutString(tipoLancamento, 0, 3));
					lancamentosA.put(lancamentoO);
				}

                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				////toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}

            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = "";
				// if(nomeContabilidade.toUpperCase().contains("CORPORECONTABILIDADE")){
					filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/APELIDO_DO_SISTEMA_20" + anoMovimento + "_Lctos_" + codEmpresa + "_" + loteMovimento + ".txt";
				// } else{
					// filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + codEmpresa + "_" + loteMovimento + ".M" + anoMovimento;					
				// }
				FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";

                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+codEmpresa + "_" + loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
				
				try {
					if (!loteId.equals("")) {
						objetoLancamento.put("lancamentos", lancamentosA);
						JSONArray toCloudArray = sendToMeuIntegrador(objetoLancamento, apiWeb, logger);
					}
				} catch (Exception eDel) {
					logger.logError("EndpointB: ERROR sendToMeuIntegrador", eDel);
				}
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }

    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

//######################################################################################################################


///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@ENGENHO).       //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoEngenho(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";    // era antes \n

    String nomeContabilidade = "";
    String loteMovimento	= "";
    String codEmpresa		= "";
    String tipoMovimento	= "";
    String dataMovimento	= "";
    String contaDebito		= "";
    String contaCredito		= "";
    String classifica		= "";
    String classificacao	= "";
    String valorLiquidacao	= "";
    String documento		= "";
    String nomeOrigem		= "";
    String cpfCnpj			= "";
    String centroCusto		= "";
    String valorJuros		= "";
    String valorMulta		= "";
    String valorDesconto	= "";
    String historico		= "";
    String naturezaContabil	= "";
    String tipoLancamento	= "";
    String nomeEmpresa		= "";
    String ERP				= "";
	HashMap mapaPlano		= new HashMap();

    Date dtAgora			= new Date();

    String contaCreditoPai	= "";
    String contaDebitoPai	= "";

    StringBuilder txt		= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");
		String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");


        int contador  = 999;
        classifica = "";

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            ResumoTxt = new StringBuilder();
            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);

            int totalRegistros = 0;
            String anoMovimento = "";
			contador++;


            for (int t=0; t<records.length(); t++) {
                JSONObject recMov = records.optJSONObject(t);

				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					////toCloud.put(createItemsToCloud(recMov, recAux));
					////toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
				tipoMovimento = recMov.optString("TIPOMOVIMENTO");
                dataMovimento = recMov.optString("DATAMOVIMENTO");
                contaDebito = recMov.optString("CONTADEBITO");
                contaCredito = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                cpfCnpj = recMov.optString("CPFCNPJ");
                documento = recMov.optString("DOCUMENTO");
                nomeOrigem = recMov.optString("NOMEORIGEM");
                centroCusto = recMov.optString("CENTROCUSTO");
                valorJuros = recMov.optString("VALORJUROS");
                valorMulta = recMov.optString("VALORMULTA");
                valorDesconto = recMov.optString("VALORDESCONTO");
                historico = recMov.optString("HISTORICO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento = recMov.optString("TIPOLANCAMENTO");
                classificacao = recMov.optString("CLASSIFICACAO");
				
				
				if (documento.contains("#")) {
					cnpjEmpresa = cutString(documento, 0, "#").replaceAll("CNPJ:","");
					cnpjEmpresa = cnpjEmpresa.replaceAll("-","").replace("/","").replaceAll("\\.","");
					documento   = cutString(documento, "#");
				}

				if (t==0) {
					txt.append("Linha0|");
					txt.append(cnpjEmpresa).append("|").append(nomeEmpresa);
					txt.append(rn);
					txt.append("Linha1|");
					txt.append(StringUtil.leftPad(String.valueOf(contador), 4, "0"));
					txt.append("|");
					txt.append(dataMovimento.replaceAll("/","-")).append(" 12:00:00|I");
					txt.append("|");
					txt.append(documento);
					txt.append("|");
					txt.append(nomeOrigem);
					txt.append(rn);
				} 


                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                }

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                String dataMovimentoOriginal = dataMovimento;
 
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;

                historico = historico.replaceAll(",","\\.").replaceAll(";","");
				
				String codigoCentroPort = "";
                if (historico.contains("CENTROPORT:")) {
                    codigoCentroPort = historico.substring(historico.indexOf("CENTROPORT:")+11).trim();
                    historico       = historico.substring(0,historico.indexOf("CENTROPORT:")).trim();
                }
				
                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
				
				if (historico.contains("INVERTECONTA")) {
					String contaInvertida = contaDebito;
					contaDebito = contaCredito;
					contaCredito = contaInvertida;
					historico = historico.replaceAll("INVERTECONTA", "");
				}

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                if(contaDebito.contains("IGNOR"))  continue;
                if(contaCredito.contains("IGNOR")) continue;

                classificacao   = classificacao.substring(0,16).trim();

               
                String valorFinal = valorLiquidacao;

                if (tipoMovimento.equals("CTBJUR")) valorFinal = valorJuros;
                if (tipoMovimento.equals("CTBDES")) valorFinal = valorDesconto;
                if (tipoMovimento.equals("CTBMUL")) valorFinal = valorMulta;

                String participante = "";

				/*
				
				
				LINHA1|1000|31/07/2021 11:18:54|I|2AA|HORAS NORMAIS DIURNAS|
				LINHA2|1000|4.2.0.1.06|D|1836,71|2AA|HORAS NORMAIS DIURNAS|
				LINHA2|1000|2.1.3.1.01|C|1836,71|2AA|HORAS NORMAIS DIURNAS|
				*/
				
				if (contaDebito.length() > 5) contaDebito  = String.format("%s.%s.%s.%s.%s", contaDebito.substring(0,1), 
															contaDebito.substring(1,2), 
															contaDebito.substring(2,3), 
															contaDebito.substring(3,4), 
															contaDebito.substring(4));
				
				if (contaCredito.length() > 5) contaCredito  = String.format("%s.%s.%s.%s.%s", contaCredito.substring(0,1), 
															contaCredito.substring(1,2), 
															contaCredito.substring(2,3), 
															contaCredito.substring(3,4), 
															contaCredito.substring(4));

				

				txt.append("Linha2|");
                txt.append(StringUtil.leftPad(String.valueOf(contador), 4, "0"));
				txt.append("|");
				txt.append(contaDebito);
				txt.append("|D");
				txt.append("|");
                txt.append(valorFinal.replaceAll("\\.",","));
                txt.append("|");
                txt.append(documento);
                txt.append("|");
                txt.append(nomeOrigem);
				txt.append(rn);
				
				txt.append("Linha2|");
                txt.append(StringUtil.leftPad(String.valueOf(contador), 4, "0"));
				txt.append("|");
				txt.append(contaCredito);
				txt.append("|C");
				txt.append("|");
                txt.append(valorFinal.replaceAll("\\.",","));
                txt.append("|");
                txt.append(documento);
                txt.append("|");
                txt.append(nomeOrigem);
				txt.append(rn);
				
				 

                String descricaoDebito = "";
                String descricaoCredito = "";

 
                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			
			txt.append("Linha9|");
					

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				////toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}

            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + codEmpresa + "_" + loteMovimento + ".txt";

                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                 
                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }

    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

//######################################################################################################################



///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Cordilheira).     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoCordilheira(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
	logger.logDebug("ENTROU CORDILHEIRA");
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";                           //  <---<

    Date dtAgora			= new Date();

    StringBuilder txt		= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");
		logger.logDebug("PROPS -> " + props.toString());
		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");

        String lote = "";

        ResumoTxt = new StringBuilder();
        //ResumoTxt.append("Data;CONTA;DESCRICAO DA CONTA NO PLANO;VALOR;D/C;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO DA CONTA NO PLANO;CONTA CREDITO;DESCRICAO DA CONTA NO PLANO;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);
		boolean leuFolha = false;

        try {
            JSONArray records   = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros  = 0;

            double valorLote = 0;
            for (int x=0; x<records.length(); x++) {
                JSONObject recMov   = records.optJSONObject(x);
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                tipoMovimento = recMov.optString("TIPOMOVIMENTO");
                if (tipoMovimento.contains("CTBPORT") || tipoMovimento.contains("PORTADOR")) continue;

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                lote            = recMov.optString("LOTE");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                historico       = recMov.optString("HISTORICO");

                if (tipoLancamento.equals("PAGAR") && contaDebito.equals("")) continue;
                if (tipoLancamento.equals("PAGAR") && contaDebito.equals("0")) continue;
                if (tipoLancamento.equals("RECEBER") && contaCredito.equals("")) continue;
                if (tipoLancamento.equals("RECEBER") && contaCredito.equals("0")) continue;

                if(contaDebito.contains("IGNOR"))  continue;
                if(contaCredito.contains("IGNOR")) continue;

                if(contaDebito.contains("LOTE_ENCERRADO"))  continue;
                if(contaCredito.contains("LOTE_ENCERRADO")) continue;

				if (loteMovimento.toUpperCase().contains("FOLHASAGE")) leuFolha = true;

				// colocado por xavier para ignorar lancamentos de centro de custo no Cordilheira 20.05.2020/
				// motivo esta duplicando valores da Forrest 
				if (tipoMovimento.contains("CC")) continue;

                if (tipoMovimento.equals("CTB"))    valorLote  = valorLote + Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorLote  = valorLote + Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorLote  = valorLote + Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorLote  = valorLote + Double.parseDouble(valorMulta);
            }

			//#2304-003256
			//String filename  = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "LOTD" + sequencia + "_" + props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA")+ "_" + loteMovimento + ".txt";				
			String cnpjLote  = props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA");
			if (loteMovimento.contains("_CORTACNPJ")) {
				
				cnpjLote = cutString(loteMovimento, "_CORTACNPJ", "_");
				
				if (loteMovimento.contains("_PAGAR")) loteMovimento = cutString(loteMovimento, 0, "_CORTACNPJ")+"_PAGAR";
					
				if (loteMovimento.contains("_RECEBER")) loteMovimento = cutString(loteMovimento, 0, "_CORTACNPJ")+"_RECEBER";
			}

            int contador = 0;
            contador++;
            String contadorS = String.valueOf(contador);
            contadorS = StringUtil.leftPad(contadorS, 5, "0");

            String valorTotalFinal = String.format("%.2f", valorLote);
            valorTotalFinal   = valorTotalFinal.replaceAll("\\.", "");

            //------------------------------------------------------------------------------------------------------
            //  Busca o mes e ano de procecessamento no nome do lote para exibir o periodo de fechamento do cliente
            //------------------------------------------------------------------------------------------------------
			
            String dataAno = loteMovimento.substring(loteMovimento.lastIndexOf("_" + tipoLancamento)-7,loteMovimento.lastIndexOf("_" + tipoLancamento)-3);

            String dataMes = loteMovimento.substring(loteMovimento.lastIndexOf("_" + tipoLancamento)-2,loteMovimento.lastIndexOf("_" + tipoLancamento));
			
			if (loteMovimento.toUpperCase().contains("OUD_PAGAR") || loteMovimento.toUpperCase().contains("OUD_RECEBER")) {
				dataAno = loteMovimento.substring(loteMovimento.lastIndexOf("_oud")-7,loteMovimento.lastIndexOf("_oud")-3);
				dataMes = loteMovimento.substring(loteMovimento.lastIndexOf("_oud")-2,loteMovimento.lastIndexOf("_oud"));
			
			}
            Date dtFinal = DateUtil.stringToDate("01/" + dataMes + "/" + dataAno, "dd/MM/yyyy");

            Calendar cal = Calendar.getInstance();
            cal.setTime(dtFinal);
            String ultimoDia = String.valueOf(cal.getActualMaximum(Calendar.DAY_OF_MONTH));
            String dataInicial = "01" + dataMes + "" + dataAno;
            String dataFinal   = ultimoDia +  dataMes + dataAno;

            String linha = "CM" + dataFinal + StringUtil.leftPad(valorTotalFinal,15,"0") +
                StringUtil.rightPad(lote, 20, " ") + "OUT" + StringUtil.leftPad(" ",47," ") + contadorS;

			if (!leuFolha) {		
				txt.append(linha);
				txt.append(rn);
			}
			
            for (int t=0; t<records.length(); t++) {
                JSONObject recMov   = records.optJSONObject(t);

				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					////toCloud.put(createItemsToCloud(recMov, recAux));
					////toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                String complemento01 = recMov.optString("COMPLEMENTO01");
                String complemento02 = recMov.optString("COMPLEMENTO02");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
				
                for (int xy=0;xy<20;xy++) {
					historico       = historico.replaceAll("  "," ");
				}
                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");

                String dataMovimentoOriginal = dataMovimento;

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                historico = historico.replaceAll(",","\\.").replaceAll(";","");

                if(contaDebito.contains("IGNOR"))  continue;
                if(contaCredito.contains("IGNOR")) continue;

                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
					String contaInvertida   = contaDebito.replaceAll("INVERTE","");
					contaDebito             = contaCredito.replaceAll("INVERTE","");
					contaCredito            = contaInvertida.replaceAll("INVERTE","");
					
					if (naturezaContabil.equals("C")) naturezaContabil = "D";
					else if (naturezaContabil.equals("D")) naturezaContabil = "C";
				} else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
						
						if (naturezaContabil.equals("C")) naturezaContabil = "D";
						else if (naturezaContabil.equals("D")) naturezaContabil = "C";
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();

                if(contaDebito.contains("LOTE_ENCERRADO"))  continue;
                if(contaCredito.contains("LOTE_ENCERRADO")) continue;
				// colocado por xavier para ignorar lancamentos de centro de custo no Cordilheira 20.05.2020/
				// motivo esta duplicando valores da Forrest 
				if (tipoMovimento.contains("CC")) continue;

                contador++;
                contadorS = String.valueOf(contador);
                contadorS = StringUtil.leftPad(contadorS, 5, "0");

                valorLiquidacao   = valorLiquidacao.replaceAll("\\,", "");
                valorLiquidacao   = valorLiquidacao.replaceAll("\\.", "");
                valorJuros        = valorJuros.replaceAll("\\,", "");
                valorJuros        = valorJuros.replaceAll("\\.", "");
                valorMulta        = valorMulta.replaceAll("\\,", "");
                valorMulta        = valorMulta.replaceAll("\\.", "");
                valorDesconto     = valorDesconto.replaceAll("\\,", "");
                valorDesconto     = valorDesconto.replaceAll("\\.", "");

                String valorFinal = valorLiquidacao;

                if (tipoMovimento.equals("CTBJUR")) valorFinal = valorJuros;
                if (tipoMovimento.equals("CTBDES")) valorFinal = valorDesconto;
                if (tipoMovimento.equals("CTBMUL")) valorFinal = valorMulta;

                contaCredito = contaCredito.replaceAll("-","");
                contaDebito  = contaDebito.replaceAll("-","");
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;

                // transforma e primeira maiuscula e demais minusculas
                if (nomeContabilidade.toUpperCase().contains("EQUILIBRIUM")) historico = toDisplayCase(historico);
				
				if (loteMovimento.toUpperCase().contains("FOLHASAGE")) {
					leuFolha = true; 					
					txt.append(StringUtil.leftPad(complemento01, 5, "0")).append("|").append(StringUtil.leftPad(contaDebito, 3, "0")).append("|");
 					
					if (complemento02.toUpperCase().contains("HORA")) {
						txt.append(StringUtil.leftPad(complemento02.replaceAll("HORA",""), 5, "0")).append("|").append("00000000000").append("|                    |");
 					}					
					else {  
						txt.append("00000|").append(StringUtil.leftPad(complemento02.replaceAll("VALOR",""), 11, "0")).append("|                    |");

					}
					txt.append(rn);
					continue;					
				}
				
				contaCredito = StringUtil.leftPad(contaCredito, 6, "0");
                contaDebito  = StringUtil.leftPad(contaDebito, 6, "0");

                String centroCusto3 = "";
                String centroCusto6 = "";
                if (centroCusto.length() < 4) centroCusto3 = centroCusto;
                if (centroCusto.length() > 3) centroCusto6 = centroCusto;

                // xxxxxxxxxxxxxxxxxxx
                String codigoHistorico = StringUtil.leftPad("0", 3, "0");
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                String historico25 = "";

                linha = "L" + dataMovimento + contaDebito + contaCredito + StringUtil.leftPad(codigoHistorico, 3, "0") + StringUtil.rightPad(historico25,25, " ") +
                    StringUtil.leftPad(valorFinal, 15, "0") + StringUtil.leftPad(centroCusto3, 3, "0") + StringUtil.leftPad(" ", 28, " ") +
                    contadorS + StringUtil.leftPad(" ", 91, " ") + StringUtil.leftPad(centroCusto6, 6, "0");
                txt.append(linha);
                txt.append(rn);

                contador++;
                contadorS = String.valueOf(contador);
                contadorS = StringUtil.leftPad(contadorS, 5, "0");

                linha = "H" + StringUtil.rightPad(historico, 50, " ") + StringUtil.leftPad(" ", 44, " ") + contadorS;
                txt.append(linha);
                txt.append(rn);

                if (historico.length() > 50) {
                    if (historico.length() > 100) {
                        contador++;
                        contadorS = String.valueOf(contador);
                        contadorS = StringUtil.leftPad(contadorS, 5, "0");
                        linha = "H" + StringUtil.rightPad(historico.substring(50,100), 50, " ") + StringUtil.leftPad(" ", 44, " ") + contadorS;
                        txt.append(linha);
                        txt.append(rn);

                        contador++;
                        contadorS = String.valueOf(contador);
                        contadorS = StringUtil.leftPad(contadorS, 5, "0");
                        linha = "H" + StringUtil.rightPad(historico.substring(100), 50, " ") + StringUtil.leftPad(" ", 44, " ") + contadorS;
                        txt.append(linha);
                        txt.append(rn);
                    }
                    else{
                        contador++;
                        contadorS = String.valueOf(contador);
                        contadorS = StringUtil.leftPad(contadorS, 5, "0");
                        linha = "H" + StringUtil.rightPad(historico.substring(50), 50, " ") + StringUtil.leftPad(" ", 44, " ") + contadorS;
                        txt.append(linha);
                        txt.append(rn);
                    }
                }

                String descricaoDebito = "";
                String descricaoCredito = "";

                if (!tipoMovimento.contains("CC")) {
                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebitoOriginal)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCreditoOriginal)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorExporta + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }

                if(!tipoMovimento.contains("PORT")) totalRegistros++;

            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				////toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			
            if (totalRegistros > 0 || loteMovimento.toUpperCase().contains("FOLHASAGE")) {
                // Gravacao do Arquivo TXT
                int ultimoCodigo = 0;
                try {

                    String sql = "SELECT ULTIMO FROM IO_SEQUENCIA";
                    JSONArray recf = dbIOCont.sql(sql)
                    .setFields("ULTIMO")
                    .debug(logger)
                    .query();

                    if (recf != null && recf.length() > 0 ) {
                        recf.getJSONObject(0);

                        JSONObject recMov = recf.optJSONObject(0);
                        if (recMov.has("ULTIMO")) ultimoCodigo = recMov.optInt("ULTIMO");
                    }

                    ultimoCodigo++;

                    dbIOCont.update("IO_SEQUENCIA")
                    .fields("ULTIMO")
                    .where("ULTIMO > 0")
                    .param(ultimoCodigo)
                    .execute();
                } catch (Exception eDel) {
                    logger.logError("EndpointB: ERRO AO DAR UPDATE DELETE IO_MOVIMENTO", eDel);
                }

                String sequencia = String.valueOf(ultimoCodigo);
                sequencia        = StringUtil.leftPad(sequencia, 4, "0");
				String filename  = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "LOTD" + sequencia + "_" + cnpjLote + "_" + loteMovimento + ".txt";
                
				if (loteMovimento.toUpperCase().contains("FOLHASAGE")) {
					filename  = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/folha__" + loteMovimento + ".txt";
					FileWriter writer = new FileWriter(filename);
					writer.writeNewFile(txt.toString());
				}
				else {				
					FileWriter writer = new FileWriter(filename);
					writer.writeNewFile(txt.toString());

					// String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + sequencia + "_" + codEmpresa + "_" +  nomeEmpresa + "_" + tipoLancamento + ".csv";
					String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
				   
					FileWriter writerResumo = new FileWriter(filenameRESUMO);
					writerResumo.writeNewFile(ResumoTxt.toString());
					enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "LOTD" + sequencia + ".txt - " + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

					//*******************************************************
					//************* ATUALIZA SALESFORCE *********************
					//*******************************************************
					if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
					   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
					   !loteMovimento.toUpperCase().contains("TESTE")){

						sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
						sForce.append(rn);

						String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

						FileWriter writerSforce = new FileWriter(fileSforce);
						writerSforce.writeNewFile(sForce.toString());
					}
				}
            } //if (totalRegistros)

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }

    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

//######################################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@WK).              //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoWk(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";
    String codigoHistorico	= "";

    Date dtAgora			= new Date();
    StringBuilder txt		= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();
    String separador		= ",";
	HashMap mapaPlano		= new HashMap();  

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        int contador  = 0;
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");


		StringBuilder ResumoTxt = new StringBuilder();
		
		ResumoTxt.append("DATA;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
		ResumoTxt.append(rn);
        
		
        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);

            int totalRegistros = 0;
            for (int t=0; t<records.length(); t++) {
                JSONObject recMov = records.optJSONObject(t);
                
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					////toCloud.put(createItemsToCloud(recMov, recAux));
					////toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
				tipoMovimento = recMov.optString("TIPOMOVIMENTO");
                dataMovimento = recMov.optString("DATAMOVIMENTO");
                contaDebito = recMov.optString("CONTADEBITO");
                contaCredito = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento = recMov.optString("DOCUMENTO");
                nomeOrigem = recMov.optString("NOMEORIGEM");
                centroCusto = recMov.optString("CENTROCUSTO");
                valorJuros = recMov.optString("VALORJUROS");
                valorMulta = recMov.optString("VALORMULTA");
                valorDesconto = recMov.optString("VALORDESCONTO");
                historico = recMov.optString("HISTORICO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento = recMov.optString("TIPOLANCAMENTO");

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);

                //historico = historico.replaceAll(",","\\.");

                if(!nomeContabilidade.toUpperCase().contains("REIMER") && !nomeContabilidade.toUpperCase().contains("ACENE")){
                    historico = historico.replaceAll(";","");
                }

                if(contaDebito.contains("IGNOR"))  continue;
                if(contaCredito.contains("IGNOR")) continue;
                if(contaCredito.contains("LOTE_ENCERRADO")) continue;

                // xxxxxxxxxxxxxxxxxxx
                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }

                contador++;
                String valorFinal = valorLiquidacao;

                if (tipoMovimento.equals("CTBJUR")) valorFinal = valorJuros;
                if (tipoMovimento.equals("CTBDES")) valorFinal = valorDesconto;
                if (tipoMovimento.equals("CTBMUL")) valorFinal = valorMulta;

                if(nomeContabilidade.toUpperCase().contains("ESCOPO")) txt.append("1,");
                if(nomeContabilidade.toUpperCase().contains("BOING") && !codigoFilial.equals("")) {
                    txt.append(codigoFilial);
                    txt.append(",");
                }
				if(nomeContabilidade.toUpperCase().contains("MWACONTABILIDADE")) {
					if (!codigoFilial.equals("")) {
						txt.append(codigoFilial);
						txt.append(";");
					}
					if (codigoFilial.equals("")) {
						txt.append("1");
						txt.append(";");
					}
                }
				
                if(nomeContabilidade.toUpperCase().contains("ACENE")) {
                    if (!codigoFilial.equals("")) {
                        txt.append(codigoFilial);
                        txt.append(";");
                        txt.append(documento);
                        txt.append(";");
                    }
                    else {
                        txt.append("1");
                        txt.append(";");
                        txt.append(documento);
                        txt.append(";");
                    }
                }
				

                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                }

                if (nomeContabilidade.toUpperCase().equals("REIMER")){
                    separador = "|";
                }
				if (nomeContabilidade.toUpperCase().equals("MWACONTABILIDADE")){
                    separador = ";";
                }
                if (nomeContabilidade.toUpperCase().equals("ACENE")){
                    separador = ";";
                }
                codigoHistorico="";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

                String dataContal = "";
                if (nomeContabilidade.toUpperCase().equals("CONTAL")){
                    dataContal = dataMovimento.substring(dataMovimento.indexOf("/")+1).replaceAll("/","").trim();
                    dataContal = StringUtil.leftPad(dataContal,6,"0") + ",";
                    historico = toDisplayCase(historico);
                }
                historico = historico.replaceAll("_ ","");
                historico = historico.replaceAll(" _","");
                historico = historico.replaceAll("_","");
				
				if (tipoMovimento.contains("CC")) continue;

				if(nomeContabilidade.toUpperCase().contains("VALVERDE")) {
					txt.append("1");
					txt.append(separador);
				}
				if(nomeContabilidade.toUpperCase().contains("JJCONSULT")) {
					if (codigoFilial.equals("")) {
						codigoFilial = "1";
					}
					txt.append(t+1);
					txt.append(separador);
					txt.append(codigoFilial);
					txt.append(separador);
                }
                txt.append(StringUtil.leftPad(dataMovimento, 10, ""));
                txt.append(separador);
                txt.append(dataContal);
                txt.append(contaDebito);
                txt.append(separador);
                txt.append(contaCredito);
                txt.append(separador);
                txt.append(valorFinal);
                txt.append(separador);
                txt.append(codigoHistorico);
                txt.append(separador);
                txt.append(historico);
				
				txt.append(rn);
				
				//#2311-022823
                if(!centroCusto.equals("")){
                    txt.append(centroCusto);
                    txt.append(separador);
                    txt.append(valorFinal);

                    txt.append(rn);
                }

				if (!tipoMovimento.contains("CC")) {
				
					String descricaoDebito = "";
					String descricaoCredito = "";
				
					ttPlanoConta ttP  = (ttPlanoConta)mapaPlano.get(contaDebito);
					if (ttP == null) {					
						ttP  = new ttPlanoConta(); 
						ttP.descricaoPlano = "";
 
						JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
						.fields("DESCRICAOPLANO")
						.param(codEmpresa)
						.param(contaDebito)
						.queryUnique();
						if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
							descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
							ttP.descricaoPlano = descricaoDebito;
						}
						ttP.contaContabil     = contaDebito;
						mapaPlano.put(contaDebito,ttP);

					}
					descricaoDebito = ttP.descricaoPlano;

					ttP  = (ttPlanoConta)mapaPlano.get(contaCredito);
					if (ttP == null) {					
						ttP  = new ttPlanoConta(); 
						ttP.descricaoPlano = "";
 
						JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
						.fields("DESCRICAOPLANO")
						.param(codEmpresa)
						.param(contaCredito)
						.queryUnique();
						if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
							descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
							ttP.descricaoPlano = descricaoCredito;
						}
						ttP.contaContabil     = contaCredito;
						mapaPlano.put(contaCredito,ttP);
					}
					descricaoCredito = ttP.descricaoPlano;

					ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
					ResumoTxt.append(rn);
                }
				

                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				////toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}

            if (totalRegistros > 0) {
                // Gravacao do Arquivo TXT
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

				String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
 


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@JBSoftware).      //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoJBSOFTWARE(JSONObject jDadosLote, InoutLogger logger) throws Exception {

    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento = "";
    String codEmpresa = "";
    String notafiscal = "";
    String tipoMovimento = "";
    String dataMovimento = "";
    String contaDebito = "";
    String contaCredito = "";
    String valorLiquidacao = "";
    String valorDocumento = "";
    String documento = "";
    String nomeOrigem = "";
    String centroCusto = "";
    String valorJuros	= "";
    String valorDesconto	= "";
    String valorMulta		= "";
    String historico		= "";
    String naturezaContabil	= "";
    String tipoLancamento	= "";
    String nomeEmpresa		= "";
    String classificacao	= "";
    String ERP				= "";
	String cpfCnpj			= "";

    HashMap mapaPlano    = new HashMap();  

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	
	int contadorFinal = 0;
	String classificacaoAnterior = "";

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String linha = "";
        int indice   = 0;

        int contador			= 0;
        String classifica		= "";
        String classificacao1	= "";
        String sContador		= "";

        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
		
		ResumoTxt = new StringBuilder();
		
		ResumoTxt.append("DATA;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
		ResumoTxt.append(rn);
        try {
			
			int ultimoCodigo = 0;
				
			try {
                String sql = "SELECT ULTIMO FROM IO_SEQUENCIA";
                JSONArray recf = dbIOCont.sql(sql)
					.setFields("ULTIMO")
                    .debug(logger)
                    .query();

                if (recf != null && recf.length() > 0 ) {
                    recf.getJSONObject(0);

                    JSONObject recMov2 = recf.optJSONObject(0);
                    if (recMov2.has("ULTIMO")) ultimoCodigo = recMov2.optInt("ULTIMO");
                }

                    

                }catch(Exception xx) {}
				
			
            JSONArray records = findMovimentoPorEmpresa_LotebClassificacao(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;
            for (int t=0; t<records.length(); t++) {

                String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");

                JSONObject recMov = records.optJSONObject(t);
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
				cpfCnpj			= recMov.optString("CPFCNPJ");
				
				classificacao   = cutString(classificacao, 0, 16);
				
 				
				if(ERP.toUpperCase().contains("JBSOFTWARE") && tipoLancamento.contains("RECEBER") /*&& !nomeContabilidade.toUpperCase().contains("TIMECONTADORES")*/){
					if(tipoMovimento.equals("CTBDES")){ 
					naturezaContabil = "D";
				}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
					naturezaContabil = "C";
					}
				}
				
				
				if(ERP.toUpperCase().contains("JBSOFTWARE") && tipoLancamento.contains("RECEBER") && nomeEmpresa.toUpperCase().contains("NATU")){
					if(tipoMovimento.equals("CTBDES")){ 
					naturezaContabil = "D";
				}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
					naturezaContabil = "C";
					}
				}

                if (contaDebito.contains(".") && contaDebito.contains("E")) contaDebito = removerNotacaoCientificaExcel(contaDebito);
                if (contaCredito.contains(".") && contaCredito.contains("E")) contaCredito = removerNotacaoCientificaExcel(contaCredito);
				
				
                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");//yuri
				if(nomeContabilidade.toUpperCase().contains("GAULKECONT") && codEmpresa.equals("342")){
					if(contaCredito.contains("ANULAR") || contaDebito.contains("ANULAR")) continue; //2303-000545
				}
				contaDebito  = contaDebito.replaceAll("ANULAR","");
                contaCredito = contaCredito.replaceAll("ANULAR","");

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                String codigoFilial = "";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
					
					if (naturezaContabil.equals("C")) naturezaContabil = "D";
					else if (naturezaContabil.equals("D")) naturezaContabil = "C";
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
						
						if (naturezaContabil.equals("C")) naturezaContabil = "D";
						else if (naturezaContabil.equals("D")) naturezaContabil = "C";
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();
				if (historico.contains("GPLCTO:")) {
                    // contLinhaLancamento   = historico.substring(historico.indexOf("GPLCTO:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("GPLCTO:")).trim();
                }
				// logger.logDebug("Historico F -> "+historico);
				
                if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(!nomeContabilidade.toUpperCase().contains("ADDIZIONARE") && codigoFilial.length() > 2) codigoFilial = codigoFilial.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
				
				// logger.logDebug("Historico CH -> "+historico);
				
                //String codigoHistorico = StringUtil.leftPad("0", 7, "0");
                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

 
                historico = historico.replaceAll(",","\\.").replaceAll(";","");
				
 
                if(contaDebito.contains("IGNOR"))  continue;
                if(contaCredito.contains("IGNOR")) continue;

                if(contaDebito.contains("LOTE_ENCERRADO"))  continue;
                if(contaCredito.contains("LOTE_ENCERRADO")) continue;
				
				

				ultimoCodigo++;
				sContador = String.valueOf(ultimoCodigo);
				
                classifica = classificacao1;

                valorLiquidacao   = valorLiquidacao.replaceAll("\\,", "");
                valorJuros        = valorJuros.replaceAll("\\,", "");
                valorMulta        = valorMulta.replaceAll("\\,", "");
                valorDesconto     = valorDesconto.replaceAll("\\,", "");

                String valorFinal = valorLiquidacao;

                if (tipoMovimento.equals("CTBJUR"))  {
                    valorFinal   = valorJuros;
                }
                if (tipoMovimento.equals("CTBMUL"))  {
                    valorFinal   = valorMulta;
                }
                if (tipoMovimento.equals("CTBDES"))  {
                    valorFinal   = valorDesconto;
                }
				 
				
				if (!classificacao.equals(classificacaoAnterior)) {
					contadorFinal ++;
				}
				classificacaoAnterior = classificacao;
				
				String contLinhaLancamento = Integer.toString(contadorFinal);
				
				 
				String contaFinal = "";
                if (naturezaContabil.equals("C")) {
                    contaFinal = contaCredito;
                }
                if (naturezaContabil.equals("D")) {
                    contaFinal = contaDebito;
					// if (t == 0)
                }
                double valorTeste = 0;

                try{valorTeste = DecimalUtil.toDecimal(valorFinal);}
                catch(Exception exs){valorTeste = 0;}
				
  
                if (historico.length() > 200) {
                    historico = cutString(historico, 0, 199).trim();
                }

                String separator = ";";
                if (codigoFilial.equals("")) codigoFilial = "1";
				if (nomeContabilidade.toUpperCase().contains("ADDIZIONARE")){
					codigoFilial = codigoFilial.replaceAll("0","");
				}
				if (contaFinal.equals(cpfCnpj)) contaFinal = ""; 
				if(contaFinal.contains("SC")) contaFinal = contaFinal.replaceAll("SC", ";"); // subconta
                if(valorTeste > 0){
                    txt.append("00");
                    txt.append(separator);
                    txt.append(codEmpresa);
                    txt.append(separator);
                    txt.append(codigoFilial);
                    txt.append(separator);
                    txt.append(dataMovimento.replaceAll("/", ""));
                    txt.append(separator);
                    txt.append(sContador);
                    txt.append(separator);
                    txt.append(naturezaContabil);
                    txt.append(separator);
                    txt.append(contaFinal);
                    if(!contaFinal.contains(separator))txt.append(separator); // subconta
                    txt.append(separator);
                    txt.append(valorFinal);
                    txt.append(separator);
                    txt.append("0");
                    txt.append(separator);
                    txt.append("2");
                    txt.append(separator);
                    txt.append(codigoHistorico);
                    txt.append(separator);
                    txt.append(historico);
                    txt.append(separator);
                    txt.append(StringUtil.leftPad(contLinhaLancamento, 5, "0"));
                    txt.append(separator);
                    txt.append(cpfCnpj);
                    txt.append(separator);
                    //
                    txt.append(separator);
					//#Fabrica (20190429)
					if (!cpfCnpj.equals("") && contaDebito.equals(cpfCnpj) && tipoLancamento.equals("PAGAR") && naturezaContabil.equals("D")) {
						txt.append("2");
					}
					if (!cpfCnpj.equals("") && contaCredito.equals(cpfCnpj) && tipoLancamento.equals("RECEBER") && naturezaContabil.equals("C")) {
						txt.append("1");
					}
                    txt.append(separator);
                    //
                    txt.append(separator);
                    txt.append("");
                    txt.append(separator);

                    txt.append(rn);
                }
				//pra gerar resumo
				contaDebito	 = cutString(contaDebito, 0, ";");
				contaCredito = cutString(contaCredito, 0, ";");

				if (!tipoMovimento.contains("CC")) {
				
					String descricaoDebito = "";
					String descricaoCredito = "";
				
					ttPlanoConta ttP  = (ttPlanoConta)mapaPlano.get(contaDebito);
					if (ttP == null) {					
						ttP  = new ttPlanoConta(); 
						ttP.descricaoPlano = "";
 
						JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
						.fields("DESCRICAOPLANO")
						.param(codEmpresa)
						.param(contaDebito)
						.queryUnique();
						if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
							descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
							ttP.descricaoPlano = descricaoDebito;
						}
						ttP.contaContabil     = contaDebito;
						mapaPlano.put(contaDebito,ttP);

					}
					descricaoDebito = ttP.descricaoPlano;

					ttP  = (ttPlanoConta)mapaPlano.get(contaCredito);
					if (ttP == null) {					
						ttP  = new ttPlanoConta(); 
						ttP.descricaoPlano = "";
 
						JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
						.fields("DESCRICAOPLANO")
						.param(codEmpresa)
						.param(contaCredito)
						.queryUnique();
						if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
							descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
							ttP.descricaoPlano = descricaoCredito;
						}
						ttP.contaContabil     = contaCredito;
						mapaPlano.put(contaCredito,ttP);
					}
					descricaoCredito = ttP.descricaoPlano;

                    ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }
				
				
				
                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			try {
				dbIOCont.update("IO_SEQUENCIA")
						.fields("ULTIMO")
						.where("ULTIMO > 0")
						.param(ultimoCodigo)
						.execute();
			} catch (Exception e) {}
					
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());
				

				String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

				
                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

			ResumoTxt = new StringBuilder();
			
            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }

    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

//######################################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Exactus).         //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoExactus(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento	= "";
    String codEmpresa		= "";
    String notafiscal		= "";
    String tipoMovimento	= "";
    String dataMovimento	= "";
    String contaDebito		= "";
    String contaCredito		= "";
    String valorLiquidacao	= "";
    String valorDocumento	= "";
    String documento		= "";
    String nomeOrigem		= "";
    String centroCusto		= "";
    String valorJuros		= "";
    String valorDesconto	= "";
    String valorMulta		= "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String classificacao    = "";
    String ERP              = "";

    String linha            = "";
    String simbolo          = "";
    String ordem            = "";
    String codLinha         = "";
    String historicoPad     = "";
    String codigoHistorico  = "";
    String origem           = "";
    String tipo             = "";
    String cpfCnpj          = "";
    String nomenclatura     = "";
    String cCustoDev		= "";
    String cCustoCred       = "";
    String agrupaDev        = "";
    String agrupaCred       = "";

    Date dtAgora			= new Date();
    StringBuilder txt		= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();

	// JSONArray toCloud		= new JSONArray();	//#20210126	
	// LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");
		

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        int contador = 0;
        String classifica = " ";
		
		ResumoTxt = new StringBuilder();

        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);

        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");

        try {
            JSONArray records = findMovimentoPorEmpresa_LotebClassificacao(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {

                JSONObject recMov = records.optJSONObject(t);
                
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					////toCloud.put(createItemsToCloud(recMov, recAux));
					////toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
				tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

				String dataMovimentoOriginal = dataMovimento;


                historico = historico.replaceAll(",","\\.").replaceAll(";","");

                if(contaDebito.contains("IGNOR"))  continue;
                if(contaCredito.contains("IGNOR")) continue;

                if(contaDebito.contains("LOTE_ENCERRADO"))  continue;
                if(contaCredito.contains("LOTE_ENCERRADO")) continue;

                classifica = classificacao;

                valorLiquidacao   = valorLiquidacao.replaceAll("\\,", "");
                valorJuros        = valorJuros.replaceAll("\\,", "");
                valorMulta        = valorMulta.replaceAll("\\,", "");
                valorDesconto     = valorDesconto.replaceAll("\\,", "");

                String valorFinal = valorLiquidacao;


                if (tipoMovimento.equals("CTBJUR"))  {
                    valorFinal   = valorJuros;
                }
                if (tipoMovimento.equals("CTBMUL"))  {
                    valorFinal   = valorMulta;
                }
                if (tipoMovimento.equals("CTBDES"))  {
                    valorFinal   = valorDesconto;
                }
				if (historico.contains("INVERTECONTA")) {
					String contaInvertida = contaDebito;
					contaDebito = contaCredito;
					contaCredito = contaInvertida;
					
					if (naturezaContabil.equals("C")) naturezaContabil = "D";
					else if (naturezaContabil.equals("D")) naturezaContabil = "C";
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();

                String contaFinal = "";
                if (naturezaContabil.equals("C")) {
                    contaFinal = contaCredito;
                }
                if (naturezaContabil.equals("D")) {
                    contaFinal = contaDebito;
                }

                /////////////////   \\\\\\\\\\\\\\\\\\   //////////////////////
                /////////////////   \\\\\\\\\\\\\\\\\\   //////////////////////
                /////////////////   \\\\\\\\\\\\\\\\\\   //////////////////////


                contaDebito = contaDebito.replaceAll("[^0-9]*", "");
                contaDebito = StringUtil.leftPad(contaDebito.trim(), 7, "0");
                contaDebito = StringUtil.rightPad(contaDebito.trim(), 16, "0");

                contaCredito = contaCredito.replaceAll("[^0-9]*", "");
                contaCredito = StringUtil.leftPad(contaCredito.trim(), 7, "0");
                contaCredito = StringUtil.rightPad(contaCredito.trim(), 16, "0");

                simbolo = "  ";                                                                     /////////////////////////////

                documento = documento.replaceAll("[^0-9]*", "");
                if (documento.length() > 9) documento = documento.substring(0,9);
                documento = StringUtil.leftPad(documento.trim(), 9, " ");

                ordem = "     ";
                ordem = String.valueOf(contador);
                ordem = StringUtil.rightPad(ordem.trim(), 5, " ");
				
				String codigoCentroPort = "";
                if (historico.contains("CENTROPORT:")) {
                    codigoCentroPort = historico.substring(historico.indexOf("CENTROPORT:")+11).trim();
                    historico        = historico.substring(0,historico.indexOf("CENTROPORT:")).trim();
                }

                codLinha = "0";
                historicoPad = "     ";

                codigoHistorico = "     ";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();

                    if (codigoHistorico.length() > 5) codigoHistorico = codigoHistorico.substring(0,5);
                    codigoHistorico = StringUtil.rightPad(codigoHistorico.trim(), 5, " ");
                }

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
				String historicoOriginal = historico;

                valorFinal = valorFinal.replaceAll("[^0-9]*", "");
                valorFinal = StringUtil.leftPad(valorFinal.trim(), 12, "0");

                Date dt = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt,"ddMMyy");

                origem = " ";
                tipo = " ";
                cpfCnpj = " ";
                cpfCnpj = cpfCnpj.replaceAll("[^0-9]*", "");
                cpfCnpj = StringUtil.rightPad(cpfCnpj.trim(), 14, " ");
                nomenclatura = " ";
                if (nomenclatura.length() > 40) nomenclatura = nomenclatura.substring(0,40);
                nomenclatura = StringUtil.rightPad(nomenclatura.trim(), 40, " ");

                cCustoDev = " ";
                cCustoDev = StringUtil.rightPad(cCustoDev.trim(), 3, " ");
                cCustoCred = " ";
                cCustoCred = StringUtil.rightPad(cCustoCred.trim(), 3, " ");

                agrupaDev = "00000";
                agrupaDev = StringUtil.rightPad(agrupaDev.trim(), 5, "0");
                agrupaCred = "00000";
                agrupaCred = StringUtil.rightPad(agrupaCred.trim(), 5, "0");

                /////////////////   \\\\\\\\\\\\\\\\\\   //////////////////////
                /////////////////   \\\\\\\\\\\\\\\\\\   //////////////////////
                /////////////////   \\\\\\\\\\\\\\\\\\   //////////////////////
                codLinha = "0";

				//Douglas #2306-006140
				//Comentado por conta do chamado 2307-008549
				// if (nomeContabilidade.toUpperCase().contains("INTEGRALCONSULTORES") && nomeEmpresa.toUpperCase().equals("RAFAELDUNA")){
					if (tipoLancamento.equals("PAGAR")) {
						// if (tipoMovimento.contains("CTBPORT")){
							//Credito - portador
							cCustoCred = StringUtil.rightPad(codigoCentroPort.trim(), 3, " ");
						// }
						// else if (tipoMovimento.contains("CTB")){
							//Debito - movimento
							cCustoDev = StringUtil.rightPad(centroCusto.trim(), 3, " ");
						// }
					}else{
						// if (tipoMovimento.contains("CTBPORT")){
							cCustoDev = StringUtil.rightPad(codigoCentroPort.trim(), 3, " ");
						// }
						// else if (tipoMovimento.contains("CTB")){
							cCustoCred = StringUtil.rightPad(centroCusto.trim(), 3, " ");
						// }
					}
					if(tipoMovimento.equals("CTBCC")) continue;
				// }
                for (int xx = 1;xx<10;xx++) {
                    if (historico.length() > 29) {
                        codLinha = String.valueOf(xx);
                        linha = contaDebito+contaCredito+simbolo+documento+ordem+historicoPad+codLinha+historico.substring(0,29)+"000000000000"+dataMovimento+
                            codigoHistorico+origem+tipo+cpfCnpj+nomenclatura+" "+cCustoDev+cCustoCred+agrupaDev+agrupaCred+"S1";
                        txt.append(linha);
                        txt.append(rn);
                        historico = historico.substring(29).trim();
                    }
                    else  {
						// logger.logInfo("TipoM - "+tipoMovimento+" | "+cCustoDev+" | "+cCustoCred+" | "+agrupaDev+" | "+agrupaCred);
                        if (xx > 1) codLinha = String.valueOf(xx);

                        if(historico.length() < 29) historico = StringUtil.rightPad(historico.trim(), 29, " ");
                        linha = contaDebito+contaCredito+simbolo+documento+ordem+historicoPad+codLinha+historico+valorFinal+dataMovimento+
                            codigoHistorico+origem+tipo+cpfCnpj+nomenclatura+" "+cCustoDev+cCustoCred+agrupaDev+agrupaCred+"S";
                        txt.append(linha);
                        txt.append(rn);
                        xx = 21;
                    }

                }
				
				String descricaoDebito = "";
                String descricaoCredito = "";

				 JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
				.fields("DESCRICAOPLANO")
				.param(codEmpresa)
				.param(contaDebito)
				.queryUnique();
				if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
					descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
				}

				JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
				.fields("DESCRICAOPLANO")
				.param(codEmpresa)
				.param(contaCredito)
				.queryUnique();
				if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
					descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
				}

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historicoOriginal + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
 
                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				////toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

				String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
 
                enviaEmailLoteLiberado(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}
//######################################################################################################################


///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Asplan).          //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoAsplan(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";

    String valorFinal       = "";
    double valorDouble      = 0;

    Date dtAgora 			= new Date();

    StringBuilder txt		= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();
	
	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");
		
		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // /////// ///// //
                // OBTENDO DADOS //
                // /////// ///// //

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					////toCloud.put(createItemsToCloud(recMov, recAux));
					////toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito  = contaDebito.replaceAll("[^0-9]*", "");
                contaCredito = contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();
				
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);
                   }catch(Exception c){valorFinal = "";}
                valorFinal = valorFinal.replaceAll("\\.", "");

                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if (historico.length() > 60) historico = historico.substring(0,60).trim();

                // //////// /////// //
                // MONTANDO ARQUIVO //
                // //////// /////// //
                txt.append(StringUtil.leftPad(dataMovimento.trim(), 10, "0"));
                txt.append(StringUtil.leftPad(documento.trim(), 10, "0"));
                txt.append(StringUtil.leftPad(contaDebito.trim(), 5, "0"));
                txt.append(StringUtil.leftPad(contaCredito.trim(), 5, "0"));
                txt.append(StringUtil.leftPad(valorFinal.trim(), 12, "0"));
                txt.append(historico);
                txt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				////toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

//#################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@AsplanPipe).      //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoAsplanPipe(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";

    String valorFinal       = "";
    String separador        = "|";
    double valorDouble      = 0;

    Date dtAgora			= new Date();
    StringBuilder txt		= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();
	
	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");
		
		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // /////// ///// //
                // OBTENDO DADOS //
                // /////// ///// //

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito  = contaDebito.replaceAll("[^0-9]*", "");
                contaCredito = contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
               if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();
				
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);
                   }catch(Exception c){valorFinal = "";}
                valorFinal = valorFinal.replaceAll("\\.", "");

                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if (historico.length() > 60) historico = historico.substring(0,60).trim();

                // //////// /////// //
                // MONTANDO ARQUIVO //
                // //////// /////// //
                txt.append(StringUtil.leftPad(dataMovimento.trim(), 10, "0"));
                txt.append(separador);
                txt.append(StringUtil.leftPad(documento.trim(), 10, "0"));
                txt.append(separador);
                txt.append(StringUtil.leftPad(contaDebito.trim(), 5, "0"));
                txt.append(separador);
                txt.append(StringUtil.leftPad(contaCredito.trim(), 5, "0"));
                txt.append(separador);
                txt.append(StringUtil.leftPad(valorFinal.trim(), 12, "0"));
                txt.append(separador);
                txt.append(historico);
                txt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

//######################################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Folhamatic).      //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoFolhamatic(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteOriginal     = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";
    String classificacao    = "";
    String mesFM            = "";

    Date dtAgora			= new Date();
    StringBuilder txt		= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();
	
	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");
		
		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        loteOriginal    = loteMovimento;
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");
        //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        ResumoTxt = new StringBuilder();

        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");

                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                String especialOrgano = "";
                String especialOrganoEspaco = "";
                String separador = "";

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
               if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();
				
                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }


                String codigoHistorico = "0";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

                for(int d = 0; d < 3; d++){
                    if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                    if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                    if (historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                }
                historico = historico.replaceAll("_","").replaceAll(",","").replaceAll(";","").trim();
                historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);
                dataMovimento = StringUtil.leftPad(dataMovimento, 10, "0");
                mesFM = loteMovimento.substring(loteMovimento.lastIndexOf("_" + tipoLancamento)-2,loteMovimento.lastIndexOf("_" + tipoLancamento));

                double valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);
                String valorFinal = "";
                try{valorFinal = String.format("%.2f", valorDouble);
                   }catch(Exception c){valorFinal = "";}

                String valorResumoFolhamatic = valorFinal;

                valorFinal = valorFinal.replaceAll("[^0-9]*", "");

                String campo16 = "N";

                if (!classificacao.startsWith("X")) campo16 = "M";
				
				// if (nomeContabilidade.toUpperCase().equals("GATTIPIONEIRA")){
				// 	contaDebito  = StringUtil.rightPad(contaDebito , 18, " ");
                //     contaCredito = StringUtil.rightPad(contaCredito, 18, " ");
                // }

                //if (tipoMovimento.equals("CTB")) {
                txt.append("     ")             // 5 espacos CAMPO 01
					.append(StringUtil.leftPad(contaDebito, 18, " "))
					.append(StringUtil.leftPad(contaCredito, 18, " "))
					.append(StringUtil.leftPad(codigoHistorico, 4, "0"))
					.append(" ")                // 1 espaco CAMPO 05
					.append(StringUtil.leftPad(valorFinal, 12, " "))
					.append(dataMovimento)
					.append("      ")           // 6 espacos CAMPO 08
					.append(StringUtil.rightPad(historico, 143, " "))
					.append("OTTIMIZZA           ")     // 20 espacos CAMPO 10 digitador OTTIMIZZA
					.append("                    ")     // 20 espacos CAMPO 11
					.append("                    ");     // 20 espacos CAMPO 12
				// if (nomeContabilidade.toUpperCase().equals("GATTIPIONEIRA")){
                    				// txt.append("               ")          // 15 zeros CAMPO 13
									// .append("                    ")     // 2  espacos CAMPO 14
									// .append("               ")          // 15 zeros CAMPO 15
									// .append(campo16);
					// if((t + 1) != records.length()){					
						// txt.append("    ")                     // 4 espacos CAMPO 17
						// .append("          ")               // 10 espacos CAMPO 18
						// .append(rn);
							// }
                // }
				// if (!nomeContabilidade.toUpperCase().equals("GATTIPIONEIRA")){
				txt.append("000000000000000")          // 15 zeros CAMPO 13
					.append("                    ")     // 20 espacos CAMPO 14
					.append("000000000000000")			 // 15 zeros CAMPO 15
					.append(campo16)
					.append("    ")                     // 4 espacos CAMPO 17
					.append("          ")               // 10 espacos CAMPO 18
					.append(rn);										// 15 zeros CAMPO 15
                // }
				
                // }
                String descricaoDebito = "";
                String descricaoCredito = "";

                if (!tipoMovimento.contains("CC")) {
                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebitoOriginal)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCreditoOriginal)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorResumoFolhamatic + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }

                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                //String nomeFM = "LI"+codEmpresa+codEmpresa+"."+mesFM; Modificado 07/12/2018
                String nomeFM = "FI"+codEmpresa+codEmpresa+"."+mesFM;
                //if (nomeContabilidade.toUpperCase().equals("DGR")) {
                //    nomeFM = "FI"+codEmpresa+codEmpresa+"."+mesFM;
                //}


                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");

                loteMovimento = StringUtil.removeSpecialCharsToUC(loteMovimento);
                loteMovimento = loteMovimento.replaceAll("%","").replaceAll(" ","_");

                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + nomeFM + "__"+ loteMovimento+ ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteOriginal)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }

    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

//######################################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Prosoft).         //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoProsoft(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";
    String classificacao    = "";
    Date dtAgora            = new Date();

    StringBuilder txt		= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();
    int contador			= 0;
    String arquivoNome		= "";
	
	// JSONArray toCloud		= new JSONArray();	//#20210126	
	// LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");
		
		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");
        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        ResumoTxt = new StringBuilder();
        boolean enviaEmailOttimizza = false;
        if (loteMovimento.toUpperCase().contains("OTTIMIZZA")) enviaEmailOttimizza = true;

        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);

        String classifica = "";

        int contadorItem = 0;

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");

                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                String especialOrgano = "";
                String especialOrganoEspaco = "";
                String separador = "";

                classificacao   = classificacao.substring(0,16).trim();

                String codigoParticipante = "";


                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();

                if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }



                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }

                String codigoHistorico = "0";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

                for(int d = 0; d < 3; d++){
                    if (historico.endsWith("-") || historico.endsWith("|")) historico = historico.substring(0,historico.length()-1).trim();
                    if (historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                }
                historico = historico.replaceAll("_","").replaceAll(",","").replaceAll("\\.","").replaceAll(";","").trim();
                historico = historico.replaceAll("- -","-").trim();

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);
                dataMovimento = StringUtil.leftPad(dataMovimento, 10, "0");
                dataMovimento = dataMovimento.replaceAll("[^0-9]*", "").trim();

                double valorDouble = NumberUtil.toDecimal(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = NumberUtil.toDecimal(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = NumberUtil.toDecimal(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = NumberUtil.toDecimal(valorMulta);
                String valorFinal = "";
                try{valorFinal = String.format("%.2f", valorDouble);
                   }catch(Exception c){valorFinal = "";}
                String valorResumoTxt = valorFinal;

                String codigoParticipanteCP = "";
                String codigoParticipanteCR = "";
				
				// if(nomeOrigem.contains("TELEMED")) logger.logDebug("C DEB. -> "+contaDebito+" | C CRED. -> "+contaCredito+" | COD.PART -> "+codigoParticipanteCP+" | HISTORICO -> "+historico);
				
                if (contaDebito.toUpperCase().contains("P")) {
                    contaDebito = contaDebito.toUpperCase();
                    String [] contaArray = contaDebito.split("P");

                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaDebito          = contaArray[0];
                        }
                    }

                }


                if (contaCredito.toUpperCase().contains("P")) {
                    contaCredito = contaCredito.toUpperCase();
                    String [] contaArray = contaCredito.split("P");
                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCR = contaArray[1];
                            contaCredito         = contaArray[0];
                        }
                    }

                }
				
				if(contaDebito.toUpperCase().contains("P") && !codigoParticipante.equals("")){
					codigoParticipanteCP = contaDebito.replaceAll("P","").replaceAll("p","").trim();
					contaDebito  = codigoParticipante;
				}
				if(contaCredito.toUpperCase().contains("P") && !codigoParticipante.equals("")){
					codigoParticipanteCR = contaCredito.replaceAll("P","").replaceAll("p","").trim();
					contaCredito  = codigoParticipante;
				}
				
				// if(nomeOrigem.contains(" 2 TELEMED")) logger.logDebug("C DEB. -> "+contaDebito+" | C CRED. -> "+contaCredito+" | COD.PART -> "+codigoParticipanteCP+" | HISTORICO -> "+historico);
				

                String numLote = "";
				String centroCustoDebito = "";
				String centroCustoCredito = "";
				
                if (tipoLancamento.equals("PAGAR"))		{
					numLote = "00002";
					centroCustoDebito = centroCusto;
				}
                if (tipoLancamento.equals("RECEBER"))	{
					numLote = "00001";
					centroCustoCredito = centroCusto;
					
				}

                if (!classifica.equals(classificacao)) {
                    contador++;
                    contadorItem = 0;
                    if (!classificacao.startsWith("X")){
                        String quantidadeLancamentos = "";
						int somaLancamento = 2;
						if (NumberUtil.toDecimal(valorDesconto) > 0) somaLancamento++;
						if (NumberUtil.toDecimal(valorMulta) > 0) somaLancamento++;
						if (NumberUtil.toDecimal(valorJuros) > 0) somaLancamento++;
						quantidadeLancamentos = StringUtil.leftPad(String.valueOf(somaLancamento), 3, "0");
 
                        txt.append("LC1")
                        .append(StringUtil.leftPad(String.valueOf(contador),5,"0")) // 5 bytes zeros a esquerda
                        .append("   ")                                  // 3 bytes
                        .append("2")                                    // "1" - Simples ou "2" - Detalhado
                        .append(dataMovimento)                          // DDMMAAAA
                        .append(StringUtil.rightPad(documento, 10, " "))
                        .append(numLote)                                // campo 07 5 bytes
                        .append("                              ")       // campo 08 30 bytes
                        .append(quantidadeLancamentos)
                        .append(rn);
                    }
                }

                classifica = classificacao;
                contadorItem++;
				
				if (tipoMovimento.contains("CC")) continue;

				if(codigoParticipanteCP.length() < 6 && codigoParticipanteCP.length() > 0) codigoParticipanteCP = StringUtil.leftPad(codigoParticipanteCP, 6, "0");
				if(codigoParticipanteCR.length() < 6 && codigoParticipanteCR.length() > 0) codigoParticipanteCR = StringUtil.leftPad(codigoParticipanteCR, 6, "0");
				//logger.logDebug("CONTA=> "+contaDebito+" | COD PARTI-P=> "+codigoParticipanteCP+" | COD PARTI-R"+codigoParticipanteCR+" | VALOR=> "+ valorFinal);
                if (classificacao.startsWith("X")){
                    txt.append("LC1")
                    .append(StringUtil.leftPad(String.valueOf(contador),5,"0")) // 5 bytes zeros a esquerda
                    .append("   ")                                  // 3 bytes
                    .append("1")                                    // "1" - Simples ou "2" - Detalhado
                    .append(dataMovimento)                          // DDMMAAAA
                    .append(StringUtil.rightPad(documento, 10, " "))
                    .append(numLote)                                // campo 07 5 bytes
                    .append("                              ")       // campo 08 30 bytes
                    .append("002")                                  // campo 09
                    .append(StringUtil.rightPad(contaDebito, 5, " "))
                    .append(StringUtil.rightPad(codigoParticipanteCP, 14, " "))
                    .append(StringUtil.leftPad(centroCustoDebito, 5, "0"))

                    .append(StringUtil.rightPad(contaCredito, 5, " "))
                    .append(StringUtil.rightPad(codigoParticipanteCR, 14, " "))
                    .append(StringUtil.leftPad(centroCustoCredito, 5, "0"))

                    .append(StringUtil.leftPad(valorFinal, 16, " "))
                    .append(StringUtil.rightPad(historico, 240, " "))
                    .append(" ")                                    // campo 18
                    .append(" ")                                    // campo 19
                    .append("                                                                          ")   // campo 20 - 74 bytes
                    .append(rn);
                }

                if (!classificacao.startsWith("X")){

                    String contaFinal = "";
                    String contaFinalTerceiro = "";

                    if (tipoLancamento.equals("PAGAR")) {
                        if (tipoMovimento.equals("CTBJUR"))  contaFinal = "D" + StringUtil.rightPad(contaDebito, 5, " ");
                        if (tipoMovimento.equals("CTBDES"))  contaFinal = "C" + StringUtil.rightPad(contaCredito, 5, " ");
                        if (tipoMovimento.equals("CTBMUL"))  contaFinal = "D" + StringUtil.rightPad(contaDebito, 5, " ");
                        if (tipoMovimento.equals("CTBPORT")) contaFinal = "C" + StringUtil.rightPad(contaCredito, 5, " ");
                        if (tipoMovimento.equals("CTB"))     contaFinal = "D" + StringUtil.rightPad(contaDebito, 5, " ");
						contaFinalTerceiro = codigoParticipanteCP;
                    }
                    if (tipoLancamento.equals("RECEBER")) {
                        if (tipoMovimento.equals("CTBJUR"))  contaFinal = "C" + StringUtil.rightPad(contaCredito, 5, " ");
                        if (tipoMovimento.equals("CTBDES"))  contaFinal = "D" + StringUtil.rightPad(contaDebito, 5, " ");
                        if (tipoMovimento.equals("CTBMUL"))  contaFinal = "C" + StringUtil.rightPad(contaCredito, 5, " ");
                        if (tipoMovimento.equals("CTBPORT")) contaFinal = "D" + StringUtil.rightPad(contaDebito, 5, " ");
                        if (tipoMovimento.equals("CTB"))     contaFinal = "C" + StringUtil.rightPad(contaCredito, 5, " ");
						contaFinalTerceiro = codigoParticipanteCR;

                    }

                    txt.append("LC2")
                    .append(StringUtil.leftPad(String.valueOf(contador),5,"0")) // 5 bytes zeros a esquerda
                    .append(StringUtil.leftPad(String.valueOf(contadorItem),3,"0"))
                    .append(contaFinal)
                    .append(StringUtil.rightPad(contaFinalTerceiro, 14, " "))      						// campo 08
                    .append(StringUtil.leftPad(centroCusto, 5, "0"))
                    .append(StringUtil.leftPad(valorFinal, 16, " "))
                    .append(StringUtil.rightPad(historico, 240, " "))
                    .append(rn);
                }

                if(!tipoMovimento.contains("PORT")) totalRegistros++;

                String descricaoDebito = "";
                String descricaoCredito = "";

                if (!tipoMovimento.contains("CC")) {
                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebitoOriginal)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCreditoOriginal)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebitoOriginal + ";" + descricaoDebito + ";" + contaCreditoOriginal + ";" + descricaoCredito + ";" + valorResumoTxt + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }

            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){
                //CTBLCTOS + Codigo da empresa (4 bytes) + opcionais (ate 20 bytes) ExtensÃƒÂ£o = "TXT"


                //  Busca o mes e ano de procecessamento no nome do lote para exibir o periodo de fechamento do cliente
                String dataLote = loteMovimento.substring(loteMovimento.lastIndexOf("_" + tipoLancamento)-7,loteMovimento.lastIndexOf("_" + tipoLancamento));
                dataLote = dataLote.replaceAll("-","").trim();

                /*Calendar c = Calendar.getInstance();
                String ssMillis = String.valueOf(c.get(Calendar.SECOND))+ String.valueOf(c.get(Calendar.MILLISECOND));
                arquivoNome = "CTBLCTOS"+StringUtil.leftPad(codEmpresa, 4, "0") + StringUtil.leftPad(ssMillis, 5, "0") +"_"+ dataLote +"_"+ tipoLancamento;
                */
                arquivoNome = "CTBLCTOS"+StringUtil.leftPad(codEmpresa, 4, "0") +"_"+ loteMovimento;

                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + arquivoNome + ".TXT";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + arquivoNome + ".TXT";
                }


                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + arquivoNome + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + arquivoNome + ".csv";
                }

                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + arquivoNome, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }
            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}
//######################################################################################################################

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Phsoftware).      //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoPhsoftware(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento	= "";
    String codEmpresa		= "";
    String tipoMovimento	= "";
    String dataMovimento	= "";
    String contaDebito		= "";
    String contaCredito		= "";
    String valorLiquidacao	= "";
    String documento		= "";
    String nomeOrigem		= "";
    String centroCusto		= "";
    String valorJuros		= "";
    String valorMulta		= "";
    String valorDesconto	= "";
    String historico		= "";
    String naturezaContabil	= "";
    String tipoLancamento	= "";
    String nomeEmpresa		= "";
    String ERP				= "";
    String classificacao	= "";

    String valorFinal		= "";
    String separador		= "";
    double valorDouble		= 0;
	
	boolean abreLancamento = false;

    Date dtAgora			= new Date();
    StringBuilder txt		= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();
	
	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");
		
		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("");

		int contador			= 0;
		String classifica		= "";
		String contraPartida	= "";
		String contadorString	= "";

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // /////// ///// //
                // OBTENDO DADOS //
                // /////// ///// //

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
				contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito  = contaDebito.replaceAll("[^0-9]*", "");
                contaCredito = contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");

				classificacao   = recMov.optString("CLASSIFICACAO");
				if(classificacao.length() > 16) classificacao = classificacao.substring(0,16).trim();
				
                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
					if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
				else {
					codEmpresa = "001";
				}
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

				historico = trimChar(historico);

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

				valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);
				}catch(Exception c){valorFinal = "";}

				//valorFinal = valorFinal.replaceAll("\\.", "");


                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if(historico.length() > 64) historico = historico.substring(0, 63);

				// /////////// //
                // TRATAMENTOS //
                // /////////// //
				String dataMovimentoOriginal = dataMovimento;

				Date dt		  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
				dataMovimento = DateUtil.dateToString(dt, "ddMMyyyy");
				if (!classifica.equals(classificacao)) contador++;
				contadorString = String.valueOf(contador);
				
				boolean exportaContraPartida = false;
				
				if(classificacao.startsWith("X")) {
					contraPartida	= "";
					contadorString	= "";
				}
				
				if(!classifica.equals(classificacao)){
					contraPartida = "";

					//1 D varios C
					if(classificacao.startsWith("D")) {
						contraPartida = contaDebito;
					}//1 C varios D
					if(classificacao.startsWith("C")) contraPartida = contaCredito;
					abreLancamento = false;
				
				}else{
					exportaContraPartida = true;
					abreLancamento = true;
				}
				
				// logger.logDebug("ABLCTO " + abreLancamento + " | " + codEmpresa);
				
				classifica = classificacao;

                // //////// /////// //
                // MONTANDO ARQUIVO //
                // //////// /////// //
				separador = "";

				txt.append(StringUtil.leftPad(dataMovimento.trim(), 8, " "));
                txt.append(separador);
				txt.append(StringUtil.leftPad(contaDebito.trim(), 8, "0"));
                txt.append(separador);
				txt.append(StringUtil.leftPad(contaCredito.trim(), 8, "0"));
                txt.append(separador);
                txt.append(StringUtil.leftPad(valorFinal.trim(), 17, " "));
                txt.append(separador);
                txt.append(StringUtil.leftPad(codigoHistorico.trim(), 8, "0"));
                txt.append(separador);
				txt.append(StringUtil.rightPad(historico.trim(), 64, " "));
                txt.append(separador);
				if (abreLancamento) {
					if (contaDebito.equals("")) {
						txt.append(StringUtil.leftPad(codEmpresa.trim(), 3, "0")); // MEXER AQUI PRA DEBITO
						txt.append(separador);
						txt.append(StringUtil.leftPad("".trim(), 3, "0")); // MEXER AQUI PRA CREDITO
					}
					if (contaCredito.equals("")) {
						txt.append(StringUtil.leftPad("".trim(), 3, "0")); // MEXER AQUI PRA DEBITO
						txt.append(separador);
						txt.append(StringUtil.leftPad(codEmpresa.trim(), 3, "0")); // MEXER AQUI PRA CREDITO
					}
				}
				else {	
					txt.append(StringUtil.leftPad(codEmpresa.trim(), 3, "0")); // MEXER AQUI PRA DEBITO
					txt.append(separador);
					txt.append(StringUtil.leftPad(codEmpresa.trim(), 3, "0")); // MEXER AQUI PRA CREDITO
				}
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 3, "0"));
                txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 3, "0"));
				txt.append(separador);	
				
				
				
				if(exportaContraPartida) txt.append(StringUtil.leftPad(contraPartida.trim(), 8, "0"));
				else txt.append(StringUtil.leftPad("0", 8, "0"));
				
				txt.append(separador);
				txt.append(StringUtil.leftPad(contadorString, 6, "0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 40, " "));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 20, " "));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 1, "0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 1, "0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 40, " "));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 20, " "));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 1, "0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 1, "0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 40, " "));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 20, " "));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 1, "0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 1, "0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 12, " "));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 5, "0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 5, "0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad("".trim(), 51, " "));

                txt.append(rn);
				
				if (!tipoMovimento.contains("CC")) {

                    String descricaoDebito = "";
                    String descricaoCredito = "";

                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebito)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCredito)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);

                }


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@MegaBitContabil).     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoMegabitContabil(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento	= "";
    String codEmpresa		= "";
    String notafiscal		= "";
    String tipoMovimento	= "";
    String dataMovimento	= "";
    String contaDebito		= "";
    String contaCredito		= "";
    String valorLiquidacao	= "";
    String valorDocumento	= "";
    String documento		= "";
    String nomeOrigem		= "";
    String centroCusto		= "";
    String valorJuros		= "";
    String valorDesconto	= "";
    String valorMulta		= "";
    String historico		= "";
    String naturezaContabil	= "";
    String tipoLancamento	= "";
    String nomeEmpresa		= "";
    String classificacao	= "";
    String ERP				= "";

    Date dtAgora = new Date();
    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	
	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String linha = " ";
        int indice   = 0;

        int contador = 0;
        String classifica = " ";
        int totalRegistros = 0;
        ResumoTxt = new StringBuilder();


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
            String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
            String emailCanal = props.get("EMAIL_CANAL");

            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);

            for (int t=0; t<records.length(); t++) {

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                classificacao   = classificacao.substring(0,16).trim();

                historico       = historico.replaceAll(" \\.","\\.");
                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
				
                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                if (contaDebito.contains("E"))  contaDebito = contaDebito.substring(0, contaDebito.indexOf("E"));
                if (contaCredito.contains("E")) contaCredito = contaCredito.substring(0, contaCredito.indexOf("E"));


                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;


                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<


                if (contador == 0) {
                    classifica = " ";
                }

                // xxxxxxxxxxxxxxxxxxx
                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico       = historico.substring(0,historico.indexOf("Filial:")).trim();
                }

                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

                String itemDFC = "";
                if (historico.contains("ItemDFC:")) {
                    itemDFC    = historico.substring(historico.indexOf("ItemDFC:")+8).trim();
                    historico  = historico.substring(0,historico.indexOf("ItemDFC:")).trim();
                }

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                valorLiquidacao   = valorLiquidacao.replaceAll("\\.", ",");
                valorJuros        = valorJuros.replaceAll("\\.", ",");
                valorMulta        = valorMulta.replaceAll("\\.", ",");
                valorDesconto     = valorDesconto.replaceAll("\\.", ",");

                String valorFinal = valorLiquidacao;
                String sContador  = String.valueOf(contador);
                // Nao exporta valores zerados
                double valorDouble = DecimalUtil.toDecimal(valorFinal);
                if (valorDouble == 0) continue;


                if (!classifica.equals(classificacao)) {
                    contador++;
                    sContador = String.valueOf(contador);
                }

                classifica = classificacao;


                if (!classificacao.startsWith("X") && tipoLancamento.equals("PAGAR")) {
                    if (tipoMovimento.equals("CTBPORT")) contaDebito  = "";
                    if (tipoMovimento.equals("CTB"))     contaCredito = "";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        contaCredito = "";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        contaCredito = "";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        contaDebito = "";
                        valorFinal   = valorDesconto;
                    }
                }
                if (tipoMovimento.contains("CC")) {
                    if (tipoMovimento.equals("CTBCC"))       valorFinal   = valorLiquidacao;
                    if (tipoMovimento.equals("CTBJURCC"))    valorFinal   = valorJuros;
                    if (tipoMovimento.equals("CTBMULCC"))    valorFinal   = valorMulta;
                    if (tipoMovimento.equals("CTBDESCC"))    valorFinal   = valorDesconto;
                }

                if (!classificacao.startsWith("X") && tipoLancamento.equals("RECEBER")) {
                    if (tipoMovimento.equals("CTBPORT")) contaCredito  = "";
                    if (tipoMovimento.equals("CTB"))     contaDebito = "";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        contaDebito = "";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        contaDebito = "";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        contaCredito = "";
                        valorFinal   = valorDesconto;
                    }
                }


                valorDouble = DecimalUtil.toDecimal(valorFinal);
                if (valorDouble == 0) {
                    continue;
                }
                if (!tipoMovimento.contains("CC")) {

                    linha = "|" + sContador + "|" + dataMovimento + "|" + contaDebito + "|" + contaCredito + "|" + codigoHistorico + "|" + valorFinal + "||" + historico.trim() + "|";
                    txt.append(linha);
                    txt.append(rn);
                }

                if (!tipoMovimento.contains("CC")) {

                    String descricaoDebito = "";
                    String descricaoCredito = "";

                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebitoOriginal)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCreditoOriginal)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);

                }
                if(!tipoMovimento.contains("PORT")) totalRegistros++;


            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            if (totalRegistros > 0) {

                // Gravacao do Arquivo TXT
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@XTDC).     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoXTDC(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento	= "";
    String codEmpresa		= "";
    String notafiscal		= "";
    String tipoMovimento	= "";
    String dataMovimento	= "";
    String contaDebito		= "";
    String contaCredito		= "";
    String valorLiquidacao	= "";
    String valorDocumento	= "";
    String documento		= "";
    String nomeOrigem		= "";
    String centroCusto		= "";
    String valorJuros		= "";
    String valorDesconto	= "";
    String valorMulta		= "";
    String historico		= "";
    String naturezaContabil	= "";
    String tipoLancamento	= "";
    String nomeEmpresa		= "";
    String classificacao	= "";
    String ERP				= "";

    Date dtAgora = new Date();
    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String linha = " ";
        int indice   = 0;

        int contador = 0;
        String classifica = " ";
        int totalRegistros = 0;
        ResumoTxt = new StringBuilder();


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
            String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
            String emailCanal = props.get("EMAIL_CANAL");

            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);

            for (int t=0; t<records.length(); t++) {

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                classificacao   = classificacao.substring(0,16).trim();

                historico       = historico.replaceAll(" \\.","\\.");
                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}


                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                if (contaDebito.contains("E"))  contaDebito = contaDebito.substring(0, contaDebito.indexOf("E"));
                if (contaCredito.contains("E")) contaCredito = contaCredito.substring(0, contaCredito.indexOf("E"));


                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;


                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<


                if (contador == 0) {
                    classifica = " ";
                }

                // xxxxxxxxxxxxxxxxxxx
                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico       = historico.substring(0,historico.indexOf("Filial:")).trim();
                }

                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

                String itemDFC = "";
                if (historico.contains("ItemDFC:")) {
                    itemDFC    = historico.substring(historico.indexOf("ItemDFC:")+8).trim();
                    historico  = historico.substring(0,historico.indexOf("ItemDFC:")).trim();
                }

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if (historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if (historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if (historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if (historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                //valorLiquidacao   = valorLiquidacao.replaceAll("\\.", ",");
                //valorJuros        = valorJuros.replaceAll("\\.", ",");
                //valorMulta        = valorMulta.replaceAll("\\.", ",");
                //valorDesconto     = valorDesconto.replaceAll("\\.", ",");

                String valorFinal = valorLiquidacao;
                String sContador  = String.valueOf(contador);
                // Nao exporta valores zerados
                double valorDouble = DecimalUtil.toDecimal(valorFinal);
                if (valorDouble == 0) continue;


                if (!classifica.equals(classificacao)) {
                    contador++;
                    sContador = String.valueOf(contador);
                }

                classifica = classificacao;


                if (!classificacao.startsWith("X") && tipoLancamento.equals("PAGAR")) {
                    if (tipoMovimento.equals("CTBPORT")) contaDebito  = "";
                    if (tipoMovimento.equals("CTB"))     contaCredito = "";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        contaCredito = "";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        contaCredito = "";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        contaDebito = "";
                        valorFinal   = valorDesconto;
                    }
                }
                if (tipoMovimento.contains("CC")) {
                    if (tipoMovimento.equals("CTBCC"))       valorFinal   = valorLiquidacao;
                    if (tipoMovimento.equals("CTBJURCC"))    valorFinal   = valorJuros;
                    if (tipoMovimento.equals("CTBMULCC"))    valorFinal   = valorMulta;
                    if (tipoMovimento.equals("CTBDESCC"))    valorFinal   = valorDesconto;
                }

                if (!classificacao.startsWith("X") && tipoLancamento.equals("RECEBER")) {
                    if (tipoMovimento.equals("CTBPORT")) contaCredito  = "";
                    if (tipoMovimento.equals("CTB"))     contaDebito = "";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        contaDebito = "";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        contaDebito = "";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        contaCredito = "";
                        valorFinal   = valorDesconto;
                    }
                }


                valorDouble = DecimalUtil.toDecimal(valorFinal);
                if (valorDouble == 0) {
                    continue;
                }
                historico  = historico.replaceAll(",","\",\"").replaceAll("_","");
                valorFinal  = valorFinal.trim();


                contaDebito  = StringUtil.leftPad(contaDebito,  5, "0");
                contaCredito = StringUtil.leftPad(contaCredito, 5, "0");

                if (contaDebito.equals("00000"))  contaDebito = "";
                if (contaCredito.equals("00000")) contaCredito = "";

                if (!tipoMovimento.contains("CC")) {

                    linha = dataMovimento + "," + contaDebito.trim() + "," + contaCredito.trim() + "," + valorFinal + "," + codigoHistorico + ",\"" + historico.trim() + "\"";
                    txt.append(linha);
                    txt.append(rn);
                }

                if (!tipoMovimento.contains("CC")) {

                    String descricaoDebito = "";
                    String descricaoCredito = "";

                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebitoOriginal)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCreditoOriginal)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    contaDebito  = StringUtil.leftPad(contaDebito,  5, "0");
                    contaCredito = StringUtil.leftPad(contaCredito, 5, "0");

                    if (contaDebito.equals( "00000")) contaDebito  = "";
                    if (contaCredito.equals("00000")) contaCredito = "";

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);

                }
                if(!tipoMovimento.contains("PORT")) totalRegistros++;


            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            if (totalRegistros > 0) {

                // Gravacao do Arquivo TXT
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Asplan2).     //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoASPLAN2(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
	String loteMovimento	= "";
	String codEmpresa		= "";
	String notafiscal		= "";
	String tipoMovimento	= "";
	String dataMovimento	= "";
	String contaDebito		= "";
	String contaCredito		= "";
	String valorLiquidacao	= "";
	String valorDocumento	= "";
	String documento		= "";
	String nomeOrigem		= "";
	String centroCusto		= "";
	String valorJuros		= "";
	String valorDesconto	= "";
	String valorMulta		= "";
	String historico		= "";
	String naturezaContabil	= "";
	String tipoLancamento	= "";
	String nomeEmpresa		= "";
	String classificacao	= "";
	String ERP				= "";

    Date dtAgora = new Date();
    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	
	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String linha = " ";
        int indice   = 0;

        int contador = 0;
        String classifica = " ";
        int totalRegistros = 0;
        ResumoTxt = new StringBuilder();


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
            String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
            String emailCanal = props.get("EMAIL_CANAL");

            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);

            for (int t=0; t<records.length(); t++) {

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                classificacao   = classificacao.substring(0,16).trim();

                historico       = historico.replaceAll(" \\.","\\.");
                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                if (contaDebito.contains("E"))  contaDebito = contaDebito.substring(0, contaDebito.indexOf("E"));
                if (contaCredito.contains("E")) contaCredito = contaCredito.substring(0, contaCredito.indexOf("E"));

                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;

                if (contador == 0) {
                    classifica = " ";
                }

                // xxxxxxxxxxxxxxxxxxx
                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico       = historico.substring(0,historico.indexOf("Filial:")).trim();
                }

                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

                String itemDFC = "";
                if (historico.contains("ItemDFC:")) {
                    itemDFC    = historico.substring(historico.indexOf("ItemDFC:")+8).trim();
                    historico  = historico.substring(0,historico.indexOf("ItemDFC:")).trim();
                }

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                valorLiquidacao   = valorLiquidacao.replaceAll("\\.", ",");
                valorJuros        = valorJuros.replaceAll("\\.", ",");
                valorMulta        = valorMulta.replaceAll("\\.", ",");
                valorDesconto     = valorDesconto.replaceAll("\\.", ",");

                String valorFinal = valorLiquidacao;
                String sContador  = String.valueOf(contador);
                // Nao exporta valores zerados
                double valorDouble = DecimalUtil.toDecimal(valorFinal);
                if (valorDouble == 0) continue;


                if (!classifica.equals(classificacao)) {
                    contador++;
                    sContador = String.valueOf(contador);
                }

                classifica = classificacao;


                if (!classificacao.startsWith("X") && tipoLancamento.equals("PAGAR")) {
                    if (tipoMovimento.equals("CTBPORT")) contaDebito  = "";
                    if (tipoMovimento.equals("CTB"))     contaCredito = "";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        contaCredito = "";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        contaCredito = "";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        contaDebito = "";
                        valorFinal   = valorDesconto;
                    }
                }
                if (tipoMovimento.contains("CC")) {
                    if (tipoMovimento.equals("CTBCC"))       valorFinal   = valorLiquidacao;
                    if (tipoMovimento.equals("CTBJURCC"))    valorFinal   = valorJuros;
                    if (tipoMovimento.equals("CTBMULCC"))    valorFinal   = valorMulta;
                    if (tipoMovimento.equals("CTBDESCC"))    valorFinal   = valorDesconto;
                }

                if (!classificacao.startsWith("X") && tipoLancamento.equals("RECEBER")) {
                    if (tipoMovimento.equals("CTBPORT")) contaCredito  = "";
                    if (tipoMovimento.equals("CTB"))     contaDebito = "";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        contaDebito = "";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        contaDebito = "";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        contaCredito = "";
                        valorFinal   = valorDesconto;
                    }
                }


                valorDouble = DecimalUtil.toDecimal(valorFinal);
                if (valorDouble == 0) {
                    continue;
                }
                historico  = historico.replaceAll(",","\",\"").replaceAll("_","");
                valorFinal  = valorFinal.trim();


                if (!tipoMovimento.contains("CC")) {

                    linha = codEmpresa + ";" + dataMovimento + ";" + historico.trim() + ";" + documento + ";" + valorFinal + ";" + contaDebito.trim() + ";" + contaCredito.trim() + ";";
                    txt.append(linha);
                    txt.append(rn);
                }

                if (!tipoMovimento.contains("CC")) {

                    String descricaoDebito = "";
                    String descricaoCredito = "";

                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebitoOriginal)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCreditoOriginal)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);

                }
                if(!tipoMovimento.contains("PORT")) totalRegistros++;


            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            if (totalRegistros > 0) {

                // Gravacao do Arquivo TXT
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Alterdata).//
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoAlterdata(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    //Conectar na Base de Dados IO_CONTABIL.
     DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento	= "";
    String codEmpresa		= "";
    String notafiscal		= "";
    String tipoMovimento	= "";
    String dataMovimento	= "";
    String contaDebito		= "";
    String contaCredito		= "";
    String valorLiquidacao	= "";
    String valorDocumento	= "";
    String documento		= "";
    String nomeOrigem		= "";
    String centroCusto		= "";
    String valorJuros		= "";
    String valorDesconto	= "";
    String valorMulta		= "";
    String historico		= "";
    String naturezaContabil	= "";
    String tipoLancamento	= "";
    String nomeEmpresa		= "";
    String classificacao	= "";
    String ERP				= "";

    Date dtAgora = new Date();
    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa        = jDadosLote.optString("CODEMPRESA");
        loteMovimento     = jDadosLote.optString("LOTE");
        nomeEmpresa       = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP                     = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String linha = " ";
        int indice   = 0;

        int contador       = 0;
        String classifica  = " ";
        int totalRegistros = 0;
        ResumoTxt          = new StringBuilder();


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
            String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
            String emailCanal = props.get("EMAIL_CANAL");

            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");

            ResumoTxt.append(rn);

            for (int t=0; t<records.length(); t++) {

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                classificacao   = classificacao.substring(0,16).trim();
				
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				
				if (tipoMovimento.equals("CTBDES") && tipoLancamento.equals("RECEBER"))  {
					String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
				}
				
				historico = historico.replaceAll("INVERTECONTA","").trim();

                historico       = historico.replaceAll(" \\.","\\.");
                for (int xy=0;xy<20;xy++) {
                    historico   = historico.replaceAll("  "," ");
                }

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
				contaDebito  = contaDebito.replaceAll("ANULAR","");
                contaCredito = contaCredito.replaceAll("ANULAR","");
                if (contaDebito.contains("E"))  contaDebito  = contaDebito.substring(0, contaDebito.indexOf("E"));
				if (contaCredito.contains("E")) contaCredito = contaCredito.substring(0, contaCredito.indexOf("E"));
				
			
                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal   = contaDebito;
                String contaCreditoOriginal  = contaCredito;


                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<


                if (contador == 0) {
                    classifica = " ";
                }

                // xxxxxxxxxxxxxxxxxxx
                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }

                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

                String itemDFC = "";
                if (historico.contains("ItemDFC:")) {
                    itemDFC    = historico.substring(historico.indexOf("ItemDFC:")+8).trim();
                    historico  = historico.substring(0,historico.indexOf("ItemDFC:")).trim();
                }

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();
                if(historico.contains(",")) historico = historico.replaceAll(",",".").trim();

                String valorFinal = valorLiquidacao;
                String sContador  = String.valueOf(contador);
                // Nao exporta valores zerados
                double valorDouble = DecimalUtil.toDecimal(valorFinal);
				
                 if (valorDouble == 0) continue;


                if (!classifica.equals(classificacao)) {
                    contador++;
                    sContador = String.valueOf(contador);
                }

                classifica = classificacao;


                if (!classificacao.startsWith("X") && tipoLancamento.equals("PAGAR")) {
                    // if (tipoMovimento.equals("CTBPORT")) contaDebito  = "";
                    // if (tipoMovimento.equals("CTB"))     contaCredito = "";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        // contaCredito = "";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        // contaCredito = "";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        // contaDebito = "";
                        valorFinal   = valorDesconto;
                    }
                }
                if (tipoMovimento.contains("CC")) {
                    if (tipoMovimento.equals("CTBCC"))       valorFinal   = valorLiquidacao;
                    if (tipoMovimento.equals("CTBJURCC"))    valorFinal   = valorJuros;
                    if (tipoMovimento.equals("CTBMULCC"))    valorFinal   = valorMulta;
                    if (tipoMovimento.equals("CTBDESCC"))    valorFinal   = valorDesconto;
                }

                if (!classificacao.startsWith("X") && tipoLancamento.equals("RECEBER")) {
                    // if (tipoMovimento.equals("CTBPORT")) contaCredito  = "";
                    // if (tipoMovimento.equals("CTB"))     contaDebito = "";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        // contaDebito = "";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        // contaDebito = "";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        // contaCredito = "";
                        valorFinal   = valorDesconto;
                    }
                }


                valorDouble = DecimalUtil.toDecimal(valorFinal);
				
				String centroCustoDebito = "";
				String centroCustoCredito = "";
				
                if (tipoLancamento.equals("PAGAR"))		{
					centroCustoDebito = centroCusto;
				}
                if (tipoLancamento.equals("RECEBER"))	{
					centroCustoCredito = centroCusto;
				}
 				
                if (valorDouble == 0) {
                    continue;
                }
                if (!tipoMovimento.contains("CC")) {

                    sContador = StringUtil.leftPad(sContador, 5, "0");

                    // linha = "\"" + "\",\"" + contaDebito +"\",\""+ contaCredito +"\",\""+ dataMovimento +"\",\""+ valorFinal +"\",\""+ codigoHistorico +"\",\""+ historico.trim() +"\",\"" + centroCustoDebito + "\",\"" + centroCustoCredito + "\",\"" + documento + "\""; 
					linha = "\"" + "\",\"" + contaDebito +"\",\""+ contaCredito +"\",\""+ dataMovimento +"\",\""+ valorFinal +"\",\""+ codigoHistorico +"\",\""+ historico.trim() +"\",\"" + documento + "\""; 

                    txt.append(linha);
                    txt.append(rn);
                }

                if (!tipoMovimento.contains("CC")) {

                    String descricaoDebito = "";
                    String descricaoCredito = "";

                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebitoOriginal)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCreditoOriginal)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);

                }
 				
                if(!tipoMovimento.contains("PORT")) totalRegistros++;


            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            if (totalRegistros > 0) {

                // Gravacao do Arquivo TXT
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@MakrowebCompleto).//
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoMakrowebCompleto(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento	= "";
    String codEmpresa		= "";
    String tipoMovimento	= "";
    String dataMovimento	= "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";

    String valorFinal       = "";
    String separador        = "";
    double valorDouble      = 0;

    Date dtAgora = new Date();
    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {

                // /////// ///// //
                // OBTENDO DADOS //
                // /////// ///// //

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito  = contaDebito.replaceAll("[^0-9]*", "");
                contaCredito = contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();
				
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                /*
                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();
				*/

                historico = trimChar(historico);

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);
                   }catch(Exception c){valorFinal = "";}

                valorFinal = valorFinal.replaceAll(",","").trim();
                valorFinal = valorFinal.replaceAll("\\.",",").trim();

                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if (historico.length() > 250) historico = historico.substring(0,249).trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //

                Date dt		  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "ddMMyyyy");

                String lancamento = "";
                String sequencial = "";

                // //////// /////// //
                // MONTANDO ARQUIVO //
                // //////// /////// //
                txt.append(StringUtil.leftPad(dataMovimento.trim(), 8, "0"));
                txt.append(separador);
                txt.append(StringUtil.leftPad(lancamento.trim(), 6, "0"));
                txt.append(separador);
                txt.append(StringUtil.leftPad(sequencial.trim(), 3, "0"));
                txt.append(separador);
                txt.append(StringUtil.rightPad(documento.trim(), 10, " "));
                txt.append(separador);
                txt.append(StringUtil.leftPad(contaDebito.trim(), 6, "0"));
                txt.append(separador);
                txt.append(StringUtil.leftPad("", 25, " "));			// contaAnalitica D
                txt.append(separador);
                txt.append(StringUtil.leftPad(contaCredito.trim(), 6, "0"));
                txt.append(separador);
                txt.append(StringUtil.leftPad("", 25, " "));			// contaAnalitica C
                txt.append(separador);
                txt.append(StringUtil.leftPad(valorFinal.trim(), 14, "0"));
                txt.append(separador);

                txt.append(StringUtil.rightPad(codigoHistorico.trim(), 3, "0"));
                txt.append(separador);
                txt.append(StringUtil.rightPad(historico.trim(), 250, " "));
                txt.append(separador);
                txt.append(StringUtil.leftPad(codEmpresa.trim(), 2, "0"));	// filial de debito
                txt.append(separador);
                txt.append(StringUtil.leftPad(codEmpresa.trim(), 2, "0"));	// filial de credito
                txt.append(separador);

                txt.append(StringUtil.leftPad("0".trim(), 4,"0"));		// Evento
                txt.append(separador);
                txt.append(StringUtil.leftPad("0".trim(), 6,"0"));		// Conta debito Centro de Custo reduzida
                txt.append(separador);
                txt.append(StringUtil.leftPad(" ".trim(), 25," "));		// Conta debito centro de custo editada
                txt.append(separador);
                txt.append(StringUtil.leftPad("0".trim(), 6,"0"));		// Conta credito centro de custo reduzida
                txt.append(separador);
                txt.append(StringUtil.leftPad(" ".trim(), 25," "));		// Conta credito centro de custo editada
                txt.append(separador);

                txt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Makroweb).        //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoMakroweb(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
    String ERP               = "";

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();
    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("\"EVENTO CONTABIL\",\"CONTA DEBITO\",\"CONTA CREDITO\",\"DATA\",\"VALOR\",\"CODIGO HISTORICO\",\"HISTORICO\",\"\"");
        ResumoTxt.append(rn);

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {

                // /////// ///// //
                // OBTENDO DADOS //
                // /////// ///// //

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito  = contaDebito.replaceAll("[^0-9]*", "");
                contaCredito = contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                historico = trimChar(historico);

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);
                   }catch(Exception c){valorFinal = "";}

                valorFinal = valorFinal.replaceAll(",", "");
                valorFinal = valorFinal.replaceAll("\\.",",");


                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if (historico.length() > 250) historico = historico.substring(0,249).trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //

                Date dt		  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");


                String aspas = "\"";
                separador = aspas + "," + aspas;
                // //////// /////// //
                // MONTANDO ARQUIVO //
                // //////// /////// //
                txt.append(aspas);
                txt.append("001");
                txt.append(separador);
                txt.append(contaDebito.trim());
                txt.append(separador);
                txt.append(contaCredito.trim());
                txt.append(separador);
                txt.append(StringUtil.leftPad(dataMovimento.trim(), 10, "0"));
                txt.append(separador);
                txt.append(valorFinal.trim());
                txt.append(separador);
                txt.append(codigoHistorico.trim());
                txt.append(separador);
                txt.append(historico.trim());
                txt.append(separador);
                txt.append("");
                txt.append(aspas);

                txt.append(rn);

                String separadorResumo = ";";
                ResumoTxt.append("001");
                ResumoTxt.append(separadorResumo);
                ResumoTxt.append(contaDebito.trim());
                ResumoTxt.append(separadorResumo);
                ResumoTxt.append(contaCredito.trim());
                ResumoTxt.append(separadorResumo);
                ResumoTxt.append(StringUtil.leftPad(dataMovimento.trim(), 10, "0"));
                ResumoTxt.append(separadorResumo);
                ResumoTxt.append(valorFinal.trim());
                ResumoTxt.append(separadorResumo);
                ResumoTxt.append(codigoHistorico.trim());
                ResumoTxt.append(separadorResumo);
                ResumoTxt.append(historico.trim());
                ResumoTxt.append(separadorResumo);
                ResumoTxt.append("");
                ResumoTxt.append(rn);

                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@ASTREA).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoASTREA(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
    String ERP               = ""; 

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();
    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {

                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito		= contaDebito.replaceAll("[^0-9]*", "");
                contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= ";";
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll("\\.",",").trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "dd/MM/yyyy");

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 99) historico = cutString(historico, 0, 99);
                
				if(tipoMovimento.contains("CC")) continue;
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////

				txt.append(dataMovimento);
                txt.append(separador);                
                txt.append(valorFinal);
                txt.append(separador);
                txt.append(contaDebito);
                txt.append(separador);
                txt.append(contaCredito);
                txt.append(separador);
                txt.append("VALOR REF.");
                txt.append(separador);
				txt.append(historico);
				txt.append(separador);
				txt.append(centroCusto);
                txt.append(separador);
				txt.append(separador);
				txt.append(documento);
				
				txt.append(rn);
				
                String descricaoDebito  = "";
                String descricaoCredito = "";

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }



                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}

			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".csv";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Mastermaq).       //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoMastermaq(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";

    String valorFinal       = "";
    String separador        = "";
    double valorDouble      = 0;
    Date dtAgora 			= new Date();
    String cpfCnpj			= "";

	String classifica		= "";
	String classificacao	= "";
	String classificacao1	= "";
	int contador			= 0;

    StringBuilder txt		= new StringBuilder();
    StringBuilder ResumoTxt	= new StringBuilder();
    StringBuilder sForce	= new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        String codEmpresaAux = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {

                //variaveis personalizadas
                String filialDeb		= "";
                String filialCred		= "";
                String numLinha			= "";
                String unAdm			= "";

                // /////// ///// //
                // OBTENDO DADOS //
                // /////// ///// //

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

				classificacao   = recMov.optString("CLASSIFICACAO");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");

                cpfCnpj			= recMov.optString("CPFCNPJ");

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}	
                
                //#2304-004035. Participante na exportação do arquivo
				String codigoParticipante = "";
                if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
			
                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				
				historico = historico.replaceAll("INVERTECONTA","").trim();
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa  = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico   = historico.substring(0,historico.indexOf("Filial:")).trim();
                    filialDeb	= codEmpresa;
                    filialCred	= codEmpresa;
                }

                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico"))	codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial"))		codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();
                if(codigoHistorico.equals("0")) 			codigoHistorico = "";

                historico = trimChar(historico);

                //#2304-004035. Participante na exportação do arquivo
				String participante = "";  // VER QUE PARTICIPANTE USAMOS APENAS COM Mastermaq
				
				if (!codigoParticipante.equals("") || contaDebito.toUpperCase().contains("P") || contaCredito.toUpperCase().contains("P")) {					
					
					if (contaDebito.toUpperCase().contains("P")) {
						if(!codigoParticipante.equals("")) participante = codigoParticipante;
						
						String [] contaArray = contaDebito.toUpperCase().split("P");
						if (contaArray.length > 1) {
							participante = cutString(contaDebito, "P").trim();
                            contaDebito  = cutString(contaDebito, 0, "P").trim();
						}
						if (contaArray.length == 1) {
							String aux = participante;
							participante = contaDebito.toUpperCase().replaceAll("P", "").trim();
							contaDebito = aux;
						}
					}

					if (contaCredito.toUpperCase().contains("P")) {
						if(!codigoParticipante.equals("")) participante = codigoParticipante;
						
						String [] contaArray = contaCredito.toUpperCase().split("P");
						if (contaArray.length > 1) {
							participante = cutString(contaCredito, "P").trim();
							contaCredito = cutString(contaCredito, 0, "P").trim();
						}
						if (contaArray.length == 1) {
							String aux = participante;
							participante = contaCredito.toUpperCase().replaceAll("P", "").trim();
							contaCredito = aux;
						}
					}
				}

                if(contaCredito.toUpperCase().contains("P")) {
                    participante = contaCredito.replaceAll("P","").replaceAll("p","").trim();
                    if(!codigoParticipante.equals("")) contaCredito = codigoParticipante; 
				}
				
				contaDebito  = contaDebito.replaceAll("[^0-9]*", "");
                contaCredito = contaCredito.replaceAll("[^0-9]*", "");	

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);}
                catch(Exception c){valorFinal = "";}

                String valorResumoTxt = valorFinal;

				String sContador  = String.valueOf(contador);
                
                classificacao1	= cutString(classificacao, 0,16).trim();

                if (!classifica.equals(classificacao1)) {
                    contador++;
                    sContador = String.valueOf(contador);
                }

                classifica = classificacao1;

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
                if(documento.length() > 8) documento = documento.substring(documento.length()-8);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if (historico.length() > 250) historico = historico.substring(0,249).trim();

                Date dt		  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "yyyyMMdd");


                if (contaCredito.length() < 5) contaCredito = StringUtil.leftPad(contaCredito.trim(), 5, "0");
                if (contaDebito.length() < 5) contaDebito = StringUtil.leftPad(contaDebito.trim(), 5, "0");
				if (contaCredito.equals("00000")) contaCredito = "";
				if (contaDebito.equals("00000")) contaDebito = "";

				if (historico.contains("Participante:") && contaDebito.length() > 10) {
					cpfCnpj = contaDebito.replaceAll("P","").replaceAll("p","");
                    contaDebito   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
                if (historico.contains("Participante:") && contaCredito.length() > 10) {
					cpfCnpj 	   = contaCredito.replaceAll("P","").replaceAll("p","");
                    contaCredito   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico      = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
				
                cpfCnpj = cpfCnpj.replaceAll("[^0-9]*", "").trim();

                // //////// /////// //
                // MONTANDO ARQUIVO //
                // //////// /////// //
                String historico50 = "";
				String historicoOriginal = historico;
                for(int kk = 0; kk < 5;kk++){
                    if(historico.length() <= 50) {
                        historico50 = StringUtil.rightPad(historico.trim(), 50, " ");
                        if(kk > 0) numLinha	= String.valueOf(kk+1);
                        kk = 5;
                    }else{
                        historico50 = historico.substring(0,50);
                        historico	= historico.substring(50);
                        if(kk > 0) numLinha	= String.valueOf(kk+1);
                    }

                    txt.append(dataMovimento);
                    txt.append(separador);
                    txt.append(StringUtil.leftPad(documento.trim(), 8, "0"));

                    txt.append(separador);
                    txt.append(StringUtil.rightPad(contaDebito.trim(), 17, " "));
                    txt.append(separador);
                    txt.append(StringUtil.rightPad(contaCredito.trim(), 17, " "));
                    txt.append(separador);
                    txt.append(StringUtil.leftPad(valorFinal.trim(), 14, " "));
                    txt.append(separador);

                    txt.append(StringUtil.rightPad(codigoHistorico.trim(), 3, " "));
                    txt.append(separador);
                    txt.append(historico50);	//////tratado acima dos append
                    txt.append(separador);
                    txt.append(StringUtil.leftPad(filialDeb.trim(), 2, "0"));	// filial de debito
                    txt.append(separador);
                    txt.append(StringUtil.leftPad(filialCred.trim(), 2, "0"));	// filial de credito
                    txt.append(separador);
                    txt.append("    ");										// Evento  4 espacos
                    txt.append(separador);
                    txt.append(StringUtil.leftPad(numLinha.trim(), 1," "));	// numero da linha " ","2","3","4" ou "5"
                    txt.append(separador);
                    txt.append("   ");										// user+integ to  2 + 1 espacos
                    txt.append(separador);

                    txt.append(StringUtil.leftPad(centroCusto.trim(), 15," "));	// Centro de Custo para o qual aconteceu a apropriacao (deve possuir a mesma estrutura do centro de custo cadastrado no NG Contabil)
                    txt.append(separador);
                    txt.append(StringUtil.leftPad(unAdm.trim(), 4," "));		//Unidade Administrativa para a qual aconteceu a apropriacao (deve possuir a mesma estrutura da Unidade Administrativa cadastrada no NG Contabil)
                    txt.append(separador);
                    //#2304-004035. Participante na exportação do arquivo
					if(participante.equals("")){
						txt.append(StringUtil.leftPad(participante, 14," "));
					}else{
						txt.append(StringUtil.leftPad(participante, 14,"0"));
					}
                    txt.append(separador);
                    txt.append(StringUtil.rightPad(sContador, 8," "));
                    txt.append(separador);
                    txt.append(StringUtil.rightPad(" ", 50," "));

                    txt.append(rn);

                    String separadorResumo = ";";

                    String descricaoDebito = "";
                    String descricaoCredito = "";

                    if (!tipoMovimento.contains("CC")) {
                        JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO")
                        .param(codEmpresa)
                        .param(contaDebito)
                        .queryUnique();
                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                        }

                        JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO")
                        .param(codEmpresa)
                        .param(contaCredito)
                        .queryUnique();
                        if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                            descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                        }

                        ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorResumoTxt + ";" + codigoHistorico + ";" + historicoOriginal + ";" + nomeOrigem);
                        ResumoTxt.append(rn);
                    }

                }

                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";

                String cd = cutString(codEmpresaAux, codEmpresaAux.length()-3);
				//if(cd.equals("837")) cd = "204";
                filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/CTBIL" + StringUtil.leftPad(cd,3,"0") + "____" + loteMovimento + ".txt";
				filename = filename.replaceAll("97837","204").replaceAll("837","204");										//.TXT____  Contadora c/ erro de importacao

                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
				filenameRESUMO = filenameRESUMO.replaceAll("97837","204").replaceAll("837","204");


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                //enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@SULPROG).//
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoSULPROG(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";

    String valorFinal       = "";
    String separador        = "";
    double valorDouble      = 0;

    Date dtAgora = new Date();
    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // //////// /////// /////// //
        // MONTANDO ARQUIVO HEADER  //
        // //////// /////// /////// //


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // /////// ///// //
                // OBTENDO DADOS //
                // /////// ///// //

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito  = contaDebito.replaceAll("[^0-9]*", "");
                contaCredito = contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
                String dataMovimentoOriginal = dataMovimento;

                String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA").replaceAll("\\.","").replaceAll("-","").replaceAll("/","");

                if (t == 0) {
                    txt.append("H"); //### TIPO REGISTRO
                    txt.append(separador);
                    txt.append("0300"); //### VERSÃO LAYOUT
                    txt.append(separador);
                    txt.append(StringUtil.rightPad(nomeEmpresa.trim(), 32, " ")); //### RAZÃO SOCIAL
                    txt.append(separador);
                    txt.append("J"); //### TIPO (JURIDICO OU FISICO)
                    txt.append(separador);
                    txt.append(StringUtil.rightPad("0", 11, "0")); //### CPF
                    txt.append(separador);
                    txt.append(StringUtil.rightPad(cnpjEmpresa, 14, "0")); //### CNPJ
                    txt.append(separador);

                    txt.append(rn);
                }

                for (int xy=0;xy<20;xy++) { historico = historico.replaceAll("  "," "); }
                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                

                historico = trimChar(historico);

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);
                   }catch(Exception c){valorFinal = "";}

                valorFinal = valorFinal.replaceAll("\\.", "").replaceAll(",", "").trim();

                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if (historico.length() > 250) historico = historico.substring(0,249).trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //

                Date dt		  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "ddMMyyyy");

                String lancamento = "";
                String sequencial = "";

                // //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////

                txt.append("L"); //### TIPO REGISTRO
                txt.append(separador);
                txt.append(StringUtil.rightPad(dataMovimento.trim(),8,"")); //### DATA
                txt.append(separador);
                txt.append(StringUtil.leftPad(contaDebito.trim(), 7, "0")); //### CONTA DEBITO
                txt.append(separador);
                txt.append(StringUtil.leftPad(contaCredito.trim(), 7, "0")); //### CONTA CREDITO
                txt.append(separador);
                txt.append(StringUtil.leftPad(valorFinal.trim(), 17, "0")); //### VALOR
                txt.append(separador);
                txt.append(StringUtil.rightPad(historico.trim(), 150, " ")); //### HISTORICO
                txt.append(separador);
                txt.append(StringUtil.leftPad(centroCusto.trim(), 6, "0")); //### CENTROCUSTO
                txt.append(separador);

                txt.append(rn);


                String descricaoDebito = "";
                String descricaoCredito = "";

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }

                valorFinal = valorFinal.replaceAll("\\.","");
                String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorExporta + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            

            // //////// /////// /////// ///
            // MONTANDO ARQUIVO TRAILER  //
            // //////// /////// /////// ///

            txt.append("T"); //### TIPO REGISTRO
            txt.append(separador);
            txt.append("L"); //### TIPO TOTALIZADO
            txt.append(separador);
            txt.append(StringUtil.leftPad(String.valueOf(records.length()), 6, "0")); //### TOTAL REGISTRO DO TIPO L
            txt.append(separador);
            txt.append(StringUtil.leftPad(String.valueOf(records.length()+2), 6, "0")); //### TOTALIZADOR TOTAL (H+T+L)
            txt.append(separador);

            txt.append(rn);




            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@SIESCON).//
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoSIESCON(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";

    String valorFinal       = "";
    String separador        = "";
    double valorDouble      = 0;

    Date dtAgora = new Date();
    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        int contador = 0;
        String classifica = " ";
        String classificacao = "";
        int totalRegistros = 0;

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // //////// /////// /////// //
        // MONTANDO ARQUIVO HEADER  //
        // //////// /////// /////// //


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);

            for (int t=0; t<records.length(); t++) {

                // /////// ///// //
                // OBTENDO DADOS //
                // /////// ///// //

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

               
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
                String dataMovimentoOriginal = dataMovimento;

                String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA").replaceAll("\\.","").replaceAll("-","").replaceAll("/","");

                String sContador  = String.valueOf(contador);

                if (!classifica.equals(classificacao)) {
                    contador++;
                    sContador = String.valueOf(contador);

                }

                classifica = classificacao;


                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				contaDebito  = contaDebito.replaceAll("[^0-9]*", "");
                contaCredito = contaCredito.replaceAll("[^0-9]*", "");

				historico = historico.replaceAll("INVERTECONTA","").trim();
				
                String codigoFilial = "";
                String codigoHistorico = "";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //
				logger.logInfo("CDHIST " + codEmpresa + " | " + historico);
                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 6) codEmpresa = codEmpresa.substring(0,5).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
					
					if (codEmpresa.contains(" ")) codEmpresa = cutString(codEmpresa, 0, " ");
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

               

                historico = trimChar(historico);

                //#2311-021002
				//if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);
                   }catch(Exception c){valorFinal = "";}

                valorFinal = valorFinal.replaceAll("\\.", "").replaceAll(",", "").trim();

                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if (historico.length() > 250) historico = historico.substring(0,249).trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                Date dt		  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");				
                dataMovimento = DateUtil.dateToString(dt, "ddMMyyyy");

                String lancamento = "";
                String sequencial = "";

                // //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////
                if(!codigoHistorico.equals("")) historico = StringUtil.rightPad(codigoHistorico.trim(), 4, " ") + historico;
                
				logger.logInfo("DATACOD " + codEmpresa + " | " + dataMovimento);
                txt.append(StringUtil.rightPad(codEmpresa.trim(),6," ")); //### EMPRESSA
                txt.append(StringUtil.rightPad(dataMovimento.trim(),8," ")); //### DATA
                txt.append(StringUtil.rightPad(contaDebito.trim(), 6, " ")); //### CONTA DEBITO
                txt.append(StringUtil.rightPad(contaCredito.trim(), 6, " ")); //### CONTA CREDITO
                txt.append(StringUtil.leftPad(valorFinal.trim(), 13, "0")); //### VALOR
				if(codigoHistorico.equals("")) txt.append("    ");
                txt.append(StringUtil.rightPad(historico.trim(), 1000, " ")); //### CODIGOHISTORICO + HISTORICO
                txt.append(StringUtil.rightPad(documento.trim(), 10, " ")); //### DOCUMENTO
                txt.append(StringUtil.rightPad(sContador.trim(), 10, " ")); //### NRO LOTE

                txt.append(rn);


                String descricaoDebito = "";
                String descricaoCredito = "";

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }

                valorFinal = valorFinal.replaceAll("\\.","");
                String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorExporta + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@TRON).//
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoTRON(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
	String classificacao 	= "";
    String ERP              = "";

    String valorFinal       = "";
    String separador        = ";";
    double valorDouble      = 0;
	
	int contador = 0;
	String classifica = " ";

    Date dtAgora = new Date();
    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

	 JSONArray toCloud		= new JSONArray();	//#20210126	
	 //LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // //////// /////// /////// //
        // MONTANDO ARQUIVO HEADER  //
        // //////// /////// /////// //


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {

                // /////// ///// //
                // OBTENDO DADOS //
                // /////// ///// //

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito  = contaDebito.replaceAll("[^0-9]*", "");
                contaCredito = contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
				classificacao   = recMov.optString("CLASSIFICACAO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
				classificacao   = classificacao.substring(0,16).trim();
                historico       = historico.replaceAll(" \\.","\\.");
                String dataMovimentoOriginal = dataMovimento;
				
				logger.logInfo("VALOR = "+valorLiquidacao+" | DATA == "+dataMovimento);

                String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA").replaceAll("\\.","").replaceAll("-","").replaceAll("/","");

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();
				
				String sContador = Integer.toString(contador);
				
				if (!classifica.equals(classificacao)) {
                    contador++;
                    sContador = Integer.toString(contador);
					// }
                }
				
                classifica = classificacao;
				
				// String transacaoNli = "0";
				// logger.logDebug("HIST === "+historico);
                // if (historico.contains("TR:") && historico.contains("#")) {
                    // transacaoNli = historico.substring(0, historico.indexOf("#"));
                    // transacaoNli = transacaoNli.replaceAll("TR:","").trim();
                    // historico    = historico.substring(historico.indexOf("#")+1).trim();
                // }
				
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codigoFilial.length() > 2) codigoFilial = codigoFilial.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
               
                historico = trimChar(historico);

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
				logger.logInfo("TIPOMOV -> " + tipoMovimento + " |CONTADEB _> " + contaDebito + " |CONNTACRED -> " + contaCredito + " |NATUREZACONTABIL -> " + naturezaContabil);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);
                   }catch(Exception c){valorFinal = "";}

                valorFinal = valorFinal.replaceAll("\\.", ",").trim();

                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if (historico.length() > 250) historico = historico.substring(0,249).trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //

                Date dt		  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");

                String lancamento = "";
                String sequencial = "";
				
				  
				String contaFinal = "";
                if (naturezaContabil.equals("C")) {
                    contaFinal = contaCredito;
                }
                if (naturezaContabil.equals("D")) {
                    contaFinal = contaDebito;
                }
				// Douglas comentado para tratar da forma correta para empresa 18649, #2303-001672, caso necessário desenvolver um if para um cod empresa 
				// específico.
				// if (tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBDES") || tipoMovimento.equals("CTBMUL")){
					// if(contaCredito.equals("") && !contaDebito.equals("")) contaFinal = contaDebito;
					// if(!contaCredito.equals("") && contaDebito.equals("")) contaFinal = contaCredito;
				// }
                // //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////
				// Douglas comentado para tratar da forma correta para empresa 18649, #2303-001672, caso necessário desenvolver um if para um cod empresa 
				// específico.
				// if (tipoMovimento.equals("CTBJUR")) naturezaContabil = "C";
				// if (tipoMovimento.equals("CTBDES")) naturezaContabil = "D";
				// if (tipoMovimento.equals("CTBMUL")) naturezaContabil = "C";

                txt.append(codEmpresa);
                txt.append(separador);

				txt.append(dataMovimento);
                txt.append(separador);

                txt.append(documento);
                txt.append(separador);

                txt.append(codigoHistorico);
                txt.append(separador);

                txt.append(naturezaContabil);
                txt.append(separador);

                txt.append(valorFinal);
                txt.append(separador);

                txt.append("0"); //###CÓDIGO LOTE
                txt.append(separador);

                txt.append("N");
                txt.append(separador);

                txt.append("\"");
                txt.append(historico);
                txt.append("\"");
                txt.append(separador);

                txt.append(sContador);//Transicao
                txt.append(separador);

                txt.append(contaFinal);
                txt.append(separador);

                txt.append("0,00");
                txt.append(separador);
									// CNPJ FORMECEDOR 
                txt.append(separador); 
									// DESCRICAO FORNECEDOR

                txt.append(separador); 
									// 
												
                txt.append(cutString(tipoLancamento, 0, 1)); // INDTITULO
                txt.append(separador);
									// NIVEL CENTRO NEGOCIOS
             
                txt.append(rn);

                String descricaoDebito = "";
                String descricaoCredito = "";

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }

                valorFinal = valorFinal.replaceAll("\\.","");
                String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorExporta + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".csv";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}



///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@MXM).//
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoMXM(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";

    String valorFinal       = "";
    String separador        = "";
    double valorDouble      = 0;

    Date dtAgora = new Date();
    StringBuilder txt		= new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce	= new StringBuilder();
	JSONArray toCloud		= new JSONArray();	//#20210126
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);

		ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // /////// ///// //
                // OBTENDO DADOS //
                // /////// ///// //

                JSONObject recMov = records.optJSONObject(t);
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito  = contaDebito.replaceAll("[^0-9]*", "");
                contaCredito = contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();
				
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //



                if (historico.contains("Filial:")) {
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa  = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();



                historico = trimChar(historico);

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);
                   }catch(Exception c){valorFinal = "";}

                valorFinal = valorFinal.replaceAll(",", "\\.").trim();

                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if (historico.length() > 250) historico = historico.substring(0,249).trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //

                Date dt		  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "dd/MM/yy");
                dataMovimento = getCampoDate(dataMovimento, "dd/MM/yy", "ddMMyyyy");

                String lancamento = "";
                String sequencial = "";

                // //////// /////// //
                // MONTANDO ARQUIVO //
                // //////// /////// //

                txt.append(StringUtil.rightPad(dataMovimento.trim(), 8, "0"));
                txt.append(StringUtil.rightPad(separador, 9, " "));
                txt.append(StringUtil.rightPad(contaDebito.trim(), 20, " "));
                txt.append(StringUtil.rightPad(contaCredito.trim(), 20, " "));
                txt.append(StringUtil.rightPad(separador, 20, " "));
                txt.append(StringUtil.leftPad(valorFinal.trim(), 18, "0")); //### Valor Lançamento
                txt.append(StringUtil.leftPad(separador, 5, " "));
                txt.append(StringUtil.rightPad(codigoHistorico.trim(), 3, "0")); //### Valor Lançamento
                txt.append(StringUtil.rightPad(historico.trim(), 120, " ")); //### Centro Custo
                txt.append(separador);
                txt.append(StringUtil.rightPad(separador, 69, " "));
                txt.append(StringUtil.rightPad(centroCusto.trim(), 10, " ")); //### Indicador de Credito ou Débito
                txt.append(separador);

                txt.append(rn);

                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			
            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@INFOBANC).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoINFOBANC(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
    String ERP               = ""; 

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	JSONArray toCloud		= new JSONArray();	//#20210126
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);

		ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

             for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //

                JSONObject recMov = records.optJSONObject(t);
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

               
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= "";
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
						historico = historico.replaceAll("INVERTECONTA","").trim();
					}
				}

				contaDebito		= contaDebito.replaceAll("[^0-9]*", "");
                contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();


                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll("\\.",",").trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 6) documento = documento.substring(documento.length()-6);

				dataMovimento = getCampoDate(dataMovimento, "", "yyyyMMdd");
				
                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 120) historico = cutString(historico, 0, 119);
                
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////

				txt.append(dataMovimento);
				txt.append(StringUtil.leftPad(contaDebito, 5, "0"));
                txt.append(StringUtil.leftPad(contaCredito, 5, "0"));
                txt.append(StringUtil.leftPad(valorFinal.replaceAll("[^\\d]", ""), 18, "0"));
				txt.append(StringUtil.leftPad(documento, 6, "0"));
				txt.append(StringUtil.rightPad(historico, 120, " "));
				txt.append(rn);
                
                String descricaoDebito  = "";
                String descricaoCredito = "";

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }

                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".csv";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

public void GeraArquivoLedware(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    //Conectar na Base de Dados IO_CONTABIL.
     DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento	= "";
    String codEmpresa		= "";
    String notafiscal		= "";
    String tipoMovimento	= "";
    String dataMovimento	= "";
    String contaDebito		= "";
    String contaCredito		= "";
    String valorLiquidacao	= "";
    String valorDocumento	= "";
    String documento		= "";
    String nomeOrigem		= "";
    String centroCusto		= "";
    String valorJuros		= "";
    String valorDesconto	= "";
    String valorMulta		= "";
    String historico		= "";
    String naturezaContabil	= "";
    String tipoLancamento	= "";
    String nomeEmpresa		= "";
    String classificacao	= "";
    String ERP				= "";
	String separador		= "";

    Date dtAgora = new Date();
    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

	// JSONArray toCloud		= new JSONArray();	//#20210126	
	// LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa        = jDadosLote.optString("CODEMPRESA");
        loteMovimento     = jDadosLote.optString("LOTE");
        nomeEmpresa       = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
        ERP                     = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String linha = " ";
        int indice   = 0;
        int contador       = 0;
        String classifica  = " ";
        int totalRegistros = 0;
        ResumoTxt          = new StringBuilder();


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
            String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
            String emailCanal = props.get("EMAIL_CANAL");

            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");

            ResumoTxt.append(rn);

            for (int t=0; t<records.length(); t++) {

                JSONObject recMov = records.optJSONObject(t);
				
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                classificacao   = classificacao.substring(0,16).trim();
				
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();

                historico       = historico.replaceAll(" \\.","\\.");
                for (int xy=0;xy<20;xy++) {
                    historico   = historico.replaceAll("  "," ");
                }

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                if (contaDebito.contains("E"))  contaDebito  = contaDebito.substring(0, contaDebito.indexOf("E"));
                if (contaCredito.contains("E")) contaCredito = contaCredito.substring(0, contaCredito.indexOf("E"));


                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal   = contaDebito;
                String contaCreditoOriginal  = contaCredito;


                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<


                if (contador == 0) {
                    classifica = " ";
                }

                // xxxxxxxxxxxxxxxxxxx
                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }

                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

                String itemDFC = "";
                if (historico.contains("ItemDFC:")) {
                    itemDFC    = historico.substring(historico.indexOf("ItemDFC:")+8).trim();
                    historico  = historico.substring(0,historico.indexOf("ItemDFC:")).trim();
                }

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();
                if(historico.contains(",")) historico = historico.replaceAll(",",".").trim();

                String valorFinal = valorLiquidacao;
                String sContador  = String.valueOf(contador);
                // Nao exporta valores zerados
                double valorDouble = DecimalUtil.toDecimal(valorFinal);
				
                 if (valorDouble == 0) continue;


                if (!classifica.equals(classificacao)) {
                    contador++;
                    sContador = String.valueOf(contador);
                }

                classifica = classificacao;


                if (!classificacao.startsWith("X") && tipoLancamento.equals("PAGAR")) {
                    // if (tipoMovimento.equals("CTBPORT")) contaDebito  = "";
                    // if (tipoMovimento.equals("CTB"))     contaCredito = "";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        // contaCredito = "";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        // contaCredito = "";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        // contaDebito = "";
                        valorFinal   = valorDesconto;
                    }
                }
                if (tipoMovimento.contains("CC")) {
                    if (tipoMovimento.equals("CTBCC"))       valorFinal   = valorLiquidacao;
                    if (tipoMovimento.equals("CTBJURCC"))    valorFinal   = valorJuros;
                    if (tipoMovimento.equals("CTBMULCC"))    valorFinal   = valorMulta;
                    if (tipoMovimento.equals("CTBDESCC"))    valorFinal   = valorDesconto;
                }

                if (!classificacao.startsWith("X") && tipoLancamento.equals("RECEBER")) {
                    // if (tipoMovimento.equals("CTBPORT")) contaCredito  = "";
                    // if (tipoMovimento.equals("CTB"))     contaDebito = "";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        // contaDebito = "";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        // contaDebito = "";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        // contaCredito = "";
                        valorFinal   = valorDesconto;
                    }
                }

                valorDouble = DecimalUtil.toDecimal(valorFinal);
				String centroCustoDebito = "";
				String centroCustoCredito = "";
				
                if (tipoLancamento.equals("PAGAR"))		{
					centroCustoDebito = centroCusto;
				}
                if (tipoLancamento.equals("RECEBER"))	{
					centroCustoCredito = centroCusto;
				}
 				
                if (valorDouble == 0) {
                    continue;
                }
                
				sContador = StringUtil.leftPad(sContador, 5, "0");
				
				txt.append(StringUtil.rightPad(dataMovimento, 10, " "));
				txt.append(separador);
				txt.append(StringUtil.rightPad("", 4, " "));
				txt.append(separador);
				txt.append(StringUtil.rightPad("", 4, " "));
				txt.append(separador);
				txt.append(StringUtil.rightPad(contaDebito, 10, "0"));
				txt.append(separador);
				txt.append(StringUtil.rightPad(contaCredito, 10, "0"));
				txt.append(separador);
				//txt.append(StringUtil.leftPad(valorDocumento.replaceAll("\\.",""), 12, "0"));
				txt.append(StringUtil.leftPad(valorFinal.replaceAll("\\.",""), 12, "0"));
				txt.append(separador);
				txt.append(StringUtil.rightPad(codigoHistorico, 4, "0"));
				txt.append(separador);
				txt.append(StringUtil.rightPad(historico, 120, " "));
				txt.append(separador);
				txt.append("S");
				txt.append(separador);
				txt.append(StringUtil.rightPad(centroCustoDebito, 3, " "));
				txt.append(separador);
				txt.append(StringUtil.rightPad(centroCustoCredito, 3, " "));

				txt.append(rn);
                

                if (!tipoMovimento.contains("CC")) {

                    String descricaoDebito = "";
                    String descricaoCredito = "";

                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebitoOriginal)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCreditoOriginal)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);

                }
 				
                if(!tipoMovimento.contains("PORT")) totalRegistros++;


            } //For arrayMov

			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
            
            if (totalRegistros > 0) {

                // Gravacao do Arquivo TXT
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}
 
 
 
public void GeraArquivoONEFLOW(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    
	
	// Conectar na Base de Dados IO_CONTABIL.
     DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento	= "";
    String codEmpresa		= "";
    String notafiscal		= "";
    String tipoMovimento	= "";
    String dataMovimento	= "";
    String contaDebito		= "";
    String contaCredito		= "";
    String valorLiquidacao	= "";
    String valorDocumento	= "";
    String documento		= "";
    String nomeOrigem		= "";
    String centroCusto		= "";
    String valorJuros		= "";
    String valorDesconto	= "";
    String valorMulta		= "";
    String historico		= "";
    String naturezaContabil	= "";
    String tipoLancamento	= "";
    String nomeEmpresa		= "";
    String classificacao	= "";
    String ERP				= "";
	String separador		= "";

    Date dtAgora = new Date();
    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

	JSONArray toCloud		= new JSONArray();	//#20210126	
	
	String loteId = "";
	JSONObject objetoLancamento = new JSONObject();
	JSONArray  lancamentosA     = new JSONArray();
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa        = jDadosLote.optString("CODEMPRESA");
        loteMovimento     = jDadosLote.optString("LOTE");
        nomeEmpresa       = jDadosLote.optString("NOMEEMPRESA");

        //Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		JSONObject recAux = new JSONObject();	//#20210126
		JSONObject bodyObject = new JSONObject();	//#20210126
		JSONObject lancamentosObj = new JSONObject();	//#20210126
		JSONArray lancamentosArray = new JSONArray();	//#20210126
		
		
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);
		
		
		
        ERP                     = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        //Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String linha = " ";
        int indice   = 0;
        int contador       = 0;
        String classifica  = " ";
        int totalRegistros = 0;
        ResumoTxt          = new StringBuilder();
		
		String tokenOneFlow = "";



        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
            String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
            String emailCanal = props.get("EMAIL_CANAL");

            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");

            ResumoTxt.append(rn);

            for (int t=0; t<records.length(); t++) {

                JSONObject recMov = records.optJSONObject(t);
				
				 
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
				String cpfCnpj  = recMov.optString("CPFCNPJ").replaceAll("[\\.|\\/|\\-]","");
				
				String cnpjCont			= recMov.optString("cnpjContabilidade");
 	

                classificacao   = classificacao.substring(0,16).trim();
				
				if (loteMovimento.toUpperCase().contains("_ID")) {
				    // loteId = cutString(loteMovimento.toUpperCase(), "_ID", "_");
					loteId = cutString(loteMovimento.toUpperCase(), loteMovimento.toUpperCase().lastIndexOf("_ID")+3, "_");
				}
				
				
				// cria o objeto padrao para envio dos lancamentos
				if (!objetoLancamento.has("loteId") && !loteId.equals("")) {
				
					apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
				
					objetoLancamento.put("loteId", loteId);
					objetoLancamento.put("parceiro", "ONEFLOW");
					objetoLancamento.put("cnpjContabilidade", props.get("CONTABILIDADE_CNPJ"));
					objetoLancamento.put("cnpjEmpresa", props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
					objetoLancamento.put("nomeArquivo", loteMovimento + ".csv");
				}
			 
				
 				
				
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();

                historico       = historico.replaceAll(" \\.","\\.");
                for (int xy=0;xy<20;xy++) {
                    historico   = historico.replaceAll("  "," ");
                }

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                if (contaDebito.contains("E"))  contaDebito  = contaDebito.substring(0, contaDebito.indexOf("E"));
                if (contaCredito.contains("E")) contaCredito = contaCredito.substring(0, contaCredito.indexOf("E"));


                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal   = contaDebito;
                String contaCreditoOriginal  = contaCredito;
 

                if (contador == 0) {
                    classifica = " ";
                }

                // xxxxxxxxxxxxxxxxxxx
                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }

                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

                String itemDFC = "";
                if (historico.contains("ItemDFC:")) {
                    itemDFC    = historico.substring(historico.indexOf("ItemDFC:")+8).trim();
                    historico  = historico.substring(0,historico.indexOf("ItemDFC:")).trim();
                }

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();
                if(historico.contains(",")) historico = historico.replaceAll(",",".").trim();

                String valorFinal = valorLiquidacao;
                String sContador  = String.valueOf(contador);
                // Nao exporta valores zerados
                double valorDouble = DecimalUtil.toDecimal(valorFinal);
				
                 if (valorDouble == 0) continue;


                if (!classifica.equals(classificacao)) {
                    contador++;
                    sContador = String.valueOf(contador);
					
					
                }

                classifica = classificacao;


                if (!classificacao.startsWith("X") && tipoLancamento.equals("PAGAR")) {
                    if (tipoMovimento.equals("CTBPORT")) contaDebito  = "";
                    if (tipoMovimento.equals("CTB"))     contaCredito = "";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        contaCredito = "";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        contaCredito = "";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        contaDebito = "";
                        valorFinal   = valorDesconto;
                    }
                }
                if (tipoMovimento.contains("CC")) {
                    if (tipoMovimento.equals("CTBCC"))       valorFinal   = valorLiquidacao;
                    if (tipoMovimento.equals("CTBJURCC"))    valorFinal   = valorJuros;
                    if (tipoMovimento.equals("CTBMULCC"))    valorFinal   = valorMulta;
                    if (tipoMovimento.equals("CTBDESCC"))    valorFinal   = valorDesconto;
                }

                if (!classificacao.startsWith("X") && tipoLancamento.equals("RECEBER")) {
                    if (tipoMovimento.equals("CTBPORT")) contaCredito  = "";
                    if (tipoMovimento.equals("CTB"))     contaDebito = "";
                    if (tipoMovimento.equals("CTBJUR"))  {
                        contaDebito = "";
                        valorFinal   = valorJuros;
                    }
                    if (tipoMovimento.equals("CTBMUL"))  {
                        contaDebito = "";
                        valorFinal   = valorMulta;
                    }
                    if (tipoMovimento.equals("CTBDES"))  {
                        contaCredito = "";
                        valorFinal   = valorDesconto;
                    }
                }

                valorDouble = DecimalUtil.toDecimal(valorFinal);
				String centroCustoDebito = "";
				String centroCustoCredito = "";
				
                if (tipoLancamento.equals("PAGAR"))		{
					centroCustoDebito = centroCusto;
				}
                if (tipoLancamento.equals("RECEBER"))	{
					centroCustoCredito = centroCusto;
				}
 				
                if (valorDouble == 0) {
                    continue;
                }
				

				if (!classificacao.startsWith("X") && tipoLancamento.equals("RECEBER")) {
					if (tipoMovimento.equals("CTBPORT")) contaCredito  = "";
					if (tipoMovimento.equals("CTB"))     contaDebito = "";
					if (tipoMovimento.equals("CTBJUR"))  {
						contaDebito = "";
						valorFinal   = valorJuros;
					}
					if (tipoMovimento.equals("CTBMUL"))  {
						contaDebito = "";
						valorFinal   = valorMulta;
					}
					if (tipoMovimento.equals("CTBDES"))  {
						contaCredito = "";
						valorFinal   = valorDesconto;
					}
				}

				// prepara array para envio ao 4.0 oneflow
                if (!loteId.equals("") && !(contaDebito.equals("") && contaCredito.equals(""))) {
                    JSONObject lancamentoO = new JSONObject();
                    lancamentoO.put("dataMovimento", dataMovimento);
                    lancamentoO.put("historico", historico.trim());
                    lancamentoO.put("codHistorico", codigoHistorico);
                    lancamentoO.put("valorLancamento", valorFinal);
                    lancamentoO.put("contaDebito", contaDebito);
                    lancamentoO.put("contaCredito", contaCredito);
                    lancamentoO.put("razaoSocial",  historico);
                    if (tipoLancamento.contains("PAG") && !cpfCnpj.equals("")) {
                        lancamentoO.put("cnpjfor",      cpfCnpj);
                        lancamentoO.put("d_c", "D");
                    }
                    if (tipoLancamento.contains("REC") && !cpfCnpj.equals("")) {
                        lancamentoO.put("cnpjcli",      cpfCnpj);
                        lancamentoO.put("d_c", "C");
                    }
                    lancamentoO.put("tipoMovimento", cutString(tipoLancamento, 0, 3));
                    lancamentosA.put(lancamentoO);
                }
                
				separador = ";";
				
				txt.append(StringUtil.rightPad(dataMovimento, 10, " "));
				txt.append(separador);
				txt.append(StringUtil.rightPad(contaDebito, 10, "0"));
				txt.append(separador);
				txt.append(StringUtil.rightPad(contaCredito, 10, "0"));
				txt.append(separador);
				txt.append(valorFinal.replaceAll("\\.",","));
				txt.append(separador);
				txt.append(StringUtil.rightPad(codigoHistorico, 4, "0"));
				txt.append(separador);
				txt.append(StringUtil.rightPad(historico, 120, " "));
				txt.append(separador);
 				txt.append(StringUtil.rightPad(cpfCnpj, 3, " "));
				 
				txt.append(rn);
                

                if (!tipoMovimento.contains("CC")) {

                    String descricaoDebito = "";
                    String descricaoCredito = "";

                    JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaDebitoOriginal)
                    .queryUnique();
                    if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                        descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                    }

                    JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                    .fields("DESCRICAOPLANO")
                    .param(codEmpresa)
                    .param(contaCreditoOriginal)
                    .queryUnique();
                    if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                        descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                    }

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);

                }
 				
                if(!tipoMovimento.contains("PORT")) totalRegistros++;


            } //For arrayMov

			 
            
            if (totalRegistros > 0) {

                // Gravacao do Arquivo TXT
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".csv";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                // *******************************************************
                // ************* ATUALIZA SALESFORCE *********************
                // *******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
				
				try {
					if (!loteId.equals("")) {
						objetoLancamento.put("lancamentos", lancamentosA);
						JSONArray toCloudArray = sendToMeuIntegrador(objetoLancamento, apiWeb, logger);
					}
				} catch (Exception eDel) {
					logger.logError("EndpointB: ERROR sendToMeuIntegrador", eDel);
				}
				
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
	
}




////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@SIEC).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoSIEC(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";

    String valorFinal       = "";
    String separador        = "";
    double valorDouble      = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	JSONArray toCloud		= new JSONArray();	//#20210126
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);

		ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;
			//loteMovimento = "WD" + loteMovimento;   //fabrica pois com o wd nao abre no portal
 
            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //

                JSONObject recMov = records.optJSONObject(t);
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= "";
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
						historico = historico.replaceAll("INVERTECONTA","").trim();
					}
				}
				contaDebito		= contaDebito.replaceAll("[^0-9]*", "");
                contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();


                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				// valorFinal = valorFinal.replaceAll("\\.",",").trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                // if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "yyyyMMdd");
				
                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if (historico.length() > 250) historico = historico.substring(0,249).trim();
				if (nomeContabilidade.toUpperCase().contains("ORGATEC")) historico = toDisplayCase(historico);

                // //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////

				txt.append(dataMovimento);
				txt.append(StringUtil.leftPad(contaDebito, 5, "0"));
				txt.append(StringUtil.rightPad(historico, 300, ""));
				txt.append(StringUtil.leftPad(contaCredito, 5, "0"));
				txt.append(StringUtil.rightPad(historico, 300, ""));
				txt.append(StringUtil.leftPad(valorFinal, 15, "0"));
				txt.append(StringUtil.rightPad(separador, 3, " "));
				txt.append(StringUtil.leftPad(loteMovimento, 6, "0"));
				txt.append(rn);
                
                String descricaoDebito = "";
                String descricaoCredito = "";

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@FORTES).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivow(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";

    String valorFinal       = "";
    String separador        = "";
    double valorDouble      = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	JSONArray toCloud		= new JSONArray();	//#20210126
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);

		ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //

                JSONObject recMov = records.optJSONObject(t);
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= ";";
				
				centroCusto = StringUtil.leftPad(centroCusto, 3, "0");
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
						historico = historico.replaceAll("INVERTECONTA","").trim();
					}
				}
				contaDebito		= contaDebito.replaceAll("[^0-9]*", "");
                contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                String codigoFilial = "0001";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

				if (tipoMovimento.contains("CC")) continue;


				
                if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(historico.contains("CodigoHistorico")) historico = historico.substring(0,historico.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();


                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll("\\.",",").trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if (historico.length() > 250) historico = historico.substring(0,249).trim();

                // //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////


                
				if (centroCusto.equals("")) {
					txt.append("1");
					txt.append(separador);
					txt.append(dataMovimento);
					txt.append(separador);
					txt.append(contaDebito);
					txt.append(separador);
					txt.append(contaCredito);
					txt.append(separador);
					txt.append(valorFinal);
					txt.append(separador);
					txt.append(historico);
					txt.append(rn);
					
				}
				else {				
					txt.append("1");
					txt.append(separador);
					txt.append(dataMovimento);
					txt.append(separador);
					txt.append(contaDebito);
					txt.append(separador);
					txt.append(StringUtil.leftPad(codigoFilial, 4, "0"));
					txt.append(separador);
					txt.append(StringUtil.leftPad(centroCusto, 3, "0"));
					txt.append(separador);
					txt.append(contaCredito);
					txt.append(separador);
					txt.append(StringUtil.leftPad(codigoFilial, 4, "0"));
					txt.append(separador);
					txt.append(StringUtil.leftPad(centroCusto, 3, "0"));
					txt.append(separador);
					txt.append(valorFinal);
					txt.append(separador);
					txt.append(historico);
					txt.append(rn);
				}

                
                String descricaoDebito = "";
                String descricaoCredito = "";

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){
				String loteMovimentoLimpo = loteMovimento.replaceAll("\\.", "").trim();
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimentoLimpo + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimentoLimpo + ".csv";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimentoLimpo + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimentoLimpo + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimentoLimpo, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimentoLimpo + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@LIDER).      //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoLIDER(JSONObject jDadosLote, InoutLogger logger) throws Exception {

    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento = "";
    String codEmpresa = "";
    String notafiscal = "";
    String tipoMovimento = "";
    String dataMovimento = "";
    String contaDebito = "";
    String contaCredito = "";
    String valorLiquidacao = "";
    String valorDocumento = "";
    String documento = "";
    String nomeOrigem = "";
    String centroCusto = "";
    String valorJuros = "";
    String valorDesconto = "";
    String valorMulta  = "";
    String historico = "";
    String naturezaContabil = "";
    String tipoLancamento = "";
    String nomeEmpresa = "";
    String classificacao = "";
    String ERP = "";                            //  <---<

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	JSONArray toCloud		= new JSONArray();	//#20210126
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);

		ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String linha = "";
        int indice   = 0;

        int contador			= 0;
        String classifica		= "";
        String classificacao1	= "";
        String sContador		= "";
        String chaveFila        = "";

        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");

        StringBuilder ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);

        try {
            JSONArray records = findMovimentoPorEmpresa_LotebClassificacao(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;
            for (int t=0; t<records.length(); t++) {

                String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");

                JSONObject recMov = records.optJSONObject(t);
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                chaveFila        = recMov.optString("CHAVE");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
				
                // contaDebito  = contaDebito.replaceAll("\\.","");
                // contaCredito = contaCredito.replaceAll("\\.","");

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                String codigoHistorico = StringUtil.leftPad("0", 7, "0");
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }

                historico = historico.replaceAll(",","\\.").replaceAll(";","");

                if(contaDebito.contains("IGNOR"))  continue;
                if(contaCredito.contains("IGNOR")) continue;

                if(contaDebito.contains("LOTE_ENCERRADO"))  continue;
                if(contaCredito.contains("LOTE_ENCERRADO")) continue;

				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
						historico = historico.replaceAll("INVERTECONTA","").trim();
					}
				}

                classificacao1	= cutString(classificacao, 0,16).trim();
                if (!classifica.equals(classificacao1)) {
                    contador++;
                    sContador = String.valueOf(contador);
                }

                classifica = classificacao1;

                valorLiquidacao   = valorLiquidacao.replaceAll("\\,", "");
                valorJuros        = valorJuros.replaceAll("\\,", "");
                valorMulta        = valorMulta.replaceAll("\\,", "");
                valorDesconto     = valorDesconto.replaceAll("\\,", "");

                String valorFinal = valorLiquidacao;

                if (tipoMovimento.equals("CTBJUR"))  {
                    valorFinal   = valorJuros;
                }
                if (tipoMovimento.equals("CTBMUL"))  {
                    valorFinal   = valorMulta;
                }
                if (tipoMovimento.equals("CTBDES"))  {
                    valorFinal   = valorDesconto;
                }

                double valorTeste = 0;

                try{valorTeste = DecimalUtil.toDecimal(valorFinal);}
                catch(Exception exs){valorTeste = 0;}

                String valorResumoTxt = valorFinal;

                valorFinal = valorFinal.replaceAll("\\.","");

                if (historico.length() > 250) {
                    historico = cutString(historico, 0, 249).trim();
                }

                String separator = "";

                if(valorTeste > 0){
                    txt.append(dataMovimento.replaceAll("/", ""));
                    txt.append(" ");
                    txt.append(separator);
                    txt.append(StringUtil.rightPad(contaDebito, 22, " "));
                    txt.append(separator);
                    txt.append(StringUtil.rightPad(contaCredito, 22, " "));
                    txt.append(separator);
                    txt.append(StringUtil.leftPad(" ", 22, " "));
                    txt.append(separator);
                    txt.append(StringUtil.rightPad(centroCusto, 22, " "));
                    txt.append(separator);
                    txt.append(StringUtil.leftPad(valorFinal, 16, "0"));
                    txt.append(separator);
                    txt.append(StringUtil.rightPad(" ", 32, " "));
                    txt.append(separator);
                    txt.append(StringUtil.rightPad(" ", 30, " "));
                    txt.append(separator);
                    txt.append(StringUtil.rightPad(historico, 250, " "));
                    txt.append(separator);
                    txt.append(StringUtil.rightPad("10112004", 8, " "));
                    txt.append(separator);
                    txt.append(StringUtil.rightPad("I", 1, " "));
                    txt.append(separator);
                    txt.append(StringUtil.rightPad(chaveFila, 100, " "));
                    txt.append(separator);
                    txt.append(StringUtil.rightPad(" ", 6, " "));

                    txt.append(rn);

                    String separadorResumo = ";";

                    String descricaoDebito = "";
                    String descricaoCredito = "";

                    if (!tipoMovimento.contains("CC")) {
                        JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO")
                        .param(codEmpresa)
                        .param(contaDebito)
                        .queryUnique();
                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                        }

                        JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO")
                        .param(codEmpresa)
                        .param(contaCredito)
                        .queryUnique();
                        if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                            descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                        }

                        ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorResumoTxt + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                        ResumoTxt.append(rn);
                    }
                }
                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}

            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString()); 

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";

                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }

    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}



////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@DATACEMPRO).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoDATACEMPRO(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
    String ERP               = ""; 

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	JSONArray toCloud		= new JSONArray();	//#20210126
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);

		ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");				

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            //#2310-018491
			// txt.append("DATA|DEBITO|CREDITO|VALOR|C_CUSTO|FILIAL|LOTE|HISTORICO|HIST_PADRAO");
			txt.append("DATA\tDEBITO\tCREDITO\tVALOR\tC_CUSTO\tFILIAL\tLOTE\tHISTORICO\tHIST_PADRAO");
			txt.append(rn);
			
			for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //

                JSONObject recMov = records.optJSONObject(t);
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito		= contaDebito.replaceAll("[^0-9]*", "");
                contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				//separador		= "";
				separador		= "\t";
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
                String codigoFilial = "1";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll("\\.",",").trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				//dataMovimento = getCampoDate(dataMovimento, "", "yyyyMMdd");
				dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 120) historico = cutString(historico, 0, 119);
                
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////

				/*txt.append("04");
				txt.append(StringUtil.leftPad(separador, 6, "0"));
				txt.append(dataMovimento);
				txt.append(StringUtil.leftPad(separador, 5, "0"));
				txt.append(StringUtil.leftPad(documento, 15, "0"));
				txt.append(StringUtil.leftPad(valorFinal, 17, "0"));
				txt.append("00");
				txt.append("F");
				txt.append(StringUtil.leftPad(codigoHistorico, 5, "0")); 
				txt.append(StringUtil.leftPad(codigoHistorico, 5, "0")); 
				txt.append(StringUtil.rightPad(historico, 150, " ")); 
				txt.append(StringUtil.rightPad(historico, 150, " ")); 
				txt.append(StringUtil.rightPad(contaCredito, 10, " "));
				txt.append(StringUtil.rightPad(separador, 10, " ")); 
				txt.append(StringUtil.rightPad(centroCusto, 10, " "));
				txt.append(StringUtil.rightPad(separador, 10, " "));
				txt.append(StringUtil.rightPad(contaDebito, 10, " "));
				txt.append(StringUtil.rightPad(separador, 10, " "));
				txt.append(StringUtil.rightPad(separador, 10, " "));
				txt.append(StringUtil.rightPad(separador, 10, " "));
				txt.append(StringUtil.rightPad(separador, 280, " "));
				txt.append(StringUtil.rightPad(separador, 24, " "));
				txt.append(StringUtil.rightPad(separador, 14, " "));
				txt.append(" ");
				txt.append(StringUtil.rightPad(separador, 14, " "));
				txt.append(" ");
				txt.append(StringUtil.rightPad(separador, 310, " "));
				txt.append(StringUtil.rightPad(separador, 30, " "));
				txt.append(StringUtil.rightPad(separador, 500, " "));
				txt.append(StringUtil.rightPad(separador, 14, " "));
				txt.append("F");
				txt.append(rn);*/				
				txt.append(dataMovimento);
                txt.append(separador);
                txt.append(contaDebito);
                txt.append(separador);;
                txt.append(contaCredito);
                txt.append(separador);
                txt.append(valorFinal);
                txt.append(separador);
                txt.append(centroCusto);
                txt.append(separador);
                txt.append(codigoFilial);
                txt.append(separador);
                //txt.append(loteMovimento);
                txt.append(separador);
                txt.append(nomeOrigem);
                txt.append(separador);
                txt.append(codigoHistorico);
                txt.append(separador);
                txt.append(rn);
				
                String descricaoDebito  = "";
                String descricaoCredito = "";

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }



                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                //String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".exp";
				String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".xls";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    //filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".exp";
					filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".xls";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@DEXION).//
///////////////////////////////////////////////////////////////////////////////////////////////////
 public void GeraArquivoDEXION(JSONObject jDadosLote, InoutLogger logger) throws Exception {
     // Conectar na Base de Dados IO_CONTABIL.
     DataBase dbIOCont = null;
     String rn = "\r\n";
  
     String centroCusto        = "";
     String documento          = "";
     String codigoParticipante = "";
     String contaDebito        = "";
     String contaCredito       = "";
     String historico          = "";
     String dataMovimento      = "";
     String valorFinal         = "";
     String nomeContabilidade  = "";
     String loteMovimento      = "";
     String codEmpresa         = "";
     String tipoMovimento      = "";
     String valorLiquidacao    = "";
     String nomeOrigem         = "";
     String valorJuros         = "";
     String valorMulta         = "";
     String valorDesconto      = "";
     String naturezaContabil   = "";
     String tipoLancamento     = "";
     String nomeEmpresa        = "";
     String ERP                = "";
     String separador         = "|";
     double valorDouble       = 0;
     Date dtAgora = new Date();
     StringBuilder txt = new StringBuilder();
     StringBuilder ResumoTxt = new StringBuilder();
     StringBuilder sForce = new StringBuilder();
	JSONArray toCloud		= new JSONArray();	//#20210126
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
     try {
         nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
         codEmpresa = jDadosLote.optString("CODEMPRESA");
         loteMovimento = jDadosLote.optString("LOTE");
         nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");
         // Carrega as propriedades
         SysProperties props = SysProperties.getInstance();
         props.load("contabil/" + nomeContabilidade + "/contabil.properties");
         JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);

		ERP = props.get("ERP_CONTABILIDADE");
         String versaoPlataforma = props.get("VERSAO_PLATAFORMA");
         // Conectar na Base de Dados IO_CONTABIL.
         if (dbIOCont == null) {
             dbIOCont = connectIOContabil(props, logger);
         }
         String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
         String emailCanal = props.get("EMAIL_CANAL");
         ResumoTxt = new StringBuilder();
         ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
         ResumoTxt.append(rn);
         // //////// /////// /////// //
         // MONTANDO ARQUIVO HEADER  //
         // //////// /////// /////// //
         try {
             JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
             int totalRegistros = 0;
             for (int t=0; t<records.length(); t++) {
                 // /////// ///// //
                 // OBTENDO DADOS //
                 // /////// ///// //
                 JSONObject recMov = records.optJSONObject(t);
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                 tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                 dataMovimento   = recMov.optString("DATAMOVIMENTO");
 				 contaDebito     = recMov.optString("CONTADEBITO");
                 contaCredito    = recMov.optString("CONTACREDITO");
                 contaDebito  = contaDebito.replaceAll("[^0-9]*", "");
                 contaCredito = contaCredito.replaceAll("[^0-9]*", "");
                 valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                 documento       = recMov.optString("DOCUMENTO");
                 nomeOrigem      = recMov.optString("NOMEORIGEM");
                 centroCusto     = recMov.optString("CENTROCUSTO");
                 valorJuros      = recMov.optString("VALORJUROS");
                 valorMulta      = recMov.optString("VALORMULTA");
                 valorDesconto   = recMov.optString("VALORDESCONTO");
                 historico       = recMov.optString("HISTORICO");
                 naturezaContabil= recMov.optString("NATUREZACONTABIL");
                 tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                 historico       = historico.replaceAll(" \\.","\\.");
 				String dataMovimentoOriginal = dataMovimento;
 				String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA").replaceAll("\\.","").replaceAll("-","").replaceAll("/","");
                 for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                 
				 
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();

                 String codigoFilial = "";
                 String codigoHistorico = "0";
                 // ////// / /////////////// //
                 // FILIAL e CODIGOHISTORICO //
                 // ////// / /////////////// //
                 if (historico.contains("Filial:")) {
                     codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
 					if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                     historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                 }
                 if (historico.contains("CodigoHistorico:")) {
                     codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                     historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                 }
                 if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                 if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();
 				 
 				historico = trimChar(historico);
				
                 valorDouble = Double.parseDouble(valorLiquidacao);
                 if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                 if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                 if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);
                 try{valorFinal = String.format("%.2f", valorDouble);
                 }catch(Exception c){valorFinal = "";}
 				valorFinal = valorFinal.replaceAll("\\.", ",").trim();
                 if(documento.length() > 10) documento = documento.substring(documento.length()-10);
                 historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                 if (historico.length() > 250) historico = historico.substring(0,249).trim();
 				// /////////// //
                 // TRATAMENTOS //
                 // /////////// //
 				Date dt		  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                 dataMovimento = DateUtil.dateToString(dt, "ddMMyy");
 				String lancamento = "";
                 String sequencial = "";
                 // //////// /////// /////// ///////
                 // MONTANDO ARQUIVO LANCAMENTOS  //
                 // //////// /////// /////// ///////
                 txt.append(separador);
                 txt.append(centroCusto);
				 
                 txt.append(separador);
                 txt.append(documento);
				 
                 txt.append(separador);
                 txt.append(codigoParticipante);
				 
                 txt.append(separador);
                 txt.append(contaDebito);
				 
                 txt.append(separador);
                 txt.append(contaCredito);
				 
                 txt.append(separador);
				 txt.append(codigoHistorico);
				 
				 txt.append(separador);
                 txt.append("N");
				 
                 txt.append(separador);
                 txt.append("N");
				 
                 txt.append(separador);
                 txt.append(historico);
				 
                 txt.append(separador);
                 txt.append(dataMovimento);
				 
                 txt.append(separador);
                 txt.append(valorFinal);
				 
                 txt.append(separador);
                 txt.append("");
				 
                 txt.append(separador);
                 txt.append("N");
				 
                 txt.append(separador);
                 txt.append(t);
				 
                 txt.append(separador);
              
                 txt.append(rn);
				 
 				String descricaoDebito = "";
 				String descricaoCredito = "";
 				JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
 				.fields("DESCRICAOPLANO")
 				.param(codEmpresa)
 				.param(contaDebito)
 				.queryUnique();
 				if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
 					descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
 				}
 				JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
 				.fields("DESCRICAOPLANO")
 				.param(codEmpresa)
 				.param(contaCredito)
 				.queryUnique();
 				if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
 					descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
 				}
 				valorFinal = valorFinal.replaceAll("\\.","");
 				//String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);
 				ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
 				ResumoTxt.append(rn);
                 if(!tipoMovimento.contains("PORT")) totalRegistros++;
             } //For arrayMov
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			
             // Gravacao do Arquivo TXT
			 
			 
             if(totalRegistros > 0){
                 String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                 String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                 if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                     filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                 }
                 FileWriter writer = new FileWriter(filename);
                 writer.writeNewFile(txt.toString());
                 String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                 if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                     filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                 }
                 FileWriter writerResumo = new FileWriter(filenameRESUMO);
                 writerResumo.writeNewFile(ResumoTxt.toString());
                 enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);
                 //*******************************************************
                 //************* ATUALIZA SALESFORCE *********************
                 //*******************************************************
                 if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                    !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                    !loteMovimento.toUpperCase().contains("TESTE")){
                     sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                     sForce.append(rn);
                     String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";
                     FileWriter writerSforce = new FileWriter(fileSforce);
                     writerSforce.writeNewFile(sForce.toString());
                 }
             }
             try {
                 if (dbIOCont == null) {
                     dbIOCont = connectIOContabil(props, logger);
                 }
                 dbIOCont.delete("IO_MOVIMENTO")
                 .where("LOTE=?")
                 .param(loteMovimento)
                 .execute();
             } catch (Exception eDel) {
                 logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
             }
             txt = new StringBuilder();
         } catch (Exception eMov) {
             logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
         }
     } catch (Exception e) {
         logger.logError(e);
     } finally {
         if (dbIOCont != null) {
             try {
                 dbIOCont.closeConnection();
             } catch (Exception eedbIOCont) {}
         }
     }
 }
  
////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@NASAJON).  ////////
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoNASAJON(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
    String ERP               = ""; 

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	JSONArray toCloud		= new JSONArray();	//#20210126
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);

		ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);
		
		int tamanhoHistorico = 50;
		
		if (nomeContabilidade.toUpperCase().contains("LIMAESILVA")) {
			tamanhoHistorico = 80;
		}


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //

                JSONObject recMov = records.optJSONObject(t);
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito		= contaDebito.replaceAll("[^0-9]*", "");
                contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= "";
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
                String codigoFilial = "";
                String codigoHistorico = "0";
				
				if(tipoMovimento.equals("CTBCC") || tipoMovimento.equals("CTBJURCC") || tipoMovimento.equals("CTBDESCC") || tipoMovimento.equals("CTBMULCC")) continue;
				
                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll("\\.",",").trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "ddMM");
				
                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				// if(historico.length() > 120) historico = cutString(historico, 0, 119);
                String historicoAux = historico; 
				if(historico.length() > tamanhoHistorico) historicoAux = cutString(historico, 0, tamanhoHistorico);
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////

				contaDebito  = contaDebito.replaceAll("\\.","");
				contaCredito = contaCredito.replaceAll("\\.","");

				// if (contaDebito.length() > 5)  contaDebito  = contaDebito.substring(0,1) + "." + contaDebito.substring(1,2) + "." + contaDebito.substring(2,3) + "." + contaDebito.substring(3,5) + "." + contaDebito.substring(5);
				// if (contaCredito.length() > 5)  contaCredito  = contaCredito.substring(0,1) + "." + contaCredito.substring(1,2) + "." + contaCredito.substring(2,3) + "." + contaCredito.substring(3,5) + "." + contaCredito.substring(5);
				
				txt.append(dataMovimento);
				txt.append(StringUtil.rightPad(contaDebito, 16, " "));
                txt.append(StringUtil.rightPad(contaCredito, 16, " "));
                if (nomeContabilidade.toUpperCase().contains("CARIOCAPNEUS")) {
					txt.append(StringUtil.leftPad(centroCusto, 10, " "));
				} else {
					txt.append(StringUtil.leftPad(centroCusto, 20, " "));
					// txt.append(StringUtil.leftPad(" ", 10, " "));
				}
				txt.append(StringUtil.rightPad(historicoAux, tamanhoHistorico, " "));
                txt.append(StringUtil.leftPad(valorFinal, 14, " "));
				// txt.append(StringUtil.leftPad(documento, 20, " "));

				txt.append(" ");
				txt.append(rn);
                
				// for(int i = 50; i < historico.length();i += 50){
					// historicoAux = cutString(historico, i, i+50);
					// txt.append("    ");
					// txt.append(StringUtil.rightPad("", 16, " "));
					// txt.append(StringUtil.rightPad("", 16, " "));
					// if (nomeContabilidade.toUpperCase().contains("MANTONIOCONTABIL")) {
						// txt.append(StringUtil.leftPad(centroCusto, 20, " "));
					// } else {
						// txt.append(StringUtil.leftPad(" ", 10, " "));
					// }
					// txt.append(StringUtil.rightPad(historicoAux, 50, " "));
					// txt.append(StringUtil.leftPad("", 14, " "));
					// txt.append(StringUtil.leftPad("", 20, " "));

					// txt.append(" ");
					// txt.append(rn);
				// }
				
                String descricaoDebito  = "";
                String descricaoCredito = "";

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }

                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			
			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@ATHENAS).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoATHENAS(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
    String ERP               = ""; 

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	JSONArray toCloud		= new JSONArray();	//#20210126
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);

		ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //

                JSONObject recMov = records.optJSONObject(t);
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito		= contaDebito.replaceAll("[^0-9]*", "");
                contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= " ";
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll("\\.",",").trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "dd/MM/yyyy");

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 99) historico = cutString(historico, 0, 99);
				
				historico = historico.replace(">.",">");
                
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////

				if (!nomeEmpresa.toUpperCase().contains("BLUEVIX") && !nomeEmpresa.toUpperCase().contains("FAVORITADOBRASIL")) {
                    txt.append(dataMovimento);
                    txt.append(separador);                
                    txt.append(StringUtil.rightPad(historico, 99, " "));
                    txt.append(separador);
                    txt.append(StringUtil.rightPad(contaDebito, 9, " "));
                    txt.append(separador);
                    txt.append(StringUtil.rightPad(contaCredito, 9, " "));
                    txt.append(separador);
                    txt.append(StringUtil.rightPad(valorFinal, 50, " "));
                }
                if (nomeEmpresa.toUpperCase().contains("BLUEVIX") || nomeEmpresa.toUpperCase().contains("FAVORITADOBRASIL")) {
                    txt.append(dataMovimento);                
					txt.append(separador);
                    txt.append(StringUtil.rightPad(historico, 98, " "));
					txt.append(separador);
                    txt.append(StringUtil.rightPad(contaDebito, 16, " "));
                    txt.append(separador);
                    txt.append(separador);
                    txt.append(separador);
                    txt.append(StringUtil.rightPad(contaCredito, 16, " "));
                    txt.append(separador);
                    txt.append(separador);
                    txt.append(separador);
                    txt.append(separador);
                    txt.append(StringUtil.rightPad(valorFinal, 50, " "));
                }
				txt.append(rn);
				
                String descricaoDebito  = "";
                String descricaoCredito = "";

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }



                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@CUCAFRESCA).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoCUCAFRESCA(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String ERP               = "";
    String cpfCnpj           = "";
    String documento         = "";
    String historico         = "";
    String codEmpresa        = "";
    String nomeOrigem        = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String centroCusto       = "";
    String contaDebito       = "";
    String nomeEmpresa       = "";
    String contaCredito      = "";
    String dataMovimento     = "";
    String loteMovimento     = "";
    String tipoMovimento     = "";
    String valorDesconto     = "";
    String tipoLancamento    = "";
    String valorLiquidacao   = "";
    String naturezaContabil  = "";
    String nomeContabilidade = "";
 
    String valorFinal        = "";
    String separador         = " ";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt       = new StringBuilder();
    StringBuilder sForce    = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();

    try {
        loteMovimento       = jDadosLote.optString("LOTE");
        codEmpresa          = jDadosLote.optString("CODEMPRESA");
        nomeEmpresa         = jDadosLote.optString("NOMEEMPRESA");
        nomeContabilidade   = jDadosLote.optString("NOMECONTABILIDADE");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;
			
 
            for (int t=0; t<records.length(); t++) {
                
                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //

                JSONObject recMov = records.optJSONObject(t);
                documento       = recMov.optString("DOCUMENTO");
                historico       = recMov.optString("HISTORICO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                centroCusto     = recMov.optString("CENTROCUSTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                
				if (tipoMovimento.contains("CTBCC") || tipoMovimento.contains("CTBJURCC") ||
					tipoMovimento.contains("CTBDESCCC") || tipoMovimento.contains("CTBMULCC")) continue;
				
				separador		= "";
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
						historico = historico.replaceAll("INVERTECONTA","").trim();
					}
				}
				contaDebito		= contaDebito.replaceAll("[^0-9]*", "");
                contaCredito	= contaCredito.replaceAll("[^0-9]*", "");
				
				if(contaDebito.length() > 1){
					contaDebito = contaDebito.substring(0, contaDebito.length()-1) + "-" + contaDebito.substring(contaDebito.length()-1);
					if(contaDebito.length() > 5) contaDebito = contaDebito.substring(0, contaDebito.length()-5) + "." + contaDebito.substring(contaDebito.length()-5);
				}
				if(contaCredito.length() > 1){
					contaCredito = contaCredito.substring(0, contaCredito.length()-1) + "-" + contaCredito.substring(contaCredito.length()-1);
					if(contaCredito.length() > 5) contaCredito = contaCredito.substring(0, contaCredito.length()-5) + "." + contaCredito.substring(contaCredito.length()-5);
				}
				// contaDebito	= contaDebito.replaceAll("^.*(?=,),\\s(\\w+\\b).*", "$1");
                // contaCredito	= contaCredito.replaceAll("^.*(?=,),\\s(\\w+\\b).*", "$1");
				
				
				
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    cpfCnpj         = codEmpresa;
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();
/*
				Date dt		  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "ddMMyyyy");
*/
                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);
                

                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll("\\.",",").trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if (historico.length() > 250) historico = historico.substring(0,249).trim();

                // //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////

				String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
				cnpjEmpresa = trataCpfCnpj(cnpjEmpresa, false, false);
                if (cpfCnpj.matches("[0-9]{14}")) {
                    //Temper_1221_ottimizza_fluxo caixa santander mogi-filial.xlsx_2020-06_PAGAR
                    loteMovimento = cutString(loteMovimento, loteMovimento.indexOf("_") + 1);
                    loteMovimento = nomeEmpresa + "_" + cpfCnpj + "_" + cutString(loteMovimento, loteMovimento.indexOf("_") + 1);
                    cnpjEmpresa = trataCpfCnpj(cpfCnpj, false, false);
                }
				
				if(nomeEmpresa.toUpperCase().equals("PLANUN")){
					if(tipoLancamento.equals("PAGAR")){
						if (!centroCusto.equals("")) {
							contaDebito += " " + centroCusto;
							contaCredito = contaCredito;
						}
					}
					
					if(tipoLancamento.equals("RECEBER")){
						if (!centroCusto.equals("")) {
							contaDebito =contaDebito;
							contaCredito += " " + centroCusto;
						}
					}
				}	
				
				
				if(nomeEmpresa.toUpperCase().equals("ASSOCIACAODOSLOJISTAS")){
					if(tipoLancamento.equals("PAGAR")){
						if (!centroCusto.equals("")) {
							if(!centroCusto.contains("CENTROPORT")){
								contaDebito  += " " + centroCusto;
								contaCredito += " " + centroCusto;
							}
							if(centroCusto.contains("CENTROPORT")){
								centroCusto = centroCusto.replace("CENTROPORT", "");
								contaDebito = contaDebito; 
								contaCredito += " " + centroCusto;
							}
						}
					}
					
					if(tipoLancamento.equals("RECEBER")){
						if (!centroCusto.equals("")) {
							if(!centroCusto.contains("CENTROPORT")){
								contaDebito  += " " + centroCusto;
								contaCredito += " " + centroCusto;
							}
							if(centroCusto.contains("CENTROPORT")){
								centroCusto = centroCusto.replace("CENTROPORT", "");
								contaDebito += " " + centroCusto;
								contaCredito = contaCredito;
							}
						}
					}
				}
				
				if(!nomeEmpresa.toUpperCase().equals("PLANUN") && !nomeEmpresa.toUpperCase().equals("ASSOCIACAODOSLOJISTAS")){
					if (!centroCusto.equals("")) {
						contaDebito  += " " + centroCusto;
						contaCredito += " " + centroCusto;
					}
				}
					
				
                txt.append(cnpjEmpresa);
                txt.append(StringUtil.rightPad("", 5, " "));
				if (!contaDebito.equals("")) txt.append(StringUtil.rightPad(contaDebito , 14, " "));
				else txt.append(StringUtil.rightPad("" , 14, " "));
				if (!contaCredito.equals("")) txt.append(StringUtil.rightPad(contaCredito, 14, " "));
				else txt.append(StringUtil.rightPad("" , 14, " "));
				txt.append("  ");
				txt.append(StringUtil.rightPad(codigoHistorico, 3, "0"));
				
				if(codigoHistorico.equals("")) txt.append(StringUtil.rightPad(historico, 20, " "));
                else txt.append(StringUtil.rightPad("", 20, " "));
				
				txt.append(StringUtil.leftPad(dataMovimento, 10, "0"));
                txt.append(StringUtil.leftPad(valorFinal, 12, "0"));
                txt.append(StringUtil.rightPad(historico, 250, " "));
                txt.append(rn);

                
                String descricaoDebito = "";
                String descricaoCredito = "";

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@RECH).      //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoRECH(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
    String ERP               = "";
    String classificacao     = "";

    String valorFinal		= "";
    String separador		= "";
    double valorDouble		= 0;

    double doubleLiquidacao	= 0;
    double doubleJuros		= 0;
    double doubleDesconto	= 0;
    double doubleMulta		= 0;
    double doublePortador	= 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	JSONArray toCloud		= new JSONArray();	//#20210126
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	
	

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);

		ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
		String razaoSocial      = props.get(nomeEmpresa.toUpperCase() + "_RAZAO_SOCIAL");
		String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
		ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);

        int contador			= 0;
        int contadorItem		= 0;
        String classifica		= "";
        String contraPartida	= "";
        String contadorString	= "";
        String cnpjEmpresa = trataCpfCnpj(props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA"), false, true);		// SomenteNumeros, aceitaCpf

        /////////////////////////
        // inicio do documento //
        /////////////////////////

        txt.append("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>").append(rn);

        txt.append("<REMCTB VERSAO=\"1.0\">").append(rn);
        txt.append("<SIGER>").append(rn);
        txt.append("<VERSAO>18.10</VERSAO>").append(rn);
        txt.append("<DATA></DATA>").append(rn);
        txt.append("<HORA></HORA>").append(rn);
        txt.append("<CLIENTE>").append(codEmpresa).append("</CLIENTE>").append(rn);
        txt.append("<DESC>").append(razaoSocial.toUpperCase()).append("</DESC>").append(rn);
        txt.append("<USUARIO>OTTIMIZZA</USUARIO>").append(rn);
        txt.append("<NETBIOS>LIVERPOOL09</NETBIOS>").append(rn);
        txt.append("</SIGER>").append(rn);
        txt.append("<EMPRESA SIGLA=\"").append(codEmpresa).append("\" CNPJ-CPF=\"").append(cnpjEmpresa).append("\">").append(rn);

        txt.append("<LOTE>").append(rn);
        txt.append("<COD>1</COD>").append(rn);
        txt.append("<DES>PROCESSO OTIMIZZA</DES>").append(rn);

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;
			

            for (int t=0; t<records.length(); t++) {

                // /////// ///// //
                // OBTENDO DADOS //
                // /////// ///// //

                JSONObject recMov = records.optJSONObject(t);
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                contaDebito		= contaDebito.replaceAll("[^0-9]*", "");
                contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				
				if (tipoMovimento.endsWith("CC")){ // Nao sera gerados lancamentos de Centro De Custo
					continue;
				}

                try{doubleLiquidacao = recMov.optDouble("VALORLIQUIDACAO");}
				catch(Exception vl){  doubleLiquidacao = 0; }
				
				doublePortador = doubleLiquidacao;		

                classificacao   = recMov.optString("CLASSIFICACAO");
                if(classificacao.length() > 16) classificacao = classificacao.substring(0,16).trim();

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
                String codigoFilial = "1";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                    codigoFilial = codEmpresa;
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                historico = trimChar(historico);

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);
				
				Date dt = new Date();
				
				if (dataMovimento.length() > 8){                                                //dd/MM/yyyy
					dt = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
				}else if (dataMovimento.length() == 8 && dataMovimento.contains("/")){          //dd/MM/yy
					dt = DateUtil.stringToDate(dataMovimento, "dd/MM/yy");
				}else if (dataMovimento.length() == 8 && !dataMovimento.contains("/")){         //ddMMyyyy
					dt = DateUtil.stringToDate(dataMovimento, "ddMMyyyy");
				}else if (dataMovimento.length() < 8 && !dataMovimento.contains("/")){          //ddMMyy
					dt = DateUtil.stringToDate(dataMovimento, "ddMMyy");
				}
				
				dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble  = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble  = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble  = Double.parseDouble(valorMulta);
				if (tipoMovimento.equals("CTBPORT")) valorDouble = doublePortador;

                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                // if(historico.length() > 64) historico = historico.substring(0, 63);

                // /////////// //
                // TRATAMENTOS //
                // /////////// //

                if (!classifica.equals(classificacao)) {
                    contador++;
                    contadorItem = 0;
					if (contador > 1) txt.append("</LANCTO>").append(rn);
					if (contador > 0) txt.append("<LANCTO>").append(rn);

                }
				
				
                classifica = classificacao;
                contadorItem++;
                
                if(tipoLancamento.contains("RECEBER")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "D";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "C";
					}
				}
				if(tipoLancamento.contains("PAGAR")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "C";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "D";
					}
				}

                separador = "";

                // //////// /////// //
                // MONTANDO ARQUIVO //
                // //////// /////// //

                //txt.append("<LANCTO>").append(rn);
                if (contadorItem == 1) txt.append("<COD>").append(contador).append("</COD>").append(rn);
                
				
				txt.append("<PART>").append(rn);
                txt.append("<COD>").append(contadorItem).append("</COD>").append(rn);
                txt.append("<TIPO>").append(naturezaContabil).append("</TIPO>").append(rn);
                txt.append("<DATA>").append(dataMovimento).append("</DATA>").append(rn);
                if(naturezaContabil.equals("D")) txt.append("<ANALIT>"+contaDebito+"</ANALIT>").append(rn);
                if(naturezaContabil.equals("C")) txt.append("<ANALIT>"+contaCredito+"</ANALIT>").append(rn);

				// logger.logDebug("NC =>> "+naturezaContabil+" - CD =>> "+contaDebito+" - CC =>> "+contaCredito+" - VF =>> "+valorFinal+" - DM =>> "+dataMovimento + " | " + centroCusto);

                txt.append("<FILIAL>").append(codigoFilial).append("</FILIAL>").append(rn);
                txt.append("<VALOR>").append(valorFinal).append("</VALOR>").append(rn);
				txt.append("<HIST>").append(codigoHistorico).append("</HIST>").append(rn);
                txt.append("<COMPL>").append(historico).append("</COMPL>").append(rn);;
				txt.append("<DOCTO>").append(documento).append("</DOCTO>").append(rn);
				txt.append("<SINT></SINT>").append(rn);	//ENTENDER O QUE E ESTE NUMERO
				txt.append("<RATEIO>").append(rn);
				if(tipoLancamento.contains("PAGAR")){
					if (naturezaContabil.equals("D"))
						txt.append("<CCUSTO COD=\"").append(centroCusto).append("\" VALOR=\""+valorFinal+"\"/>").append(rn); //retirado para teste
					else
						txt.append("<CCUSTO COD=\"").append("\" VALOR=\""+valorFinal+"\"/>").append(rn); //retirado para teste
						
				}
				if(tipoLancamento.contains("RECEBER")){
					if (naturezaContabil.equals("C"))
						txt.append("<CCUSTO COD=\"").append(centroCusto).append("\" VALOR=\""+valorFinal+"\"/>").append(rn); //retirado para teste
					else
						txt.append("<CCUSTO COD=\"").append("\" VALOR=\""+valorFinal+"\"/>").append(rn); //retirado para teste
				}
				txt.append("</RATEIO>").append(rn);
				// txt.append("<VALOR>").append(valorFinal).append("</VALOR>").append(rn);
                txt.append("<SINT></SINT>").append(rn);	//ENTENDER O QUE E ESTE NUMERO
                txt.append("</PART>").append(rn);
				
				if (classificacao.startsWith("X")) {
					
					txt.append("<PART>").append(rn);
					txt.append("<COD>").append("2").append("</COD>").append(rn);
					if(naturezaContabil.equals("D")) txt.append("<TIPO>").append("C").append("</TIPO>").append(rn);	//INVERTE
					if(naturezaContabil.equals("C")) txt.append("<TIPO>").append("D").append("</TIPO>").append(rn);	//INVERTE
					txt.append("<DATA>").append(dataMovimento).append("</DATA>").append(rn);
					if(naturezaContabil.equals("D")) txt.append("<ANALIT>"+contaCredito+"</ANALIT>").append(rn);	//INVERTE
					if(naturezaContabil.equals("C")) txt.append("<ANALIT>"+contaDebito+"</ANALIT>").append(rn);		//INVERTE

					txt.append("<FILIAL>").append(codigoFilial).append("</FILIAL>").append(rn);
					txt.append("<VALOR>").append(valorFinal).append("</VALOR>").append(rn);
					txt.append("<HIST>").append(codigoHistorico).append("</HIST>").append(rn);
					txt.append("<COMPL>").append(historico).append("</COMPL>").append(rn);
					txt.append("<RATEIO>").append(rn);
					txt.append("<CCUSTO COD=\"").append("\" VALOR=\""+valorFinal+"\"/>").append(rn); //retirado para teste
					txt.append("</RATEIO>").append(rn);
					txt.append("<SINT></SINT>").append(rn);
					txt.append("</PART>").append(rn);
				
				}
				
				
				String descricaoDebito = "";
                String descricaoCredito = "";
				
				
				//#FABRICA
				if(!contaDebito.equals("")){
					contaDebito = StringUtil.leftPad(contaDebito, 5, "0");
					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ? ")
					.fields("DESCRICAOPLANO")
					.param(codEmpresa)
					.param(contaDebito)
					.queryUnique();
					if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
						descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
					}
				}
				
				if(!contaCredito.equals("")){
					contaCredito = StringUtil.leftPad(contaCredito, 5, "0");
				
					JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ? ")
					.fields("DESCRICAOPLANO")
					.param(codEmpresa)
					.param(contaCredito)
					.queryUnique();
					if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
						descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
					}
				}
				
				ResumoTxt.append(dataMovimento).append(";");
				ResumoTxt.append(contaDebito).append(";");
				ResumoTxt.append(descricaoDebito).append(";");
				ResumoTxt.append(contaCredito).append(";");
				ResumoTxt.append(descricaoCredito).append(";");
				ResumoTxt.append(valorFinal).append(";");
				ResumoTxt.append(codigoHistorico).append(";");
				ResumoTxt.append(historico).append(";");
				ResumoTxt.append(nomeOrigem).append(";");
                ResumoTxt.append(rn);
                ResumoTxt.append(rn);

                if(!tipoMovimento.contains("PORT")) totalRegistros++;
				
				
				
                
            } //For arrayMov
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			
			
			txt.append("</LANCTO>").append(rn);
            txt.append("</LOTE>").append(rn);
            txt.append("</EMPRESA>").append(rn);
            txt.append("<CRCRECH>").append("9ef4a0d8").append("</CRCRECH>").append(rn); // TALVEZ ENTENDER COMO GERA
            txt.append("</REMCTB>");

            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                //String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".xml";
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString().replaceAll("&","E"));

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@FORTES).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoFORTES(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";
	//Douglas ## Feito para o Chamado #2304-003738
	String complemento02	= "";
	String complemento04	= "";

    String valorFinal       = "";
    String separador        = "";
    double valorDouble      = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	JSONArray toCloud		= new JSONArray();	//#20210126
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126	

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);

		ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        //Douglas ## Feito para o Chamado #2304-003738
		if(nomeContabilidade.toUpperCase().contains("JBLCONTABIL") && nomeEmpresa.toUpperCase().contains("FUEAMAZONICOS")){
			 ResumoTxt.append(";COMPLEMENTO02;COMPLEMENTO04");
		}
		//Douglas ## Feito para o Chamado #2306-007152
		if(nomeContabilidade.toUpperCase().contains("EXCLUSIVACONTABILIDADE")){
			 ResumoTxt.append(";DOCUMENTO");
		}
		ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //
        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //

                JSONObject recMov = records.optJSONObject(t);
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");

                
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= ";";
				//Douglas ## Feito para o Chamado #2304-003738
				complemento02	= recMov.optString("COMPLEMENTO02");
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
						historico = historico.replaceAll("INVERTECONTA","").trim();
					}
				}
				
				String codigoFilial = "1";
                String codigoHistorico = "0";
				
				if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(historico.contains("CodigoHistorico")) historico = historico.substring(0,historico.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

				String codFilialDebito  = codigoFilial;
				String codFilialCredito = codigoFilial;
				
				if (contaDebito.contains("_")) codFilialDebito = cutString(contaDebito, "_");
				if (contaCredito.contains("_")) codFilialCredito = cutString(contaCredito, "_");
				
				contaDebito  = cutString(contaDebito, 0, "_");
				contaCredito = cutString(contaCredito, 0, "_");
				
				contaDebito		= contaDebito.replaceAll("[^0-9]*", "");
                contaCredito	= contaCredito.replaceAll("[^0-9]*", "");
				
				// ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

				if (tipoMovimento.contains("CC")) continue;

				valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                 try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll("\\.",",").trim();

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);
				
				//Douglas ## Feito para o Chamado #2304-003738
				complemento04	= historico;
				complemento04	= cutString(complemento04,"##");
				historico =  cutString(historico,0,"##");
                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if (historico.length() > 250) historico = historico.substring(0,249).trim();

                // //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////
				
 
                if (nomeContabilidade.toUpperCase().contains("MOREIRAELIMA")) {
                    if (centroCusto.equals("")) {
                        txt.append("1");
                        txt.append(separador);
                        txt.append(dataMovimento);
                        txt.append(separador);
                        txt.append(contaDebito);
                        txt.append(separador);
                        txt.append(contaCredito);
                        txt.append(separador);
                        txt.append(valorFinal);
                        // txt.append(separador);
                        // txt.append(codigoHistorico);
                        txt.append(separador);
                        txt.append(historico);
                        txt.append(rn);
                        
                    } else {				
                        txt.append("1");
                        txt.append(separador);
                        txt.append(dataMovimento);
                        txt.append(separador);
                        txt.append(contaDebito);
                        txt.append(separador);
                        txt.append(StringUtil.leftPad(codFilialDebito, 4, "0"));
                        txt.append(separador);
                        txt.append(StringUtil.leftPad(centroCusto, 3, "0"));
                        txt.append(separador);
                        txt.append(contaCredito);
                        txt.append(separador);
                        txt.append(StringUtil.leftPad(codFilialCredito, 4, "0"));
                        txt.append(separador);
                        txt.append(StringUtil.leftPad(centroCusto, 3, "0"));
                        txt.append(separador);
                        txt.append(valorFinal);
                        txt.append(separador);
                        txt.append(historico);
                        txt.append(rn);
                    }
                }
                if (!nomeContabilidade.toUpperCase().contains("MOREIRAELIMA")) {
                    if (centroCusto.equals("")) {
                        txt.append("1");
                        txt.append(separador);
                        txt.append(dataMovimento);
                        txt.append(separador);
                        txt.append(contaDebito);
                        txt.append(separador);
                        txt.append(contaCredito);
                        txt.append(separador);
                        txt.append(valorFinal);
                        txt.append(separador);
                        txt.append(historico);
						if (nomeContabilidade.toUpperCase().contains("SERCONCONTABEIS") && nomeEmpresa.toUpperCase().contains("JRINDUSTRIAECOMERCIO")) {
							txt.append(separador);
							txt.append(documento);
							txt.append(separador);
							txt.append(documento);
						}
                        txt.append(rn);
                        
                    } else {				
                        txt.append("1");
                        txt.append(separador);
                        txt.append(dataMovimento);
                        txt.append(separador);
                        txt.append(contaDebito);
                        txt.append(separador);
                        txt.append(StringUtil.leftPad(codFilialDebito, 4, "0"));
                        txt.append(separador);
                        txt.append(StringUtil.leftPad(centroCusto, 3, "0"));
                        txt.append(separador);
                        txt.append(contaCredito);
                        txt.append(separador);
                        txt.append(StringUtil.leftPad(codFilialCredito, 4, "0"));
                        txt.append(separador);
                        txt.append(StringUtil.leftPad(centroCusto, 3, "0"));
                        txt.append(separador);
                        txt.append(valorFinal);
                        txt.append(separador);
                        txt.append(historico);
						if (nomeContabilidade.toUpperCase().contains("SERCONCONTABEIS") && nomeEmpresa.toUpperCase().contains("JRINDUSTRIAECOMERCIO")) {
							txt.append(separador);
							txt.append(documento);
							txt.append(separador);
							txt.append(documento);
						}
						//Douglas ## Feito para o Chamado #2304-003738
						if(nomeContabilidade.toUpperCase().contains("JBLCONTABIL") && nomeEmpresa.toUpperCase().contains("FUEAMAZONICOS")){
							txt.append(separador);
							txt.append(complemento02);
							txt.append(separador);
							txt.append(complemento04);
						}
						// Douglas ## Feito para o Chamado #2306-007152
						if(nomeContabilidade.toUpperCase().contains("EXCLUSIVACONTABILIDADE")){
							txt.append(separador);
							txt.append(documento);
							//Foi solicitado para imprimir duas vezes mesmo o documento #2306-007152 (Coluna L)
							txt.append(separador);
							txt.append(documento);
						}
                        txt.append(rn);
                    }
                }
                

                
                String descricaoDebito = "";
                String descricaoCredito = "";

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }

                if(!nomeContabilidade.toUpperCase().contains("JBLCONTABIL") && !nomeEmpresa.toUpperCase().contains("FUEAMAZONICOS") && !nomeContabilidade.toUpperCase().contains("EXCLUSIVACONTABILIDADE")){
					ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                }
				//Douglas ## Feito para o Chamado #2304-003738
				if(nomeContabilidade.toUpperCase().contains("JBLCONTABIL") && nomeEmpresa.toUpperCase().contains("FUEAMAZONICOS")){
					ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + cutString(historico,0,";") + ";" + nomeOrigem + ";" + complemento02 + ";" + complemento04);
				}
				// Douglas ## Feito para o Chamado #2306-007152
				if(nomeContabilidade.toUpperCase().contains("EXCLUSIVACONTABILIDADE")){
					ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + cutString(historico,0,";") + ";" + nomeOrigem + ";" + documento);
				}
				ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){
				String loteMovimentoLimpo = loteMovimento.replaceAll("\\.", "").replaceAll("-", "").replaceAll(" ", "").trim();
				if (loteMovimentoLimpo.contains("iltro_")) {
					String auxLote = cutString(loteMovimentoLimpo, "iltro_").trim();
					loteMovimentoLimpo = nomeEmpresa + "_" + codEmpresa + "_" + cutString(auxLote, "_");					
				}
				// if (loteMovimentoLimpo.toUpperCase().contains("FILTRO_") 
					// loteMovimentoLimpo = cutString(loteMovimentoLimpo.toUpperCase(), 0, "FILTRO_") + cutString(loteMovimentoLimpo.toUpperCase(), loteMovimentoLimpo.toUpperCase().indexOf("FILTRO_") + 13);
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimentoLimpo + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimentoLimpo + ".csv";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimentoLimpo + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimentoLimpo + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimentoLimpo, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimentoLimpo + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@MMBUILDERS).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoMMBUILDERS(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
	
    String rn = "\r\n";

    String ERP               = "";
    String cpfCnpj           = "";
    String documento         = "";
    String historico         = "";
    String codEmpresa        = "";
    String nomeOrigem        = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String centroCusto       = "";
    String contaDebito       = "";
    String nomeEmpresa       = "";
    String contaCredito      = "";
    String dataMovimento     = "";
    String loteMovimento     = "";
    String tipoMovimento     = "";
    String valorDesconto     = "";
    String tipoLancamento    = "";
    String valorLiquidacao   = "";
    String naturezaContabil  = "";
    String nomeContabilidade = "";
 
    String valorFinal        = "";
    String separador         = " ";
    double valorDouble       = 0;
	int limiteHistorico      = 120;

    Date dtAgora = new Date();

    StringBuilder txt       = new StringBuilder();
    StringBuilder sForce    = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();

    try {
        loteMovimento       = jDadosLote.optString("LOTE");
        codEmpresa          = jDadosLote.optString("CODEMPRESA");
        nomeEmpresa         = jDadosLote.optString("NOMEEMPRESA");
        nomeContabilidade   = jDadosLote.optString("NOMECONTABILIDADE");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {
                
                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //

                JSONObject recMov = records.optJSONObject(t);
                documento       = recMov.optString("DOCUMENTO");
                historico       = recMov.optString("HISTORICO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                centroCusto     = recMov.optString("CENTROCUSTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                
				separador		= "";
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
						historico = historico.replaceAll("INVERTECONTA","").trim();
					}
				}
				contaDebito		= contaDebito.replaceAll("[^0-9]*", "");
                contaCredito	= contaCredito.replaceAll("[^0-9]*", "");
				
				// if(contaDebito.length() > 1){
					// contaDebito = contaDebito.substring(0, contaDebito.length()-1) + "-" + contaDebito.substring(contaDebito.length()-1);
					// if(contaDebito.length() > 5) contaDebito = contaDebito.substring(0, contaDebito.length()-5) + "." + contaDebito.substring(contaDebito.length()-5);
				// }
				// if(contaCredito.length() > 1){
					// contaCredito = contaCredito.substring(0, contaCredito.length()-1) + "-" + contaCredito.substring(contaCredito.length()-1);
					// if(contaCredito.length() > 5) contaCredito = contaCredito.substring(0, contaCredito.length()-5) + "." + contaCredito.substring(contaCredito.length()-5);
				// }
				// contaDebito	= contaDebito.replaceAll("^.*(?=,),\\s(\\w+\\b).*", "$1");
                // contaCredito	= contaCredito.replaceAll("^.*(?=,),\\s(\\w+\\b).*", "$1");
				
				
				
                String codigoFilial = "";
                String codigoHistorico = "";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    cpfCnpj         = codEmpresa;
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();
/*
				Date dt		  = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                dataMovimento = DateUtil.dateToString(dt, "ddMMyyyy");
*/
                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll("\\.",",").trim(); //TODO				

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                if (historico.length() > 250) historico = historico.substring(0,249).trim();
				
				if(nomeContabilidade.toUpperCase().equals("NCCONTABILUDI")) {
                    limiteHistorico = 49;
                    String primeiraLetra = "";
                    String historicoAuxSub = "";
					
					try {
						primeiraLetra   = historico.substring(0,1).toUpperCase();
					} catch (Exception e) {}
					
					try {
						historicoAuxSub = historico.substring(1).toLowerCase();
					} catch (Exception e) {}
					
                    historico = primeiraLetra + historicoAuxSub;
                }

                // //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////

				String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
				cnpjEmpresa = trataCpfCnpj(cnpjEmpresa, false, false);
                // if (cpfCnpj.matches("[0-9]{14}")) {
                    // loteMovimento = cutString(loteMovimento, loteMovimento.indexOf("_") + 1);
                    // loteMovimento = nomeEmpresa + "_" + cpfCnpj + "_" + cutString(loteMovimento, loteMovimento.indexOf("_") + 1);
                    // cnpjEmpresa = trataCpfCnpj(cpfCnpj, false, false);
                // }
				
				txt.append(StringUtil.rightPad(dataMovimento, 10, "0"));
                txt.append(StringUtil.rightPad(contaDebito , 6, " "));
                txt.append(StringUtil.rightPad("", 2, " "));
                txt.append(StringUtil.rightPad("", 6, " "));
                txt.append(StringUtil.rightPad(contaCredito , 6, " "));
                txt.append(StringUtil.rightPad("", 2, " "));
                txt.append(StringUtil.rightPad("", 6, " "));
                txt.append(StringUtil.rightPad(valorFinal, 13, " "));
				txt.append(StringUtil.rightPad(codigoHistorico, 5, " "));
				txt.append(StringUtil.rightPad(historico, limiteHistorico, " "));
                //txt.append(StringUtil.rightPad("", 20, " "));
                // txt.append(StringUtil.rightPad("", 2, " "));
                // txt.append(StringUtil.rightPad("", 2, " "));
                // txt.append(StringUtil.rightPad("", 2, " "));
                // txt.append(StringUtil.rightPad("", 2, " "));
                // txt.append(StringUtil.rightPad("", 2, " "));
                // txt.append(StringUtil.rightPad("", 2, " "));
                // txt.append(cnpjEmpresa);
				
				// if(codigoHistorico.equals("")) txt.append(StringUtil.rightPad(historico, 20, " "));
				
                txt.append(rn);

                
                String descricaoDebito = "";
                String descricaoCredito = "";

                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}///////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@SAAM).         //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoSAAM(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento    = "";
    String codEmpresa       = "";
    String tipoMovimento    = "";
    String dataMovimento    = "";
    String contaDebito      = "";
    String contaCredito     = "";
    String valorLiquidacao  = "";
    String documento        = "";
    String nomeOrigem       = "";
    String centroCusto      = "";
    String valorJuros       = "";
    String valorMulta       = "";
    String valorDesconto    = "";
    String historico        = "";
    String naturezaContabil = "";
    String tipoLancamento   = "";
    String nomeEmpresa      = "";
    String ERP              = "";               //  <---<
	
	HashMap mapaPlano   		= new HashMap();  

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	JSONArray toCloud		= new JSONArray();	//#20210126
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");
        String codEmpresaOriginal = codEmpresa;

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);

		ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");
        //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;

        ResumoTxt = new StringBuilder();

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            int ultimoCodigo = 0;

            String sequencia = String.valueOf(ultimoCodigo);
            sequencia        = StringUtil.leftPad(sequencia, 4, "0");

            for (int t=0; t<records.length(); t++) {

                JSONObject recMov = records.optJSONObject(t);
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                String cpfCnpj  = recMov.optString("CPFCNPJ").replaceAll("[\\.|\\/|\\-]","");

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");

                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                String separador = ";";
                int tamData = 10;

				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();

                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}

                String codigoHistorico = "0";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<
                
                String valorFinal = valorLiquidacao.replaceAll("\\.",",");

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
                historico = historico.replaceAll("_ ","");
                historico = historico.replaceAll(" _","");
                historico = historico.replaceAll("_","");

                txt.append(StringUtil.leftPad(dataMovimento, tamData, "0"));
                txt.append(StringUtil.leftPad(separador, 1, ""));
                txt.append(contaDebito);
                txt.append(StringUtil.leftPad(separador, 1, ""));
                txt.append(contaCredito);
                txt.append(StringUtil.leftPad(separador, 1, ""));
                txt.append(codigoHistorico);
                txt.append(StringUtil.leftPad(separador, 1, ""));
                txt.append(historico);
                txt.append(StringUtil.leftPad(separador, 1, ""));
                if (tipoMovimento.equals("CTBJUR"))     txt.append(String.format("%.2f", recMov.optDouble("VALORJUROS")).replaceAll("\\.",","));
                if (tipoMovimento.equals("CTBMUL"))     txt.append(String.format("%.2f", recMov.optDouble("VALORMULTA")).replaceAll("\\.",","));
                if (tipoMovimento.equals("CTB"))        txt.append(String.format("%.2f", recMov.optDouble("VALORLIQUIDACAO")).replaceAll("\\.",","));
                if (tipoMovimento.equals("CTBDES"))     txt.append(String.format("%.2f", recMov.optDouble("VALORDESCONTO")).replaceAll("\\.",","));
                if (tipoMovimento.equals("CTBPORT"))    txt.append(String.format("%.2f", recMov.optDouble("VALORLIQUIDACAO")).replaceAll("\\.",","));

				if (tipoMovimento.equals("CTBJUR"))     valorFinal = String.format("%.2f", recMov.optDouble("VALORJUROS")).replaceAll("\\.",",");
                if (tipoMovimento.equals("CTBMUL"))     valorFinal = String.format("%.2f", recMov.optDouble("VALORMULTA")).replaceAll("\\.",",");
                if (tipoMovimento.equals("CTB"))        valorFinal = String.format("%.2f", recMov.optDouble("VALORLIQUIDACAO")).replaceAll("\\.",",");
                if (tipoMovimento.equals("CTBDES"))     valorFinal = String.format("%.2f", recMov.optDouble("VALORDESCONTO")).replaceAll("\\.",",");
                if (tipoMovimento.equals("CTBPORT"))    valorFinal = String.format("%.2f", recMov.optDouble("VALORLIQUIDACAO")).replaceAll("\\.",",");
				
                txt.append(rn);

                if (!tipoMovimento.contains("CC")) {
                
                    String descricaoDebito = "";
                    String descricaoCredito = "";
            
                    ttPlanoConta ttP  = (ttPlanoConta)mapaPlano.get(contaDebitoOriginal);
                    if (ttP == null) {					
                        ttP  = new ttPlanoConta(); 
                        ttP.descricaoPlano = "";
    
                        JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO")
                        .param(codEmpresa)
                        .param(contaDebitoOriginal)
                        .queryUnique();
                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                            ttP.descricaoPlano = descricaoDebito;
                        }
                        ttP.contaContabil     = contaDebitoOriginal;
                        mapaPlano.put(contaDebitoOriginal,ttP);

                    }
                    descricaoDebito = ttP.descricaoPlano;

                    ttP  = (ttPlanoConta)mapaPlano.get(contaCreditoOriginal);
                    if (ttP == null) {					
                        ttP  = new ttPlanoConta(); 
                        ttP.descricaoPlano = "";
    
                        JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO")
                        .param(codEmpresa)
                        .param(contaCreditoOriginal)
                        .queryUnique();
                        if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                            descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                            ttP.descricaoPlano = descricaoCredito;
                        }
                        ttP.contaContabil     = contaCreditoOriginal;
                        mapaPlano.put(contaCreditoOriginal,ttP);
                    }
                    descricaoCredito = ttP.descricaoPlano;

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }

                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			

            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".csv";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@Sibrax).      //
///////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoSIBRAX(JSONObject jDadosLote, InoutLogger logger) throws Exception {

    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento = "";
    String codEmpresa = "";
    String notafiscal = "";
    String tipoMovimento = "";
    String dataMovimento = "";
    String contaDebito = "";
    String contaCredito = "";
    String valorLiquidacao = "";
    String valorDocumento = "";
    String documento = "";
    String nomeOrigem = "";
    String centroCusto = "";
    String valorJuros	= "";
    String valorDesconto	= "";
    String valorMulta		= "";
    String historico		= "";
    String naturezaContabil	= "";
    String tipoLancamento	= "";
    String nomeEmpresa		= "";
    String classificacao	= "";
    String ERP				= "";
	String cpfCnpj			= "";

    HashMap mapaPlano    = new HashMap();  

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	JSONArray toCloud		= new JSONArray();	//#20210126
	//LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
	LancamentosApi apiWeb	= new LancamentosApi();	//#20210126 
	

    try {
		nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
		recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
		recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
		recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
		recAux.put("lote",				loteMovimento);
		recAux.put("codigoErp",			codEmpresa);

		ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String linha = "";
        int indice   = 0;

        int contador			= 0;
        String classifica		= "";
        String classificacao1	= "";
        String sContador		= "";

        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
		
		ResumoTxt = new StringBuilder();
		
		ResumoTxt.append("DATA;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
		ResumoTxt.append(rn);
        try {
            JSONArray records = findMovimentoPorEmpresa_LotebClassificacao(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;
            for (int t=0; t<records.length(); t++) {
				String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");

                JSONObject recMov = records.optJSONObject(t);
				if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
					//toCloud.put(createItemsToCloud(recMov, recAux));
					//toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
				}
				
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
				cpfCnpj			= recMov.optString("CPFCNPJ");
				
				if (contaDebito.contains(".") && contaDebito.contains("E")) contaDebito = removerNotacaoCientificaExcel(contaDebito);
                if (contaCredito.contains(".") && contaCredito.contains("E")) contaCredito = removerNotacaoCientificaExcel(contaCredito);
				
				
                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}
                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");

                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<
				 
                String codigoFilial = "";
				
				if (t == 0) {
					cnpjEmpresa = trataCpfCnpj(cnpjEmpresa, true);
                    linha = "H" + "0300" + nomeEmpresa + "J" + "00000000000" + cnpjEmpresa;
                    txt.append(linha);
                    txt.append(rn);
                }

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //
				if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
					
					if (naturezaContabil.equals("C")) naturezaContabil = "D";
					else if (naturezaContabil.equals("D")) naturezaContabil = "C";
                } else {
				
					if (historico.contains("INVERTECONTA")) {
						String contaInvertida = contaDebito;
						contaDebito = contaCredito;
						contaCredito = contaInvertida;
						
						if (naturezaContabil.equals("C")) naturezaContabil = "D";
						else if (naturezaContabil.equals("D")) naturezaContabil = "C";
					}
				}
				historico = historico.replaceAll("INVERTECONTA","").trim();
				String contLinhaLancamento = "";
				if (historico.contains("GPLCTO:")) {
                    contLinhaLancamento   = historico.substring(historico.indexOf("GPLCTO:")+7).trim();
                    historico    = historico.substring(0,historico.indexOf("GPLCTO:")).trim();
                }
				
                if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codigoFilial.length() > 2) codigoFilial = codigoFilial.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                //String codigoHistorico = StringUtil.leftPad("0", 7, "0");
                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }


                historico = historico.replaceAll(",","\\.").replaceAll(";","");

                if(contaDebito.contains("IGNOR"))  continue;
                if(contaCredito.contains("IGNOR")) continue;

                if(contaDebito.contains("LOTE_ENCERRADO"))  continue;
                if(contaCredito.contains("LOTE_ENCERRADO")) continue;
				
				int ultimoCodigo = 0;

                classifica = classificacao1;

                valorLiquidacao   = valorLiquidacao.replaceAll("\\,", "");
                valorJuros        = valorJuros.replaceAll("\\,", "");
                valorMulta        = valorMulta.replaceAll("\\,", "");
                valorDesconto     = valorDesconto.replaceAll("\\,", "");

                String valorFinal = valorLiquidacao;

                if (tipoMovimento.equals("CTBJUR"))  {
                    valorFinal   = valorJuros;
                }
                if (tipoMovimento.equals("CTBMUL"))  {
                    valorFinal   = valorMulta;
                }
                if (tipoMovimento.equals("CTBDES"))  {
                    valorFinal   = valorDesconto;
                }
				
				double valorTeste = 0;

                try{valorTeste = DecimalUtil.toDecimal(valorFinal);}
                catch(Exception exs){valorTeste = 0;}

                if (historico.length() > 200) {
                    historico = cutString(historico, 0, 199).trim();
                }
				
				String separator = ";";
                if (codigoFilial.equals("")) codigoFilial = "1";
				
				if(valorTeste > 0){
                    txt.append("L");
                    txt.append(dataMovimento.replaceAll("/", ""));
                    txt.append(StringUtil.leftPad(contaDebito, 7, "0"));
					txt.append(StringUtil.leftPad(contaCredito, 7, "0"));
                    //txt.append(StringUtil.leftPad(String.format("%.2f", valorTeste), 15, "0"));
					txt.append(StringUtil.leftPad(String.format("%.2f", valorTeste).replaceAll("\\.", ","), 15, "0"));
                    txt.append(StringUtil.rightPad(historico, 150, " "));
                    txt.append(StringUtil.leftPad(centroCusto, 6, "0"));
                    txt.append(rn);
                }
				
				//pra gerar resumo
				contaDebito	 = cutString(contaDebito, 0, ";");
				contaCredito = cutString(contaCredito, 0, ";");

				if (!tipoMovimento.contains("CC")) {
				
					String descricaoDebito = "";
					String descricaoCredito = "";
				
					ttPlanoConta ttP  = (ttPlanoConta)mapaPlano.get(contaDebito);
					if (ttP == null) {					
						ttP  = new ttPlanoConta(); 
						ttP.descricaoPlano = "";
 
						JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
						.fields("DESCRICAOPLANO")
						.param(codEmpresa)
						.param(contaDebito)
						.queryUnique();
						if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
							descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
							ttP.descricaoPlano = descricaoDebito;
						}
						ttP.contaContabil     = contaDebito;
						mapaPlano.put(contaDebito,ttP);

					}
					descricaoDebito = ttP.descricaoPlano;

					ttP  = (ttPlanoConta)mapaPlano.get(contaCredito);
					if (ttP == null) {					
						ttP  = new ttPlanoConta(); 
						ttP.descricaoPlano = "";
 
						JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
						.fields("DESCRICAOPLANO")
						.param(codEmpresa)
						.param(contaCredito)
						.queryUnique();
						if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
							descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
							ttP.descricaoPlano = descricaoCredito;
						}
						ttP.contaContabil     = contaCredito;
						mapaPlano.put(contaCredito,ttP);
					}
					descricaoCredito = ttP.descricaoPlano;

                    ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }
				
				if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
				//toCloud = sendToCloud(toCloud, recAux, -1, apiWeb, logger);
			}
			

            // Gravacao do Arquivo TXT
            if(totalRegistros > 0){
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());
				

				String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

				
                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }
			
            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

			ResumoTxt = new StringBuilder();
			
            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }

    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}




class ttPlanoConta {
    public String contaContabil;
    public String descricaoPlano;
    public String contaAnalitica;
    public ttPlanoConta(){}
    public ttPlanoConta(ttPlanoConta ttP){
        contaContabil = ttP.contaContabil;
		descricaoPlano = ttP.descricaoPlano;
		contaAnalitica = ttP.contaAnalitica;
    }
}



////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@DYAD).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoDYAD(JSONObject jDadosLote, InoutLogger logger) throws Exception {
	// logger.logDebug("DYAD!!!!");
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
	String nomePortador		 = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
	String classifica		 = "";
	String contaFinal		 = "";
    String ERP               = "";

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	int contador = 0;

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
			String participanteAux = "";
			String codigoParticipanteCP = "";
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //
                JSONObject recMov = records.optJSONObject(t);
				
				// logger.logDebug("recMov -> "+recMov);

				String classificacao 	= recMov.optString("CLASSIFICACAO");;
                tipoMovimento   		= recMov.optString("TIPOMOVIMENTO");
                dataMovimento   		= recMov.optString("DATAMOVIMENTO");
                contaDebito     		= recMov.optString("CONTADEBITO");
                contaCredito    		= recMov.optString("CONTACREDITO");
				
				// logger.logDebug("CD -> "+contaDebito+" - CC -> "+contaCredito);

                //contaDebito	= contaDebito.replaceAll("[^0-9]*", "");
                //contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                nomePortador    = recMov.optString("NOMEPORTADOR");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                String complemento01	= recMov.optString("COMPLEMENTO01");
                String complemento02	= recMov.optString("COMPLEMENTO02");
                String complemento03	= recMov.optString("COMPLEMENTO03");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= ";";
				
				// logger.logDebug("Jur -> "+valorJuros+" - Desc -> "+valorDesconto+" - Multa -> "+valorMulta);
				// logger.logDebug("TM -> "+tipoMovimento+" - NO -> "+nomeOrigem+" - DoC -> "+documento+" - VL -> "+valorLiquidacao+" - CP01 -> "+complemento01+" - CP02 -> "+complemento02+" - CP03 -> "+complemento03);

				
				String codigoParticipante = "";
				
				classificacao   = classificacao.substring(0,16).trim();
				if (!classifica.equals(classificacao)) {
                    contador++;
					participanteAux = "";
					codigoParticipanteCP = "";
                }
				
				classifica = classificacao;
				
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
				if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
                String codigoFilial = "1";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

 	 
                if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                     historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                String participante = "";
				
                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll("\\.",",").trim();
				
				if(tipoLancamento.contains("RECEBER")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "D";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "C";
					}
				}
				if(tipoLancamento.contains("PAGAR")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "C";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "D";
					}
				}
				
				// logger.logDebug("ANTES == CD -> "+contaDebito+" - CC -> "+contaCredito+" - codigoParticipanteCP -> "+codigoParticipanteCP);
				
                if (contaDebito.toUpperCase().contains("P")) {
                    contaDebito = contaDebito.toUpperCase();
                    String [] contaArray = contaDebito.split("P");

                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[0];
                            contaDebito          = contaArray[1];
                        }
                    }

                }


                if (contaCredito.toUpperCase().contains("P")) {
                    contaCredito = contaCredito.toUpperCase();
                    String [] contaArray = contaCredito.split("P");
                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[0];
                            contaCredito         = contaArray[1];
                        }
                    }

                }

                if (naturezaContabil.equals("D")) {

					if(contaDebito.toUpperCase().contains("P") ){
						contaDebito = contaDebito.replaceAll("P","").replaceAll("p","").trim();
						codigoParticipanteCP  = codigoParticipante;
					}
				}
				if (naturezaContabil.equals("C")) {

					if(contaCredito.toUpperCase().contains("P") ){
						codigoParticipanteCP = codigoParticipante;
						contaCredito  = contaCredito.replaceAll("P","").replaceAll("p","").trim();
					}
                }
				// String participante = "";
				
				 if(contaDebito.toUpperCase().contains("P") /*&& nomeContabilidade.toUpperCase().equals("VERSATIL")*/) {
                    String participanteVersatil = codigoParticipante;
                    codigoParticipante = contaDebito.replaceAll("P","").replaceAll("p","").trim();
                    participante = codigoParticipante;
                    contaDebito  = participanteVersatil;
                }
				
				//padrão de participante para fornecedor na conta CREDITO
				if(contaCredito.toUpperCase().contains("P")) {
                    participante = contaCredito.replaceAll("P","").replaceAll("p","").trim();
                    // xavier if (codigoParticipante.equals("") && !nomeContabilidade.toUpperCase().contains("METACOMPANY")) codigoParticipante = "100005";
					if(!codigoParticipante.equals("")) contaCredito = codigoParticipante;
				}

				// logger.logDebug("DEPOIS == CD -> "+contaDebito+" - CC -> "+contaCredito+" - codigoParticipanteCP -> "+codigoParticipanteCP);
				
                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "dd/MM/yyyy");
				if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 99) historico = cutString(historico, 0, 99);
                
				if(tipoMovimento.contains("CC")) continue;
				
				if(codigoParticipanteCP.length() < 6 && codigoParticipanteCP.length() > 0) codigoParticipanteCP = StringUtil.leftPad(codigoParticipanteCP, 6, " ");
				
				// if(!classificacao.equals(classificacaoAux)){
					// logger.logDebug("V1 - "+codigoParticipanteCP+" - "+classificacao);
					// classificacaoAux 	= classificacao;
					// participanteAux 	= codigoParticipanteCP;
				// }else{
					// logger.logDebug("V2 - "+participanteAux+" --- "+classificacaoAux+classificacao);
					// participanteAux = codigoParticipanteCP;
				// }
				// logger.logDebug("participanteAux -> "+participanteAux+" - classificacaoAux -> "+classificacaoAux+" - codigoParticipanteCP -> "+codigoParticipanteCP);
 				
				String numeroLancamento = String.valueOf(contador);
				
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////
				
				txt.append(StringUtil.leftPad(cutString(numeroLancamento, 0, 9), 10, " "));	// Unificador
				txt.append(separador);
				txt.append(StringUtil.leftPad("48167656", 20, " "));  					    // Classelancamento era cpl02
				txt.append(separador);
				txt.append(dataMovimento);													// Data
				txt.append(separador);
				txt.append(StringUtil.leftPad("97647974", 19, " "));						// ClassePlanoContas era cpl01
				txt.append(separador);
				if(naturezaContabil.equals("C")){
					txt.append(StringUtil.leftPad(contaCredito, 14, " "));
				}
				if(naturezaContabil.equals("D")){
					txt.append(StringUtil.leftPad(contaDebito, 14, " "));
				}
				txt.append(separador);
				txt.append(StringUtil.leftPad(centroCusto, 8, " "));						// CCUSTRES
				txt.append(separador);
				txt.append(StringUtil.leftPad(cutString(historico, 0, 44), 45, " "));		// Hitorico
				txt.append(separador);
				if(naturezaContabil.equals("C")){											// Valor
					txt.append(StringUtil.leftPad("-"+cutString(valorFinal,0,6), 8, " "));
				}
				if(naturezaContabil.equals("D")){
					txt.append(StringUtil.leftPad(cutString(valorFinal,0,6), 8, " "));
				}
				txt.append(separador);
				txt.append(StringUtil.leftPad("LE002", 10, " "));						// Locescritu era cpl03
				txt.append(separador);
				txt.append(codigoParticipanteCP);
				txt.append(rn);
				
                String descricaoDebito  = "";
                String descricaoCredito = "";
				
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }



                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".csv";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}



////////////////////////////////////////////////////////////////////////////////////////////////
 // Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@FXPROSIS).  //
////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoFXPROSIS(JSONObject jDadosLote, InoutLogger logger) throws Exception {
	// logger.logDebug("WELCOME TO FX PROSIS");
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
	String classifica		 = "";
	String contaFinal		 = "";
    String ERP               = "";

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txtInicial = new StringBuilder();
    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	int contador = 0;

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");
		
		String cpfCnpj = props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA");
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        ///// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        ///// /////// /////// //

		

        try {
			boolean primeiraLinha = true;
			int contadorAnterior = 0;
			ArrayList<String> organizaContas = new ArrayList();
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                //// ////// //
                // OBTENDO DADOS //
                //// ////// //
                JSONObject recMov = records.optJSONObject(t);

				String classificacao 	= recMov.optString("CLASSIFICACAO");;
                tipoMovimento   		= recMov.optString("TIPOMOVIMENTO");
                dataMovimento   		= recMov.optString("DATAMOVIMENTO");
                contaDebito     		= recMov.optString("CONTADEBITO");
                contaCredito    		= recMov.optString("CONTACREDITO");

                // contaDebito	= contaDebito.replaceAll("[^0-9]*", "");
                // contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= "|";

				
				String codigoParticipante = "";
				
				classificacao   = classificacao.substring(0,16).trim();
				if (!classifica.equals(classificacao)) {
                    contador++;
                }
				
				classifica = classificacao;
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
				if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
                String codigoFilial = "1";
                String codigoHistorico = "0";

                //// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                //// / /////////////// //

 	 
                if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                     historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                // if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                String participante = "";
				
                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll("\\.",",").trim();
				
				if(tipoLancamento.contains("RECEBER")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "D";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "C";
					}
				}
				if(tipoLancamento.contains("PAGAR")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "C";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "D";
					}
				}
				
                String codigoParticipanteCP = "";
                if (contaDebito.toUpperCase().contains("P")) {
                    contaDebito = contaDebito.toUpperCase();
                    String [] contaArray = contaDebito.split("P");

                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaDebito          = contaArray[0];
                        }
                    }

                }


                if (contaCredito.toUpperCase().contains("P")) {
                    contaCredito = contaCredito.toUpperCase();
                    String [] contaArray = contaCredito.split("P");
                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaCredito         = contaArray[0];
                        }
                    }

                }

                if (naturezaContabil.equals("D")) {

					if(contaDebito.toUpperCase().contains("P") ){
						contaDebito = contaDebito.replaceAll("P","").replaceAll("p","").trim();
						codigoParticipanteCP  = codigoParticipante;
					}
					contaFinal = contaDebito;


				}
				if (naturezaContabil.equals("C")) {

					if(contaCredito.toUpperCase().contains("P") ){
						codigoParticipanteCP = codigoParticipante;
						contaCredito  = contaCredito.replaceAll("P","").replaceAll("p","").trim();
					}
					contaFinal = contaCredito;
                 }

                ///////// //
                // TRATAMENTOS //
                ///////// //
				
				String dataAno = loteMovimento.substring(loteMovimento.lastIndexOf("_" + tipoLancamento)-7,loteMovimento.lastIndexOf("_" + tipoLancamento)-3);
                String dataMes = loteMovimento.substring(loteMovimento.lastIndexOf("_" + tipoLancamento)-2,loteMovimento.lastIndexOf("_" + tipoLancamento));

                Date dtFinal = DateUtil.stringToDate("01/" + dataMes + "/" + dataAno, "dd/MM/yyyy");

                Calendar cal = Calendar.getInstance();
                cal.setTime(dtFinal);
                String ultimoDia = String.valueOf(cal.getActualMaximum(Calendar.DAY_OF_MONTH));
                String dataInicial = "01/" + dataMes + "/" + dataAno;
                String dataFinal   = ultimoDia + "/" +  dataMes + "/" + dataAno;
				
				// FIM TRATAMENTO DATA
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "dd/MM/yyyy");
				if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 99) historico = cutString(historico, 0, 99);
				
				// logger.logDebug("DEME " + dataMovimento + " | " + valorFinal + " | " + contaFinal);
                
				if(tipoMovimento.contains("CC")) continue;
				
				if(codigoParticipanteCP.length() < 6 && codigoParticipanteCP.length() > 0) codigoParticipanteCP = StringUtil.leftPad(codigoParticipanteCP, 6, "0");
 				
				String auxContaValida = "";
				
				if(naturezaContabil.equals("C")){
					auxContaValida = contaCredito;
				}else if(naturezaContabil.equals("D")){
					auxContaValida = contaDebito;
				}
				
				String numeroLancamento = String.valueOf(contador);
				String verificaPPagas   = StringUtil.leftPad(codigoParticipanteCP, 10, "0");
				
				////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                ////// /////// /////// ///////
				
				// logger.logDebug("TM => "+tipoMovimento+" - VD => "+valorFinal+" - DoC => "+documento);
				
				if(primeiraLinha){
					txtInicial.append("0000");
					txtInicial.append(separador);
					txtInicial.append(cpfCnpj);
					txtInicial.append(separador);
					txtInicial.append("OUT");								// "FOL" "ESC" "FNC" "GER" "IMB". Que são respectivamente: Folha De Pagamento, Escrita Fiscal, Financeiro, Escritório e Imobiliária. Caso não preenchido, será considerado "OUT", Outros.
					txtInicial.append(separador);
					txtInicial.append(dataInicial.replaceAll("/",""));    	// Data Inicial
					txtInicial.append(separador);
					txtInicial.append(dataFinal.replaceAll("/",""));     	// Data Final
					txtInicial.append(separador);
					txtInicial.append("0");     							// ID Reduzido
					primeiraLinha = false;
					txtInicial.append(rn);
				}
				
				if(!organizaContas.contains(auxContaValida)){
					txtInicial.append("0200");     					// REG
					txtInicial.append(separador);
					if(naturezaContabil.equals("C")){
						txtInicial.append(contaCredito);  			// CONTA
					}else if(naturezaContabil.equals("D")){
						txtInicial.append(contaDebito);   			// CONTA
					}
					txtInicial.append(separador);
					txtInicial.append("");			   				// DESCRICAO
					txtInicial.append(separador);
					txtInicial.append("");     						// PLANO AUXILIAR
					txtInicial.append(separador);
					txtInicial.append("");   						// CODIGO PLANO AUXILIAR
					txtInicial.append(rn);
					
					organizaContas.add(auxContaValida);
				}
				
				// logger.logDebug(organizaContas.toString());
				
				if(contadorAnterior != contador){
					// logger.logDebug("Printou L100");
					contadorAnterior = contador;
					txt.append("L100");     							// REG
					txt.append(separador);
					txt.append(dataMovimento.replaceAll("/",""));      	// DATA
					txt.append(separador);
					txt.append(valorFinal);    							// VALOR
					txt.append(separador);
					txt.append("N");     								// TIPO LANCAMENTO
					txt.append(rn);
				}
				
				if(tipoMovimento.contains("CTB")){
					// logger.logDebug("Printou "+tipoMovimento);
					txt.append("L110");     					// REG
					txt.append(separador);
					if(naturezaContabil.equals("C")){
						txt.append(contaCredito);  				// CONTA
					}else if(naturezaContabil.equals("D")){
						txt.append(contaDebito);   				// CONTA
					}
					txt.append(separador);
					txt.append(naturezaContabil);   			// TIPO CONTA
					txt.append(separador);
					txt.append(documento);    					// DOCUMENTO
					txt.append(separador);
					txt.append(historico);   					// HISTORICO
					txt.append(separador);
					txt.append(valorFinal);   					// VALOR
					txt.append(separador);
					txt.append("");   							// COMPLEMENTO
					txt.append(separador);
					txt.append("");    							// Removido
					// txt.append(cpfCnpj);    					// CNPJ;CPF
					txt.append(separador);
					txt.append("");    							// COD PLANO AUXILIAR
					txt.append(separador);
					txt.append("");    							// COD CONTA PLANO AUXILIAR
					txt.append(rn);
				}
				
                String descricaoDebito  = "";
                String descricaoCredito = "";
				
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }



                valorFinal = valorFinal.replaceAll("\\.","");
                // String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov



			//////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txtInicial.toString()+txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                // *******************************************************
                // ************* ATUALIZA SALESFORCE *********************
                // *******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@CVSOFT).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoCVSOFT(JSONObject jDadosLote, InoutLogger logger) throws Exception {
	// logger.logDebug("CVSOFT!!!!");
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
	String nomePortador		 = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
	String classifica		 = "";
	String contaFinal		 = "";
    String ERP               = "";
	boolean primeiraLinha	 = true;

    String valorFinal        = "";
    String somaValorFinal    = "0";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();
	String dataAux = DateUtil.dateToString(dtAgora, "ddMMyyyy");

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	int contador = 0;

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;
			
			String dataAno = loteMovimento.substring(loteMovimento.lastIndexOf("_" + tipoLancamento)-7,loteMovimento.lastIndexOf("_" + tipoLancamento)-3);	
			String dataMes = loteMovimento.substring(loteMovimento.lastIndexOf("_" + tipoLancamento)-2,loteMovimento.lastIndexOf("_" + tipoLancamento));
			Date dtFinal = DateUtil.stringToDate("01/" + dataMes + "/" + dataAno, "dd/MM/yyyy");

			Calendar cal = Calendar.getInstance();
			cal.setTime(dtFinal);
			String ultimoDia = String.valueOf(cal.getActualMaximum(Calendar.DAY_OF_MONTH));
			String dataInicial = "01/" + dataMes + "/" + dataAno;
			String dataFinal   = ultimoDia + "/" +  dataMes + "/" + dataAno;
			

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //
                JSONObject recMov = records.optJSONObject(t);
				
				// logger.logDebug("recMov -> "+recMov);

				String classificacao 	= recMov.optString("CLASSIFICACAO");;
                tipoMovimento   		= recMov.optString("TIPOMOVIMENTO");
                dataMovimento   		= recMov.optString("DATAMOVIMENTO");
                contaDebito     		= recMov.optString("CONTADEBITO");
                contaCredito    		= recMov.optString("CONTACREDITO");

                //contaDebito	= contaDebito.replaceAll("[^0-9]*", "");
                //contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                nomePortador    = recMov.optString("NOMEPORTADOR");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= "";
				
				// logger.logDebug("Jur -> "+valorJuros+" - Desc -> "+valorDesconto+" - Multa -> "+valorMulta);
				// logger.logDebug("TM -> "+tipoMovimento+" - NO -> "+nomeOrigem+" - DoC -> "+documento+" - VL -> "+valorLiquidacao+" - CP01 -> "+complemento01+" - CP02 -> "+complemento02+" - CP03 -> "+complemento03);

				
				String codigoParticipante = "";
				
				classificacao   = classificacao.substring(0,16).trim();
				if (!classifica.equals(classificacao)) {
                    contador++;
                }
				
				classifica = classificacao;
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
				if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
                String codigoFilial = "1";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

 	 
                if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                     historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                String participante = "";
				
                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				
				// logger.logDebug("A somaValorFinal -> "+somaValorFinal);
				
				try{somaValorFinal = String.format("%.2f", (Double.parseDouble(somaValorFinal)+valorDouble));}
				catch(Exception sc){
					logger.logDebug("OPS: erro no somaValorFinal -> "+somaValorFinal);
				}
				
				// logger.logDebug("B somaValorFinal -> "+somaValorFinal);
				
				valorFinal = valorFinal.replaceAll("\\.",",").trim();
				
				if(tipoLancamento.contains("RECEBER")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "D";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "C";
					}
				}
				if(tipoLancamento.contains("PAGAR")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "C";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "D";
					}
				}
				
                String codigoParticipanteCP = "";
                if (contaDebito.toUpperCase().contains("P")) {
                    contaDebito = contaDebito.toUpperCase();
                    String [] contaArray = contaDebito.split("P");

                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaDebito          = contaArray[0];
                        }
                    }

                }


                if (contaCredito.toUpperCase().contains("P")) {
                    contaCredito = contaCredito.toUpperCase();
                    String [] contaArray = contaCredito.split("P");
                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaCredito         = contaArray[0];
                        }
                    }

                }

                if (naturezaContabil.equals("D")) {

					if(contaDebito.toUpperCase().contains("P") ){
						contaDebito = contaDebito.replaceAll("P","").replaceAll("p","").trim();
						codigoParticipanteCP  = codigoParticipante;
					}
				}
				if (naturezaContabil.equals("C")) {

					if(contaCredito.toUpperCase().contains("P") ){
						codigoParticipanteCP = codigoParticipante;
						contaCredito  = contaCredito.replaceAll("P","").replaceAll("p","").trim();
					}
                 }

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "dd/MM/yyyy");
				if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 99) historico = cutString(historico, 0, 99);
                
				if(tipoMovimento.contains("CC")) continue;
				
				if(codigoParticipanteCP.length() < 6 && codigoParticipanteCP.length() > 0) codigoParticipanteCP = StringUtil.leftPad(codigoParticipanteCP, 6, " ");
 				
				String numeroLancamento = String.valueOf(contador);
				
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////
				if(primeiraLinha){
					txt.append("1");
					txt.append(separador);
					txt.append(StringUtil.rightPad("CVSOFT", 6, " "));
					txt.append(separador);
					txt.append(StringUtil.rightPad("CONTABILIDADE", 40, " "));
					txt.append(separador);
					txt.append(StringUtil.rightPad(dataAux, 8, " "));                         			// Data de gravação do arquivo
					txt.append(separador);
					txt.append(StringUtil.rightPad(codEmpresa, 5, "0"));
					txt.append(separador);
					txt.append(StringUtil.rightPad(codigoFilial, 3, "0"));
					txt.append(separador);
					txt.append(StringUtil.rightPad("", 40, " "));									// Origem dos lançamentos
					txt.append(separador);
					txt.append(StringUtil.rightPad("", 40, " "));		                            // Descrição da finalidade
					txt.append(separador);
					txt.append(StringUtil.rightPad("", 6, " "));                                    // Moeda utilizada (deixar em branco para REAL)
					txt.append(separador);
					txt.append(StringUtil.rightPad("", 40, " "));                                   // Operador que efetuou a exportação
					txt.append(separador);
					txt.append("WIN32");
					txt.append(separador);
					txt.append("002");
					txt.append(separador);
					txt.append(StringUtil.leftPad("004", 6, "0"));                                    // Código de origem
					primeiraLinha = false;
					txt.append(rn);
				}
				
				txt.append("200");                                                      // Não utilizado
				txt.append(separador);
				txt.append(StringUtil.rightPad(dataMovimento.replaceAll("\\/",""), 8, " "));                 // Data formato DDMMAAAA
				txt.append(separador);
				txt.append(StringUtil.rightPad("", 60, " "));     					    // Documento de origem
				txt.append(separador);
				txt.append(StringUtil.rightPad("", 8, " "));                   			// Vencimento formato DDMMAAAA
				txt.append(separador);
				txt.append(StringUtil.rightPad("", 40, " "));              				// Complemento
				txt.append(separador);
				txt.append(StringUtil.rightPad(contaDebito, 35, " "));                  // Conta de Débito (Código reduzido)
				txt.append(separador);
				txt.append(StringUtil.rightPad(contaCredito, 35, " "));                 // Conta de Crédito (Código reduzido)
				txt.append(separador);
				txt.append(StringUtil.leftPad(codigoHistorico, 3, "0"));               // Código do histórico padrão a débito
				txt.append(separador);
				txt.append(StringUtil.leftPad(codigoHistorico, 3, "0"));               // Código do histórico padrão a crédito
				txt.append(separador);
				txt.append(StringUtil.rightPad(historico, 180, " "));                   // Histórico a débito do lançamento formatado (se aplicável)
				txt.append(separador);
				txt.append(StringUtil.rightPad(historico, 180, " "));                   // Histórico a crédito do lançamento formatado (se aplicável)
				txt.append(separador);
				txt.append(StringUtil.leftPad(valorFinal.replaceAll(",",""), 12, "0")); // Valor do lançamento contábil
				txt.append(separador);
				txt.append(StringUtil.rightPad("0", 1, "0"));                           // "0" se o histórico já estiver formatado e pronto; "1" se o histórico tiver que ser formatado na hora da importação;
				txt.append(separador);
				txt.append(StringUtil.rightPad("", 1, "0"));                            // Cenário para importação
				txt.append(separador);
				txt.append(StringUtil.rightPad("", 8, "0"));                            // Código de sub-lote
				txt.append(separador);
				txt.append(StringUtil.rightPad("", 8, "0"));                            // Código de agrupamento dos lançamentos
				txt.append(separador);
				txt.append(StringUtil.rightPad("", 10, "0"));                           // Uso interno – não informar
				txt.append(separador);
				txt.append(StringUtil.rightPad("", 2, "0"));                            // Uso interno – não informar
				txt.append(separador);
				
				txt.append(rn);
				
                String descricaoDebito  = "";
                String descricaoCredito = "";
				
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }



                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov

			txt.append("9");
			txt.append(StringUtil.leftPad(String.valueOf(records.length()),6,"0"));
			// txt.append(StringUtil.leftPad(dataInicial.replaceAll("\\/",""),8,"0"));
			// txt.append(StringUtil.leftPad(dataFinal.replaceAll("\\/",""),8,"0"));
			txt.append(StringUtil.leftPad("",8," "));
			txt.append(StringUtil.leftPad("",8," "));
			txt.append(StringUtil.leftPad(somaValorFinal.replaceAll("\\.",""),13,"0"));
			

			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************
                //***** ATUALIZA SALESFORCE *******
                //*******************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@CONSISANET).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoCONSISANET(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;


    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
	String classifica		 = "";
	String contaFinal		 = "";
    String ERP               = "";
	String codFilialArquivo	 = "";

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	int contador = 0;

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //
                JSONObject recMov = records.optJSONObject(t);

				String classificacao 	= recMov.optString("CLASSIFICACAO");;
                tipoMovimento   		= recMov.optString("TIPOMOVIMENTO");
                dataMovimento   		= recMov.optString("DATAMOVIMENTO");
                contaDebito     		= recMov.optString("CONTADEBITO");
                contaCredito    		= recMov.optString("CONTACREDITO");
				String cpfCnpj 			= recMov.optString("COMPLEMENTO02").replaceAll("[\\.|\\/|\\-]","");
				if (nomeContabilidade.toUpperCase().equals("IGUACU")){
					cpfCnpj  = recMov.optString("CPFCNPJ").replaceAll("[\\.|\\/|\\-]","");
				}

                //contaDebito	= contaDebito.replaceAll("[^0-9]*", "");
                //contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= "";

				
				String codigoParticipante = "";
				
				classificacao   = classificacao.substring(0,16).trim();
				if (!classifica.equals(classificacao)) {
                    contador++;
                }
				
				classifica = classificacao;
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
				if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
                String codigoFilial = "1";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

 	 
                if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                     historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                String participante = "";
				
				
				//2311-021054
				contaDebito  = contaDebito.replaceAll("ANULAR","");
				contaCredito = contaCredito.replaceAll("ANULAR","");
				
				
				
                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				
				//FELIPE - 28/09/22
				//AJUSTE CONFORME O CHAMADO
				//202209-0018918
				
				if (nomeEmpresa.toUpperCase().contains("RONDONAVIACAO")) {
					
					try{valorFinal = String.format("%.0f", valorDouble);}
					catch(Exception c){valorFinal = "";}
				}
				
				valorFinal = valorFinal.replaceAll("\\.",",").trim();

				
				if(tipoLancamento.contains("RECEBER")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "D";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "C";
					}
				}
				if(tipoLancamento.contains("PAGAR")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "C";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "D";
					}
				}
				
                String codigoParticipanteCP = "";
                if (contaDebito.toUpperCase().contains("P")) {
                    contaDebito = contaDebito.toUpperCase();
                    String [] contaArray = contaDebito.split("P");

                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaDebito          = contaArray[0];
                        }
                    }

                }


                if (contaCredito.toUpperCase().contains("P")) {
                    contaCredito = contaCredito.toUpperCase();
                    String [] contaArray = contaCredito.split("P");
                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaCredito         = contaArray[0];
                        }
                    }

                }
				
				if (nomeContabilidade.toUpperCase().equals("IGUACU")){
                    // historico = toDisplayCase(historico);
                    if (tipoLancamento.contains("RECEBER")) {
                        if (contaCredito.length() > 9) cpfCnpj = contaCredito;
                        if (cpfCnpj.length() > 0) {
                            participante = cpfCnpj;
							contaCredito  = codigoParticipante;
                        }
                    }
					if (tipoLancamento.contains("PAGAR")) {
                        if (contaDebito.length() > 9) cpfCnpj = contaDebito;
                        if (cpfCnpj.length() > 0) {
                            participante = cpfCnpj;
							contaDebito  = codigoParticipante;
                        }
                    }
                }
				
                if (naturezaContabil.equals("D")) {

					if(contaDebito.toUpperCase().contains("P") ){
						contaDebito = contaDebito.replaceAll("P","").replaceAll("p","").trim();
						codigoParticipanteCP  = codigoParticipante;
					}
					contaFinal = contaDebito;


				}
				if (naturezaContabil.equals("C")) {

					if(contaCredito.toUpperCase().contains("P") ){
						codigoParticipanteCP = codigoParticipante;
						contaCredito  = contaCredito.replaceAll("P","").replaceAll("p","").trim();
					}
					contaFinal = contaCredito;
                }
				
				

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "dd/MM/yyyy");
				if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				//if(historico.length() > 99) historico = cutString(historico, 0, 99);
				if(historico.length() > 179) historico = cutString(historico, 0, 179); //2311-021054
                
				if(tipoMovimento.contains("CC")) continue;
				
				if(codigoParticipanteCP.length() < 6 && codigoParticipanteCP.length() > 0) codigoParticipanteCP = StringUtil.leftPad(codigoParticipanteCP, 6, "0");
 				
				
				String numeroLancamento = String.valueOf(contador);
				String verificaPPagas   = StringUtil.leftPad(codigoParticipanteCP, 10, "0");
				
				// if (nomeEmpresa.toUpperCase().contains("RONDONAVIACAO")) {
					// valorFinal = cutString(valorFinal, 0, valorFinal.length() - 2) + "," + cutString(valorFinal, valorFinal.length()-2, valorFinal.length());
					// logger.logInfo("ENTROU!!!!");
					
				// }
				
				logger.logInfo("VALOR FINAL XXXXXXX " + valorFinal + " | " + dataMovimento + " | " + loteMovimento);
				
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////
				
				txt.append(StringUtil.leftPad(codigoFilial, 8, "0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad(numeroLancamento, 12, "0"));
				txt.append(separador);
				txt.append(naturezaContabil);
				txt.append(separador);
				txt.append(StringUtil.leftPad(dataMovimento.replaceAll("/",""), 8, "0"));
				txt.append(separador);
				if(verificaPPagas.equals("0000000000")){
					txt.append(StringUtil.leftPad(contaFinal, 8, "0"));
				}else{
					txt.append(StringUtil.leftPad(codigoParticipanteCP, 8, "0"));
				}
				txt.append(separador);
				
				if(nomeContabilidade.toUpperCase().equals("IGUACU")){
					if (tipoMovimento.equals("CTB")) txt.append(StringUtil.leftPad(cpfCnpj, 20, "0"));
					else txt.append(StringUtil.leftPad("", 20, "0"));
				}else{
					txt.append(StringUtil.leftPad("", 20, "0"));
				}
				txt.append(separador);
				txt.append(StringUtil.leftPad("", 8, "0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad(centroCusto, 8, "0"));
				txt.append(separador);
				
				
				
				txt.append(StringUtil.leftPad(valorFinal.replaceAll("\\,",""), 17, "0"));
				
				txt.append(separador);
				txt.append(StringUtil.rightPad(historico, 180, " "));
				txt.append(separador);
				txt.append(StringUtil.leftPad(cutString(documento, 0, 9), 10, "0"));
				txt.append(separador);
				if(verificaPPagas.equals("0000000000")){
					txt.append(StringUtil.leftPad(codigoParticipanteCP, 10, "0"));
				}else{
					txt.append(StringUtil.leftPad(contaFinal, 10, "0"));
				}
				txt.append(rn);
				
                String descricaoDebito  = "";
                String descricaoCredito = "";
				
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }



                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
			for (int s=0; s<records.length(); s++) {
				JSONObject recMov2 = records.optJSONObject(s);
				codFilialArquivo = recMov2.optString("HISTORICO");
				
				if (!codFilialArquivo.contains("Filial:")) {
					codFilialArquivo   = "1";
				} else /*if (codFilialArquivo.contains("Filial:"))*/ {
					codFilialArquivo   = codFilialArquivo.substring(codFilialArquivo.indexOf("Filial:")+7).trim();
				}
				if (codFilialArquivo.startsWith("0")) {
					for (int xx=0;xx<10;xx++) {
						if (codFilialArquivo.length() > 1 && codFilialArquivo.startsWith("0")) codFilialArquivo = codFilialArquivo.substring(1);
					}
				}
				if(codFilialArquivo.equals("0")) codFilialArquivo = "1";
				// logger.logInfo("codFilialArquivo -> " + codFilialArquivo);
			}
			
			// logger.logInfo("LOTEMOV1 " + loteMovimento);
			
			if(!loteMovimento.toUpperCase().contains("_OUD")){
				loteMovimento = cutString(loteMovimento, 0, "_") + "_" +
								cutString(loteMovimento, "_", "_") + "_" +
								cutString(loteMovimento, loteMovimento.lastIndexOf("_")-7, loteMovimento.lastIndexOf("_")) +
								cutString(loteMovimento, loteMovimento.lastIndexOf("_"));
				// loteMovimento = cutString(loteMovimento, 0, "_") + cutString(loteMovimento, "_", "_") + cutString(loteMovimento, loteMovimento.lastIndexOf("_"));
			}
			if(loteMovimento.contains("_oud")){
				String loteIdMovimento = cutString(loteMovimento, loteMovimento.indexOf("_id"));
				loteIdMovimento = cutString(loteIdMovimento, "id", loteMovimento.lastIndexOf("_"));
				loteIdMovimento = cutString(loteIdMovimento, 0, "_");
				loteMovimento = cutString(loteMovimento, 0, "_oud") + "_id" + loteIdMovimento + cutString(loteMovimento, loteMovimento.lastIndexOf("_"));
			}
			// logger.logInfo("LOTEMOV2 " + loteMovimento);
			
            if(totalRegistros > 0){				
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
				String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento+ "CT" + StringUtil.leftPad(codEmpresa, 4, "0") + StringUtil.leftPad(codFilialArquivo, 4, "0")  +".txt"; 
				if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + "CT" + StringUtil.leftPad(codEmpresa, 4, "0") + StringUtil.leftPad(codFilialArquivo, 4, "0") + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_" + loteMovimento+ "CT" + StringUtil.leftPad(codEmpresa, 4, "0") + StringUtil.leftPad(codFilialArquivo, 4, "0") + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_" + loteMovimento+ "CT" + StringUtil.leftPad(codEmpresa, 4, "0") + StringUtil.leftPad(codFilialArquivo, 4, "0") + ".csv";
                }

                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@INTSYS).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoINTSYS(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;


    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
	String classifica		 = "";
	String contaFinal		 = "";
    String ERP               = "";

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	int contador = 0;

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //
                JSONObject recMov = records.optJSONObject(t);

				String classificacao 	= recMov.optString("CLASSIFICACAO");;
                tipoMovimento   		= recMov.optString("TIPOMOVIMENTO");
                dataMovimento   		= recMov.optString("DATAMOVIMENTO");
                contaDebito     		= recMov.optString("CONTADEBITO");
                contaCredito    		= recMov.optString("CONTACREDITO");
				String cpfCnpj 			= recMov.optString("COMPLEMENTO02").replaceAll("[\\.|\\/|\\-]","");

                //contaDebito	= contaDebito.replaceAll("[^0-9]*", "");
                //contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

				valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= "";

				
				String codigoParticipante = "";
				
				classificacao   = classificacao.substring(0,16).trim();
				if (!classifica.equals(classificacao)) {
                    contador++;
                }
				
				classifica = classificacao;
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
				if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
                String codigoFilial = "1";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

 	 
                if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                     historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                String participante = "";
				
				//FELIPE - 19/09/22
				//DESENVOLVIMENTO PARA GERAR COM VIRGULA RONDONAVIACAO
				// if (nomeEmpresa.toUpperCase().contains("RONDONAVIACAO")) valorDouble /= 100;
				
                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll("\\.","").trim();
				
				
				if(tipoLancamento.contains("RECEBER")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "D";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "C";
					}
				}
				if(tipoLancamento.contains("PAGAR")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "C";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "D";
					}
				}
				
                String codigoParticipanteCP = "";
                if (contaDebito.toUpperCase().contains("P")) {
                    contaDebito = contaDebito.toUpperCase();
                    String [] contaArray = contaDebito.split("P");

                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaDebito          = contaArray[0];
                        }
                    }

                }


                if (contaCredito.toUpperCase().contains("P")) {
                    contaCredito = contaCredito.toUpperCase();
                    String [] contaArray = contaCredito.split("P");
                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaCredito         = contaArray[0];
                        }
                    }

                }

                if (naturezaContabil.equals("D")) {

					if(contaDebito.toUpperCase().contains("P") ){
						contaDebito = contaDebito.replaceAll("P","").replaceAll("p","").trim();
						codigoParticipanteCP  = codigoParticipante;
					}
					contaFinal = contaDebito;


				}
				if (naturezaContabil.equals("C")) {

					if(contaCredito.toUpperCase().contains("P") ){
						codigoParticipanteCP = codigoParticipante;
						contaCredito  = contaCredito.replaceAll("P","").replaceAll("p","").trim();
					}
					contaFinal = contaCredito;
                 }

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "dd/MM/yyyy");
				if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				//if(historico.length() > 99) historico = cutString(historico, 0, 99);
				if(historico.length() > 179) historico = cutString(historico, 0, 179); //2311-021054
                
				if(tipoMovimento.contains("CC")) continue;
				
				if(codigoParticipanteCP.length() < 6 && codigoParticipanteCP.length() > 0) codigoParticipanteCP = StringUtil.leftPad(codigoParticipanteCP, 6, "0");
 				
				
				String numeroLancamento = String.valueOf(contador);
				String verificaPPagas   = StringUtil.leftPad(codigoParticipanteCP, 10, "0");
				
				// if (nomeEmpresa.toUpperCase().contains("RONDONAVIACAO")) {
					// valorFinal = cutString(valorFinal, 0, valorFinal.length() - 2) + "," + cutString(valorFinal, valorFinal.length()-2, valorFinal.length());
					// logger.logDebug("ENTROU!!!!");
					
				// }
				
				// logger.logDebug("VALOR FINAL XXXXXXX " + valorFinal);
				
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////
				
				txt.append(StringUtil.leftPad(dataMovimento, 2, "0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad("", 4, "0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad("", 10, " "));
				txt.append(separador);
				txt.append(StringUtil.rightPad(contaDebito,5,"0"));
				txt.append(separador);
				txt.append(StringUtil.rightPad(contaCredito,5,"0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad(codigoHistorico, 4,"0"));
				txt.append(separador);
				txt.append(StringUtil.leftPad(valorFinal, 15, "0"));
				txt.append(separador);
				txt.append(StringUtil.rightPad(historico, 99, " "));
				txt.append(rn);
				
                String descricaoDebito  = "";
                String descricaoCredito = "";
				
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }



                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@TOTV).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoTOTVS(JSONObject jDadosLote, InoutLogger logger) throws Exception {
	
	logger.logDebug("TOTV UEPA!");
	
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
	String classifica		 = "";
	String contaFinal		 = "";
    String ERP               = "";

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	int contador = 0;

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //
                JSONObject recMov = records.optJSONObject(t);

				String classificacao 	= recMov.optString("CLASSIFICACAO");;
                tipoMovimento   		= recMov.optString("TIPOMOVIMENTO");
                dataMovimento   		= recMov.optString("DATAMOVIMENTO");
                contaDebito     		= recMov.optString("CONTADEBITO");
                contaCredito    		= recMov.optString("CONTACREDITO");
				String cpfCnpj 			= recMov.optString("COMPLEMENTO02").replaceAll("[\\.|\\/|\\-]","");

                //contaDebito	= contaDebito.replaceAll("[^0-9]*", "");
                //contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= "";

				
				String codigoParticipante = "";
				
				classificacao   = classificacao.substring(0,16).trim();
				if (!classifica.equals(classificacao)) {
                    contador++;
                }
				
				classifica = classificacao;
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
				if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
                String codigoFilial = "1";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

 	 
                if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                     historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                String participante = "";
				
                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll(",","\\.").trim();
				
				if(tipoLancamento.contains("RECEBER")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "D";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "C";
					}
				}
				if(tipoLancamento.contains("PAGAR")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "C";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "D";
					}
				}
				
                String codigoParticipanteCP = "";
                if (contaDebito.toUpperCase().contains("P")) {
                    contaDebito = contaDebito.toUpperCase();
                    String [] contaArray = contaDebito.split("P");

                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaDebito          = contaArray[0];
                        }
                    }

                }


                if (contaCredito.toUpperCase().contains("P")) {
                    contaCredito = contaCredito.toUpperCase();
                    String [] contaArray = contaCredito.split("P");
                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaCredito         = contaArray[0];
                        }
                    }

                }

                if (naturezaContabil.equals("D")) {

					if(contaDebito.toUpperCase().contains("P") ){
						contaDebito = contaDebito.replaceAll("P","").replaceAll("p","").trim();
						codigoParticipanteCP  = codigoParticipante;
					}
					contaFinal = contaDebito;


				}
				if (naturezaContabil.equals("C")) {

					if(contaCredito.toUpperCase().contains("P") ){
						codigoParticipanteCP = codigoParticipante;
						contaCredito  = contaCredito.replaceAll("P","").replaceAll("p","").trim();
					}
					contaFinal = contaCredito;
                 }
				 
				//#2309-015090
				if(contaDebito.contains("ANULAR")) contaDebito  = contaDebito.replaceAll("ANULAR","");
                if(contaCredito.contains("ANULAR")) contaCredito = contaCredito.replaceAll("ANULAR","");

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "ddMMyyyy");
				if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 99) historico = cutString(historico, 0, 99);
				
				// logger.logDebug("DEME " + dataMovimento + " | " + valorFinal + " | " + contaFinal);
                
				if(tipoMovimento.contains("CC")) continue;
				
				if(codigoParticipanteCP.length() < 6 && codigoParticipanteCP.length() > 0) codigoParticipanteCP = StringUtil.leftPad(codigoParticipanteCP, 6, "0");
 				
				
				String numeroLancamento = String.valueOf(contador);
				String verificaPPagas   = StringUtil.leftPad(codigoParticipanteCP, 10, "0");
				
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////
				
				txt.append(StringUtil.rightPad(numeroLancamento,7," "));		// registro 1-8
				txt.append(separador);
				txt.append(StringUtil.rightPad(contaDebito,20," "));			// conta debito 9-28		
				txt.append(separador);
				txt.append(StringUtil.rightPad(contaCredito,21," "));			// conta credito 29-49
				txt.append(separador);
				txt.append(StringUtil.rightPad(dataMovimento.replaceAll("\\/",""),11," "));			// data 50-60
				txt.append(separador);
				txt.append(StringUtil.rightPad(valorFinal.replaceAll("\\.",""),19," "));				// valor 60-79
				txt.append(separador);
				txt.append(historico);
				txt.append(rn);
				
                String descricaoDebito  = "";
                String descricaoCredito = "";
				
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }



                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@NETSPEED).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoNETSPEED(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
	String classifica		 = "";
	String contaFinal		 = "";
    String ERP               = "";

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	int contador = 0;

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //
                JSONObject recMov = records.optJSONObject(t);

				String classificacao 	= recMov.optString("CLASSIFICACAO");;
                tipoMovimento   		= recMov.optString("TIPOMOVIMENTO");
                dataMovimento   		= recMov.optString("DATAMOVIMENTO");
                contaDebito     		= recMov.optString("CONTADEBITO");
                contaCredito    		= recMov.optString("CONTACREDITO");
				String cpfCnpj 			= recMov.optString("COMPLEMENTO02").replaceAll("[\\.|\\/|\\-]","");

                //contaDebito	= contaDebito.replaceAll("[^0-9]*", "");
                //contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= ";";

				
				String codigoParticipante = "";
				
				classificacao   = classificacao.substring(0,16).trim();
				if (!classifica.equals(classificacao)) {
                    contador++;
                }
				
				classifica = classificacao;
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
				if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
                String codigoFilial = "1";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

 	 
                if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                     historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                String participante = "";
				
                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll(",","\\.").trim();
				
				if(tipoLancamento.contains("RECEBER")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "D";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "C";
					}
				}
				if(tipoLancamento.contains("PAGAR")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "C";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "D";
					}
				}
				
                String codigoParticipanteCP = "";
                if (contaDebito.toUpperCase().contains("P")) {
                    contaDebito = contaDebito.toUpperCase();
                    String [] contaArray = contaDebito.split("P");

                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaDebito          = contaArray[0];
                        }
                    }

                }


                if (contaCredito.toUpperCase().contains("P")) {
                    contaCredito = contaCredito.toUpperCase();
                    String [] contaArray = contaCredito.split("P");
                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaCredito         = contaArray[0];
                        }
                    }

                }

                if (naturezaContabil.equals("D")) {

					if(contaDebito.toUpperCase().contains("P") ){
						contaDebito = contaDebito.replaceAll("P","").replaceAll("p","").trim();
						codigoParticipanteCP  = codigoParticipante;
					}
					contaFinal = contaDebito;


				}
				if (naturezaContabil.equals("C")) {

					if(contaCredito.toUpperCase().contains("P") ){
						codigoParticipanteCP = codigoParticipante;
						contaCredito  = contaCredito.replaceAll("P","").replaceAll("p","").trim();
					}
					contaFinal = contaCredito;
                 }

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "dd/MM/yyyy");
				if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 99) historico = cutString(historico, 0, 99);
				
				// logger.logDebug("DEME " + dataMovimento + " | " + valorFinal + " | " + contaFinal);
                
				if(tipoMovimento.contains("CC")) continue;
				
				if(codigoParticipanteCP.length() < 6 && codigoParticipanteCP.length() > 0) codigoParticipanteCP = StringUtil.leftPad(codigoParticipanteCP, 6, "0");
 				
				
				String numeroLancamento = String.valueOf(contador);
				String verificaPPagas   = StringUtil.leftPad(codigoParticipanteCP, 10, "0");
				
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////
				
				txt.append(dataMovimento);
				txt.append(separador);
				txt.append(contaDebito);
				txt.append(separador);
				txt.append(contaCredito);
				txt.append(separador);
				txt.append(StringUtil.leftPad(codigoHistorico, 3, "0")); //2308-013330
				// txt.append(historico);
				txt.append(separador);
				txt.append(valorFinal);
				txt.append(separador);
				txt.append(valorFinal);
				txt.append(separador);
				txt.append(historico); // 2310-017814 solicitado o historico no campo complemento
				txt.append(rn);
				
                String descricaoDebito  = "";
                String descricaoCredito = "";
				
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }



                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@MAKROSYSTEM).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoMAKROSYSTEM(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
    String ERP               = ""; 

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	int contador = 1;

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);

        //#2310-018572
        txt = new StringBuilder();
        txt.append("DATA\tCONTA\tVALOR\tDEBITO\tCREDITO\tHISTORICO\tSCP\tDEPARTAMENTO\tDOCUMENTO\tCNPJ");
        txt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		
 		
        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //

                JSONObject recMov = records.optJSONObject(t);
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
				String cpfCnpj  = recMov.optString("CPFCNPJ");
				//.replaceAll("[\\.|\\/|\\-]","")

                //contaDebito	= contaDebito.replaceAll("[^0-9]*", "");
                //contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= "\t";
                String SCP      = "";
				
				String codigoParticipante = "";

                dataMovimento   = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
				if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<
				
				String classificacaoDebito  = "";
				String classificacaoCredito = "";
				
				if (contaDebito.contains("_")){
					classificacaoDebito = cutString(contaDebito, "_");
					contaDebito  = cutString(contaDebito, 0, "_");
				}
				if (contaCredito.contains("_")){
					classificacaoCredito = cutString(contaCredito, "_");
					contaCredito = cutString(contaCredito, 0, "_");
				}
				
				
				
				//ao invez de 360 seria o limite 369
				
                String descricaoDebito  = "";
                String descricaoCredito = "";
				
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO, CONTAANALITICA")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
				
				if (descricaoPlano != null) {
					if(descricaoPlano.has("DESCRICAOPLANO")) descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
					if(descricaoPlano.has("CONTAANALITICA") && classificacaoDebito.equals("")) classificacaoDebito = descricaoPlano.optString("CONTAANALITICA");
				}

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO, CONTAANALITICA")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
				if (descricaoPlano2 != null) {
					if(descricaoPlano2.has("DESCRICAOPLANO")) descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
					if(descricaoPlano2.has("CONTAANALITICA")  && classificacaoCredito.equals("")) classificacaoCredito = descricaoPlano2.optString("CONTAANALITICA");
				}
				
				
                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                String participante = "";
				
                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll("\\.",",").trim();
				
				
                String codigoParticipanteCP = "";
                String codigoParticipanteCR = "";
                if (contaDebito.toUpperCase().contains("P")) {
                    contaDebito = contaDebito.toUpperCase();
                    String [] contaArray = contaDebito.split("P");

                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaDebito          = contaArray[0];
                        }
                    }

                }


                if (contaCredito.toUpperCase().contains("P")) {
                    contaCredito = contaCredito.toUpperCase();
                    String [] contaArray = contaCredito.split("P");
                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCR = contaArray[1];
                            contaCredito         = contaArray[0];
                        }
                    }

                }

                if(contaDebito.toUpperCase().contains("P") ){
                    codigoParticipanteCP = contaDebito.replaceAll("P","").replaceAll("p","").trim();
                    contaDebito  = codigoParticipante;
                }
                if(contaCredito.toUpperCase().contains("P") ){
                    codigoParticipanteCR = contaCredito.replaceAll("P","").replaceAll("p","").trim();
                    contaCredito  = codigoParticipante;
                }

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				//dataMovimento = getCampoDate(dataMovimento, "", "dd/MM/yyyy");

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 99) historico = cutString(historico, 0, 99);
                
				if(tipoMovimento.contains("CC")) continue;
				
				if(codigoParticipanteCP.length() < 6 && codigoParticipanteCP.length() > 0) codigoParticipanteCP = StringUtil.leftPad(codigoParticipanteCP, 6, "0");
				if(codigoParticipanteCR.length() < 6 && codigoParticipanteCR.length() > 0) codigoParticipanteCR = StringUtil.leftPad(codigoParticipanteCR, 6, "0");
				
				
				String numeroLancamento = String.valueOf(contador);
				String sequencial = "";
				
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////
				

                //#2310-018572
				txt.append(dataMovimento);
                txt.append(separador);
                txt.append(nomeOrigem);
                txt.append(separador);
                txt.append(valorFinal);
                txt.append(separador);
                txt.append(contaDebito);
                txt.append(separador);
                txt.append(contaCredito);
                txt.append(separador);
                txt.append(codigoHistorico);
                txt.append(separador);
                txt.append(SCP);
                txt.append(separador);
                txt.append(centroCusto);
                txt.append(separador);
                txt.append(documento);
                txt.append(separador);
                txt.append(cpfCnpj);
                txt.append(separador);
				txt.append(rn);
                
				contador++;
				
				valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".xls";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".xls";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

public String genericPostONEFLOW(String uri, JSONObject bodyObj, String token, InoutLogger logger) throws Exception {
		
	try {
		StringBuilder responseRaw = new StringBuilder();
		java.net.URL serviceURL = new java.net.URL(uri);
		
		 
		
		// Opensjava.net.URL as a POST Request
		java.net.HttpURLConnection connection = (java.net.HttpURLConnection) serviceURL.openConnection();
		connection.setDoOutput(true); // indicates a post
		connection.setRequestMethod("POST");
		
		// Default Headers.
		connection.setRequestProperty("Accept", "application/json");
		connection.setRequestProperty("Content-Type", "application/json");
		connection.setRequestProperty("Authorization", "Bearer " + token); // header for authorization
		
		logger.logDebug("uri " + uri);
		logger.logDebug("token " + token);
		logger.logDebug("BODY " + bodyObj);
		
		// Writes the Request Body...
		try {
			java.io.OutputStream os = connection.getOutputStream();
			os.write(bodyObj.toString().getBytes());
			os.flush();
			os.close();
		} catch (Exception ex1) {
			logger.logError("Primeiro Catch " + ex1);
		} 
		
		// Writes the Response Body...
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(connection.getInputStream(), "UTF-8"));
			String line;
			while ((line = reader.readLine()) != null) {
				responseRaw.append(line);
			}
			reader.close();
		} catch (Exception ex2) {
			logger.logError("Segundo Catch " + ex2);
		} 
		
		// checks if it is a valid json
		if (responseRaw.toString().startsWith("{") && responseRaw.toString().endsWith("}")) {
			JSONObject response = new JSONObject(responseRaw.toString());
			
			// Todo
			return response.toString();
		} 
		else {
			throw new Exception (responseRaw.toString());
		}
		 
		
	} catch (Exception ex0) { 
		throw ex0;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@RUMOPRIORI).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoRumoPriori(JSONObject jDadosLote, InoutLogger logger) throws Exception {
	// logger.logDebug("RUMOPRIORIRIRRIRIRI");
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
	String classifica		 = "";
	String contaFinal		 = "";
    String ERP               = "";

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	int contador = 0;

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

		String cpfCnpj = props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA");
		String razaoSocial = props.get(nomeEmpresa.toUpperCase()+"_RAZAO_SOCIAL");
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);

        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //
        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;
			boolean isPrimeiro = true;
			boolean mudouData = true;
			String dataAnterior = "";

            for (int t=0; t<records.length(); t++) {
                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //
                JSONObject recMov = records.optJSONObject(t);

				String classificacao 	= recMov.optString("CLASSIFICACAO");;
                tipoMovimento   		= recMov.optString("TIPOMOVIMENTO");
                dataMovimento   		= recMov.optString("DATAMOVIMENTO");
                contaDebito     		= recMov.optString("CONTADEBITO");
                contaCredito    		= recMov.optString("CONTACREDITO");

                //contaDebito	= contaDebito.replaceAll("[^0-9]*", "");
                //contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= ";";

				logger.logDebug("NC -> "+naturezaContabil+" - TP -> "+tipoMovimento);

				
				String codigoParticipante = "";
				
				classificacao   = classificacao.substring(0,16).trim();
				if (!classifica.equals(classificacao)) {
                    contador++;
                }
				
				classifica = classificacao;
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
				if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
                String codigoFilial = "1";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

 	 
                if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                     historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                String participante = "";
				
                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll(",","\\.").trim();
				
				if(tipoLancamento.contains("RECEBER")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "D";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "C";
					}
				}
				if(tipoLancamento.contains("PAGAR")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "C";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "D";
					}
				}
				
                String codigoParticipanteCP = "";
                if (contaDebito.toUpperCase().contains("P")) {
                    contaDebito = contaDebito.toUpperCase();
                    String [] contaArray = contaDebito.split("P");

                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaDebito          = contaArray[0];
                        }
                    }

                }


                if (contaCredito.toUpperCase().contains("P")) {
                    contaCredito = contaCredito.toUpperCase();
                    String [] contaArray = contaCredito.split("P");
                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaCredito         = contaArray[0];
                        }
                    }

                }

                if (naturezaContabil.equals("D")) {

					if(contaDebito.toUpperCase().contains("P") ){
						contaDebito = contaDebito.replaceAll("P","").replaceAll("p","").trim();
						codigoParticipanteCP  = codigoParticipante;
					}
					contaFinal = contaDebito;


				}
				if (naturezaContabil.equals("C")) {

					if(contaCredito.toUpperCase().contains("P") ){
						codigoParticipanteCP = codigoParticipante;
						contaCredito  = contaCredito.replaceAll("P","").replaceAll("p","").trim();
					}
					contaFinal = contaCredito;
				}
				
				//  Busca o mes e ano de procecessamento no nome do lote para exibir o periodo de fechamento do cliente
                String data[] = dataMovimento.split("/");
				
				String dataAno = "";
				String dataMes = "";
				
				try {
					dataAno = data[2];
					dataMes = data[1];
				}
				catch (Exception ex) {
					logger.logError("Erro geraArquivoRumoPriori | Data invalida -> " + ex.getMessage());
				}
                Date dtFinal = DateUtil.stringToDate("01/" + dataMes + "/" + dataAno, "dd/MM/yyyy");
                Calendar cal = Calendar.getInstance();
                cal.setTime(dtFinal);
                String ultimoDia = String.valueOf(cal.getActualMaximum(Calendar.DAY_OF_MONTH));
                String dataInicial = "01/" + dataMes + "/" + dataAno;
                String dataFinal   = ultimoDia + "/" +  dataMes + "/" + dataAno;

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "dd/MM/yyyy");
				if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);
				
				logger.logDebug("VF -> "+valorFinal+" - NC => "+naturezaContabil+" - contaFinal -> "+contaFinal+" - "+contaDebito+" - "+contaCredito);
				
				if(!dataMovimento.equals(dataAnterior)) mudouData = true;

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 99) historico = cutString(historico, 0, 99);
                
				if(tipoMovimento.contains("CC")) continue;
				
				if(codigoParticipanteCP.length() < 6 && codigoParticipanteCP.length() > 0) codigoParticipanteCP = StringUtil.leftPad(codigoParticipanteCP, 6, "0");
 				
				
				String numeroLancamento = String.valueOf(contador);
				String verificaPPagas   = StringUtil.leftPad(codigoParticipanteCP, 10, "0");
				
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////
				
				if(isPrimeiro){
					txt.append("1");
					txt.append(separador);
					txt.append(codEmpresa);
					txt.append(separador);
					txt.append(formataCpfCnpj(cpfCnpj));
					txt.append(separador);
					txt.append("");
					txt.append(separador);
					txt.append(razaoSocial);
					txt.append(separador);
					txt.append(dataInicial);
					txt.append(separador);
					txt.append(dataFinal);
					txt.append(separador);
					txt.append("OTTIMIZZA");
					
					txt.append(rn);
					
					isPrimeiro = false;
				}
				
				if(mudouData){
					txt.append("2");
					txt.append(separador);
					dataAnterior = dataMovimento;
					txt.append(dataMovimento);
					txt.append(separador);
					txt.append(codEmpresa);
					txt.append(separador);
					txt.append("");
					
					txt.append(rn);
					mudouData = false;
				}
				
				txt.append("3");
				txt.append(separador);
				txt.append(valorFinal);
				txt.append(separador);
				if(tipoLancamento.contains("PAGAR") && !codigoParticipanteCP.equals("")){
					txt.append(codigoParticipanteCP+":"+contaDebito);
				}else{
					txt.append(contaDebito);
				}
				txt.append(separador);
				txt.append("");
				txt.append(separador);
				if(tipoLancamento.contains("RECEBER") && !codigoParticipanteCP.equals("")){
					txt.append(codigoParticipanteCP+":"+contaCredito);
				}else{
					txt.append(contaCredito);
				}
				txt.append(separador);
				txt.append("");
				txt.append(separador);
				txt.append(historico);
				
				txt.append(rn);
				
				if(!centroCusto.equals("")){
					txt.append("4");
					txt.append(separador);
					txt.append(valorFinal);
					txt.append(separador);
					txt.append(centroCusto);
					txt.append(separador);
					txt.append("Nome do centro custo");
					txt.append(rn);
				}
				
                String descricaoDebito  = "";
                String descricaoCredito = "";
				
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }



                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************
                //***** ATUALIZA SALESFORCE *******
                //*******************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao || CONTABYTE ||
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoCONTABYTE(JSONObject jDadosLote, InoutLogger logger) throws Exception {

      //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
    // logger.logDebug("TESTE ENTROU DOMINIO");
    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento = "";
    String codEmpresa    = "";
    String notafiscal    = "";
    String tipoMovimento = "";
    String dataMovimento = "";
    String contaDebito   = "";
    String contaCredito  = "";
    String valorLiquidacao = "";
    String valorDocumento = "";
    String documento     = "";
    String nomeOrigem    = "";
    String centroCusto   = "";
    String valorJuros    = "";
    String valorDesconto = "";
    String valorMulta    = "";
    String historico     = "";
    String naturezaContabil = "";
    String tipoLancamento = "";
    String nomeEmpresa   = "";
    String classificacao = "";
    String ERP           = "";                          //  <---<
    String complemento02 = "";
    HashMap mapaPlano   		= new HashMap();  

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

    // JSONArray toCloud		= new JSONArray();	//#20210126	
    // LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
    
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
        recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
        recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
        recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
        recAux.put("lote",				loteMovimento);
        recAux.put("codigoErp",			codEmpresa);
        
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");


        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String linha = " ";
        int indice   = 0;

        int contador = 0;
        String classifica = " ";
        int totalRegistros = 0;
        ResumoTxt = new StringBuilder();


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
            String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
            String emailCanal = props.get("EMAIL_CANAL");
            //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;

            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);

    
            for (int t=0; t<records.length(); t++) {
                
                

                JSONObject recMov = records.optJSONObject(t);
                
                if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
                    //////toCloud.put(createItemsToCloud(recMov, recAux));
                    // //toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
                }
                
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                complemento02  = recMov.optString("COMPLEMENTO02");
                classificacao   = classificacao.substring(0,16).trim();
                

                historico       = historico.replaceAll(" \\.","\\.");
                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}



                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;
                
                
                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                // quando temos uma filial no contabil, o CNPJ que vai no cabecalho deve ser o da matriz
                // para isto funcionar, o analista tem que criar uma regra de filial no CRM
                // e colocar codigo filial = 12CNPJ:00000000000000 (sendo este cnpj o da matriz
                if (historico.contains("CNPJ:")) {
                    cnpjEmpresa = cutString(historico, "CNPJ:", " ");
                    historico   = historico.replaceAll("CNPJ:","").replaceAll(cnpjEmpresa, "");
                }
                
                if (contador == 0) {
                    linha = "|" + cnpjEmpresa + "|"+nomeEmpresa+"|||||";
                    txt.append(linha);
                    txt.append(rn);
                    classifica = " ";
                }

                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                        
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    // logger.logDebug("FILIAL -> "+codigoFilial);
                    historico       = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                String codigoCentroPort = "";
                if (historico.contains("CENTROPORT:")) {
                        codigoCentroPort = historico.substring(historico.indexOf("CENTROPORT:")+11).trim();
                    historico       = historico.substring(0,historico.indexOf("CENTROPORT:")).trim();
                }

                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
					complemento02   = historico;
                }

                String itemDFC = "";
                if (historico.contains("ItemDFC:")) {
                    itemDFC    = historico.substring(historico.indexOf("ItemDFC:")+8).trim();
                    historico  = historico.substring(0,historico.indexOf("ItemDFC:")).trim();
                }

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                valorLiquidacao   = valorLiquidacao.replaceAll("\\.", ",");
                valorJuros        = valorJuros.replaceAll("\\.", ",");
                valorMulta        = valorMulta.replaceAll("\\.", ",");
                valorDesconto     = valorDesconto.replaceAll("\\.", ",");

                String valorFinal = valorLiquidacao;
                String sContador  = String.valueOf(contador);
                // N?o exporta valores zerados
                double valorDouble = DecimalUtil.toDecimal(valorFinal);
                
                // logger.logDebug("Dominio Classificacao -> "+classificacao+" - classifica -> "+classifica);
                // logger.logDebug("Dominio loteMovimento-> "+loteMovimento);
                
                if (!classifica.equals(classificacao)) {
                    contador++;
                    sContador = String.valueOf(contador);
                }

                classifica = classificacao;


                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
                
                    if (historico.toUpperCase().contains("INVERTECONTA")) {
                        String contaInvertida = contaDebito;
                        contaDebito = contaCredito;
                        contaCredito = contaInvertida;
                        if (naturezaContabil.equals("D")) naturezaContabil = "TC";
                        if (naturezaContabil.equals("C")) naturezaContabil = "TD";
                        naturezaContabil = naturezaContabil.replaceAll("T","");
                    }
                }
                historico = historico.toUpperCase().replaceAll("INVERTECONTA","").trim();

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                if (contaDebito.contains("E"))  contaDebito = contaDebito.substring(0, contaDebito.indexOf("E"));
                if (contaCredito.contains("E")) contaCredito = contaCredito.substring(0, contaCredito.indexOf("E"));

                // logger.logDebug("CONTACREDITO ->> " + contaCredito);
                linha = "|" + dataMovimento + "||" + contaDebito + "|" + contaCredito + "|" + codigoHistorico + "||" + valorFinal + "|" + complemento02 + "|";

                txt.append(linha);
                txt.append(rn);
                

                if(!itemDFC.equals("")) {
                    linha = "|6130|" + itemDFC + "|" + valorFinal + "|";
                    txt.append(linha);
                    txt.append(rn);
                }   
                
                String descricaoDebito = "";
                String descricaoCredito = "";
                
                if (!tipoMovimento.contains("CC")) {
                
                    ttPlanoConta ttP  = (ttPlanoConta)mapaPlano.get(contaDebitoOriginal);
                    if (ttP == null) {					
                        ttP  = new ttPlanoConta(); 
                        ttP.descricaoPlano = "";
    
                        JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO")
                        .param(codEmpresa)
                        .param(contaDebitoOriginal)
                        .queryUnique();
                        if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                            descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                            ttP.descricaoPlano = descricaoDebito;
                        }
                        ttP.contaContabil     = contaDebitoOriginal;
                        mapaPlano.put(contaDebitoOriginal,ttP);

                    }
                    descricaoDebito = ttP.descricaoPlano;

                    ttP  = (ttPlanoConta)mapaPlano.get(contaCreditoOriginal);
                    if (ttP == null) {					
                        ttP  = new ttPlanoConta(); 
                        ttP.descricaoPlano = "";
    
                        JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                        .fields("DESCRICAOPLANO")
                        .param(codEmpresa)
                        .param(contaCreditoOriginal)
                        .queryUnique();
                        if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                            descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                            ttP.descricaoPlano = descricaoCredito;
                        }
                        ttP.contaContabil     = contaCreditoOriginal;
                        mapaPlano.put(contaCreditoOriginal,ttP);
                    }
                    descricaoCredito = ttP.descricaoPlano;

                    ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                    ResumoTxt.append(rn);
                }
                
                if(!tipoMovimento.contains("PORT")) totalRegistros++;


            } //For arrayMov
            
            if (totalRegistros > 0) {

                // Gravacao do Arquivo TXT
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }

                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                    !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                    !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
     
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao || CALIMA ||
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoCALIMA(JSONObject jDadosLote, InoutLogger logger) throws Exception {

      //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
    // logger.logDebug("TESTE ENTROU DOMINIO");
    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento = "";
    String codEmpresa    = "";
    String notafiscal    = "";
    String tipoMovimento = "";
    String dataMovimento = "";
    String contaDebito   = "";
    String contaCredito  = "";
    String valorLiquidacao = "";
    String valorDocumento = "";
    String documento     = "";
    String nomeOrigem    = "";
    String centroCusto   = "";
    String valorJuros    = "";
    String valorDesconto = "";
    String valorMulta    = "";
    String historico     = "";
    String naturezaContabil = "";
    String tipoLancamento = "";
    String nomeEmpresa   = "";
    String classificacao = "";
    String ERP           = "";                          //  <---<
    String complemento02 = "";
    HashMap mapaPlano   		= new HashMap();  

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

    // JSONArray toCloud		= new JSONArray();	//#20210126	
    // LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
    
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
        recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
        recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
        recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
        recAux.put("lote",				loteMovimento);
        recAux.put("codigoErp",			codEmpresa);
        
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");


        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String linha = " ";
        int indice   = 0;

        int contador = 0;
        String classifica = " ";
        int totalRegistros = 0;
        ResumoTxt = new StringBuilder();


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
            String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
            String emailCanal = props.get("EMAIL_CANAL");
            //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;

            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);
			
			txt.append("DATA DE LANCAMENTO;VALOR O LANCAMENTOS;CONTA DE DEBITO;CONTA DE CREDITO;NUMERO DO HISTORICO;HISTORICO VARIAVEL;CENTRO DE CUSTO DEBITO;CENTRO DE CUSTO CREDITO");
			txt.append(rn);
    
            for (int t=0; t<records.length(); t++) {
                
                

                JSONObject recMov = records.optJSONObject(t);
                
                if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
                    //////toCloud.put(createItemsToCloud(recMov, recAux));
                    // //toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
                }
                
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                complemento02  = recMov.optString("COMPLEMENTO02");
                classificacao   = classificacao.substring(0,16).trim();
                

                historico       = historico.replaceAll(" \\.","\\.");
                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}



                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;
                logger.logDebug("CENTRO CUSTO == "+centroCusto);
                
                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                // quando temos uma filial no contabil, o CNPJ que vai no cabecalho deve ser o da matriz
                // para isto funcionar, o analista tem que criar uma regra de filial no CRM
                // e colocar codigo filial = 12CNPJ:00000000000000 (sendo este cnpj o da matriz
                if (historico.contains("CNPJ:")) {
                    cnpjEmpresa = cutString(historico, "CNPJ:", " ");
                    historico   = historico.replaceAll("CNPJ:","").replaceAll(cnpjEmpresa, "");
                }

                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                        
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    // logger.logDebug("FILIAL -> "+codigoFilial);
                    historico       = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                String codigoCentroPort = "";
                if (historico.contains("CENTROPORT:")) {
                        codigoCentroPort = historico.substring(historico.indexOf("CENTROPORT:")+11).trim();
                    historico       = historico.substring(0,historico.indexOf("CENTROPORT:")).trim();
                }
				// logger.logDebug("HISTORICO == "+historico);
                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
					complemento02   = historico;
                }

                String itemDFC = "";
                if (historico.contains("ItemDFC:")) {
                    itemDFC    = historico.substring(historico.indexOf("ItemDFC:")+8).trim();
                    historico  = historico.substring(0,historico.indexOf("ItemDFC:")).trim();
                }
				
				String centroCustoCredito = "";
				String centroCustoDebito = "";
				if(tipoLancamento.equals("PAGAR")){
					centroCustoDebito = centroCusto;
				}
				if(tipoLancamento.equals("RECEBER")){
					centroCustoCredito = centroCusto;
				}

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                valorLiquidacao   = valorLiquidacao.replaceAll("\\.", ",");
                valorJuros        = valorJuros.replaceAll("\\.", ",");
                valorMulta        = valorMulta.replaceAll("\\.", ",");
                valorDesconto     = valorDesconto.replaceAll("\\.", ",");

                String valorFinal = valorLiquidacao;
                String sContador  = String.valueOf(contador);
                // N?o exporta valores zerados
                double valorDouble = DecimalUtil.toDecimal(valorFinal);
                
                // logger.logDebug("Dominio Classificacao -> "+classificacao+" - classifica -> "+classifica);
                // logger.logDebug("Dominio loteMovimento-> "+loteMovimento);
                
                if (!classifica.equals(classificacao)) {
                    contador++;
                    sContador = String.valueOf(contador);
                }

                classifica = classificacao;


                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
                
                    if (historico.toUpperCase().contains("INVERTECONTA")) {
                        String contaInvertida = contaDebito;
                        contaDebito = contaCredito;
                        contaCredito = contaInvertida;
                        if (naturezaContabil.equals("D")) naturezaContabil = "TC";
                        if (naturezaContabil.equals("C")) naturezaContabil = "TD";
                        naturezaContabil = naturezaContabil.replaceAll("T","");
                    }
                }
                historico = historico.toUpperCase().replaceAll("INVERTECONTA","").trim();

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                if (contaDebito.contains("E"))  contaDebito = contaDebito.substring(0, contaDebito.indexOf("E"));
                if (contaCredito.contains("E")) contaCredito = contaCredito.substring(0, contaCredito.indexOf("E"));

                txt.append(dataMovimento);
                txt.append(";");
				txt.append(valorFinal);
                txt.append(";");
				txt.append(contaDebito);
                txt.append(";");
				txt.append(contaCredito);
                txt.append(";");
				txt.append(codigoHistorico);
                txt.append(";");
				txt.append(complemento02);
                txt.append(";");
				txt.append(centroCustoDebito);
                txt.append(";");
				txt.append(centroCustoCredito);
                txt.append(";");
				
                txt.append(rn);
                
                String descricaoDebito = "";
                String descricaoCredito = "";
                
				ttPlanoConta ttP  = (ttPlanoConta)mapaPlano.get(contaDebitoOriginal);
				if (ttP == null) {					
					ttP  = new ttPlanoConta(); 
					ttP.descricaoPlano = "";

					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO")
					.param(codEmpresa)
					.param(contaDebitoOriginal)
					.queryUnique();
					if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
						descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.descricaoPlano = descricaoDebito;
					}
					ttP.contaContabil     = contaDebitoOriginal;
					mapaPlano.put(contaDebitoOriginal,ttP);

				}
				descricaoDebito = ttP.descricaoPlano;

				ttP  = (ttPlanoConta)mapaPlano.get(contaCreditoOriginal);
				if (ttP == null) {					
					ttP  = new ttPlanoConta(); 
					ttP.descricaoPlano = "";

					JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO")
					.param(codEmpresa)
					.param(contaCreditoOriginal)
					.queryUnique();
					if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
						descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
						ttP.descricaoPlano = descricaoCredito;
					}
					ttP.contaContabil     = contaCreditoOriginal;
					mapaPlano.put(contaCreditoOriginal,ttP);
				}
				descricaoCredito = ttP.descricaoPlano;

				ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
				ResumoTxt.append(rn);
                
                if(!tipoMovimento.contains("PORT")) totalRegistros++;


            } //For arrayMov
            
            if (totalRegistros > 0) {

                // Gravacao do Arquivo CSV
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".csv";
                }

                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                    !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                    !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
     
}


////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao || DPComp ||
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoDPComp(JSONObject jDadosLote, InoutLogger logger) throws Exception {

      //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
    // logger.logDebug("TESTE ENTROU DPComp");
    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento = "";
    String codEmpresa    = "";
    String notafiscal    = "";
    String tipoMovimento = "";
    String dataMovimento = "";
    String contaDebito   = "";
    String contaCredito  = "";
    String valorLiquidacao = "";
    String valorDocumento = "";
    String documento     = "";
    String nomeOrigem    = "";
    String centroCusto   = "";
    String valorJuros    = "";
    String valorDesconto = "";
    String valorMulta    = "";
    String historico     = "";
    String naturezaContabil = "";
    String tipoLancamento = "";
    String nomeEmpresa   = "";
    String classificacao = "";
    String ERP           = "";                          //  <---<
    String complemento02 = "";
    HashMap mapaPlano   		= new HashMap();  

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

    // JSONArray toCloud		= new JSONArray();	//#20210126	
    // LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
    
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
        recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
        recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
        recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
        recAux.put("lote",				loteMovimento);
        recAux.put("codigoErp",			codEmpresa);
        
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");


        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String linha = " ";
        int indice   = 0;

        int contador = 0;
        String classifica = " ";
        int totalRegistros = 0;
        ResumoTxt = new StringBuilder();


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
            String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
            String emailCanal = props.get("EMAIL_CANAL");
            //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;

            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);
			
			// txt.append("CONTA DE DEBITO|CONTA DE CREDITO|VALOR O LANCAMENTOS|NUMERO DO HISTORICO|HISTORICO VARIAVEL|DATA MOVIMENTO");
			// txt.append(rn);
    
            for (int t=0; t<records.length(); t++) {
                
                

                JSONObject recMov = records.optJSONObject(t);
                
                if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
                    //////toCloud.put(createItemsToCloud(recMov, recAux));
                    // //toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
                }
                
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                complemento02  = recMov.optString("COMPLEMENTO02");
                classificacao   = classificacao.substring(0,16).trim();
                

                historico       = historico.replaceAll(" \\.","\\.");
                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}



                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;
                //logger.logDebug("CENTRO CUSTO == "+centroCusto);
                
                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                // quando temos uma filial no contabil, o CNPJ que vai no cabecalho deve ser o da matriz
                // para isto funcionar, o analista tem que criar uma regra de filial no CRM
                // e colocar codigo filial = 12CNPJ:00000000000000 (sendo este cnpj o da matriz
                if (historico.contains("CNPJ:")) {
                    cnpjEmpresa = cutString(historico, "CNPJ:", " ");
                    historico   = historico.replaceAll("CNPJ:","").replaceAll(cnpjEmpresa, "");
                }

                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                        
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    // logger.logDebug("FILIAL -> "+codigoFilial);
                    historico       = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                String codigoCentroPort = "";
                if (historico.contains("CENTROPORT:")) {
                        codigoCentroPort = historico.substring(historico.indexOf("CENTROPORT:")+11).trim();
                    historico       = historico.substring(0,historico.indexOf("CENTROPORT:")).trim();
                }
				// logger.logDebug("HISTORICO == "+historico);
                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
					complemento02   = historico;
                }

                String itemDFC = "";
                if (historico.contains("ItemDFC:")) {
                    itemDFC    = historico.substring(historico.indexOf("ItemDFC:")+8).trim();
                    historico  = historico.substring(0,historico.indexOf("ItemDFC:")).trim();
                }
				
				String centroCustoCredito = "";
				String centroCustoDebito = "";
				if(tipoLancamento.equals("PAGAR")){
					centroCustoDebito = centroCusto;
				}
				if(tipoLancamento.equals("RECEBER")){
					centroCustoCredito = centroCusto;
				}

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                valorLiquidacao   = valorLiquidacao.replaceAll("\\.", ",");
                valorJuros        = valorJuros.replaceAll("\\.", ",");
                valorMulta        = valorMulta.replaceAll("\\.", ",");
                valorDesconto     = valorDesconto.replaceAll("\\.", ",");

                String valorFinal = valorLiquidacao;
                String sContador  = String.valueOf(contador);
                // N?o exporta valores zerados
                double valorDouble = DecimalUtil.toDecimal(valorFinal);
                
                // logger.logDebug("Dominio Classificacao -> "+classificacao+" - classifica -> "+classifica);
                // logger.logDebug("Dominio loteMovimento-> "+loteMovimento);
                
                if (!classifica.equals(classificacao)) {
                    contador++;
                    sContador = String.valueOf(contador);
                }

                classifica = classificacao;


                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
                
                    if (historico.toUpperCase().contains("INVERTECONTA")) {
                        String contaInvertida = contaDebito;
                        contaDebito = contaCredito;
                        contaCredito = contaInvertida;
                        if (naturezaContabil.equals("D")) naturezaContabil = "TC";
                        if (naturezaContabil.equals("C")) naturezaContabil = "TD";
                        naturezaContabil = naturezaContabil.replaceAll("T","");
                    }
                }
                historico = historico.toUpperCase().replaceAll("INVERTECONTA","").trim();

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                if (contaDebito.contains("E"))  contaDebito = contaDebito.substring(0, contaDebito.indexOf("E"));
                if (contaCredito.contains("E")) contaCredito = contaCredito.substring(0, contaCredito.indexOf("E"));

                txt.append(contaDebito);
                txt.append(";");
				txt.append(contaCredito);
                txt.append(";");
				txt.append(valorFinal);
                txt.append(";");
				txt.append(codigoHistorico);
                txt.append(";");
				txt.append(historico);
                txt.append(";");
				txt.append(dataMovimento);
                txt.append(";");
				// txt.append(centroCustoDebito);
                // txt.append(";");
				// txt.append(centroCustoCredito);
                // txt.append(";");
				
                txt.append(rn);
                
                String descricaoDebito = "";
                String descricaoCredito = "";
                
				ttPlanoConta ttP  = (ttPlanoConta)mapaPlano.get(contaDebitoOriginal);
				if (ttP == null) {					
					ttP  = new ttPlanoConta(); 
					ttP.descricaoPlano = "";

					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO")
					.param(codEmpresa)
					.param(contaDebitoOriginal)
					.queryUnique();
					if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
						descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.descricaoPlano = descricaoDebito;
					}
					ttP.contaContabil     = contaDebitoOriginal;
					mapaPlano.put(contaDebitoOriginal,ttP);

				}
				descricaoDebito = ttP.descricaoPlano;

				ttP  = (ttPlanoConta)mapaPlano.get(contaCreditoOriginal);
				if (ttP == null) {					
					ttP  = new ttPlanoConta(); 
					ttP.descricaoPlano = "";

					JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO")
					.param(codEmpresa)
					.param(contaCreditoOriginal)
					.queryUnique();
					if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
						descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
						ttP.descricaoPlano = descricaoCredito;
					}
					ttP.contaContabil     = contaCreditoOriginal;
					mapaPlano.put(contaCreditoOriginal,ttP);
				}
				descricaoCredito = ttP.descricaoPlano;

				ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
				ResumoTxt.append(rn);
                
                if(!tipoMovimento.contains("PORT")) totalRegistros++;


            } //For arrayMov
            
            if (totalRegistros > 0) {

                // Gravacao do Arquivo CSV
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA") + "_" + loteMovimento + ".xlsx";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA") + "_" + loteMovimento + ".xlsx";
                }

                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                    !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                    !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
     
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao || MEGAPROG ||
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoMEGAPROG(JSONObject jDadosLote, InoutLogger logger) throws Exception {

      //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
    // logger.logDebug("TESTE ENTROU DPComp");
    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento = "";
    String codEmpresa    = "";
    String notafiscal    = "";
    String tipoMovimento = "";
    String dataMovimento = "";
    String contaDebito   = "";
    String contaCredito  = "";
    String valorLiquidacao = "";
    String valorDocumento = "";
    String documento     = "";
    String nomeOrigem    = "";
    String centroCusto   = "";
    String valorJuros    = "";
    String valorDesconto = "";
    String valorMulta    = "";
    String historico     = "";
    String naturezaContabil = "";
    String tipoLancamento = "";
    String nomeEmpresa   = "";
    String classificacao = "";
    String ERP           = "";                          //  <---<
    String complemento02 = "";
	String numeroLote    = "";
	String mesAno        = ""; 
    HashMap mapaPlano    = new HashMap();  

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

    // JSONArray toCloud		= new JSONArray();	//#20210126	
    // LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
    
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
		if(jDadosLote.has("NUMLOTE")) numeroLote    = jDadosLote.optString("NUMLOTE");
		// logger.logInfo("LOTE MEGAPROG === "+loteMovimento);
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();	//#20210126
        recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
        recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
        recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
        recAux.put("lote",				loteMovimento);
        recAux.put("codigoErp",			codEmpresa);
        
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");
		// logger.logInfo("CNPJ EMP == "+props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));


        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String linha = " ";
        int indice   = 0;

        int contador = 0;
        String classifica = " ";
        int totalRegistros = 0;
        ResumoTxt = new StringBuilder();


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
            String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
            String emailCanal = props.get("EMAIL_CANAL");
            //if (!emailCanal.equals("")) emailResponsavel = emailResponsavel + "," + emailCanal;

            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);
			
			//txt.append("CONTA DE DEBITO|CONTA DE CREDITO|VALOR O LANCAMENTOS|NUMERO DO HISTORICO|HISTORICO VARIAVEL|DATA MOVIMENTO");
			//txt.append(rn);
    
            for (int t=0; t<records.length(); t++) {
                
                

                JSONObject recMov = records.optJSONObject(t);
                
                if (!loteMovimento.contains("OTTIMIZZA") || loteMovimento.contains("OTTIMIZZAAUTOMACAO")) {	//#20210126
                    //////toCloud.put(createItemsToCloud(recMov, recAux));
                    // //toCloud = sendToCloud(toCloud, recAux, t, apiWeb, logger);
                }
                
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                complemento02  = recMov.optString("COMPLEMENTO02");
                classificacao   = classificacao.substring(0,16).trim();
                

                historico       = historico.replaceAll(" \\.","\\.");
                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}



                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;
                //logger.logDebug("CENTRO CUSTO == "+centroCusto);
                
                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                // quando temos uma filial no contabil, o CNPJ que vai no cabecalho deve ser o da matriz
                // para isto funcionar, o analista tem que criar uma regra de filial no CRM
                // e colocar codigo filial = 12CNPJ:00000000000000 (sendo este cnpj o da matriz
                if (historico.contains("CNPJ:")) {
                    cnpjEmpresa = cutString(historico, "CNPJ:", " ");
                    historico   = historico.replaceAll("CNPJ:","").replaceAll(cnpjEmpresa, "");
                }

                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                        
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    // logger.logDebug("FILIAL -> "+codigoFilial);
                    historico       = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                String codigoCentroPort = "";
                if (historico.contains("CENTROPORT:")) {
                        codigoCentroPort = historico.substring(historico.indexOf("CENTROPORT:")+11).trim();
                    historico       = historico.substring(0,historico.indexOf("CENTROPORT:")).trim();
                }
				// logger.logDebug("HISTORICO == "+historico);
                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
					complemento02   = historico;
                }

                String itemDFC = "";
                if (historico.contains("ItemDFC:")) {
                    itemDFC    = historico.substring(historico.indexOf("ItemDFC:")+8).trim();
                    historico  = historico.substring(0,historico.indexOf("ItemDFC:")).trim();
                }
				
				String centroCustoCredito = "";
				String centroCustoDebito = "";
				if(tipoLancamento.equals("PAGAR")){
					centroCustoDebito = centroCusto;
				}
				if(tipoLancamento.equals("RECEBER")){
					centroCustoCredito = centroCusto;
				}

                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();

                valorLiquidacao   = valorLiquidacao.replaceAll("\\.", ",");
                valorJuros        = valorJuros.replaceAll("\\.", ",");
                valorMulta        = valorMulta.replaceAll("\\.", ",");
                valorDesconto     = valorDesconto.replaceAll("\\.", ",");

                String valorFinal = valorLiquidacao;
                String sContador  = String.valueOf(contador);
                // N?o exporta valores zerados
                double valorDouble = DecimalUtil.toDecimal(valorFinal);
                
                // logger.logDebug("Dominio Classificacao -> "+classificacao+" - classifica -> "+classifica);
                // logger.logDebug("Dominio loteMovimento-> "+loteMovimento);
                
                if (!classifica.equals(classificacao)) {
                    contador++;
                    sContador = String.valueOf(contador);
                }

                classifica = classificacao;


                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
                
                    if (historico.toUpperCase().contains("INVERTECONTA")) {
                        String contaInvertida = contaDebito;
                        contaDebito = contaCredito;
                        contaCredito = contaInvertida;
                        if (naturezaContabil.equals("D")) naturezaContabil = "TC";
                        if (naturezaContabil.equals("C")) naturezaContabil = "TD";
                        naturezaContabil = naturezaContabil.replaceAll("T","");
                    }
                }
                historico = historico.toUpperCase().replaceAll("INVERTECONTA","").trim();

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                if (contaDebito.contains("E"))  contaDebito = contaDebito.substring(0, contaDebito.indexOf("E"));
                if (contaCredito.contains("E")) contaCredito = contaCredito.substring(0, contaCredito.indexOf("E"));
				
				String diaAuxiliar = cutString(dataMovimento, 0, "/");
				mesAno = cutString(dataMovimento, "/").replaceAll("/", "");

				int numeroLoteInt = Integer.parseInt(numeroLote);
                if(naturezaContabil.equals("C") && numeroLoteInt < 50){
					numeroLoteInt = numeroLoteInt + 50;
				}
				numeroLote = String.valueOf(numeroLoteInt);

                txt.append(StringUtil.leftPad(numeroLote, 3, "0"));
				txt.append(StringUtil.leftPad(diaAuxiliar, 2, "0"));
				txt.append(StringUtil.leftPad(contaDebito, 6, "0"));
				txt.append(StringUtil.leftPad(contaCredito, 6, "0"));
				txt.append(StringUtil.leftPad(valorFinal.replaceAll(",", "").replaceAll("\\.", ""), 11, "0"));
				txt.append(StringUtil.rightPad(historico, 70, " "));
				txt.append(StringUtil.rightPad("*", 1, " "));
				
                txt.append(rn);
                
                String descricaoDebito = "";
                String descricaoCredito = "";
                
				ttPlanoConta ttP  = (ttPlanoConta)mapaPlano.get(contaDebitoOriginal);
				if (ttP == null) {					
					ttP  = new ttPlanoConta(); 
					ttP.descricaoPlano = "";

					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO")
					.param(codEmpresa)
					.param(contaDebitoOriginal)
					.queryUnique();
					if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
						descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.descricaoPlano = descricaoDebito;
					}
					ttP.contaContabil     = contaDebitoOriginal;
					mapaPlano.put(contaDebitoOriginal,ttP);

				}
				descricaoDebito = ttP.descricaoPlano;

				ttP  = (ttPlanoConta)mapaPlano.get(contaCreditoOriginal);
				if (ttP == null) {					
					ttP  = new ttPlanoConta(); 
					ttP.descricaoPlano = "";

					JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO")
					.param(codEmpresa)
					.param(contaCreditoOriginal)
					.queryUnique();
					if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
						descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
						ttP.descricaoPlano = descricaoCredito;
					}
					ttP.contaContabil     = contaCreditoOriginal;
					mapaPlano.put(contaCreditoOriginal,ttP);
				}
				descricaoCredito = ttP.descricaoPlano;

				ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
				ResumoTxt.append(rn);
                
                if(!tipoMovimento.contains("PORT")) totalRegistros++;


            } //For arrayMov
            
            if (totalRegistros > 0) {

                // Gravacao do Arquivo TXT
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA")+ "_" + "ICBE"+mesAno+"_" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA")+ "_" + "ICBE"+mesAno+"_" + loteMovimento + ".txt";
                }

                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                    !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                    !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
     
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@PROSIS).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoPROSIS(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
    String ERP               = ""; 

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	int contador = 1;

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		
 		
        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //

                JSONObject recMov = records.optJSONObject(t);
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
				String cpfCnpj  = recMov.optString("COMPLEMENTO02").replaceAll("[\\.|\\/|\\-]","");

                //contaDebito	= contaDebito.replaceAll("[^0-9]*", "");
                //contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				separador		= "";
				
				String codigoParticipante = "";
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
				if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<
				
				String classificacaoDebito  = "";
				String classificacaoCredito = "";
				
				if (contaDebito.contains("_")){
					classificacaoDebito = cutString(contaDebito, "_");
					contaDebito  = cutString(contaDebito, 0, "_");
				}
				if (contaCredito.contains("_")){
					classificacaoCredito = cutString(contaCredito, "_");
					contaCredito = cutString(contaCredito, 0, "_");
				}
				
				
				
				//ao invez de 360 seria o limite 369
				
                String descricaoDebito  = "";
                String descricaoCredito = "";
				
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO, CONTAANALITICA")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
				
				if (descricaoPlano != null) {
					if(descricaoPlano.has("DESCRICAOPLANO")) descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
					if(descricaoPlano.has("CONTAANALITICA") && classificacaoDebito.equals("")) classificacaoDebito = descricaoPlano.optString("CONTAANALITICA");
				}

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO, CONTAANALITICA")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
				if (descricaoPlano2 != null) {
					if(descricaoPlano2.has("DESCRICAOPLANO")) descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
					if(descricaoPlano2.has("CONTAANALITICA")  && classificacaoCredito.equals("")) classificacaoCredito = descricaoPlano2.optString("CONTAANALITICA");
				}
				
				
                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                String participante = "";
				
                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replaceAll("\\.",",").trim();
				
				
                String codigoParticipanteCP = "";
                String codigoParticipanteCR = "";
                if (contaDebito.toUpperCase().contains("P")) {
                    contaDebito = contaDebito.toUpperCase();
                    String [] contaArray = contaDebito.split("P");

                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaDebito          = contaArray[0];
                        }
                    }

                }


                if (contaCredito.toUpperCase().contains("P")) {
                    contaCredito = contaCredito.toUpperCase();
                    String [] contaArray = contaCredito.split("P");
                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCR = contaArray[1];
                            contaCredito         = contaArray[0];
                        }
                    }

                }

                if(contaDebito.toUpperCase().contains("P") ){
                    codigoParticipanteCP = contaDebito.replaceAll("P","").replaceAll("p","").trim();
                    contaDebito  = codigoParticipante;
                }
                if(contaCredito.toUpperCase().contains("P") ){
                    codigoParticipanteCR = contaCredito.replaceAll("P","").replaceAll("p","").trim();
                    contaCredito  = codigoParticipante;
                }

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "dd/MM/yyyy");

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 99) historico = cutString(historico, 0, 99);
                
				if(tipoMovimento.contains("CC")) continue;
				
				if(codigoParticipanteCP.length() < 6 && codigoParticipanteCP.length() > 0) codigoParticipanteCP = StringUtil.leftPad(codigoParticipanteCP, 6, "0");
				if(codigoParticipanteCR.length() < 6 && codigoParticipanteCR.length() > 0) codigoParticipanteCR = StringUtil.leftPad(codigoParticipanteCR, 6, "0");
				
				
			
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////
				
				txt.append(dataMovimento);
                txt.append("\t");
				txt.append(contaDebito);
                txt.append("\t");
				txt.append(contaCredito);
                txt.append("\t");
				txt.append(valorFinal);
                txt.append("\t");
				txt.append(codigoHistorico);
                txt.append("\t");
				txt.append(historico);
                txt.append("\t");
				// txt.append(classificacaoDebito);
                // txt.append("|");
				// txt.append(classificacaoCredito);
                // txt.append("|");
				txt.append(rn);
				

                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".xls";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".xls";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}



////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao (@CONTABIT).  //
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoCONTABIT(JSONObject jDadosLote, InoutLogger logger) throws Exception {
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
    String classificacao     = "";
    String ERP               = ""; 

    String valorFinal        = "";
    String separador         = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	int contador = 0;
	String classificacaoAnterior = "";

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// // 		
        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //

                JSONObject recMov = records.optJSONObject(t);
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
				String cpfCnpj  = recMov.optString("COMPLEMENTO02").replaceAll("[\\.|\\/|\\-]","");

                //contaDebito	= contaDebito.replaceAll("[^0-9]*", "");
                //contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				classificacao   = recMov.optString("CLASSIFICACAO");
				classificacao   = cutString(classificacao, 0, 16);
				separador		= ",";
				if (nomeContabilidade.toUpperCase().contains("ATHENACONTABILIDADE")){
					separador = "\t";
				}
				
				String codigoParticipante = "";
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
				if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
                String codigoFilial = "";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

                if (historico.contains("Filial:")) {
                    codEmpresa   = historico.substring(historico.indexOf("Filial:")+7).trim();
                    if(codEmpresa.length() > 2) codEmpresa = codEmpresa.substring(0,2).trim();
                    historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<
				
				String classificacaoDebito  = "";
				String classificacaoCredito = "";
				
				if (contaDebito.contains("_")){
					classificacaoDebito = cutString(contaDebito, "_");
					contaDebito  = cutString(contaDebito, 0, "_");
				}
				if (contaCredito.contains("_")){
					classificacaoCredito = cutString(contaCredito, "_");
					contaCredito = cutString(contaCredito, 0, "_");
				}
				
				
				
				//ao invez de 360 seria o limite 369
				
                String descricaoDebito  = "";
                String descricaoCredito = "";
				
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO, CONTAANALITICA")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
				
				if (descricaoPlano != null) {
					if(descricaoPlano.has("DESCRICAOPLANO")) descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
					if(descricaoPlano.has("CONTAANALITICA") && classificacaoDebito.equals("")) classificacaoDebito = descricaoPlano.optString("CONTAANALITICA");
				}

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO, CONTAANALITICA FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO, CONTAANALITICA")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
				if (descricaoPlano2 != null) {
					if(descricaoPlano2.has("DESCRICAOPLANO")) descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
					if(descricaoPlano2.has("CONTAANALITICA")  && classificacaoCredito.equals("")) classificacaoCredito = descricaoPlano2.optString("CONTAANALITICA");
				}
				
				
                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                String participante = "";
				
                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				// valorFinal = valorFinal.replaceAll("\\.",",").trim();
				
				
                String codigoParticipanteCP = "";
                String codigoParticipanteCR = "";
                if (contaDebito.toUpperCase().contains("P")) {
                    contaDebito = contaDebito.toUpperCase();
                    String [] contaArray = contaDebito.split("P");

                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaDebito          = contaArray[0];
                        }
                    }

                }


                if (contaCredito.toUpperCase().contains("P")) {
                    contaCredito = contaCredito.toUpperCase();
                    String [] contaArray = contaCredito.split("P");
                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCR = contaArray[1];
                            contaCredito         = contaArray[0];
                        }
                    }

                }

                if(contaDebito.toUpperCase().contains("P") ){
                    codigoParticipanteCP = contaDebito.replaceAll("P","").replaceAll("p","").trim();
                    contaDebito  = codigoParticipante;
                }
                if(contaCredito.toUpperCase().contains("P") ){
                    codigoParticipanteCR = contaCredito.replaceAll("P","").replaceAll("p","").trim();
                    contaCredito  = codigoParticipante;
                }

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "dd/MM/yyyy");

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 99) historico = cutString(historico, 0, 99);
                
				if(tipoMovimento.contains("CC")) continue;
				
				if(codigoParticipanteCP.length() < 6 && codigoParticipanteCP.length() > 0) codigoParticipanteCP = StringUtil.leftPad(codigoParticipanteCP, 6, "0");
				if(codigoParticipanteCR.length() < 6 && codigoParticipanteCR.length() > 0) codigoParticipanteCR = StringUtil.leftPad(codigoParticipanteCR, 6, "0");
				
				
				if (!classificacao.equals(classificacaoAnterior)) {
					contador ++;
				}
				classificacaoAnterior = classificacao;
				
				String contLinhaLancamento = Integer.toString(contador);
			
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////
				
				
				// txt.append(contLinhaLancamento);
				// txt.append("\t");
				txt.append(dataMovimento);
                txt.append(separador);
				txt.append(contaDebito);
                txt.append(separador);
				txt.append(contaCredito);
                txt.append(separador);
				txt.append(valorFinal);
                txt.append(separador);
				txt.append(codigoHistorico);
                txt.append(separador);
				txt.append(historico);
                txt.append(separador);
				// txt.append(documento);
				// txt.append("\t");
				// txt.append(classificacaoDebito);
                // txt.append("|");
				// txt.append(classificacaoCredito);
                // txt.append("|");
				txt.append(rn);
				

                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".csv";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

public void GeraArquivoTOTVS2(JSONObject jDadosLote, InoutLogger logger) throws Exception {
		
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
	String classifica		 = "";
	String contaFinal		 = "";
    String ERP               = "";

    String valorFinal        = "";
    String separador         = "\t";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	int contador = 0;

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");

        txt.append("DATA" + separador + "CONTA" + separador + "CENTRO DE CUSTO" + separador + "SubConta" + separador + "CodHistorico" + separador + "HISTORICO" + separador + "ValorDebito" 
                  + separador + "ValorCredito" + separador + "CLPrevidencia" + separador + "CodPatrocinadora" + separador + "AtividadeProjeto" + separador + "NumDocumento" + separador + "NumPlanilha");
        txt.append(rn);
        
        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //
                JSONObject recMov = records.optJSONObject(t);

				String classificacao 	= recMov.optString("CLASSIFICACAO");;
                tipoMovimento   		= recMov.optString("TIPOMOVIMENTO");
                dataMovimento   		= recMov.optString("DATAMOVIMENTO");
                contaDebito     		= recMov.optString("CONTADEBITO");
                contaCredito    		= recMov.optString("CONTACREDITO");
				String cpfCnpj 			= recMov.optString("COMPLEMENTO02").replaceAll("[\\.|\\/|\\-]","");
				String complemento02    = recMov.optString("COMPLEMENTO02");
				String complemento03	= recMov.optString("COMPLEMENTO03");

                //contaDebito	= contaDebito.replaceAll("[^0-9]*", "");
                //contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");
				
				String codigoParticipante = "";
				
				classificacao   = classificacao.substring(0,16).trim();
				if (!classifica.equals(classificacao)) {
                    contador++;
                }
				
				classifica = classificacao;
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
				if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
                String codigoFilial = "1";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

 	 
                if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                     historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();

                //if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<

                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                String participante = "";
				
                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replace(".",",");
				
				
				if(tipoLancamento.contains("RECEBER")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "D";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "C";
					}
				}
				if(tipoLancamento.contains("PAGAR")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "C";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "D";
					}
				}
				
                String codigoParticipanteCP = "";
                if (contaDebito.toUpperCase().contains("P")) {
                    contaDebito = contaDebito.toUpperCase();
                    String [] contaArray = contaDebito.split("P");

                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaDebito          = contaArray[0];
                        }
                    }

                }


                if (contaCredito.toUpperCase().contains("P")) {
                    contaCredito = contaCredito.toUpperCase();
                    String [] contaArray = contaCredito.split("P");
                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaCredito         = contaArray[0];
                        }
                    }

                }

                if (naturezaContabil.equals("D")) {

					if(contaDebito.toUpperCase().contains("P") ){
						contaDebito = contaDebito.replaceAll("P","").replaceAll("p","").trim();
						codigoParticipanteCP  = codigoParticipante;
					}
					contaFinal = contaDebito;


				}
				if (naturezaContabil.equals("C")) {

					if(contaCredito.toUpperCase().contains("P") ){
						codigoParticipanteCP = codigoParticipante;
						contaCredito  = contaCredito.replaceAll("P","").replaceAll("p","").trim();
					}
					contaFinal = contaCredito;
                 }
				 
				//#2309-015090
				if(contaDebito.contains("ANULAR")) contaDebito  = contaDebito.replaceAll("ANULAR","");
                if(contaCredito.contains("ANULAR")) contaCredito = contaCredito.replaceAll("ANULAR","");

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "ddMMyyyy");
				if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 99) historico = cutString(historico, 0, 99);
				
				// logger.logDebug("DEME " + dataMovimento + " | " + valorFinal + " | " + contaFinal);
                
				if(tipoMovimento.contains("CC")) continue;
				
				if(codigoParticipanteCP.length() < 6 && codigoParticipanteCP.length() > 0) codigoParticipanteCP = StringUtil.leftPad(codigoParticipanteCP, 6, "0");
 				
				
				String numeroLancamento = String.valueOf(contador);
				String verificaPPagas   = StringUtil.leftPad(codigoParticipanteCP, 10, "0");
				
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //
                // //////// /////// /////// ///////
				
				txt.append(dataMovimento);		
				txt.append(separador);
				
				if(!contaDebito.equals("")) {
					txt.append(contaDebito);
				}
					
				else{
					txt.append(contaCredito);
				}
						
				
				txt.append(separador);
				txt.append(centroCusto);			
				txt.append(separador);
                //vazio
                txt.append(separador);
                //vazio
                txt.append(separador);
                txt.append(historico);
                txt.append(separador);
                
				if(!contaDebito.equals("")) {
					txt.append(valorFinal);
				}
			
                txt.append(separador);
                
				if(!contaCredito.equals("")) {
					txt.append(valorFinal);
				}
					
				txt.append(separador);
                //vazio
                txt.append(separador);
                //vazio
                txt.append(separador);
                //vazio
                txt.append(separador);
                //vazio
                txt.append(separador);
                //vazio
                txt.append(separador);
                
				
				txt.append(rn);
				
                String descricaoDebito  = "";
                String descricaoCredito = "";
				
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }



                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".xls";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".xls";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

public void GeraArquivoNBS(JSONObject jDadosLote, InoutLogger logger) throws Exception {
		
    // Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;

    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento     = "";
    String codEmpresa        = "";
    String tipoMovimento     = "";
    String dataMovimento     = "";
    String contaDebito       = "";
    String contaCredito      = "";
    String valorLiquidacao   = "";
    String documento         = "";
    String nomeOrigem        = "";
    String centroCusto       = "";
    String valorJuros        = "";
    String valorMulta        = "";
    String valorDesconto     = "";
    String historico         = "";
    String naturezaContabil  = "";
    String tipoLancamento    = "";
    String nomeEmpresa       = "";
	String classifica		 = "";
	String contaFinal		 = "";
    String ERP               = "";

    String valorFinal        = "";
    double valorDouble       = 0;

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();
	int contador = 1;
	boolean primeiraLinha = true;

    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }
        String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
        String emailCanal = props.get("EMAIL_CANAL");
        
        ResumoTxt = new StringBuilder();
        ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
        ResumoTxt.append(rn);


        // /////// /////// /////// //
        // MONTANDO ARQUIVO HEADER //
        // /////// /////// /////// //

		

        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            int totalRegistros = 0;

            for (int t=0; t<records.length(); t++) {


                // ////// ////// //
                // OBTENDO DADOS //
                // ////// ////// //
                JSONObject recMov = records.optJSONObject(t);

				String classificacao 	= recMov.optString("CLASSIFICACAO");;
                tipoMovimento   		= recMov.optString("TIPOMOVIMENTO");
                dataMovimento   		= recMov.optString("DATAMOVIMENTO");
                contaDebito     		= recMov.optString("CONTADEBITO");
                contaCredito    		= recMov.optString("CONTACREDITO");
				String cpfCnpj 			= recMov.optString("CPFCNPJ").replaceAll("[\\.|\\/|\\-]","");
				String complemento02    = recMov.optString("COMPLEMENTO02");
				String complemento03	= recMov.optString("COMPLEMENTO03");

                //contaDebito	= contaDebito.replaceAll("[^0-9]*", "");
                //contaCredito	= contaCredito.replaceAll("[^0-9]*", "");

                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                naturezaContabil= recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                historico       = historico.replaceAll(" \\.","\\.");

				
				String centroCustoDebito = "";
				String centroCustoCredito = "";
				String codigoParticipante = "";
				
				// logger.logInfo("HSST antes " + historico);
				
				if (historico.contains("CENTROCUSTODEBITO")) {
					centroCustoDebito = centroCusto;
                    historico    = historico.substring(0,historico.indexOf("CENTROCUSTODEBITO")).trim();
                }
				else if (historico.contains("CENTROCUSTOCREDITO")) {
					centroCustoCredito = centroCusto;
					historico    = historico.substring(0,historico.indexOf("CENTROCUSTOCREDITO")).trim();
                }
				else {
					centroCustoDebito = centroCusto;
					centroCustoCredito = centroCusto;
                }
				
				// logger.logInfo("HSST depois " + historico + " | " + centroCustoDebito + " | " + centroCustoCredito);
				
				if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, "NBS", nomeContabilidade);        // <-----<
				
				if (primeiraLinha) {
					primeiraLinha = false;
					txt.append("0"+StringUtil.leftPad(cpfCnpj, 14, " ")+"36"+dataMovimento+"0"+StringUtil.leftPad("", 118, " ")+StringUtil.leftPad(String.valueOf(contador), 6, "0")).append(rn);
					
				}
				
				classificacao   = classificacao.substring(0,16).trim();
				if (!classifica.equals(classificacao)) {
                    contador++;
                }
				
				classifica = classificacao;
				
                for (int xy=0;xy<20;xy++)
					historico = historico.replaceAll("  "," ");
                
				if (historico.contains("INVERTECONTA")) {
                    String contaInvertida = contaDebito;
                    contaDebito = contaCredito;
                    contaCredito = contaInvertida;
                    historico = historico.replaceAll("INVERTECONTA","").trim();
                }
				if (historico.contains("Participante:")) {
                    codigoParticipante   = historico.substring(historico.indexOf("Participante:")+13).trim();
                    historico            = historico.substring(0,historico.indexOf("Participante:")).trim();
                }
                String codigoFilial = "1";
                String codigoHistorico = "0";

                // ////// / /////////////// //
                // FILIAL e CODIGOHISTORICO //
                // ////// / /////////////// //

 	 
                if (historico.contains("Filial:")) {
                    codigoFilial   = historico.substring(historico.indexOf("Filial:")+7).trim();
                     historico    = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
                }
                if(codEmpresa.contains("CodigoHistorico")) codEmpresa = codEmpresa.substring(0,codEmpresa.indexOf("CodigoHistorico")).trim();
                if(codigoHistorico.contains("Filial")) codigoHistorico = codigoHistorico.substring(0,codigoHistorico.indexOf("Filial")).trim();


                valorDouble = Double.parseDouble(valorLiquidacao);
                if (tipoMovimento.equals("CTBJUR")) valorDouble = Double.parseDouble(valorJuros);
                if (tipoMovimento.equals("CTBDES")) valorDouble = Double.parseDouble(valorDesconto);
                if (tipoMovimento.equals("CTBMUL")) valorDouble = Double.parseDouble(valorMulta);

                String participante = "";
				
                try{valorFinal = String.format("%.2f", valorDouble);}
				catch(Exception c){valorFinal = "";}
				valorFinal = valorFinal.replace(".","");
				
				
				if(tipoLancamento.contains("RECEBER")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "D";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "C";
					}
				}
				if(tipoLancamento.contains("PAGAR")){
					if(tipoMovimento.equals("CTBDES")){ 
						naturezaContabil = "C";
					}
					if(tipoMovimento.equals("CTBJUR") || tipoMovimento.equals("CTBMUL")){
						naturezaContabil = "D";
					}
				}
				
                String codigoParticipanteCP = "";
                if (contaDebito.toUpperCase().contains("P")) {
                    contaDebito = contaDebito.toUpperCase();
                    String [] contaArray = contaDebito.split("P");

                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaDebito          = contaArray[0];
                        }
                    }

                }


                if (contaCredito.toUpperCase().contains("P")) {
                    contaCredito = contaCredito.toUpperCase();
                    String [] contaArray = contaCredito.split("P");
                    if (contaArray.length > 1) {
                        if (contaArray[1] != null && !contaArray[1].equals("") && contaArray[0] != null && !contaArray[0].equals("")) {
                            codigoParticipanteCP = contaArray[1];
                            contaCredito         = contaArray[0];
                        }
                    }

                }

                if (naturezaContabil.equals("D")) {

					if(contaDebito.toUpperCase().contains("P") ){
						contaDebito = contaDebito.replaceAll("P","").replaceAll("p","").trim();
						codigoParticipanteCP  = codigoParticipante;
					}
					contaFinal = contaDebito;


				}
				if (naturezaContabil.equals("C")) {

					if(contaCredito.toUpperCase().contains("P") ){
						codigoParticipanteCP = codigoParticipante;
						contaCredito  = contaCredito.replaceAll("P","").replaceAll("p","").trim();
					}
					contaFinal = contaCredito;
                 }
				 
				//#2309-015090
				if(contaDebito.contains("ANULAR")) contaDebito  = contaDebito.replaceAll("ANULAR","");
                if(contaCredito.contains("ANULAR")) contaCredito = contaCredito.replaceAll("ANULAR","");

                // /////////// //
                // TRATAMENTOS //
                // /////////// //
				
                if(documento.length() > 10) documento = documento.substring(documento.length()-10);

				dataMovimento = getCampoDate(dataMovimento, "", "ddMMyyyy");
				if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);

                historico = historico.replaceAll(",","\\.").replaceAll(";","").trim();
				if(historico.length() > 99) historico = cutString(historico, 0, 99);
				
				// logger.logDebug("DEME " + dataMovimento + " | " + valorFinal + " | " + contaFinal);
                
				if(tipoMovimento.contains("CC")) continue;
				
				if(codigoParticipanteCP.length() < 6 && codigoParticipanteCP.length() > 0) codigoParticipanteCP = StringUtil.leftPad(codigoParticipanteCP, 6, "0");
 				
				
				String numeroLancamento = String.valueOf(contador);
				String verificaPPagas   = StringUtil.leftPad(codigoParticipanteCP, 10, "0");
				
				// //////// /////// /////// ///////
                // MONTANDO ARQUIVO LANCAMENTOS  //20+5+19+5+15+15+5+74+5
                // //////// /////// /////// ///////21+5+19+5+15+15+5+5-150
				
				txt.append("1" + StringUtil.rightPad(contaDebito, 20, " ") + StringUtil.leftPad(centroCustoDebito, 5, "0") + StringUtil.rightPad(contaCredito, 20, " ") +
					StringUtil.leftPad(centroCustoCredito, 5, "0") + StringUtil.leftPad(valorFinal, 15, "0") + 
					StringUtil.leftPad(codigoHistorico, 5, "0")+StringUtil.rightPad(historico, 73, " ") + StringUtil.leftPad(String.valueOf(contador), 6, "0"))	
					.append(rn);
				
                String descricaoDebito  = "";
                String descricaoCredito = "";
				
                JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaDebito)
                .queryUnique();
                if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
                    descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
                }

                JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
                .fields("DESCRICAOPLANO")
                .param(codEmpresa)
                .param(contaCredito)
                .queryUnique();
                if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
                    descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
                }



                valorFinal = valorFinal.replaceAll("\\.","");
                //String valorExporta = valorFinal.substring(0,valorFinal.length()-2)+","+valorFinal.substring(valorFinal.length()-2);

                ResumoTxt.append(dataMovimento + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
                ResumoTxt.append(rn);


                if(!tipoMovimento.contains("PORT")) totalRegistros++;
            } //For arrayMov
			contador++;
			txt.append("9" + StringUtil.leftPad(String.valueOf(contador), 5, "0") + StringUtil.leftPad("", 138, " ") + StringUtil.leftPad(String.valueOf(contador), 6, "0"));
			
			ResumoTxt.append(rn);



			//////////////////////////////
            // Gravacao do Arquivo CSV  //
			//////////////////////////////
            if(totalRegistros > 0){

                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }
                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());


                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT") && !nomeEmpresa.toUpperCase().contains("OTTIMIZZAAUTOMACAO")) {
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }


                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, "RESUMO_LOTE_" + loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);


                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                   !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                   !loteMovimento.toUpperCase().contains("TESTE")) {

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {
                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }
                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//  Implementa o metodo RUN dos ENDPOINTs B da rota GeraArquivoParaImportacao || MODULOS ||
////////////////////////////////////////////////////////////////////////////////////////////////////
public void GeraArquivoMODULOS(JSONObject jDadosLote, InoutLogger logger) throws Exception {
		
   //Conectar na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = null;
    // logger.logDebug("TESTE ENTROU MODULOS");
    String rn = "\r\n";

    String nomeContabilidade = "";
    String loteMovimento = "";
    String codEmpresa    = "";
    String notafiscal    = "";
    String tipoMovimento = "";
    String dataMovimento = "";
    String contaDebito   = "";
    String contaCredito  = "";
    String valorLiquidacao = "";
    String valorDocumento = "";
    String documento     = "";
    String nomeOrigem    = "";
    String centroCusto   = "";
    String valorJuros    = "";
    String valorDesconto = "";
    String valorMulta    = "";
    String historico     = "";
    String naturezaContabil = "";
    String tipoLancamento = "";
    String nomeEmpresa   = "";
    String classificacao = "";
    String ERP           = "";                          //  <---<
    String complemento02 = "";
	String numeroLote    = "";
	String mesAno        = ""; 
    HashMap mapaPlano    = new HashMap();  

    Date dtAgora = new Date();

    StringBuilder txt = new StringBuilder();
    StringBuilder ResumoTxt = new StringBuilder();
    StringBuilder sForce = new StringBuilder();

    // JSONArray toCloud		= new JSONArray();	//#20210126	
    // LancamentosApi apiWeb	= new LancamentosApi(USER_OAUTH, PWD_OAUTH, SERVER_OAUTH, logger);	//#20210126 
    
    try {
        nomeContabilidade = jDadosLote.optString("NOMECONTABILIDADE");
        codEmpresa = jDadosLote.optString("CODEMPRESA");
        loteMovimento = jDadosLote.optString("LOTE");
		if(jDadosLote.has("NUMLOTE")) numeroLote    = jDadosLote.optString("NUMLOTE");
		// logger.logInfo("LOTE MEGAPROG === "+loteMovimento);
        nomeEmpresa = jDadosLote.optString("NOMEEMPRESA");

        // Carrega as propriedades
        SysProperties props = SysProperties.getInstance();
        props.load("contabil/" + nomeContabilidade + "/contabil.properties");

        JSONObject recAux = new JSONObject();
        recAux.put("cnpjContabilidade",	props.get("CONTABILIDADE_CNPJ"));
        recAux.put("cnpjEmpresa",		props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));
        recAux.put("erpContabil",		props.get("ERP_CONTABILIDADE"));
        recAux.put("lote",				loteMovimento);
        recAux.put("codigoErp",			codEmpresa);
        
        ERP = props.get("ERP_CONTABILIDADE");
        String versaoPlataforma = props.get("VERSAO_PLATAFORMA");
		// logger.logInfo("CNPJ EMP == "+props.get(nomeEmpresa.toUpperCase()+"_CNPJ_EMPRESA"));


        // Conectar na Base de Dados IO_CONTABIL.
        if (dbIOCont == null) {
            dbIOCont = connectIOContabil(props, logger);
        }

        String linha = " ";
        int indice   = 0;

        int contador = 0;
        String classifica = " ";
        int totalRegistros = 0;
        ResumoTxt = new StringBuilder();


        try {
            JSONArray records = findMovimentoPorEmpresa_Lote(dbIOCont, codEmpresa, loteMovimento);
            String cnpjEmpresa = props.get(nomeEmpresa.toUpperCase() + "_CNPJ_EMPRESA");
            String emailResponsavel = props.get(nomeEmpresa.toUpperCase() + "_EMAIL_RESPONSAVEL");
            String emailCanal = props.get("EMAIL_CANAL");
        
            ResumoTxt.append("Data;CONTA DEBITO;DESCRICAO NO PLANO DE CONTAS;CONTA CREDITO;DESCRICAO NO PLANO DE CONTAS;VALOR;CODIGO HISTORICO;HISTORICO;CLIENTE/FORNECEDOR");
            ResumoTxt.append(rn);
			
            for (int t=0; t<records.length(); t++) {
                
                

                JSONObject recMov = records.optJSONObject(t);
                
                
                tipoMovimento   = recMov.optString("TIPOMOVIMENTO");
                dataMovimento   = recMov.optString("DATAMOVIMENTO");
                contaDebito     = recMov.optString("CONTADEBITO");
                contaCredito    = recMov.optString("CONTACREDITO");
                valorLiquidacao = recMov.optString("VALORLIQUIDACAO");
                valorDocumento  = recMov.optString("VALORLIQUIDACAO");
                notafiscal      = recMov.optString("NOTAFISCAL");
                documento       = recMov.optString("DOCUMENTO");
                nomeOrigem      = recMov.optString("NOMEORIGEM");
                centroCusto     = recMov.optString("CENTROCUSTO");
                valorJuros      = recMov.optString("VALORJUROS");
                valorMulta      = recMov.optString("VALORMULTA");
                valorDesconto   = recMov.optString("VALORDESCONTO");
                historico       = recMov.optString("HISTORICO");
                classificacao   = recMov.optString("CLASSIFICACAO");
                naturezaContabil = recMov.optString("NATUREZACONTABIL");
                tipoLancamento  = recMov.optString("TIPOLANCAMENTO");
                complemento02  = recMov.optString("COMPLEMENTO02");
                classificacao   = classificacao.substring(0,16).trim();
                

                historico       = historico.replaceAll(" \\.","\\.");
                for (int xy=0;xy<20;xy++) {historico       = historico.replaceAll("  "," ");}



                String dataMovimentoOriginal = dataMovimento;
                String contaDebitoOriginal = contaDebito;
                String contaCreditoOriginal = contaCredito;
                
                if (!ERP.equals("")) dataMovimento = validaDataMovimento(dataMovimento, ERP, nomeContabilidade);        // <-----<
				

                // quando temos uma filial no contabil, o CNPJ que vai no cabecalho deve ser o da matriz
                // para isto funcionar, o analista tem que criar uma regra de filial no CRM
                // e colocar codigo filial = 12CNPJ:00000000000000 (sendo este cnpj o da matriz
                if (historico.contains("CNPJ:")) {
                    cnpjEmpresa = cutString(historico, "CNPJ:", " ");
                    historico   = historico.replaceAll("CNPJ:","").replaceAll(cnpjEmpresa, "");
                }

                String codigoFilial = "";
                if (historico.contains("Filial:")) {
                        
                    codigoFilial = historico.substring(historico.indexOf("Filial:")+7).trim();
                    historico       = historico.substring(0,historico.indexOf("Filial:")).trim();
                }
                String codigoCentroPort = "";
                if (historico.contains("CENTROPORT:")) {
                        codigoCentroPort = historico.substring(historico.indexOf("CENTROPORT:")+11).trim();
                    historico       = historico.substring(0,historico.indexOf("CENTROPORT:")).trim();
                }
				
                String codigoHistorico = "";
                if (historico.contains("CodigoHistorico:")) {
                    codigoHistorico = historico.substring(historico.indexOf("CodigoHistorico:")+16).trim();
                    historico       = historico.substring(0,historico.indexOf("CodigoHistorico:")).trim();
					complemento02   = historico;
                }

                String itemDFC = "";
                if (historico.contains("ItemDFC:")) {
                    itemDFC    = historico.substring(historico.indexOf("ItemDFC:")+8).trim();
                    historico  = historico.substring(0,historico.indexOf("ItemDFC:")).trim();
                }
				
                if (historico.endsWith("-")) historico = historico.substring(0,historico.lastIndexOf("-")).trim();
                if (historico.endsWith("|")) historico = historico.substring(0,historico.lastIndexOf("|")).trim();
                if(historico.startsWith("-") || historico.startsWith("|")) historico = historico.substring(1).trim();
                if(historico.contains("- -")) historico = historico.replaceAll("- -","-").trim();
                if(historico.contains("-.")) historico = historico.replaceAll("-\\.","\\.").trim();
                if(historico.contains("..")) historico = historico.replaceAll("\\.\\.","\\.").trim();
				

                valorLiquidacao   = valorLiquidacao.replaceAll("\\.", ",");
                valorJuros        = valorJuros.replaceAll("\\.", ",");
                valorMulta        = valorMulta.replaceAll("\\.", ",");
                valorDesconto     = valorDesconto.replaceAll("\\.", ",");

                String valorFinal = valorLiquidacao;
                String sContador  = String.valueOf(contador);
                // N?o exporta valores zerados
                double valorDouble = DecimalUtil.toDecimal(valorFinal);
				
                // logger.logDebug("Dominio Classificacao -> "+classificacao+" - classifica -> "+classifica);
                // logger.logDebug("Dominio loteMovimento-> "+loteMovimento);
                
                if (!classifica.equals(classificacao)) {
                    contador++;
                    sContador = String.valueOf(contador);
                }

				classifica = classificacao;


                if (contaDebito.contains("INVERTE") || contaCredito.contains("INVERTE")) {
                    String contaInvertida   = contaDebito.replaceAll("INVERTE","");
                    contaDebito             = contaCredito.replaceAll("INVERTE","");
                    contaCredito            = contaInvertida.replaceAll("INVERTE","");
                } else {
                
                    if (historico.toUpperCase().contains("INVERTECONTA")) {
                        String contaInvertida = contaDebito;
                        contaDebito = contaCredito;
                        contaCredito = contaInvertida;
                        if (naturezaContabil.equals("D")) naturezaContabil = "TC";
                        if (naturezaContabil.equals("C")) naturezaContabil = "TD";
                        naturezaContabil = naturezaContabil.replaceAll("T","");
                    }
                }
				 historico = historico.toUpperCase().replaceAll("INVERTECONTA","").trim();

                contaDebito  = contaDebito.replaceAll("\\.","");
                contaCredito = contaCredito.replaceAll("\\.","");
                if (contaDebito.contains("E"))  contaDebito = contaDebito.substring(0, contaDebito.indexOf("E"));
                if (contaCredito.contains("E")) contaCredito = contaCredito.substring(0, contaCredito.indexOf("E"));
				
				String diaAuxiliar = cutString(dataMovimento, 0, "/");
				mesAno = cutString(dataMovimento, "/").replaceAll("/", "");
				logger.logInfo("PAASSOUUU 9 "+numeroLote);
				// int numeroLoteInt = Integer.parseInt(numeroLote);
                // if(naturezaContabil.equals("C") && numeroLoteInt < 50){
					// numeroLoteInt = numeroLoteInt + 50;
				// }
				// numeroLote = String.valueOf(numeroLoteInt);

				txt.append(StringUtil.leftPad(diaAuxiliar, 2, "0"));
				txt.append(StringUtil.leftPad(codigoFilial, 4, " "));
				txt.append(StringUtil.leftPad(centroCusto, 10, " "));
				txt.append(StringUtil.leftPad(contaDebito, 5, " "));
				txt.append(StringUtil.leftPad(contaCredito, 5, " "));
				txt.append(StringUtil.leftPad(codigoHistorico, 4, " "));
				txt.append(StringUtil.leftPad(valorFinal.replaceAll(",", "").replaceAll("\\.", ""), 15, "0"));
				txt.append(StringUtil.rightPad(historico, 99, " "));
				
                txt.append(rn);
				
                
                String descricaoDebito = "";
                String descricaoCredito = "";
                
				ttPlanoConta ttP  = (ttPlanoConta)mapaPlano.get(contaDebitoOriginal);
				if (ttP == null) {					
					ttP  = new ttPlanoConta(); 
					ttP.descricaoPlano = "";

					JSONObject descricaoPlano = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO")
					.param(codEmpresa)
					.param(contaDebitoOriginal)
					.queryUnique();
					if (descricaoPlano != null && descricaoPlano.has("DESCRICAOPLANO")) {
						descricaoDebito = descricaoPlano.optString("DESCRICAOPLANO");
						ttP.descricaoPlano = descricaoDebito;
					}
					ttP.contaContabil     = contaDebitoOriginal;
					mapaPlano.put(contaDebitoOriginal,ttP);

				}
				descricaoDebito = ttP.descricaoPlano;

				ttP  = (ttPlanoConta)mapaPlano.get(contaCreditoOriginal);
				if (ttP == null) {					
					ttP  = new ttPlanoConta(); 
					ttP.descricaoPlano = "";

					JSONObject descricaoPlano2 = dbIOCont.sql("SELECT DESCRICAOPLANO FROM IO_PLANOCONTA WHERE CODEMPRESA = ? AND CONTACONTABIL = ?")
					.fields("DESCRICAOPLANO")
					.param(codEmpresa)
					.param(contaCreditoOriginal)
					.queryUnique();
					if (descricaoPlano2 != null && descricaoPlano2.has("DESCRICAOPLANO")) {
						descricaoCredito = descricaoPlano2.optString("DESCRICAOPLANO");
						ttP.descricaoPlano = descricaoCredito;
					}
					ttP.contaContabil     = contaCreditoOriginal;
					mapaPlano.put(contaCreditoOriginal,ttP);
				}
				descricaoCredito = ttP.descricaoPlano;

				ResumoTxt.append(dataMovimentoOriginal + ";" + contaDebito + ";" + descricaoDebito + ";" + contaCredito + ";" + descricaoCredito + ";" + valorFinal + ";" + codigoHistorico + ";" + historico + ";" + nomeOrigem);
				ResumoTxt.append(rn);
                
                if(!tipoMovimento.contains("PORT")) totalRegistros++;


            } //For arrayMov
            
            if (totalRegistros > 0) {

                // Gravacao do Arquivo TXT
                String dts = DateUtil.dateToString(dtAgora, "yyyyMMdd_HHmmss");
                String filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + loteMovimento + ".txt";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filename = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + loteMovimento + ".txt";
                }

                FileWriter writer = new FileWriter(filename);
                writer.writeNewFile(txt.toString());

                String filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                if(loteMovimento.toUpperCase().contains("OTTIMIZZA") && versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")){
                    filenameRESUMO = RouteEngine.INOUT_HOME + "/Contabil/" + nomeContabilidade + "/Arquivos/Processado/" + "RESUMO_LOTE_" + loteMovimento + ".csv";
                }
                FileWriter writerResumo = new FileWriter(filenameRESUMO);
                writerResumo.writeNewFile(ResumoTxt.toString());
                enviaEmailLoteLiberadoComAnexo(codEmpresa, nomeEmpresa, loteMovimento, nomeContabilidade, emailResponsavel, filenameRESUMO, logger);

                //*******************************************************
                //************* ATUALIZA SALESFORCE *********************
                //*******************************************************
                if(!loteMovimento.toUpperCase().contains("OTTIMIZZA") &&
                    !loteMovimento.toUpperCase().contains("ROTEIRO") &&
                    !loteMovimento.toUpperCase().contains("TESTE")){

                    sForce.append(nomeEmpresa+";"+totalRegistros+";"+loteMovimento+";"+nomeContabilidade);
                    sForce.append(rn);

                    String fileSforce  = RouteEngine.INOUT_HOME + "/Contabil/SForce/" + loteMovimento + ".txt";

                    FileWriter writerSforce = new FileWriter(fileSforce);
                    writerSforce.writeNewFile(sForce.toString());
                }
            }

            try {

                if (dbIOCont == null) {
                    dbIOCont = connectIOContabil(props, logger);
                }

                dbIOCont.delete("IO_MOVIMENTO")
                .where("LOTE=?")
                .param(loteMovimento)
                .execute();
            } catch (Exception eDel) {
                logger.logError("EndpointB: ERROR DELETE IO_MOVIMENTO", eDel);
            }

            txt = new StringBuilder();

        } catch (Exception eMov) {
            logger.logError("EndpointB: ERROR SELECT IO_MOVIMENTO", eMov);
        }
    } catch (Exception e) {
        logger.logError(e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception eedbIOCont) {}
        }
    }
     
}