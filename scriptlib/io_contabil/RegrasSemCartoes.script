


//////////////////////////////////////////////////////////////////////////////
// Grava arquivo DE/PARA de Fornecedores PENDENTES.
//////////////////////////////////////////////////////////////////////////////

public boolean gravaArquivoDeParaFornecedoresPendentes(DataBase dbIOCont,
 String codEmpresa,
 String lote,
 String filename,
 String filenameH,
 String geraTudoDePara,
 InoutLogger logger) throws Exception {

    boolean gerouArquivo = false;

	geraTudoDePara = "FALSE";

    JSONArray records   = findMovimentosPendentesPorEmpresaLote(dbIOCont, codEmpresa, lote);
    JSONArray recordsH  = findMovimentosPendentesHistorico(dbIOCont, codEmpresa, lote);
    JSONArray recordsOK = new JSONArray();


    logger.logDebug(">> Encontrou " + String.valueOf(records.length()) + " registros pendentes na tabela IO_MOVIMENTO");

    String nomeOrigemUnico   = "";
    String nomeOrigemAnterior = "";
    if (records.length() > 0) {

	  gerouArquivo = true;
      // Cria pasta de DePara se nao existir
      String deParaDirName = filename.substring(0, filename.lastIndexOf("/"));
      if (!FileUtil.fileExists(deParaDirName)) {
        FileUtil.mkDir(deParaDirName);
    }

        // Cria o arquivo de DE-PARA FORNECEDOR
    FileWriter writer = new FileWriter(filename);
    StringBuilder txt = new StringBuilder();
    txt.append("FORNECEDOR;");
    txt.append("CENTROCUSTO;");
    txt.append("CONTACLI;");
    txt.append("CONTAFOR;");
    txt.append("\r\n");

		// Percorre a lista de objetos
    for (int i=0; i<records.length(); i++) {
        JSONObject recFornecedortxt = records.optJSONObject(i);
        String txtNOMEORIGEM = recFornecedortxt.optString("NOMEORIGEM").trim();
        String txtCENTROCUSTO = recFornecedortxt.optString("CENTROCUSTO").trim();

        String txtCONTADEBITO  = "";
        String txtCONTACREDITO = "";

        if (lote.contains("_PAGAR"))  {
            txtCONTADEBITO = recFornecedortxt.optString("CONTADEBITO").trim();
        }
        if (lote.contains("_RECEBER")) {
            txtCONTACREDITO = recFornecedortxt.optString("CONTACREDITO").trim();
        }

        if (txtCONTADEBITO.equals("PENDENTE"))  txtCONTADEBITO = "";
        if (txtCONTACREDITO.equals("PENDENTE")) txtCONTACREDITO = "";

        if (txtCONTADEBITO.equals("LOTE_ENCERRADO"))  continue;
        if (txtCONTACREDITO.equals("LOTE_ENCERRADO")) continue;


        nomeOrigemUnico = txtNOMEORIGEM;
        if (nomeOrigemUnico.contains("##")) nomeOrigemUnico = nomeOrigemUnico.substring(0,nomeOrigemUnico.indexOf("##")).trim();

			// utilizar o IF abaixo e deseja que aparece o nome do fornecedor apenas uma vez no depara
			//if (nomeOrigemUnico.equals(nomeOrigemAnterior)) continue;
        nomeOrigemAnterior = nomeOrigemUnico;

        if (geraTudoDePara.equals("TRUE")) {
            txt.append(txtNOMEORIGEM);
            txt.append(";");
            txt.append(txtCENTROCUSTO);
            txt.append(";");
            txt.append(txtCONTACREDITO);
            txt.append(";");
            txt.append(txtCONTADEBITO);
            txt.append(";");
            txt.append("\r\n");
            logger.logDebug(">> Registro Pendente: " + recFornecedortxt.toString());
        }
        else {
            txt.append(txtNOMEORIGEM);
            txt.append(";");
            txt.append(txtCENTROCUSTO);
            txt.append(";");
            txt.append(";");
            txt.append(";");
            txt.append("\r\n");
            logger.logDebug(">> Registro Pendente: " + recFornecedortxt.toString());
        }
    }
        // Gravacao do Arquivo TXT
    writer.writeNewFile(txt.toString());
    logger.logDebug(">> Gravou arquivo de pendentes: " + filename);


        // Cria o arquivo de DE-PARA FORNECEDOR
    FileWriter writerH = new FileWriter(filenameH);
    StringBuilder txtH = new StringBuilder();
    txtH.append("EMPRESA;");
    txtH.append("CLIENTE/FORNECEDOR;");
    txtH.append("VALOR DOCUMENTO;");
    txtH.append("DOCUMENTO/NF;");
    txtH.append("COMPLEMENTO01;COMPLEMENTO02;COMPLEMENTO03");
    txtH.append("\r\n");


    for (int i=0; i<recordsH.length(); i++) {
        JSONObject recHitoricotxt = recordsH.optJSONObject(i);
        String txtCODEMPRESA        = recHitoricotxt.optString("CODEMPRESA").trim();
        String txtNOMEORIGEM        = recHitoricotxt.optString("NOMEORIGEM").trim();
        String txtVALORLIQUIDACAO   = recHitoricotxt.optString("VALORLIQUIDACAO").trim();
        String txtDOCUMENTO         = recHitoricotxt.optString("DOCUMENTO").trim();
        String txtHISTORICO         = recHitoricotxt.optString("HISTORICO").trim();
        txtHISTORICO = txtHISTORICO.substring(txtHISTORICO.indexOf(";")+1).trim();
        txtH.append(txtCODEMPRESA);
        txtH.append(";");
        txtH.append(txtNOMEORIGEM);
        txtH.append(";");
        txtH.append(txtVALORLIQUIDACAO);
        txtH.append(";");
        txtH.append(txtDOCUMENTO);
        txtH.append(";");
        txtH.append(txtHISTORICO);
        txtH.append("\r\n");
    }
        // Gravacao do Arquivo TXT
    writerH.writeNewFile(txtH.toString());
}




return gerouArquivo;
}

//////////////////////////////////////////////////////////////////////////////
// Grava arquivo DE/PARA de Fornecedores PENDENTES. --- VERSAO PORTAL
//////////////////////////////////////////////////////////////////////////////


public boolean gravaArquivoDeParaVersaoPortal(DataBase dbIOCont,
													   String nomeContabilidade,
                                                       String codEmpresa,
                                                       String lote,
                                                       String filename,
                                                       String filenameH,
                                                       String geraTudoDePara,
                                                       InoutLogger logger) throws Exception {

    boolean gerouArquivo = false;


     JSONArray records     = findMovimentosParaDeParaSemLote(dbIOCont, codEmpresa, lote);            // grava depara de todas as contas
     JSONArray recordsPort = findMovimentosParaDeParaPortadorSemLote(dbIOCont, codEmpresa, lote);
	
	boolean deparaFuncional = false;
	if (lote.contains("RECEBER") && (codEmpresa.equals("222") || codEmpresa.equals("223")) && nomeContabilidade.toUpperCase().contains("FUNCIONAL")) deparaFuncional = true;

    if (records.length() > 0 || recordsPort.length() > 0) {

        // Cria pasta de DePara se nao existir
        String deParaDirName = filename.substring(0, filename.lastIndexOf("/"));
        if (!FileUtil.fileExists(deParaDirName)) {
            FileUtil.mkDir(deParaDirName);
        }

        // Cria o arquivo de DE-PARA FORNECEDOR
        FileWriter writer = new FileWriter(filename);
        StringBuilder txt = new StringBuilder();
        txt.append("FORNECEDOR;");
        txt.append("CENTROCUSTO;");
        txt.append("CONTACLI;");
        txt.append("CONTAFOR;");
        txt.append("ORIGEM;");
        txt.append("MESREF;");
        txt.append("\r\n");
        String mesReferencia = "";

        if (lote.contains("_")) mesReferencia = lote.substring(0, lote.lastIndexOf("_")).trim();
        if (mesReferencia.contains("_")) mesReferencia = mesReferencia.substring(mesReferencia.lastIndexOf("_")+1).trim(); else mesReferencia = "";


        // Percorre a lista de objetos
        for (int i=0; i<records.length(); i++) {
            JSONObject recFornecedortxt = records.optJSONObject(i);
            String txtNOMEORIGEM = recFornecedortxt.optString("NOMEORIGEM").trim();
            String txtCENTROCUSTO = recFornecedortxt.optString("CENTROCUSTO").trim();

            String txtCONTADEBITO  = "";
            String txtCONTACREDITO = "";

            String origemConta = "0";
			boolean pendente = false;

			String chaveIOPessoa = codEmpresa + txtNOMEORIGEM;
            if (lote.contains("_PAGAR")   && recFornecedortxt.has("CONTADEBITO")  && recFornecedortxt.optString("CONTADEBITO").length() > 0 && !hasPessoaFor(dbIOCont, chaveIOPessoa, recFornecedortxt.optString("CONTADEBITO")))  origemConta = "1";
            if (lote.contains("_RECEBER") && recFornecedortxt.has("CONTACREDITO") && recFornecedortxt.optString("CONTACREDITO").length() > 0 && !hasPessoaCli(dbIOCont, chaveIOPessoa, recFornecedortxt.optString("CONTACREDITO"))) origemConta = "1";

            if (lote.contains("_PAGAR") && recFornecedortxt.has("CONTADEBITO"))  {
                txtCONTADEBITO = recFornecedortxt.optString("CONTADEBITO");
            }
            if (lote.contains("_RECEBER") && recFornecedortxt.has("CONTACREDITO")) {
                txtCONTACREDITO = recFornecedortxt.optString("CONTACREDITO");
            }

			logger.logDebug("LENDO ORIGEM = " + origemConta + "===" + txtCONTADEBITO + "---" + txtNOMEORIGEM);

            if (txtCONTADEBITO.equals("PENDENTE"))  {
                origemConta  = "0";
                gerouArquivo = true;
                txtCONTADEBITO = "";
				pendente = true;
            }
            if (txtCONTACREDITO.equals("PENDENTE")) {
                origemConta     = "0";
                gerouArquivo    = true;
                txtCONTACREDITO = "";
				pendente = true;
            }

            if (txtCONTADEBITO.equals("LOTE_ENCERRADO"))  continue;
            if (txtCONTACREDITO.equals("LOTE_ENCERRADO")) continue;

			if (!nomeContabilidade.toUpperCase().contains("CONTACGO")) {
				if ((records.length() > 200 || nomeContabilidade.toUpperCase().contains("ESCONTEC") || nomeContabilidade.toUpperCase().contains("CSI")) && !pendente) continue;
			}

            txt.append(txtNOMEORIGEM);
            txt.append(";");
            txt.append(txtCENTROCUSTO);
            txt.append(";");
            txt.append(txtCONTACREDITO);
            txt.append(";");
            txt.append(txtCONTADEBITO);
            txt.append(";");
            txt.append(origemConta);
            txt.append(";");
            txt.append(mesReferencia);
            txt.append(";");
            txt.append("\r\n");
        }


        // Percorre a lista de objetos
		if (!nomeContabilidade.toUpperCase().contains("DEPAULA") &&
			!nomeContabilidade.toUpperCase().contains("ESCONTEC") &&
			(!nomeContabilidade.toUpperCase().contains("FUNCIONAL") || deparaFuncional) &&
			!nomeContabilidade.toUpperCase().equals("META") &&
			!nomeContabilidade.toUpperCase().contains("ESCRITORIOGOMES")) {

			for (int i=0; i<recordsPort.length(); i++) {
				JSONObject recFornecedortxt = recordsPort.optJSONObject(i);
				String txtNOMEORIGEM = recFornecedortxt.optString("NOMEPORTADOR");
				String txtCENTROCUSTO = recFornecedortxt.optString("CENTROCUSTO");

				String txtCONTADEBITO  = "";
				String txtCONTACREDITO = "";

				String origemConta = "2";
				boolean pendente = false;


				if (lote.contains("_PAGAR") && recFornecedortxt.has("CONTACREDITO"))  {


					txtCONTADEBITO = recFornecedortxt.optString("CONTACREDITO");
					if (txtCONTADEBITO.equals("")) gerouArquivo = true;

				}
				if (lote.contains("_RECEBER") && recFornecedortxt.has("CONTADEBITO")) {
					txtCONTACREDITO = recFornecedortxt.optString("CONTADEBITO");
					if (txtCONTACREDITO.equals("")) gerouArquivo = true;
				}

				if (txtCONTADEBITO.equals("PENDENTE"))  {
					gerouArquivo   = true;
					txtCONTADEBITO = "";
					pendente = true;
				}
				if (txtCONTACREDITO.equals("PENDENTE")) {
					gerouArquivo   = true;
					txtCONTACREDITO = "";
					pendente = true;
				}

				if (txtCONTADEBITO.equals("LOTE_ENCERRADO"))  continue;
				if (txtCONTACREDITO.equals("LOTE_ENCERRADO")) continue;

				if (recordsPort.length() > 200 && !pendente) continue;
				//if (nomeContabilidade.toUpperCase().contains("FUNCIONAL") && !pendente) continue;


				txt.append(txtNOMEORIGEM);
				txt.append(";");
				txt.append(txtCENTROCUSTO);
				txt.append(";");
				txt.append(txtCONTACREDITO);
				txt.append(";");
				txt.append(txtCONTADEBITO);
				txt.append(";");
				txt.append(origemConta);
				txt.append(";");
				txt.append(mesReferencia);
				txt.append(";");
				txt.append("\r\n");
			}


		}
		// Gravacao do Arquivo TXT
		if (gerouArquivo) writer.writeNewFile(txt.toString());

    }

    return gerouArquivo;
}


//###############################################################################
/////////////////////////////////////////////////////////////////////////////////
// Envia e-mail de arquivo PENDENTE.
/////////////////////////////////////////////////////////////////////////////////
public void enviaEmailPendentes(String codEmpresa,
                                String nomeEmpresa,
                                String lote,
                                String nomeContabilidade,
                                String emailResponsavel,
                                String filename,
                                InoutLogger logger) throws Exception {


    String subject = "NECESSIDADE DE DEPARA >> Empresa: " + codEmpresa + "-" + nomeEmpresa + ", Lote: " + lote;
    String sendToName = nomeContabilidade + " -- OTTIMIZZA Contabil";
    StringBuilder msg = new StringBuilder();
    String link1 = "http://168.144.179.157:8475/contabil-server/dePara.jsp?contabilidade=" + nomeContabilidade;

    msg.append("<html>\n");
    msg.append("<head>\n");
    msg.append("</head>\n");
    msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");
    msg.append("<p><font style=\"font-size: 10pt\"><b>Alguns lancamentos ficaram pendentes de conta contabil. Para finalizar, acesse o link abaixo: </b></font></p>\n\n");
    msg.append("<p><font style=\"font-size: 10pt\"> " + link1 + "</font></p>\n\n");
    msg.append("<p><font style=\"font-size: 10pt\">Caso nao consiga acessar, solicite ao responsavel pela infraestrutura a liberacao de acesso.</b></font></p>\n\n");
    msg.append("<p><font style=\"font-size: 10pt\">O manual para utilizacao do DeParaWeb encontra-se em http://www.ottimizza.com.br/Manual_Ottimizza.pdf</font></p>\n");
    msg.append("<p><font style=\"font-size: 10pt\">Atenciosamente,</font></p>\n");
    msg.append("<p><strong>SUPORTE OTTIMIZZA AUTOMACAO CONTABIL</strong>\n");
    msg.append("<br/>Rua 2 de setembro, 3753, Blumenau-SC \n");
    msg.append("<br/>+55 (47) 3035-3765 \n");
    msg.append("<br/>suporte@ottimizza.com.br</p>\n");
    msg.append("</body>\n");
    msg.append("</html>\n");

    lote = lote.toUpperCase();
    if (lote.contains("OTTIMIZZA") && !lote.contains("OTTIMIZZAAUTOMACAO")) emailResponsavel = "suporte@ottimizza.com.br";

    enviaEmail(subject, emailResponsavel, sendToName, msg.toString(), filename, logger);

}




public void enviaEmailDeParaRoteiro(String codEmpresa,
                                    String nomeEmpresa,
                                    String lote,
                                    String nomeContabilidade,
                                    String emailResponsavel,
                                    String filename,
                                    InoutLogger logger) throws Exception {


    String subject = "ARQUIVO AUXILIAR PARA ROTEIRO >> Empresa: " + codEmpresa + "-" + nomeEmpresa + ", Lote: " + lote;
    String sendToName = nomeContabilidade + " -- OTTIMIZZA Contabil";
    StringBuilder msg = new StringBuilder();

    msg.append("<html>\n");
    msg.append("<head>\n");
    msg.append("</head>\n");
    msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");
    msg.append("<p><font style=\"font-size: 10pt\"><b>Anexo arquivo para auxiliar no roteiro. </b></font></p>\n\n");
    msg.append("<p><font style=\"font-size: 10pt\">Atenciosamente,</font></p>\n");
    msg.append("<p><strong>SUPORTE OTTIMIZZA AUTOMACAO CONTABIL</strong>\n");
    msg.append("<br/>Rua 2 de setembro, 3753, Blumenau-SC \n");
    msg.append("<br/>+55 (47) 3035-3765 \n");
    msg.append("<br/>suporte@ottimizza.com.br</p>\n");
    msg.append("</body>\n");
    msg.append("</html>\n");

    lote = lote.toUpperCase();
    //if (lote.contains("OTTIMIZZAF") && !lote.contains("OTTIMIZZAAUTOMACAO")) emailResponsavel = "suporte@ottimizza.com.br";
    //if (lote.contains("OTTIMIZZA")) enviaEmail(subject, emailResponsavel, sendToName, msg.toString(), filename, logger);

}

//###############################################################################

/////////////////////////////////////////////////////////////////////////////////
// Envia e-mail de lote LIBERADO.
/////////////////////////////////////////////////////////////////////////////////
public void enviaEmailLoteLiberado(String codEmpresa,
                                   String nomeEmpresa,
                                   String lote,
                                   String nomeContabilidade,
                                   String emailResponsavel,
                                   InoutLogger logger) throws Exception {

    SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");
    String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

    String subject = "LOTE INTEGRACAO LIBERADO, " + codEmpresa + "-" + nomeEmpresa + " Lote: " + lote;
    String sendToName = "OTTIMIZZA - " + nomeContabilidade;
    StringBuilder msg = new StringBuilder();
    msg.append("<html>\n");
    msg.append("<head>\n");
    msg.append("</head>\n");
    msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");
    msg.append("<p><font style=\"font-size: 10pt\">OTTIMIZZA - LOTE LIBERADO PARA IMPORTA&Ccedil;&Atilde;O.</font></p>\n");
    msg.append("<p><font style=\"font-size: 10pt\"><b/>/ottimizzaft/" + nomeContabilidade + "/Arquivos</b></font></p>\n\n");
    msg.append("<p><font style=\"font-size: 10pt\">Atenciosamente,</font></p>\n");
    msg.append("<p><strong>SUPORTE OTTIMIZZA AUTOMACAO CONTABIL</strong>\n");
    msg.append("<br/>Rua 2 de setembro, 3753, Blumenau-SC \n");
    msg.append("<br/>+55 (47) 3035-3765 \n");
    msg.append("<br/>suporte@ottimizza.com.br</p>\n");
    msg.append("</body>\n");
    msg.append("</html>\n");

    lote = lote.toUpperCase();
    if (lote.contains("OTTIMIZZA") && !lote.contains("OTTIMIZZAAUTOMACAO")) emailResponsavel = "suporte@ottimizza.com.br";

    if (versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")) enviaEmail(subject, emailResponsavel, sendToName, msg.toString(), null, logger);
}

public void enviaEmailGeral(String assunto,
                            String destinatarioNome,
                            String destinatarioEmail,
                            StringBuilder mensagem,
                            InoutLogger logger) throws Exception {

    String subject = assunto;
    String sendToName = destinatarioNome;
    StringBuilder msg = mensagem;
    enviaEmail(subject, destinatarioEmail, sendToName, msg.toString(), null, logger);
}

public void enviaEmailGeralComAnexo(String assunto,
                                    String destinatarioNome,
                                    String destinatarioEmail,
                                    StringBuilder mensagem,
                                    String filename,
                                    InoutLogger logger) throws Exception {

    String subject = assunto;
    String sendToName = destinatarioNome;
    StringBuilder msg = mensagem;
    enviaEmail(subject, destinatarioEmail, sendToName, msg.toString(), filename, logger);
}

/////////////////////////////////////////////////////////////////////////////////
// Envia e-mail de lote LIBERADO.
/////////////////////////////////////////////////////////////////////////////////
public void enviaEmailLoteLiberadoComAnexo(String codEmpresa,
                                           String nomeEmpresa,
                                           String lote,
                                           String nomeContabilidade,
                                           String emailResponsavel,
                                           String filename,
                                           InoutLogger logger) throws Exception {

	SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");
    String versaoPlataforma = props.get("VERSAO_PLATAFORMA");

	String subject = "LOTE INTEGRACAO LIBERADO, " + codEmpresa + "-" + nomeEmpresa + " Lote: " + lote;
    String sendToName = "OTTIMIZZA - " + nomeContabilidade;
    StringBuilder msg = new StringBuilder();
    msg.append("<html>\n");
    msg.append("<head>\n");
    msg.append("</head>\n");
    msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");
    msg.append("<p><font style=\"font-size: 10pt\">OTTIMIZZA - LOTE LIBERADO PARA IMPORTA&Ccedil;&Atilde;O.</font></p>\n");
    msg.append("<p><font style=\"font-size: 10pt\"><b/>.../contabil/" + nomeContabilidade + "/Arquivos</b></font></p>\n\n");
    msg.append("<p><font style=\"font-size: 10pt\">Atenciosamente,</font></p>\n");
    msg.append("<p><strong>SUPORTE OTTIMIZZA AUTOMACAO CONTABIL</strong>\n");
    msg.append("<br/>Rua 2 de setembro, 3753, Blumenau-SC \n");
    msg.append("<br/>+55 (47) 3035-3765 \n");
    msg.append("<br/>suporte@ottimizza.com.br</p>\n");
    msg.append("</body>\n");
    msg.append("</html>\n");

    lote = lote.toUpperCase();
    if (lote.contains("OTTIMIZZA") && !lote.contains("OTTIMIZZAAUTOMACAO")) emailResponsavel = "suporte@ottimizza.com.br";

    if (versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")) enviaEmail(subject, emailResponsavel, sendToName, msg.toString(), filename, logger);
}


public void enviaEmailArquivoXLS(String filename,
                                 String nomeContabilidade,
                                 String empresa,
                                 InoutLogger logger) throws Exception {

    SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");
    String emailResponsavel = props.get(empresa.toUpperCase() + "_EMAIL_RESPONSAVEL");

    String subject = "ARQUIVO .XLS NAO LIDO POR OTTIMIZZA CONTABIL";
    String sendToName = "OTTIMIZZA - " + nomeContabilidade;
    StringBuilder msg = new StringBuilder();
    msg.append("<html>\n");
    msg.append("<head>\n");
    msg.append("</head>\n");
    msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");
    msg.append("<p><font style=\"font-size: 10pt\">Um arquivo com extensao (.xls) foi colocado em pasta:</font></p>\n");
    msg.append("<p><font style=\"font-size: 10pt\">").append(filename).append("</font></p>\n");
    msg.append("<p><font style=\"font-size: 10pt\">Pedimos que edite o arquivo e SALVE-O COMO  arquivo (.xlsx) (Pasta de Trabalho Excel) !</font></p>\n\n");
    msg.append("<p><font style=\"font-size: 10pt\">PS: atencao, favor nao renomear o arquivo e sim SALVAR COMO. o procedimento de renomear nao fara com que o OTTIMIZZA CONTABIL leia o arquivo.</font></p>\n\n");
    msg.append("<p><font style=\"font-size: 10pt\">Atenciosamente,</font></p>\n");
    msg.append("<p><strong>SUPORTE OTTIMIZZA AUTOMACAO CONTABIL</strong>\n");
    msg.append("<br/>Rua 2 de setembro, 3753, Blumenau-SC \n");
    msg.append("<br/>+55 (47) 3035-3765 \n");
    msg.append("<br/>suporte@ottimizza.com.br</p>\n");
    msg.append("</body>\n");
    msg.append("</html>\n");
    enviaEmail(subject, emailResponsavel, sendToName, msg.toString(), null, logger);
}



/////////////////////////////////////////////////////////////////////////////////
//              Envia e-mail de LAYOUT INVALIDO.
/////////////////////////////////////////////////////////////////////////////////
public void enviaEmailLayoutInvalido(String codEmpresa,
                                     String nomeEmpresa,
                                     String lote,
                                     String nomeContabilidade,
                                     String emailResponsavel,
                                     int cont,
                                     HashMap mapaLay,
                                     ttLayout layout,
                                     InoutLogger logger) throws Exception {

    String pdfHomologado = "";
    String tipoLancamento = "";

	SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");
	String versaoPlataforma = props.get("VERSAO_PLATAFORMA");


    String subject = "Erro na Tentativa de Integrar " + codEmpresa + "-" + nomeEmpresa + " Lote: " + lote;
    String sendToName = "OTTIMIZZA CONTABIL - " + nomeContabilidade;
    StringBuilder msg = new StringBuilder();
    msg.append("<html>\n");
    msg.append("<head>\n");
    msg.append("</head>\n");
    msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");
    msg.append("<p><font style=\"font-size: 10pt\">Prezado cliente.</font></p>\n");
    msg.append("<p><font style=\"font-size: 10pt\"><b/>Houve um erro na tentativa de importar o arquivo do cliente " + nomeEmpresa + ". </b></font></p>\n\n");

    Iterator iteLay = mapaLay.keySet().iterator();
    while (iteLay.hasNext()) {
        String key = (String)iteLay.next();
        ttLayout ttLay = (ttLayout)mapaLay.get(key);
        tipoLancamento = ttLay.tipoLancamento;
        if(!ttLay.codErroString.equals("00")) {

            ttLay.linhasProblema = ttLay.linhasProblema.substring(0,ttLay.linhasProblema.lastIndexOf(","));
            msg.append("<p><font style=\"font-size: 10pt\"><b/>_______________________________________________________________________________________________ </b> </font></p>\n");
            msg.append("<p><font style=\"font-size: 10pt; color: red\"><b/>Tipo problema: </b> </font><font style=\"font-size: 10pt\"> " + ttLay.texto + ". </font></p>\n");
            if(!ttLay.codErroString.equals("06")) msg.append("<p><font style=\"font-size: 10pt\"><b/>Mesmo erro encontrado nas linhas: </b>" + ttLay.linhasProblema + ". </font></p>\n");
            if(!ttLay.codErroString.equals("06")) msg.append("<p><font style=\"font-size: 10pt\"><b/>Quantidade de linhas com problema: </b>" + ttLay.qtdIgnoradas + ". </font></p>\n\n");
        }
    }
    msg.append("<p><font style=\"font-size: 10pt\"><b/>_______________________________________________________________________________________________ </b> </font></p>\n");
    msg.append("<p>Atenciosamente,</p>\n");

    pdfHomologado = RouteEngine.INOUT_HOME + "/contabil/" + getNomeContabilidade() + "/" + nomeEmpresa + "_#" + codEmpresa + "/A" + tipoLancamento + "/Processado/arquivo_homologado.pdf";
    File arquivo = new File(RouteEngine.INOUT_HOME + "/contabil/" + getNomeContabilidade() + "/" + nomeEmpresa + "_#" + codEmpresa + "/A" + tipoLancamento + "/Processado/arquivo_homologado.pdf");

    msg.append("<p><strong>SUPORTE OTTIMIZZA AUTOMACAO CONTABIL</strong>\n");
    msg.append("<br/>Rua 2 de setembro, 3753, Blumenau-SC \n");
    msg.append("<br/>+55 (47) 3035-3765 \n");
    msg.append("<br/>suporte@ottimizza.com.br</p>\n");
    msg.append("</body>\n");
    msg.append("</html>\n");
    lote = lote.toUpperCase();
    emailResponsavel = emailResponsavel + ", suporte@ottimizza.com.br";
    if (lote.contains("OTTIMIZZA") && !lote.contains("OTTIMIZZAAUTOMACAO")) emailResponsavel = "suporte@ottimizza.com.br";

    if(!arquivo.exists() ){
        if (versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")) enviaEmail(subject, emailResponsavel, sendToName, msg.toString(), null, logger);
    }else{
        if (versaoPlataforma.equals("01_Conecta_Via_Ottimizza_FT")) enviaEmail(subject, emailResponsavel, sendToName, msg.toString(), pdfHomologado, logger);
    }
}

//###############################################################################

/////////////////////////////////////////////////////////////////////////////////
// Prepara trecho HTML com resumo da importacao da planilha para envio por e-mail
/////////////////////////////////////////////////////////////////////////////////
private String preparaResumoPlanilha(String lote, String resumoHistorico, String linhasNaoValidas, InoutLogger logger) {

    StringBuilder sb = new StringBuilder();

    sb.append("<br/>\n")
    .append("<p><font style=\"font-size: 10pt\"><b>Resumo da Planilha:</b></font></p>\n")
    .append("<p><font style=\"font-size: 10pt\">Lote: ")
    .append(lote)
    .append("</font></p>\n")
    .append("<p><font style=\"font-size: 10pt\">Exemplo: ")
    .append(resumoHistorico)
    .append("</font></p>\n")
    .append("<p><font style=\"font-size: 10pt\">LINHAS COM PROBLEMA: ")
    .append(linhasNaoValidas)
    .append("</font></p>\n");
    return sb.toString();
}


private double retornaValorTotal(String lote, InoutLogger logger) {
    StringBuilder sb = new StringBuilder();
    JSONObject jsrp = MemoryFile.getFileResume(lote, logger);

    double valorTotal = 0;
    if (jsrp != null) {
        valorTotal = jsrp.optDouble("docTotalValue");
    }
    return valorTotal;
}


private JSONObject retornaErroLayout(String lote, InoutLogger logger) {
    StringBuilder sb = new StringBuilder();
    JSONObject jsrp = MemoryFile.getFileResume(lote, logger);

    String valorBranco = "";
    if (jsrp != null) {
        valorBranco = jsrp.optString("VALORBRANCO");
    }
    return jsrp;
}



 
private JSONObject buscaContaSimples(String codEmpresa, String nomeFornecedor,
                              String cpfCnpj, String tipoLancamento, InoutLogger logger,
                              DataBase dbIOCont) throws Exception {

    JSONObject ret = new JSONObject();
    Calendar c = Calendar.getInstance();
    if (tipoLancamento.equals("PAGAR")) {
        ret.put("contaDebito", "");
    } else {
        ret.put("contaCredito", "");
    }
    ret.put("contaSugerida", false);
    ret.put("cnpjIOPessoa", "");

    if (nomeFornecedor == null || nomeFornecedor.trim().length() == 0 ||
        codEmpresa == null || codEmpresa.trim().length() == 0) {
        return ret;

    }
    if (nomeFornecedor.length() > 170) nomeFornecedor = nomeFornecedor.substring(0,170).trim();

    String fornecedorUnico = "SIM";
	String nomePessoa = "SIM";
    JSONArray records = null;
 
	try {
        records = findPessoaPorEmpresaNomeOrigem(dbIOCont, codEmpresa, nomeFornecedor, false);
        if (records.length() > 0) {
            JSONObject record = records.optJSONObject(0);
            String contaFor = record.optString("CONTACTBFOR").trim();
            String contaCli = record.optString("CONTACTBCLI").trim();
            nomePessoa = record.optString("NOMEPESSOA").trim();
            String cnpjIOPessoa = record.optString("CPFCNPJ").trim();
            if (tipoLancamento.equals("PAGAR")) {
                if (contaFor != null && contaFor.trim().length() > 0) {
                    logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                    ret.put("contaDebito", contaFor);
                    ret.put("cnpjIOPessoa", cnpjIOPessoa);
                    ret.put("nomePessoa", nomePessoa);
                    ret.put("nomeOrigem", nomePessoa);
                    if (contaCli != null && contaCli.trim().length() > 0) ret.put("contaCredito", contaCli);
                    return ret;
                }
            } else {
                if (contaCli != null && contaCli.trim().length() > 0) {
                    logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                    ret.put("contaCredito", contaCli);
                    ret.put("cnpjIOPessoa", cnpjIOPessoa);
                    ret.put("nomePessoa", nomePessoa);
                    ret.put("nomeOrigem", nomePessoa);
                    return ret;
                }
            }
        }
    } catch (Exception e2oPasso) {
        logger.logError("EndpointB: ERROR BUSCA CONTA - 2o PASSO", e2oPasso);
    }
	return ret;
}

//###############################################################################

/////////////////////////////////////////////////////////////////////////////////
// Busca Conta Fornecedor.
/////////////////////////////////////////////////////////////////////////////////
private JSONObject buscaConta(String codEmpresa, String nomeFornecedor,
                              String cpfCnpj, String tipoLancamento, InoutLogger logger,
                              DataBase dbIOCont) throws Exception {

    JSONObject ret = new JSONObject();
    Calendar c = Calendar.getInstance();
    if (tipoLancamento.equals("PAGAR")) {
        ret.put("contaDebito", "");
    } else {
        ret.put("contaCredito", "");
    }
    ret.put("contaSugerida", false);
    ret.put("cnpjIOPessoa", "");

    if (nomeFornecedor == null || nomeFornecedor.trim().length() == 0 ||
        codEmpresa == null || codEmpresa.trim().length() == 0) {
        return ret;

    }
    if (nomeFornecedor.length() > 170) nomeFornecedor = nomeFornecedor.substring(0,170).trim();

    String nomeCont = getNomeContabilidade();
    String empresaProp = INOUT_ROUTE_ID.substring(INOUT_ROUTE_ID.indexOf(".")+1);
    empresaProp = empresaProp.substring(0, empresaProp.indexOf("_")).toUpperCase();


    if (empresaProp.equals(getNomeContabilidade().toUpperCase())) {
        SysProperties prop = SysProperties.getInstance();
        prop.load("contabil/" + getNomeContabilidade() + "/empresa.properties");
        nomeCont = prop.get("NOME_CONTABILIDADE").toUpperCase();
    }
	

	nomeCont = nomeCont.replaceAll("DePara","").trim();
    SysProperties propriedades = SysProperties.getInstance();
    propriedades.load("contabil/" + nomeCont + "/contabil.properties");
    String fornecedorUnico = propriedades.get("FORNECEDOR_UNICO");
    JSONArray records = null;

    logger.logDebug(">>> Empresa: " + codEmpresa + " Fornecedor: " + nomeFornecedor + " CNPJ: " + cpfCnpj);

    // Monta o campo IO_PESSOA.CHAVE
    String chaveIoPessoa = codEmpresa + nomeFornecedor + cpfCnpj;
    logger.logDebug(">>> Chave IO_PESSOA: " + chaveIoPessoa);
    //------------------------------------------------------------------------------//
    // 1o PASSO - Busca a CONTA CONTABIL no IO_PESSOA pelo CPFCNPJ.                 //
    //------------------------------------------------------------------------------//

    String nomePessoa = "";
    if (cpfCnpj != null && cpfCnpj.trim().length() > 0) {

        try {
            records = findPessoaPorEmpresaCnpj(dbIOCont, codEmpresa, cpfCnpj);  // retirado 17.09 para ver performance
            if (records.length() > 0) {
                JSONObject rec = records.optJSONObject(0);
                String contaFor = rec.optString("CONTACTBFOR").trim();
                String contaCli = rec.optString("CONTACTBCLI").trim();
                String nomeOrigem = rec.optString("NOMEORIGEM").trim();
                nomePessoa = rec.optString("NOMEPESSOA").trim();
                if (tipoLancamento.equals("PAGAR")) {
                    if (contaFor != null && contaFor.trim().length() > 0) {
                        logger.logDebug(">>> Achou a conta pelo 1o PASSO");
                        ret.put("contaDebito", contaFor);
                        ret.put("nomeOrigem", nomeOrigem);
                        ret.put("nomePessoa", nomePessoa);
                        return ret;
                    }


                } else {
                    if (contaCli != null && contaCli.trim().length() > 0) {
                        logger.logDebug(">>> Achou a conta pelo 1o PASSO");
                        ret.put("contaCredito", contaCli);
                        ret.put("nomeOrigem", nomeOrigem);
                        ret.put("nomePessoa", nomePessoa);
                        return ret;
                    }

                }
            }
        } catch (Exception e1oPasso) {
            logger.logError("EndpointB: ERROR BUSCA CONTA - 1o PASSO", e1oPasso);
        }
    }

    //------------------------------------------------------------------------------//
    // 2o PASSO - Busca a CONTA CONTABIL no IO_PESSOA e IO_CONTA pelo NOME ORIGEM.  //
    //------------------------------------------------------------------------------//
    logger.logDebug(">>> 2o Passo");
    try {
        records = findPessoaPorEmpresaNomeOrigem(dbIOCont, codEmpresa, nomeFornecedor, false);
        if (records.length() > 0) {
            JSONObject record = records.optJSONObject(0);
            String contaFor = record.optString("CONTACTBFOR").trim();
            String contaCli = record.optString("CONTACTBCLI").trim();
            nomePessoa = record.optString("NOMEPESSOA").trim();
            String cnpjIOPessoa = record.optString("CPFCNPJ").trim();
            chaveIoPessoa = codEmpresa + nomeFornecedor + cnpjIOPessoa;
            if (tipoLancamento.equals("PAGAR")) {
                if (contaFor != null && contaFor.trim().length() > 0) {
                    logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                    ret.put("contaDebito", contaFor);
                    ret.put("cnpjIOPessoa", cnpjIOPessoa);
                    ret.put("nomePessoa", nomePessoa);
                    ret.put("nomeOrigem", nomePessoa);
                    if (contaCli != null && contaCli.trim().length() > 0) ret.put("contaCredito", contaCli);
                    return ret;
                }
            } else {
                if (contaCli != null && contaCli.trim().length() > 0) {
                    logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                    ret.put("contaCredito", contaCli);
                    ret.put("cnpjIOPessoa", cnpjIOPessoa);
                    ret.put("nomePessoa", nomePessoa);
                    ret.put("nomeOrigem", nomePessoa);
                    return ret;
                }
            }
        }
    } catch (Exception e2oPasso) {
        logger.logError("EndpointB: ERROR BUSCA CONTA - 2o PASSO", e2oPasso);
    }


    //------------------------------------------------------------------------------//
    // 2.1o PASSO - Busca a CONTA CONTABIL np plano de contas pelo nome da Planilha //
    //------------------------------------------------------------------------------//
    logger.logDebug(">>> 2.1o Passo");
    try {

        // ignora pois quando vem o portador no nome do fornececedor, nao podemos sugerir a conta
        if (!nomeFornecedor.contains("BANCO")     && !nomeFornecedor.contains("SICRED")   && !nomeFornecedor.contains("SANTANDER") &&
            !nomeFornecedor.contains("DO BRASIL") && !nomeFornecedor.contains("ITAU")     && !nomeFornecedor.contains("BRADESCO") &&
            !nomeFornecedor.contains("CAIXA")     && !nomeFornecedor.contains("CEF")      && !nomeFornecedor.contains("BESC") &&
            !nomeFornecedor.contains("HSBC")      && !nomeFornecedor.contains("UNIBANCO") && !nomeFornecedor.contains("SAFRA") &&
            !nomeFornecedor.contains("UNICRED")   && !nomeFornecedor.contains("BANRISUL") && !nomeFornecedor.contains("SUDAMERIS") &&
            !nomeFornecedor.contains("PREFEITURA") && !nomePessoa.contains("PREFEITURA") &&
            !nomePessoa.contains("BANCO")     && !nomePessoa.contains("SICRED")   && !nomePessoa.contains("SANTANDER") &&
            !nomePessoa.contains("DO BRASIL") && !nomePessoa.contains("ITAU")     && !nomePessoa.contains("BRADESCO") &&
            !nomePessoa.contains("CAIXA")     && !nomePessoa.contains("CEF")      && !nomePessoa.contains("BESC") &&
            !nomePessoa.contains("HSBC")      && !nomePessoa.contains("UNIBANCO") && !nomePessoa.contains("SAFRA") &&
            !nomePessoa.contains("UNICRED")   && !nomePessoa.contains("BANRISUL") && !nomePessoa.contains("SUDAMERIS")) {

            String nomeConti = "";
            nomeConti = geraNomeContinuo(nomeFornecedor);
            records = findPessoaPorPlanoContas(dbIOCont, codEmpresa, nomeConti);
            if (records.length() == 1) {
                JSONObject record = records.optJSONObject(0);
                String conta          = record.optString("CONTACONTABIL").trim();
                String contaAnalitica = record.optString("CONTAANALITICA").trim();
                String descricaoPlano = record.optString("DESCRICAOPLANO").trim();
                chaveIoPessoa = codEmpresa + nomeConti;
                if (tipoLancamento.equals("PAGAR")) {
                    if (conta != null && conta.trim().length() > 0) {
                        logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                        ret.put("contaDebito", conta);
                        ret.put("cnpjIOPessoa", "");
                        ret.put("nomePessoa", nomeConti);
                        ret.put("classificacao", contaAnalitica);
                        ret.put("descricaoPlano", descricaoPlano);
                        return ret;
                    }
                } else {
                    if (conta != null && conta.trim().length() > 0) {
                        logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                        ret.put("contaCredito", conta);
                        ret.put("cnpjIOPessoa", "");
                        ret.put("nomePessoa", nomeConti);
                        ret.put("classificacao", contaAnalitica);
                        ret.put("descricaoPlano", descricaoPlano);
                        return ret;
                    }
                }
            }

            if (!nomePessoa.equals("")) {
                nomeConti = "";
                nomeConti = geraNomeContinuo(nomePessoa);
                records = findPessoaPorPlanoContas(dbIOCont, codEmpresa, nomeConti);
                if (records.length() == 1) {
                    JSONObject record = records.optJSONObject(0);
                    String conta    = record.optString("CONTACONTABIL").trim();
                    chaveIoPessoa = codEmpresa + nomeConti;
                    if (tipoLancamento.equals("PAGAR")) {
                        if (conta != null && conta.trim().length() > 0) {
                            logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                            ret.put("contaDebito", conta);
                            ret.put("cnpjIOPessoa", "");
                            ret.put("nomePessoa", nomeConti);
                            return ret;
                        }
                    } else {
                        if (conta != null && conta.trim().length() > 0) {
                            logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                            ret.put("contaCredito", conta);
                            ret.put("cnpjIOPessoa", "");
                            ret.put("nomePessoa", nomeConti);
                            return ret;
                        }
                    }
                }
            }

        }
    } catch (Exception e2oPasso) {
        logger.logError("EndpointB: ERROR BUSCA PLANO CONTA - 2.1o PASSO", e2oPasso);
    }

    //------------------------------------------------------------------------------//
    // 3o PASSO - Busca a CONTA CONTABIL no IO_CONTA pelo NOME DO FORNECEDOR.       //
    //------------------------------------------------------------------------------//
    logger.logDebug(">>> 3o Passo");
    String contaCli = "";
    String contaFor = "";
    String chaveIoConta = "";
    nomePessoa = "";
    String nomeLike = "";
    String nomeOrigem = "";
    String cnpjIOPessoa = "";

    try {
        records = findContaPorNomePessoa(dbIOCont, codEmpresa, nomeFornecedor, false, fornecedorUnico);
        if (records.length() > 0) {
            JSONObject rec = records.optJSONObject(0);
            contaCli = rec.optString("CONTACTBCLI").trim();
            contaFor = rec.optString("CONTACTBFOR").trim();
            cpfCnpj = rec.optString("CPFCNPJ").trim();
            cnpjIOPessoa = rec.optString("CPFCNPJ").trim();
            chaveIoPessoa = codEmpresa + nomeFornecedor + cnpjIOPessoa;
            chaveIoConta = rec.optString("CHAVE").trim();
            nomePessoa = rec.optString("NOMEPESSOA").trim();
            if (tipoLancamento.equals("PAGAR")) {
                ret.put("contaDebito", contaFor);
            } else {
                ret.put("contaCredito", contaCli);
            }
            ret.put("cnpjIOPessoa", cnpjIOPessoa);
            ret.put("nomePessoa", nomePessoa);
            ret.put("nomeOrigem", nomePessoa);
            logger.logDebug(">>> Achou um fornecedor pelo 3o Passo. " + contaFor);
        }
    } catch (Exception e3oPasso) {
        logger.logError("EndpointB: ERROR BUSCA CONTA - 3o PASSO", e3oPasso);
    }

    //-----------------------------------------------------------------------------------------------------//
    // Gravar o IO_PESSOA com o relacionamento com o IO_CONTA.                                             //
    //-----------------------------------------------------------------------------------------------------//
    if ((contaFor != null && contaFor.trim().length() > 0) || (contaCli != null && contaCli.trim().length() > 0)) {

        if (hasPessoa(dbIOCont, chaveIoPessoa)) {
            try {
                updatePessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, contaCli,
                             contaFor, chaveIoConta, chaveIoPessoa);
            } catch (Exception eUpdateIOPessoa) {
                logger.logError("EndpointB: ERROR UPDATE IO_PESSOA", eUpdateIOPessoa);
            }
        } else {
            try {
                insertPessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, contaCli,
                             contaFor, chaveIoConta, chaveIoPessoa, fornecedorUnico);
            } catch (Exception eInsertIOPessoa) {
                logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
            }
        }
        if (tipoLancamento.equals("PAGAR")) {
            logger.logDebug(">>> Achou a conta pelo 3o PASSO. " + contaFor);
            ret.put("contaDebito", contaFor);
            ret.put("nomePessoa", nomePessoa);
            ret.put("nomeOrigem", nomePessoa);
            return ret;
        } else {
            logger.logDebug(">>> Achou a conta pelo 3o PASSO. " + contaCli);
            ret.put("contaCredito", contaCli);
            ret.put("nomePessoa", nomePessoa);
            ret.put("nomeOrigem", nomePessoa);
            return ret;
        }
    }

    //----------------------------------------------------------------------------------------------------//
    // 4o PASSO - Busca a CONTA CONTABIL no IO_CONTA pelos 20 primeiros caracteres do NOME DO FORNECEDOR. //
    //----------------------------------------------------------------------------------------------------//

    String codOrigem = "Sugerido";
    int tamanho = nomeFornecedor.trim().length();
    if (tamanho > 50) {
        nomeLike = nomeFornecedor.substring(0, 50) + "%";
    } else {
        nomeLike = nomeFornecedor.substring(0, tamanho) + "%";
    }
    try {
        records = findContaPorNomePessoa(dbIOCont, codEmpresa, nomeLike, true, fornecedorUnico);
        if (records.length() > 0) {
            JSONObject rec = records.optJSONObject(0);
            contaCli = rec.optString("CONTACTBCLI").trim();
            contaFor = rec.optString("CONTACTBFOR").trim();
            cpfCnpj = rec.optString("CPFCNPJ").trim();
            cnpjIOPessoa = rec.optString("CPFCNPJ").trim();
            chaveIoPessoa = codEmpresa + nomeFornecedor + cnpjIOPessoa;
            chaveIoConta = rec.optString("CHAVE").trim();
            nomePessoa = rec.optString("NOMEPESSOA").trim();
            if (tipoLancamento.equals("PAGAR")) {
                ret.put("contaDebito", contaFor);
            } else {
                ret.put("contaCredito", contaCli);
            }
            ret.put("cnpjIOPessoa", cnpjIOPessoa);
            ret.put("nomePessoa", nomePessoa);
            ret.put("nomeOrigem", nomePessoa);
            logger.logDebug(">>> Achou um fornecedor pelo 4o PASSO. " + contaFor);
        }
    } catch (Exception e4oPasso) {
        logger.logError("EndpointB: ERROR BUSCA CONTA - 4o PASSO", e4oPasso);
    }

    //-----------------------------------------------------------------------------------------------------//
    // Gravar o IO_PESSOA com o relacionamento com o IO_CONTA.                                             //
    //-----------------------------------------------------------------------------------------------------//
    if ((contaFor != null && contaFor.trim().length() > 0) || (contaCli != null && contaCli.trim().length() > 0)) {

        if (hasPessoa(dbIOCont, chaveIoPessoa)) {
            try {
                updatePessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, contaCli,
                             contaFor, chaveIoConta, chaveIoPessoa);
            } catch (Exception eUpdateIOPessoa) {
                logger.logError("EndpointB: ERROR UPDATE IO_PESSOA ", eUpdateIOPessoa);
            }
        } else {
            try {
                insertPessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, contaCli,
                             contaFor, chaveIoConta, chaveIoPessoa, fornecedorUnico);
            }
            catch (Exception eInsertIOPessoa) {
                logger.logError("EndpointB: ERROR INSERT IO_PESSOA ", eInsertIOPessoa);
            }
        }
        if (tipoLancamento.equals("PAGAR")) {
            logger.logDebug(">>> Achou a conta pelo 4o PASSO. " + contaFor);
            ret.put("contaDebito", contaFor);
            ret.put("contaSugerida", true);
            return ret;
        } else {
            logger.logDebug(">>> Achou a conta pelo 4o PASSO. " + contaCli);
            ret.put("contaCredito", contaCli);
            ret.put("contaSugerida", true);
            return ret;
        }
    }

    //-----------------------------------------------------------------------------------------------------//
    // 5o PASSO - Busca a CONTA CONTABIL no IO_PESSOA pelos 20 primeiros caracteres do NOME DO FORNECEDOR. //
    //-----------------------------------------------------------------------------------------------------//

    try {
        records = findPessoaPorEmpresaNomeOrigem(dbIOCont, codEmpresa, nomeLike, true);
 		
        if (records.length() > 0) { // && (numeroColunas <= nomeLike.length())) {
		
            JSONObject rec = records.optJSONObject(0);
            contaFor = rec.optString("CONTACTBFOR".trim());
            contaCli = rec.optString("CONTACTBCLI").trim();
            cnpjIOPessoa = rec.optString("CPFCNPJ").trim();
            chaveIoPessoa = codEmpresa + nomeFornecedor + cnpjIOPessoa;
            if (tipoLancamento.equals("PAGAR")) {
                if (contaFor != null && contaFor.trim().length() > 0) {
                    logger.logDebug(">>> Achou a conta pelo 5o PASSO. " + contaFor);
                    ret.put("contaDebito", contaFor);
                    ret.put("contaSugerida", true);
                    ret.put("cnpjIOPessoa", cnpjIOPessoa);
                    return ret;
                }
            } else {
                if (contaCli != null && contaCli.trim().length() > 0) {
                    logger.logDebug(">>> Achou a conta pelo 5o PASSO. " + contaCli);
                    ret.put("contaCredito", contaCli);
                    ret.put("contaSugerida", true);
                    ret.put("cnpjIOPessoa", cnpjIOPessoa);
                    return ret;
                }
            }

        }
    } catch (Exception e5oPasso) {
        logger.logError("EndpointB: ERROR BUSCA CONTA - 5o PASSO ", e5oPasso);
    }

    //-----------------------------------------------------------------------------------------------------//
    // Gravar o IO_PESSOA sem o relacionamento com o IO_CONTA para listar no DeParaFornecedores.           //
    //-----------------------------------------------------------------------------------------------------//
    logger.logDebug(">>> Atualiza IO_PESSOA sem relacionamento com IO_CONTA.");
    if (cpfCnpj == null || cpfCnpj.trim().length() == 0) {
        cpfCnpj = cnpjIOPessoa;
    }
    if (hasPessoa(dbIOCont, chaveIoPessoa)) {
        try {
            updatePessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, "", "", "", chaveIoPessoa);
        } catch (Exception eUpdateIOPessoa) {
            logger.logError("EndpointB: ERROR UPDATE IO_PESSOA", eUpdateIOPessoa);
        }
    } else {
        try {
            insertPessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, "", "", "", chaveIoPessoa, fornecedorUnico);
        }
        catch (Exception eInsertIOPessoa) {
            logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
        }
    }


    logger.logDebug(">>> Nao achou a conta");
    return ret;
}


private JSONObject buscaContaNovo(String codEmpresa, String nomeFornecedor,
                              String cpfCnpj, String classificacao, String tipoLancamento, InoutLogger logger,
                              DataBase dbIOCont) throws Exception {

    JSONObject ret = new JSONObject();
    Calendar c = Calendar.getInstance();
    if (tipoLancamento.equals("PAGAR")) {
        ret.put("contaDebito", "");
    } else {
        ret.put("contaCredito", "");
    }
    ret.put("contaSugerida", false);
    ret.put("cnpjIOPessoa", "");
	
    if (nomeFornecedor == null || nomeFornecedor.trim().length() == 0 ||
        codEmpresa == null || codEmpresa.trim().length() == 0) {
        return ret;

    }
    if (nomeFornecedor.length() > 170) nomeFornecedor = nomeFornecedor.substring(0,170).trim();

    String nomeCont = getNomeContabilidade();
	String empresaProp = INOUT_ROUTE_ID.substring(INOUT_ROUTE_ID.indexOf(".")+1);
    empresaProp = empresaProp.substring(0, empresaProp.indexOf("_")).toUpperCase();


    if (empresaProp.equals(getNomeContabilidade().toUpperCase())) {
        SysProperties prop = SysProperties.getInstance();
        prop.load("contabil/" + getNomeContabilidade() + "/empresa.properties");
        nomeCont = prop.get("NOME_CONTABILIDADE").toUpperCase();
    }
	

    nomeCont = nomeCont.replaceAll("DePara","").trim();
    SysProperties propriedades = SysProperties.getInstance();
    propriedades.load("contabil/" + nomeCont + "/contabil.properties");
    String fornecedorUnico = propriedades.get("FORNECEDOR_UNICO");
    JSONArray records = null;

    logger.logDebug(">>> Empresa: " + codEmpresa + " Fornecedor: " + nomeFornecedor + " CNPJ: " + cpfCnpj);
	
	 // numero de colunas para buscar fornecedor.
	String stringColunas = "";
	int    numeroColunas = 0;
	
	try {
		stringColunas = propriedades.get(codEmpresa + "_NUMERO_COLUNAS");
		numeroColunas = Integer.parseInt(stringColunas);
	}
	 catch (Exception xx) { numeroColunas = 0; }

    // Monta o campo IO_PESSOA.CHAVE
    String chaveIoPessoa = codEmpresa + nomeFornecedor + cpfCnpj;
	
    logger.logDebug(">>> Chave IO_PESSOA: " + chaveIoPessoa);
    //------------------------------------------------------------------------------//
    // 1o PASSO - Busca a CONTA CONTABIL no IO_PESSOA pelo CPFCNPJ.                 //
    //------------------------------------------------------------------------------//

    String nomePessoa = "";
    if (cpfCnpj != null && cpfCnpj.trim().length() > 0) {

        try {
            records = findPessoaPorEmpresaCnpj(dbIOCont, codEmpresa, cpfCnpj);  // retirado 17.09 para ver performance
            if (records.length() > 0) {
                JSONObject rec = records.optJSONObject(0);
                String contaFor = rec.optString("CONTACTBFOR").trim();
                String contaCli = rec.optString("CONTACTBCLI").trim();
                String nomeOrigem = rec.optString("NOMEORIGEM").trim();
                nomePessoa = rec.optString("NOMEPESSOA").trim();
                if (tipoLancamento.equals("PAGAR")) {
                    if (contaFor != null && contaFor.trim().length() > 0) {
                        logger.logDebug(">>> Achou a conta pelo 1o PASSO");
                        ret.put("contaDebito", contaFor);
                        ret.put("nomeOrigem", nomeOrigem);
                        ret.put("nomePessoa", nomePessoa);
                        return ret;
                    }


                } else {
                    if (contaCli != null && contaCli.trim().length() > 0) {
                        logger.logDebug(">>> Achou a conta pelo 1o PASSO");
                        ret.put("contaCredito", contaCli);
                        ret.put("nomeOrigem", nomeOrigem);
                        ret.put("nomePessoa", nomePessoa);
                        return ret;
                    }

                }
            }
        } catch (Exception e1oPasso) {
            logger.logError("EndpointB: ERROR BUSCA CONTA - 1o PASSO", e1oPasso);
        }
    }

    //------------------------------------------------------------------------------//
    // 2o PASSO - Busca a CONTA CONTABIL no IO_PESSOA e IO_CONTA pelo NOME ORIGEM.  //
    //------------------------------------------------------------------------------//
    logger.logDebug(">>> 2o Passo");
    try {
        records = findPessoaPorEmpresaNomeOrigem(dbIOCont, codEmpresa, nomeFornecedor, false);
        if (records.length() > 0) {
            JSONObject record = records.optJSONObject(0);
            String contaFor = record.optString("CONTACTBFOR").trim();
            String contaCli = record.optString("CONTACTBCLI").trim();
            nomePessoa = record.optString("NOMEPESSOA").trim();
            String cnpjIOPessoa = record.optString("CPFCNPJ").trim();
            chaveIoPessoa = codEmpresa + nomeFornecedor + cnpjIOPessoa;
			
            if (tipoLancamento.equals("PAGAR")) {
                if (contaFor != null && contaFor.trim().length() > 0) {
                    logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                    ret.put("contaDebito", contaFor);
                    ret.put("cnpjIOPessoa", cnpjIOPessoa);
                    ret.put("nomePessoa", nomePessoa);
                    ret.put("nomeOrigem", nomePessoa);
                    if (contaCli != null && contaCli.trim().length() > 0) ret.put("contaCredito", contaCli);
                    return ret;
                }
            } else {
                if (contaCli != null && contaCli.trim().length() > 0) {
                    logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                    ret.put("contaCredito", contaCli);
                    ret.put("cnpjIOPessoa", cnpjIOPessoa);
                    ret.put("nomePessoa", nomePessoa);
                    ret.put("nomeOrigem", nomePessoa);
                    return ret;
                }
            }
        }
    } catch (Exception e2oPasso) {
        logger.logError("EndpointB: ERROR BUSCA CONTA - 2o PASSO", e2oPasso);
    }


    //------------------------------------------------------------------------------//
    // 2.1o PASSO - Busca a CONTA CONTABIL np plano de contas pelo nome da Planilha //
    //------------------------------------------------------------------------------//
    logger.logDebug(">>> 2.1o Passo");
    try {

        // ignora pois quando vem o portador no nome do fornececedor, nao podemos sugerir a conta
        if (!nomeFornecedor.contains("BANCO")     && !nomeFornecedor.contains("SICRED")   && !nomeFornecedor.contains("SANTANDER") &&
            !nomeFornecedor.contains("DO BRASIL") && !nomeFornecedor.contains("ITAU")     && !nomeFornecedor.contains("BRADESCO") &&
            !nomeFornecedor.contains("CAIXA")     && !nomeFornecedor.contains("CEF")      && !nomeFornecedor.contains("BESC") &&
            !nomeFornecedor.contains("HSBC")      && !nomeFornecedor.contains("UNIBANCO") && !nomeFornecedor.contains("SAFRA") &&
            !nomeFornecedor.contains("UNICRED")   && !nomeFornecedor.contains("BANRISUL") && !nomeFornecedor.contains("SUDAMERIS") &&
            !nomeFornecedor.contains("PREFEITURA") && !nomePessoa.contains("PREFEITURA") &&
            !nomePessoa.contains("BANCO")     && !nomePessoa.contains("SICRED")   && !nomePessoa.contains("SANTANDER") &&
            !nomePessoa.contains("DO BRASIL") && !nomePessoa.contains("ITAU")     && !nomePessoa.contains("BRADESCO") &&
            !nomePessoa.contains("CAIXA")     && !nomePessoa.contains("CEF")      && !nomePessoa.contains("BESC") &&
            !nomePessoa.contains("HSBC")      && !nomePessoa.contains("UNIBANCO") && !nomePessoa.contains("SAFRA") &&
            !nomePessoa.contains("UNICRED")   && !nomePessoa.contains("BANRISUL") && !nomePessoa.contains("SUDAMERIS")) {

            String nomeConti = "";
            nomeConti = geraNomeContinuo(nomeFornecedor);
            records = findPessoaPorPlanoContasNovo(dbIOCont, codEmpresa, nomeConti, classificacao, numeroColunas);
			
			if (records.length() == 1) {
                JSONObject record = records.optJSONObject(0);
                String conta          = record.optString("CONTACONTABIL").trim();
				
 

                String contaAnalitica = record.optString("CONTAANALITICA").trim();
                String descricaoPlano = record.optString("DESCRICAOPLANO").trim();
                chaveIoPessoa = codEmpresa + nomeConti;
				
                if (tipoLancamento.equals("PAGAR")) {
                    if (conta != null && conta.trim().length() > 0) {
                        logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                        ret.put("contaDebito", conta);
                        ret.put("cnpjIOPessoa", "");
                        ret.put("nomePessoa", nomeConti);
                        ret.put("classificacao", contaAnalitica);
                        ret.put("descricaoPlano", descricaoPlano);
                        return ret;
                    }
                } else {
                    if (conta != null && conta.trim().length() > 0) {
                        logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                        ret.put("contaCredito", conta);
                        ret.put("cnpjIOPessoa", "");
                        ret.put("nomePessoa", nomeConti);
                        ret.put("classificacao", contaAnalitica);
                        ret.put("descricaoPlano", descricaoPlano);
                        return ret;
                    }
                }
            }

            if (!nomePessoa.equals("")) {
                nomeConti = "";
                nomeConti = geraNomeContinuo(nomePessoa);
                records = findPessoaPorPlanoContasNovo(dbIOCont, codEmpresa, nomeConti, classificacao, numeroColunas);
                if (records.length() == 1) {
                    JSONObject record = records.optJSONObject(0);
                    String conta    = record.optString("CONTACONTABIL").trim();
	
 
                    chaveIoPessoa = codEmpresa + nomeConti;
					
                    if (tipoLancamento.equals("PAGAR")) {
                        if (conta != null && conta.trim().length() > 0) {
                            logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                            ret.put("contaDebito", conta);
                            ret.put("cnpjIOPessoa", "");
                            ret.put("nomePessoa", nomeConti);
                            return ret;
                        }
                    } else {
                        if (conta != null && conta.trim().length() > 0) {
                            logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                            ret.put("contaCredito", conta);
                            ret.put("cnpjIOPessoa", "");
                            ret.put("nomePessoa", nomeConti);
                            return ret;
                        }
                    }
                }
            }
			

			/*
            if (records != null && records.length() > 0) {
                List resultados = new ArrayList();
                JSONObject result = new JSONObject();
                ttMemoria ttM = null;
                
                for(int i = 0; i < records.length(); i++){   
                    ttM = new ttMemoria();
                    result = records.optJSONObject(i);
                    ttM.memoria = calculate(nomeConti, result.optString("DESCRICAOCONTINUA")); // levenshtein distance
                    resultados.add(ttM);
                }
                int memoria = 1000000000;
                int alvo = 1000000000;
                boolean f = false;
                for(int t = 0; t < resultados.size(); t++){
                    ttMemoria m = (ttMemoria)resultados.get(t);
                    if(m.memoria <= memoria){
                        alvo = t;
                        f = false;
                        if(memoria == m.memoria) f = true;
                        memoria = m.memoria;
                    }
                }
                double tamanho = records.optJSONObject(alvo).optString("DESCRICAOCONTINUA").length();
                double calibragem = Math.floor(tamanho * 0.125);

                if((!f && memoria <= calibragem) || (true)) { // magia  cax
                    JSONObject record = records.optJSONObject(alvo);
                    String conta          = record.optString("CONTACONTABIL").trim();
                    String contaAnalitica = record.optString("CONTAANALITICA").trim();
                    String descricaoPlano = record.optString("DESCRICAOPLANO").trim();
                    chaveIoPessoa = codEmpresa + nomeConti;
                    if (tipoLancamento.equals("PAGAR")) {
                        if (conta != null && conta.trim().length() > 0) {
                            logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                            ret.put("contaDebito", conta);
                            ret.put("cnpjIOPessoa", "");
                            ret.put("nomePessoa", nomeConti);
                            ret.put("classificacao", contaAnalitica);
                            ret.put("descricaoPlano", descricaoPlano);
                            return ret;
                        }
                    } else {
                        if (conta != null && conta.trim().length() > 0) {
                            logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                            ret.put("contaCredito", conta);
                            ret.put("cnpjIOPessoa", "");
                            ret.put("nomePessoa", nomeConti);
                            ret.put("classificacao", contaAnalitica);
                            ret.put("descricaoPlano", descricaoPlano);
                            return ret;
                        }
                    }
                } 
                
            }
			
			

            if (!nomePessoa.equals("")) {
                nomeConti = "";
                nomeConti = geraNomeContinuo(nomePessoa);
                records = findPessoaPorPlanoContasNovo(dbIOCont, codEmpresa, nomeConti, classificacao, numeroColunas);
                if (records != null && records.length() > 0) {
                    List resultados = new ArrayList();
                    JSONObject result = new JSONObject();
                    ttMemoria ttM = null;
                    
                    for(int i = 0; i < records.length(); i++){   
                        ttM = new ttMemoria();
                        result = records.optJSONObject(i);
                        ttM.memoria = calculate(nomeConti, result.optString("DESCRICAOCONTINUA")); // levenshtein distance
                        resultados.add(ttM);
                    }
                    int memoria = 1000000000;
                    int alvo = 1000000000;
                    boolean f = false;
                    for(int t = 0; t < resultados.size(); t++){
                        ttMemoria m = (ttMemoria)resultados.get(t);
                        if(m.memoria <= memoria){
                            alvo = t;
                            f = false;
                            if(memoria == m.memoria) f = true;
                            memoria = m.memoria;
                        }
                    }
                    double tamanho = records.optJSONObject(alvo).optString("DESCRICAOCONTINUA").length();
                    double calibragem = Math.floor((tamanho / 85) * tamanho);

					if((!f && memoria <= calibragem) || (true)) { // magia  cax
					
                        JSONObject record = records.optJSONObject(0);
                        String conta    = record.optString("CONTACONTABIL").trim();
                        chaveIoPessoa = codEmpresa + nomeConti;
                        if (tipoLancamento.equals("PAGAR")) {
                            if (conta != null && conta.trim().length() > 0) {
                                logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                                ret.put("contaDebito", conta);
                                ret.put("cnpjIOPessoa", "");
                                ret.put("nomePessoa", nomeConti);
                                return ret;
                            }
                        } else {
                            if (conta != null && conta.trim().length() > 0) {
                                logger.logDebug(">>> Achou a conta pelo 2o PASSO");
                                ret.put("contaCredito", conta);
                                ret.put("cnpjIOPessoa", "");
                                ret.put("nomePessoa", nomeConti);
                                return ret;
                            }
                        }
                    }
                
				}
				
				
            } */

        }
    } catch (Exception e2oPasso) {
        logger.logError("EndpointB: ERROR BUSCA PLANO CONTA - 2.1o PASSO", e2oPasso);
    }

    //------------------------------------------------------------------------------//
    // 3o PASSO - Busca a CONTA CONTABIL no IO_CONTA pelo NOME DO FORNECEDOR.       //
    //------------------------------------------------------------------------------//
    logger.logDebug(">>> 3o Passo");
    String contaCli = "";
    String contaFor = "";
    String chaveIoConta = "";
    nomePessoa = "";
    String nomeLike = "";
    String nomeOrigem = "";
    String cnpjIOPessoa = "";
	
    try {
        records = findContaPorNomePessoa(dbIOCont, codEmpresa, nomeFornecedor, false, fornecedorUnico);
        if (records.length() > 0) {
            JSONObject rec = records.optJSONObject(0);
            contaCli = rec.optString("CONTACTBCLI").trim();
            contaFor = rec.optString("CONTACTBFOR").trim();
            cpfCnpj = rec.optString("CPFCNPJ").trim();
            cnpjIOPessoa = rec.optString("CPFCNPJ").trim();
            chaveIoPessoa = codEmpresa + nomeFornecedor + cnpjIOPessoa;
            chaveIoConta = rec.optString("CHAVE").trim();
            nomePessoa = rec.optString("NOMEPESSOA").trim();
            if (tipoLancamento.equals("PAGAR")) {
                ret.put("contaDebito", contaFor);
            } else {
                ret.put("contaCredito", contaCli);
            }
            ret.put("cnpjIOPessoa", cnpjIOPessoa);
            ret.put("nomePessoa", nomePessoa);
            ret.put("nomeOrigem", nomePessoa);
            logger.logDebug(">>> Achou um fornecedor pelo 3o Passo. " + contaFor);
        }
    } catch (Exception e3oPasso) {
        logger.logError("EndpointB: ERROR BUSCA CONTA - 3o PASSO", e3oPasso);
    }

    //-----------------------------------------------------------------------------------------------------//
    // Gravar o IO_PESSOA com o relacionamento com o IO_CONTA.                                             //
    //-----------------------------------------------------------------------------------------------------//
    if ((contaFor != null && contaFor.trim().length() > 0) || (contaCli != null && contaCli.trim().length() > 0)) {
			
        if (hasPessoa(dbIOCont, chaveIoPessoa)) {
            try {
                updatePessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, contaCli,
                             contaFor, chaveIoConta, chaveIoPessoa);
            } catch (Exception eUpdateIOPessoa) {
                logger.logError("EndpointB: ERROR UPDATE IO_PESSOA", eUpdateIOPessoa);
            }
        } else {
            try {
                insertPessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, contaCli,
                             contaFor, chaveIoConta, chaveIoPessoa, fornecedorUnico);
            } catch (Exception eInsertIOPessoa) {
                logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
            }
        }
        if (tipoLancamento.equals("PAGAR")) {
            logger.logDebug(">>> Achou a conta pelo 3o PASSO. " + contaFor);
            ret.put("contaDebito", contaFor);
            ret.put("nomePessoa", nomePessoa);
            ret.put("nomeOrigem", nomePessoa);
            return ret;
        } else {
            logger.logDebug(">>> Achou a conta pelo 3o PASSO. " + contaCli);
            ret.put("contaCredito", contaCli);
            ret.put("nomePessoa", nomePessoa);
            ret.put("nomeOrigem", nomePessoa);
            return ret;
        }
    }

    //----------------------------------------------------------------------------------------------------//
    // 4o PASSO - Busca a CONTA CONTABIL no IO_CONTA pelos 20 primeiros caracteres do NOME DO FORNECEDOR. //
    //----------------------------------------------------------------------------------------------------//

    String codOrigem = "Sugerido";
    int tamanho = nomeFornecedor.trim().length();
    if (tamanho > 50) {
        nomeLike = nomeFornecedor.substring(0, 50) + "%";
    } else {
        nomeLike = nomeFornecedor.substring(0, tamanho) + "%";
    }
    try {
        records = findContaPorNomePessoa(dbIOCont, codEmpresa, nomeLike, true, fornecedorUnico);
        if (records.length() > 0) {
            JSONObject rec = records.optJSONObject(0);
            contaCli = rec.optString("CONTACTBCLI").trim();
            contaFor = rec.optString("CONTACTBFOR").trim();
            cpfCnpj = rec.optString("CPFCNPJ").trim();
            cnpjIOPessoa = rec.optString("CPFCNPJ").trim();
            chaveIoPessoa = codEmpresa + nomeFornecedor + cnpjIOPessoa;
            chaveIoConta = rec.optString("CHAVE").trim();
            nomePessoa = rec.optString("NOMEPESSOA").trim();
            if (tipoLancamento.equals("PAGAR")) {
                ret.put("contaDebito", contaFor);
            } else {
                ret.put("contaCredito", contaCli);
            }
            ret.put("cnpjIOPessoa", cnpjIOPessoa);
            ret.put("nomePessoa", nomePessoa);
            ret.put("nomeOrigem", nomePessoa);
            logger.logDebug(">>> Achou um fornecedor pelo 4o PASSO. " + contaFor);
        }
    } catch (Exception e4oPasso) {
        logger.logError("EndpointB: ERROR BUSCA CONTA - 4o PASSO", e4oPasso);
    }

    //-----------------------------------------------------------------------------------------------------//
    // Gravar o IO_PESSOA com o relacionamento com o IO_CONTA.                                             //
    //-----------------------------------------------------------------------------------------------------//
    if ((contaFor != null && contaFor.trim().length() > 0) || (contaCli != null && contaCli.trim().length() > 0)) {

        if (hasPessoa(dbIOCont, chaveIoPessoa)) {
            try {
                updatePessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, contaCli,
                             contaFor, chaveIoConta, chaveIoPessoa);
            } catch (Exception eUpdateIOPessoa) {
                logger.logError("EndpointB: ERROR UPDATE IO_PESSOA ", eUpdateIOPessoa);
            }
        } else {
            try {
                insertPessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, contaCli,
                             contaFor, chaveIoConta, chaveIoPessoa, fornecedorUnico);
            }
            catch (Exception eInsertIOPessoa) {
                logger.logError("EndpointB: ERROR INSERT IO_PESSOA ", eInsertIOPessoa);
            }
        }
        if (tipoLancamento.equals("PAGAR")) {
            logger.logDebug(">>> Achou a conta pelo 4o PASSO. " + contaFor);
            ret.put("contaDebito", contaFor);
            ret.put("contaSugerida", true);
            return ret;
        } else {
            logger.logDebug(">>> Achou a conta pelo 4o PASSO. " + contaCli);
            ret.put("contaCredito", contaCli);
            ret.put("contaSugerida", true);
            return ret;
        }
    }

    //-----------------------------------------------------------------------------------------------------//
    // 5o PASSO - Busca a CONTA CONTABIL no IO_PESSOA pelos 20 primeiros caracteres do NOME DO FORNECEDOR. //
    //-----------------------------------------------------------------------------------------------------//

    try {
        records = findPessoaPorEmpresaNomeOrigem(dbIOCont, codEmpresa, nomeLike, true);
        if (records.length() > 0) {
            JSONObject rec = records.optJSONObject(0);
            contaFor = rec.optString("CONTACTBFOR".trim());
            contaCli = rec.optString("CONTACTBCLI").trim();
            cnpjIOPessoa = rec.optString("CPFCNPJ").trim();
            chaveIoPessoa = codEmpresa + nomeFornecedor + cnpjIOPessoa;
            if (tipoLancamento.equals("PAGAR")) {
                if (contaFor != null && contaFor.trim().length() > 0) {
                    logger.logDebug(">>> Achou a conta pelo 5o PASSO. " + contaFor);
                    ret.put("contaDebito", contaFor);
                    ret.put("contaSugerida", true);
                    ret.put("cnpjIOPessoa", cnpjIOPessoa);
                    return ret;
                }
            } else {
                if (contaCli != null && contaCli.trim().length() > 0) {
                    logger.logDebug(">>> Achou a conta pelo 5o PASSO. " + contaCli);
                    ret.put("contaCredito", contaCli);
                    ret.put("contaSugerida", true);
                    ret.put("cnpjIOPessoa", cnpjIOPessoa);
                    return ret;
                }
            }

        }
    } catch (Exception e5oPasso) {
        logger.logError("EndpointB: ERROR BUSCA CONTA - 5o PASSO ", e5oPasso);
    }

    //-----------------------------------------------------------------------------------------------------//
    // Gravar o IO_PESSOA sem o relacionamento com o IO_CONTA para listar no DeParaFornecedores.           //
    //-----------------------------------------------------------------------------------------------------//
    logger.logDebug(">>> Atualiza IO_PESSOA sem relacionamento com IO_CONTA.");
    if (cpfCnpj == null || cpfCnpj.trim().length() == 0) {
        cpfCnpj = cnpjIOPessoa;
    }
    if (hasPessoa(dbIOCont, chaveIoPessoa)) {
        try {
            updatePessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, "", "", "", chaveIoPessoa);
        } catch (Exception eUpdateIOPessoa) {
            logger.logError("EndpointB: ERROR UPDATE IO_PESSOA", eUpdateIOPessoa);
        }
    } else {
        try {
            insertPessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, "", "", "", chaveIoPessoa, fornecedorUnico);
        }
        catch (Exception eInsertIOPessoa) {
            logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
        }
    }


    logger.logDebug(">>> Nao achou a conta");
    return ret;
}

private JSONObject buscaContaNovo(String codEmpresa, String nomeFornecedor,
                                  String cpfCnpj, String classificacao, String tipoLancamento, InoutLogger logger,
                                  DataBase dbIOCont, HashMap mapaPartPlano, HashMap mapaFornecedor, JSONObject futureObject) throws Exception {
    ttCache ttC = null;
    String keyPart = "";
    JSONObject ret = new JSONObject();
    Calendar c = Calendar.getInstance();
    if (tipoLancamento.equals("PAGAR")) {
        ret.put("contaDebito", "");
    } else {
        ret.put("contaCredito", "");
    }
    ret.put("contaSugerida", false);
    ret.put("cnpjIOPessoa", "");

    if (nomeFornecedor == null || nomeFornecedor.trim().length() == 0 ||
        codEmpresa == null || codEmpresa.trim().length() == 0) {
        return ret;

    }
    if (nomeFornecedor.length() > 170) nomeFornecedor = nomeFornecedor.substring(0,170).trim();

	String empresaProp = INOUT_ROUTE_ID.substring(INOUT_ROUTE_ID.indexOf(".")+1);
	empresaProp = empresaProp.substring(0, empresaProp.indexOf("_")).toUpperCase();
    String nomeCont = getNomeContabilidade();
	
	if (empresaProp.toUpperCase().equals(getNomeContabilidade().toUpperCase())) {
        SysProperties prop = SysProperties.getInstance();
        prop.load("contabil/" + getNomeContabilidade() + "/empresa.properties");
        nomeCont = prop.get("NOME_CONTABILIDADE");
    }
	
    nomeCont = nomeCont.replaceAll("DePara","").trim();
    SysProperties propriedades = SysProperties.getInstance();
    propriedades.load("contabil/" + nomeCont + "/contabil.properties");
    String fornecedorUnico = propriedades.get("FORNECEDOR_UNICO");
    JSONArray records = null;

	// logger.logDebug("NOMECONT " + nomeCont + " | " + empresaProp);

    logger.logDebug(">>> Empresa: " + codEmpresa + " Fornecedor: " + nomeFornecedor + " CNPJ: " + cpfCnpj);
	
	 // numero de colunas para buscar fornecedor.
	String stringColunas = "";
	int    numeroColunas = 0;
	
	// logger.logDebug("NC " + propriedades.get(codEmpresa + "_NUMERO_COLUNAS"));
	
	try {
		stringColunas = propriedades.get(codEmpresa + "_NUMERO_COLUNAS");
		numeroColunas = Integer.parseInt(stringColunas);
	}
	 catch (Exception xx) { numeroColunas = 0; }

    // Monta o campo IO_PESSOA.CHAVE
    String chaveIoPessoa = codEmpresa + nomeFornecedor + cpfCnpj;
	
    logger.logDebug(">>> Chave IO_PESSOA: " + chaveIoPessoa);
    //------------------------------------------------------------------------------//
    // 1o PASSO - Busca a CONTA CONTABIL no IO_PESSOA pelo CPFCNPJ.                 //
    //------------------------------------------------------------------------------//
	
	// logger.logDebug("OTTTT " + cpfCnpj + " | " + codEmpresa + " | " + nomeFornecedor + " | " + classificacao + " | " + numeroColunas + " | " + geraNomeContinuo(nomeFornecedor));
	String nomePessoa = "";
    // try{
		ttC = (ttCache)mapaFornecedor.get(nomeFornecedor);
		// logger.logDebug("TTCC " + ttC.toString());
	// } catch (Exception teste) {
		// logger.logDebug("Suponha que tenha um erro aqui ==>> "+teste);
	// }
    if(ttC == null){
		// logger.logDebug("T TTC 1");
        ttC = new ttCache();
        keyPart = nomeFornecedor;
        if (cpfCnpj != null && cpfCnpj.trim().length() > 0) {
            try {
                records = findPessoaPorEmpresaCnpj(dbIOCont, codEmpresa, cpfCnpj);  // retirado 17.09 para ver performance
                if (records.length() > 0) {
                    JSONObject rec = records.optJSONObject(0);
                    String contaFor = rec.optString("CONTACTBFOR").trim();
                    String contaCli = rec.optString("CONTACTBCLI").trim();
                    String nomeOrigem = rec.optString("NOMEORIGEM").trim();
                    nomePessoa = rec.optString("NOMEPESSOA").trim();
                    if (tipoLancamento.equals("PAGAR")) {
                        if (contaFor != null && contaFor.trim().length() > 0) {
                            // logger.logInfo(">>> Achou a conta pelo 1o PASSO " + nomeOrigem);
                            ret.put("contaDebito", contaFor);
                            ret.put("nomeOrigem", nomeOrigem);
                            ret.put("nomePessoa", nomePessoa);
                            ttC.ret = ret;
                            mapaFornecedor.put(keyPart, ttC); // cache
							
                             return ret;
                        }


                    } else {
                        if (contaCli != null && contaCli.trim().length() > 0) {
                            // logger.logInfo(">>> Achou a conta pelo 1o PASSO");
                            ret.put("contaCredito", contaCli);
                            ret.put("nomeOrigem", nomeOrigem);
                            ret.put("nomePessoa", nomePessoa);
                            ttC.ret = ret;
                            mapaFornecedor.put(keyPart, ttC); // cache
                             return ret;
                        }

                    }
                }
            } catch (Exception e1oPasso) {
                logger.logError("EndpointB: ERROR BUSCA CONTA - 1o PASSO", e1oPasso);
            }
        }

        //------------------------------------------------------------------------------//
        // 2o PASSO - Busca a CONTA CONTABIL no IO_PESSOA e IO_CONTA pelo NOME ORIGEM.  //
        //------------------------------------------------------------------------------//
        logger.logDebug(">>> 2o Passo1");
        try {
			// logger.logInfo("codEmpresa -> "+codEmpresa+" - nomeFornecedor -> "+nomeFornecedor);
            records = findPessoaPorEmpresaNomeOrigem(dbIOCont, codEmpresa, nomeFornecedor, false);
            if (records.length() > 0) {
                
                JSONObject record = records.optJSONObject(0);
                String contaFor = record.optString("CONTACTBFOR").trim();
                String contaCli = record.optString("CONTACTBCLI").trim();
                nomePessoa = record.optString("NOMEPESSOA").trim();
                String cnpjIOPessoa = record.optString("CPFCNPJ").trim();
                chaveIoPessoa = codEmpresa + nomeFornecedor + cnpjIOPessoa;
				
				// logger.logInfo("NP => "+nomePessoa+" - CTBFOR => "+contaFor+" - CTBCLI => "+contaCli);
				
                if (tipoLancamento.equals("PAGAR")) {
                    if (contaFor != null && contaFor.trim().length() > 0) {
                        // logger.logInfo(">>> Achou a conta pelo 2o PASSO2");
                        ret.put("contaDebito", contaFor);
                        ret.put("cnpjIOPessoa", cnpjIOPessoa);
                        ret.put("nomePessoa", nomePessoa);
                        ret.put("nomeOrigem", nomePessoa);
                        if (contaCli != null && contaCli.trim().length() > 0) ret.put("contaCredito", contaCli);
                        ttC.ret = ret;
                        mapaFornecedor.put(keyPart, ttC); // cache
                         return ret;
                    }
                } else {
                    if (contaCli != null && contaCli.trim().length() > 0) {
                        // logger.logInfo(">>> Achou a conta pelo 2o PASSO3");
                        ret.put("contaCredito", contaCli);
                        ret.put("cnpjIOPessoa", cnpjIOPessoa);
                        ret.put("nomePessoa", nomePessoa);
                        ret.put("nomeOrigem", nomePessoa);
                        ttC.ret = ret;
                        mapaFornecedor.put(keyPart, ttC); // cache
                         return ret;
                    }
                }
            }
        } catch (Exception e2oPasso) {
            logger.logError("EndpointB: ERROR BUSCA CONTA - 2o PASSO", e2oPasso);
        }
    } else {
        return ttC.ret;
    }

    ttC = (ttCache)mapaPartPlano.get(geraNomeContinuo(nomeFornecedor));
    if(ttC == null){ // sem cache
		// logger.logDebug("T TTC 2");
        try{
            ttC = new ttCache();
            String nomeConti = geraNomeContinuo(nomeFornecedor);
            keyPart = nomeConti;
            records = findParticipante(dbIOCont, nomeConti);

            if (records != null && records.length() == 1) {
                List resultados = new ArrayList();
                JSONObject result = new JSONObject();
                ttMemoria ttM = null;
                
                for(int i = 0; i < records.length(); i++){   
                    ttM = new ttMemoria();
                    result = records.optJSONObject(i);
                    ttM.memoria = calculate(nomeConti, result.optString("NOME")); // levenshtein distance
                    resultados.add(ttM);
                }
                int memoria = 1000000000;
                int alvo = 1000000000;
                boolean f = false;
                for(int par = 0; par < resultados.size(); par++){
                    ttM = (ttMemoria)resultados.get(par);
                    if( ttM.memoria <= memoria){
                        alvo = par;
                        f = memoria == ttM.memoria ? true : false;
                        memoria = ttM.memoria;
                    }
                }
                double tamanho = records.optJSONObject(alvo).optString("NOME").length();
                double calibragem = Math.floor(tamanho * 0.125);

                if(!f && memoria <= calibragem){
                    JSONObject record = records.optJSONObject(alvo);
                    String conta = records.optJSONObject(alvo).optString("CODIGO")+ "P";      
                    if (tipoLancamento.equals("PAGAR")) {
                        if (conta != null && conta.trim().length() > 0) {
                            ret.put("contaDebito", conta);
                            ttC.ret = ret;
                            mapaPartPlano.put(keyPart, ttC); // cache 
							// logger.logDebug("Retornou Participante 1");
                            return ret;
                        }
                    }else{
                        if (conta != null && conta.trim().length() > 0) {
                            ret.put("contaCredito", conta);
                            ttC.ret = ret;
                            mapaPartPlano.put(keyPart, ttC); // cache
							// logger.logDebug("Retornou Participante 2");
                            return ret;
                        }
                    }
                } 
            }
        }catch(Exception e){
            logger.logError("EndpointB: ERROR BUSCA PARTICIPANTE", e);
        }

        //------------------------------------------------------------------------------//
        // 2.1o PASSO - Busca a CONTA CONTABIL np plano de contas pelo nome da Planilha //
        //------------------------------------------------------------------------------//
		// TALVEZ POR AQUI E O ERRO
        // logger.logInfo(">>> 2.1o Passo4");
        try {
			
			String codEmpresaPlano = codEmpresa;
			if (futureObject != null && futureObject.has("codEmpresaPlano")) {
				codEmpresaPlano = (String) futureObject.get("codEmpresaPlano");
			}
			
			// logger.logDebug("NO -> "+nomeFornecedor+" - NP -> "+nomePessoa);

            // ignora pois quando vem o portador no nome do fornececedor, nao podemos sugerir a conta
            if (!nomeFornecedor.contains("BANCO")     && !nomeFornecedor.contains("SICRED")   && !nomeFornecedor.contains("SANTANDER") &&
                !nomeFornecedor.contains("DO BRASIL") && !nomeFornecedor.contains("ITAU")     && !nomeFornecedor.contains("BRADESCO") &&
                !nomeFornecedor.contains("CAIXA")     && !nomeFornecedor.contains("CEF")      && !nomeFornecedor.contains("BESC") &&
                !nomeFornecedor.contains("HSBC")      && !nomeFornecedor.contains("UNIBANCO") && !nomeFornecedor.contains("SAFRA") &&
                !nomeFornecedor.contains("UNICRED")   && !nomeFornecedor.contains("BANRISUL") && !nomeFornecedor.contains("SUDAMERIS") &&
                !nomeFornecedor.contains("PREFEITURA") && !nomePessoa.contains("PREFEITURA") &&
                !nomePessoa.contains("BANCO")     && !nomePessoa.contains("SICRED")   && !nomePessoa.contains("SANTANDER") &&
                !nomePessoa.contains("DO BRASIL") && !nomePessoa.contains("ITAU")     && !nomePessoa.contains("BRADESCO") &&
                !nomePessoa.contains("CAIXA")     && !nomePessoa.contains("CEF")      && !nomePessoa.contains("BESC") &&
                !nomePessoa.contains("HSBC")      && !nomePessoa.contains("UNIBANCO") && !nomePessoa.contains("SAFRA") &&
                !nomePessoa.contains("UNICRED")   && !nomePessoa.contains("BANRISUL") && !nomePessoa.contains("SUDAMERIS")) {

				// logger.logDebug("Entrou PC");
				
                String nomeConti = "";
                nomeConti = geraNomeContinuo(nomeFornecedor);
                keyPart = nomeConti;
				// logger.logDebug("UEPA =>> "+codEmpresa+" - "+nomeConti+" - "+classificacao);
                records = findPessoaPorPlanoContasNovo(dbIOCont, codEmpresaPlano, nomeConti, classificacao, numeroColunas);
				// logger.logDebug("ENTROU AE " + records.toString());
				// logger.logDebug("Records =>> "+records.length());
				
				if (records.length() == 1) {
					JSONObject record = records.optJSONObject(0);
					String conta          = record.optString("CONTACONTABIL").trim();
					String contaAnalitica = record.optString("CONTAANALITICA").trim();
					String descricaoPlano = record.optString("DESCRICAOPLANO").trim();
					
					
					if (numeroColunas == 0 ||  nomeFornecedor.equals(descricaoPlano) || nomeFornecedor.length() >= numeroColunas) {

						if (tipoLancamento.equals("PAGAR")) {
							if (conta != null && conta.trim().length() > 0) {
								chaveIoPessoa = codEmpresa + nomeConti;//@fabrica 08/04/22 -> colocamos o codigo dentro do if pois estavamos sobrescrevendo a chave 

								// logger.logInfo(">>> Achou a conta pelo 2o PASSO5");
								ret.put("contaDebito", conta);
								ret.put("cnpjIOPessoa", "");
								ret.put("nomePessoa", nomeConti);
								ret.put("classificacao", contaAnalitica);
								ret.put("descricaoPlano", descricaoPlano);
								return ret;
							}
						} else {
							if (conta != null && conta.trim().length() > 0) {
								// logger.logInfo(">>> Achou a conta pelo 2o PASSO6");
								chaveIoPessoa = codEmpresa + nomeConti; //@fabrica 08/04/22 -> colocamos o codigo dentro do if pois estavamos sobrescrevendo a chave 

								ret.put("contaCredito", conta);
								ret.put("cnpjIOPessoa", "");
								ret.put("nomePessoa", nomeConti);
								ret.put("classificacao", contaAnalitica);
								ret.put("descricaoPlano", descricaoPlano);
								return ret;
							}
						}
					}
				}

				if (!nomePessoa.equals("")) {
					nomeConti = "";
					nomeConti = geraNomeContinuo(nomePessoa);
					records = findPessoaPorPlanoContasNovo(dbIOCont, codEmpresaPlano, nomeConti, classificacao, numeroColunas);
					if (records.length() == 1) {
						JSONObject record = records.optJSONObject(0);
						String conta    = record.optString("CONTACONTABIL").trim();
						chaveIoPessoa = codEmpresa + nomeConti;
						
						if (tipoLancamento.equals("PAGAR")) {
							if (conta != null && conta.trim().length() > 0) {
								// logger.logInfo(">>> Achou a conta pelo 2o PASSO7");
								ret.put("contaDebito", conta);
								ret.put("cnpjIOPessoa", "");
								ret.put("nomePessoa", nomeConti);
								return ret;
							}
						} else {
							if (conta != null && conta.trim().length() > 0) {
								// logger.logInfo(">>> Achou a conta pelo 2o PASSO8");
								ret.put("contaCredito", conta);
								ret.put("cnpjIOPessoa", "");
								ret.put("nomePessoa", nomeConti);
								return ret;
							}
						}
					}

				}
			}
        } catch (Exception e2oPasso) {
            logger.logError("EndpointB: ERROR BUSCA PLANO CONTA - 2.1o PASSO", e2oPasso);
        }
    } else {
        return ttC.ret;
    }
    //------------------------------------------------------------------------------//
    // 3o PASSO - Busca a CONTA CONTABIL no IO_CONTA pelo NOME DO FORNECEDOR.       //
    //------------------------------------------------------------------------------//
    ttC = (ttCache)mapaFornecedor.get(nomeFornecedor);
    if(ttC == null){
		// logger.logDebug("T TTC 3");
        // logger.logInfo(">>> 3o Passo");
        String contaCli = "";
        String contaFor = "";
        String chaveIoConta = "";
        nomePessoa = "";
        String nomeLike = "";
        String nomeOrigem = "";
        String cnpjIOPessoa = "";
        ttC = new ttCache();
        keyPart = nomeFornecedor;
        try {
            records = findContaPorNomePessoa(dbIOCont, codEmpresa, nomeFornecedor, false, fornecedorUnico);
            if (records.length() > 0) {
                JSONObject rec = records.optJSONObject(0);
                contaCli = rec.optString("CONTACTBCLI").trim();
                contaFor = rec.optString("CONTACTBFOR").trim();
                cpfCnpj = rec.optString("CPFCNPJ").trim();
                cnpjIOPessoa = rec.optString("CPFCNPJ").trim();
                chaveIoPessoa = codEmpresa + nomeFornecedor + cnpjIOPessoa;
				
                chaveIoConta = rec.optString("CHAVE").trim();
                nomePessoa = rec.optString("NOMEPESSOA").trim();
                if (tipoLancamento.equals("PAGAR")) {
                    ret.put("contaDebito", contaFor);
                } else {
                    ret.put("contaCredito", contaCli);
                }
                ret.put("cnpjIOPessoa", cnpjIOPessoa);
                ret.put("nomePessoa", nomePessoa);
                ret.put("nomeOrigem", nomePessoa);
                logger.logDebug(">>> Achou um fornecedor pelo 3o Passo. " + contaFor);
            }
        } catch (Exception e3oPasso) {
            logger.logError("EndpointB: ERROR BUSCA CONTA - 3o PASSO", e3oPasso);
        }

        //-----------------------------------------------------------------------------------------------------//
        // Gravar o IO_PESSOA com o relacionamento com o IO_CONTA.                                             //
        //-----------------------------------------------------------------------------------------------------//
        if ((contaFor != null && contaFor.trim().length() > 0) || (contaCli != null && contaCli.trim().length() > 0)) {
			
            if (hasPessoa(dbIOCont, chaveIoPessoa)) {
                try {
                    updatePessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, contaCli,
                                contaFor, chaveIoConta, chaveIoPessoa);
                } catch (Exception eUpdateIOPessoa) {
                    logger.logError("EndpointB: ERROR UPDATE IO_PESSOA", eUpdateIOPessoa);
                }
            } else {
                try {
                    insertPessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, contaCli,
                                contaFor, chaveIoConta, chaveIoPessoa, fornecedorUnico);
                } catch (Exception eInsertIOPessoa) {
                    logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
                }
            }
            if (tipoLancamento.equals("PAGAR")) {
                logger.logDebug(">>> Achou a conta pelo 3o PASSO. " + contaFor);
                ret.put("contaDebito", contaFor);
                ret.put("nomePessoa", nomePessoa);
                ret.put("nomeOrigem", nomePessoa);
                ttC.ret = ret;
                mapaPartPlano.put(keyPart, ttC);   // cache
                return ret;
            } else {
                logger.logDebug(">>> Achou a conta pelo 3o PASSO. " + contaCli);
                ret.put("contaCredito", contaCli);
                ret.put("nomePessoa", nomePessoa);
                ret.put("nomeOrigem", nomePessoa);
                ttC.ret = ret;
                mapaPartPlano.put(keyPart, ttC);   // cache
                return ret;
            }
        }

        //----------------------------------------------------------------------------------------------------//
        // 4o PASSO - Busca a CONTA CONTABIL no IO_CONTA pelos 20 primeiros caracteres do NOME DO FORNECEDOR. //
        //----------------------------------------------------------------------------------------------------//

        String codOrigem = "Sugerido";
        int tamanho = nomeFornecedor.trim().length();
        if (tamanho > 50) {
            nomeLike = nomeFornecedor.substring(0, 50) + "%";
        } else {
            nomeLike = nomeFornecedor.substring(0, tamanho) + "%";
        }
        try {
            records = findContaPorNomePessoa(dbIOCont, codEmpresa, nomeLike, true, fornecedorUnico);
            if (records.length() > 0) {
                JSONObject rec = records.optJSONObject(0);
                contaCli = rec.optString("CONTACTBCLI").trim();
                contaFor = rec.optString("CONTACTBFOR").trim();
                cpfCnpj = rec.optString("CPFCNPJ").trim();
                cnpjIOPessoa = rec.optString("CPFCNPJ").trim();
                chaveIoPessoa = codEmpresa + nomeFornecedor + cnpjIOPessoa;
				
                chaveIoConta = rec.optString("CHAVE").trim();
                nomePessoa = rec.optString("NOMEPESSOA").trim();
                if (tipoLancamento.equals("PAGAR")) {
                    ret.put("contaDebito", contaFor);
                } else {
                    ret.put("contaCredito", contaCli);
                }
                ret.put("cnpjIOPessoa", cnpjIOPessoa);
                ret.put("nomePessoa", nomePessoa);
                ret.put("nomeOrigem", nomePessoa);
                logger.logDebug(">>> Achou um fornecedor pelo 4o PASSO. " + contaFor);
            }
        } catch (Exception e4oPasso) {
            logger.logError("EndpointB: ERROR BUSCA CONTA - 4o PASSO", e4oPasso);
        }

        //-----------------------------------------------------------------------------------------------------//
        // Gravar o IO_PESSOA com o relacionamento com o IO_CONTA.                                             //
        //-----------------------------------------------------------------------------------------------------//
        if ((contaFor != null && contaFor.trim().length() > 0) || (contaCli != null && contaCli.trim().length() > 0)) {
			
            if (hasPessoa(dbIOCont, chaveIoPessoa)) {
                try {
                    updatePessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, contaCli,
                                contaFor, chaveIoConta, chaveIoPessoa);
                } catch (Exception eUpdateIOPessoa) {
                    logger.logError("EndpointB: ERROR UPDATE IO_PESSOA ", eUpdateIOPessoa);
                }
            } else {
                try {
                    insertPessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, contaCli,
                                contaFor, chaveIoConta, chaveIoPessoa, fornecedorUnico);
                }
                catch (Exception eInsertIOPessoa) {
                    logger.logError("EndpointB: ERROR INSERT IO_PESSOA ", eInsertIOPessoa);
                }
            }
            if (tipoLancamento.equals("PAGAR")) {
                logger.logDebug(">>> Achou a conta pelo 4o PASSO. " + contaFor);
                ret.put("contaDebito", contaFor);
                ret.put("contaSugerida", true);
                ttC.ret = ret;
                mapaPartPlano.put(keyPart, ttC);   // cache
                return ret;
            } else {
                logger.logDebug(">>> Achou a conta pelo 4o PASSO. " + contaCli);
                ret.put("contaCredito", contaCli);
                ret.put("contaSugerida", true);
                ttC.ret = ret;
                mapaPartPlano.put(keyPart, ttC);   // cache
                return ret;
            }
        }

        //-----------------------------------------------------------------------------------------------------//
        // 5o PASSO - Busca a CONTA CONTABIL no IO_PESSOA pelos 20 primeiros caracteres do NOME DO FORNECEDOR. //
        //-----------------------------------------------------------------------------------------------------//

        try {
            records = findPessoaPorEmpresaNomeOrigem(dbIOCont, codEmpresa, nomeLike, true);
            if (records.length() > 0) {
                JSONObject rec = records.optJSONObject(0);
                contaFor = rec.optString("CONTACTBFOR".trim());
                contaCli = rec.optString("CONTACTBCLI").trim();
                cnpjIOPessoa = rec.optString("CPFCNPJ").trim();
                chaveIoPessoa = codEmpresa + nomeFornecedor + cnpjIOPessoa;
				
                if (tipoLancamento.equals("PAGAR")) {
                    if (contaFor != null && contaFor.trim().length() > 0) {
                        logger.logDebug(">>> Achou a conta pelo 5o PASSO. " + contaFor);
                        ret.put("contaDebito", contaFor);
                        ret.put("contaSugerida", true);
                        ret.put("cnpjIOPessoa", cnpjIOPessoa);
                        ttC.ret = ret;
                        mapaPartPlano.put(keyPart, ttC);   // cache
                        return ret;
                    }
                } else {
                    if (contaCli != null && contaCli.trim().length() > 0) {
                        logger.logDebug(">>> Achou a conta pelo 5o PASSO. " + contaCli);
                        ret.put("contaCredito", contaCli);
                        ret.put("contaSugerida", true);
                        ret.put("cnpjIOPessoa", cnpjIOPessoa);
                        ttC.ret = ret;
                        mapaPartPlano.put(keyPart, ttC);   // cache
                        return ret;
                    }
                }

            }
        } catch (Exception e5oPasso) {
            logger.logError("EndpointB: ERROR BUSCA CONTA - 5o PASSO ", e5oPasso);
        }

        //-----------------------------------------------------------------------------------------------------//
        // Gravar o IO_PESSOA sem o relacionamento com o IO_CONTA para listar no DeParaFornecedores.           //
        //-----------------------------------------------------------------------------------------------------//
        logger.logDebug(">>> Atualiza IO_PESSOA sem relacionamento com IO_CONTA.");
        if (cpfCnpj == null || cpfCnpj.trim().length() == 0) {
            cpfCnpj = cnpjIOPessoa;
        }
		
        if (hasPessoa(dbIOCont, chaveIoPessoa)) {
            try {
                updatePessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, "", "", "", chaveIoPessoa);
            } catch (Exception eUpdateIOPessoa) {
                logger.logError("EndpointB: ERROR UPDATE IO_PESSOA", eUpdateIOPessoa);
            }
        } else {
            try {
                insertPessoa(dbIOCont, codEmpresa, nomeFornecedor, nomePessoa, cpfCnpj, "", "", "", chaveIoPessoa, fornecedorUnico);
            }
            catch (Exception eInsertIOPessoa) {
                logger.logError("EndpointB: ERROR INSERT IO_PESSOA", eInsertIOPessoa);
            }
        }
    } else {
        return ttC.ret;
    }


    logger.logDebug(">>> Nao achou a conta");
    return ret;
}



class ttCache {
    public JSONObject ret;
    public ttCache(){}
    public ttCache(ttCache ttC){
        ret 	 = ttC.ret;
    }
}


class ttMemoria {
    public int memoria;
    public ttMemoria(){}
    public ttMemoria(ttMemoria ttP){
        memoria 	 = ttP.memoria;
    }
}



/* calculo da distancia de levenshtein*/
public int calculate(String x, String y) {
    int[][] dp = new int[x.length() + 1][y.length() + 1];
 
    for (int i = 0; i <= x.length(); i++) {
        for (int j = 0; j <= y.length(); j++) {
            if (i == 0) {
                dp[i][j] = j;
            }
            else if (j == 0) {
                dp[i][j] = i;
            }
            else {
                dp[i][j] = min(dp[i - 1][j - 1] 
                 + costOfSubstitution(x.charAt(i - 1), y.charAt(j - 1)), 
                  dp[i - 1][j] + 1, 
                  dp[i][j - 1] + 1);
            }
        }
    }
 
    return dp[x.length()][y.length()];
}
public int costOfSubstitution(char a, char b) {
    return a == b ? 0 : 1;
}
public int min(int... numbers) {
    return Arrays.stream(numbers)
      .min().orElse(Integer.MAX_VALUE);
}


//###############################################################################

/////////////////////////////////////////////////////////////////////////////////
// Implementa o metodo RUN dos ENDPOINTs B das rotas de importacao de planilha.
/////////////////////////////////////////////////////////////////////////////////
public void runPlanilhasEndpointB(Object dataIn, InoutLogger logger) throws Exception {

    List list = (List)dataIn;
    Calendar c = Calendar.getInstance();
	
	// gera seguranca nas conexoes com Heroku
	// Create a trust manager that does not validate certificate chains
    javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[] {
        new javax.net.ssl.X509TrustManager(){
            public java.security.cert.X509Certificate[] getAcceptedIssuers(){ return null; }

            public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) { }

            public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) { }
        }
    };

    // Install the all-trusting trust manager
    try {
        javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext.getInstance("TLS");
        sc.init(null, trustAllCerts, new java.security.SecureRandom());
        javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
    } catch (Exception e) {
        // 
    }
	
    String nomeContabilidade = getNomeContabilidade();
	//String nomeContabilidade = getNomeContabilidadeEmpresaProperties();

	// logger.logDebug("CONTABILIADE " + nomeContabilidade);

    String empresa = getNomeEmpresa();

    // Carrega as propriedades
    SysProperties props = SysProperties.getInstance();
    props.load("contabil/" + nomeContabilidade + "/contabil.properties");

    logger.logDebug(">>> EndpointB: Entrada no ENDPOINT B ");

    // Conecta na Base de Dados IO_CONTABIL.
    DataBase dbIOCont = connectIOContabil(props, logger);
    if (dbIOCont == null || !dbIOCont.connectionIsValid()) {
        throw new Exception("EndpointB: Nao foi possivel conectar no BANCO IO_CONTABIL");
    }

    logger.logDebug(">>> EndpointB: Banco de dados CONECTADO ");

    String codEmp = props.get(empresa + "_COD_EMPRESA");
    String nomeEmp = props.get(empresa + "_NOME_EMPRESA");
    String ERPEmpresa = props.get("ERP_CONTABILIDADE");
    String versaoPlataforma = props.get("VERSAO_PLATAFORMA");
    String compDirName = nomeEmp + "_#" + codEmp;

    String deParaDirName = RouteEngine.INOUT_HOME + "/contabil/" + nomeContabilidade + "/" + compDirName + "/DePara";
    String emailResponsavel2 = props.get(empresa + "_EMAIL_RESPONSAVEL");
    String emailCanal = props.get("EMAIL_CANAL");
    //if (!emailCanal.equals("")) emailResponsavel2 = emailResponsavel2 + "," + emailCanal;

    String geraTudoNoDePara = "";
    try {
        geraTudoNoDePara = props.get(empresa + "_EXIBE_TUDO_NO_DEPARA");
        if (geraTudoNoDePara == null) geraTudoNoDePara = "FALSE";
    }
    catch (Exception xx) {geraTudoNoDePara = "FALSE";}


    String chavePlanilha  = "";
    String lote           = "";
    String codEmpresa     = "";
    String tipoMovimento  = "";
    String tipoLancamento = "";
    String contaDebito    = "";
    String contaCredito   = "";
    String historico      = "";
    String nomeOrigem     = "";
    String cpfCnpj        = "";
    String nomeEmpresa    = "";
    String cnpjIOPessoa   = "";
    String statusMovimento = "";
    HashMap mapaLotes = new HashMap();
	String loteFila  = "";


    try {

        for (int i=0; i<list.size(); i++) {
            // Obtem a mensagem da FILA
            FilaInout  filaInout = (FilaInout)list.get(i);
            String message = filaInout.getMessage();
            JSONObject messg = new JSONObject(message);
            // Obtem o lote.
            loteFila  = messg.optString("LOTE");

            JSONArray array = null;
            if (mapaLotes.containsKey(loteFila)) {
                // Ja tem um array para o lote
                array = (JSONArray)mapaLotes.get(loteFila);
            } else {
                // Ainda nao tem um array para o lote
                array = new JSONArray();
                mapaLotes.put(loteFila, array);
            }
            array.put(messg);
        }

        Iterator it = mapaLotes.keySet().iterator();
        while (it.hasNext()) {
            String lotekey = it.next().toString();

            JSONArray array = (JSONArray)mapaLotes.get(lotekey);

            try{
                for (int i=0; i<array.length(); i++) {

                    JSONObject msg = array.getJSONObject(i);

                    chavePlanilha  = msg.optString("CHAVE").trim();
                    lote           = msg.optString("LOTE").trim();

                    codEmpresa     = msg.optString("CODEMPRESA").trim();
                    tipoMovimento  = msg.optString("TIPOMOVIMENTO").trim();
                    tipoLancamento = msg.optString("TIPOLANCAMENTO").trim();
                    contaDebito    = msg.optString("CONTADEBITO").trim();
                    contaCredito   = msg.optString("CONTACREDITO").trim();
                    historico      = msg.optString("HISTORICO").trim();
                    cpfCnpj        = msg.optString("CPFCNPJ").trim();
                    nomeEmpresa    = msg.optString("NOMEEMPRESA").trim();
                    nomeOrigem     = msg.optString("NOMEORIGEM").trim();

					String classificacao = msg.optString("CLASSIFICACAO").trim();
					String nomeArquivo = msg.optString("NOMEARQUIVO").toUpperCase();
					String dataMovimento = msg.optString("DATAMOVIMENTO").trim();

					if (nomeArquivo.toUpperCase().contains("FILTRO_")) {
						String dataInicial = cutString(nomeArquivo.toUpperCase(), "FILTRO_", "-");
						String dataFinal   = cutString(nomeArquivo, dataInicial + "-", "_");


						if (dataInicial.length() == 6) {
							dataInicial = dataInicial.substring(4) + dataInicial.substring(2,4) + dataInicial.substring(0,2);
						}


						if (dataFinal.length() == 6) {
							dataFinal = dataFinal.substring(4) + dataFinal.substring(2,4) + dataFinal.substring(0,2);
						}


						if (dataMovimento.length() == 10) {
							String dataValidaMovimento = dataMovimento.substring(8) + dataMovimento.substring(3,5) + dataMovimento.substring(0,2);

							try {
								int intDataMovimento = Integer.parseInt(String.valueOf(dataValidaMovimento));
								int intdataInicial   = Integer.parseInt(String.valueOf(dataInicial));
								int intdataFinal = Integer.parseInt(String.valueOf(dataFinal));
								if (intDataMovimento < intdataInicial || intDataMovimento > intdataFinal) {

									continue;
								}
							} catch (Exception xx) {
								continue;
							}

						}
					}

					boolean deparaFuncional = false;
					if (lote.contains("RECEBER") && (codEmpresa.equals("222") || codEmpresa.equals("223")) && nomeContabilidade.toUpperCase().contains("FUNCIONAL")) deparaFuncional = true;

					double valorJuros = msg.optDouble("VALORJUROS");
					double valorDesconto = msg.optDouble("VALORDESCONTO");
					double valorMulta = msg.optDouble("VALORMULTA");
                    statusMovimento  =  msg.optString("STATUSMOVIMENTO").trim();

                    //if (historico.length() > 500)     historico     = historico.substring(0,500);
                    if (chavePlanilha.length() > 200) chavePlanilha = chavePlanilha.substring(0,200);
                    if (nomeOrigem.length() > 200)    nomeOrigem    = nomeOrigem.substring(0,200);

                    // =========================================================================
                    // IGNORAR FORNECEDORESE CLIENTES QUE CONTENHAM NA CONTA O TERMO IGNORAR
                    // =========================================================================
                    if (contaDebito.contains("IGNORA")) continue;
                    if (contaCredito.contains("IGNORA")) continue;

                    if (contaDebito.contains("?")) contaDebito = "PENDENTE";
                    if (contaCredito.contains("?")) contaCredito = "PENDENTE";

                   
                    boolean contaSugerida = false;
                    cnpjIOPessoa = "";

                    // ====================================================
                    // ENCONTRA CONTA CONTABIL = PROCESSO CONTAS  A PAGAR
                    // ====================================================
                    if (tipoMovimento.equals("CTB") && tipoLancamento.equals("PAGAR")) {
                        logger.logDebug(">>> EndpointB: Tipo Movimento CTB.");

                        if (contaDebito == null || contaDebito.trim().length() == 0) {
                            JSONObject ret = buscaContaSimples(codEmpresa, nomeOrigem, cpfCnpj, tipoLancamento, logger, dbIOCont);  // simplificar
                            contaDebito = ret.optString("contaDebito").trim();
                            contaSugerida = ret.optBoolean("contaSugerida");
                            cnpjIOPessoa = ret.optString("cnpjIOPessoa").trim();
                        }
                        if (contaDebito == null || contaDebito.trim().length() == 0) {
                            contaDebito = "PENDENTE";
                        }
						if (!nomeContabilidade.toUpperCase().contains("DEPAULA") &&
							(!nomeContabilidade.toUpperCase().contains("FUNCIONAL") || deparaFuncional) &&
						    !nomeContabilidade.toUpperCase().equals("META") &&
							!nomeContabilidade.toUpperCase().contains("ESCONTEC") &&
							!nomeContabilidade.toUpperCase().contains("ESCRITORIOGOMES") &&
							versaoPlataforma.equals("02_Conecta_Via_Portal_Ottimizza") &&
							contaCredito.equals("") && ((valorJuros+valorMulta+valorDesconto) == 0) && classificacao.startsWith("X")) {
							contaCredito = "PENDENTE";
						}
                    }


                    // ====================================================
                    // ENCONTRA CONTA CONTABIL = PROCESSO CONTAS  A RECEBER
                    // ====================================================
                    if (tipoMovimento.equals("CTB") && tipoLancamento.equals("RECEBER")) {
                        logger.logDebug(">>> EndpointB: Tipo Movimento CTB.");
                        if (contaCredito == null || contaCredito.trim().length() == 0) {
                            JSONObject ret = buscaContaSimples(codEmpresa, nomeOrigem, cpfCnpj, tipoLancamento, logger, dbIOCont); // simplificar
                            contaCredito = ret.optString("contaCredito").trim();
                            contaSugerida = ret.optBoolean("contaSugerida");
                            cnpjIOPessoa = ret.optString("cnpjIOPessoa").trim();
                        }
                        if (contaCredito == null || contaCredito.trim().length() == 0) {
                            contaCredito = "PENDENTE";
                        }
						if (!nomeContabilidade.toUpperCase().contains("DEPAULA") &&
							(!nomeContabilidade.toUpperCase().contains("FUNCIONAL") || deparaFuncional) &&
						    !nomeContabilidade.toUpperCase().equals("META") &&
							!nomeContabilidade.toUpperCase().contains("ESCONTEC") &&
							!nomeContabilidade.toUpperCase().contains("ESCRITORIOGOMES") &&
							versaoPlataforma.equals("02_Conecta_Via_Portal_Ottimizza") &&
							contaDebito.equals("")&& ((valorJuros+valorMulta+valorDesconto) == 0) && classificacao.startsWith("X")) {
							contaDebito = "PENDENTE";
						}

                    }

					if (!nomeContabilidade.toUpperCase().contains("DEPAULA") &&
						!nomeContabilidade.toUpperCase().contains("ESCONTEC") &&
						(!nomeContabilidade.toUpperCase().contains("FUNCIONAL") || deparaFuncional) &&
						!nomeContabilidade.toUpperCase().equals("META") &&
						!nomeContabilidade.toUpperCase().contains("ESCRITORIOGOMES") &&
						versaoPlataforma.equals("02_Conecta_Via_Portal_Ottimizza") && tipoMovimento.equals("CTBPORT") && tipoLancamento.equals("PAGAR") && contaCredito.equals(""))  {
						contaCredito = "PENDENTE";
					}
					if (!nomeContabilidade.toUpperCase().contains("DEPAULA") &&
						!nomeContabilidade.toUpperCase().contains("ESCONTEC") &&
						(!nomeContabilidade.toUpperCase().contains("FUNCIONAL") || deparaFuncional) &&
						!nomeContabilidade.toUpperCase().equals("META") &&
						!nomeContabilidade.toUpperCase().contains("ESCRITORIOGOMES") &&
						versaoPlataforma.equals("02_Conecta_Via_Portal_Ottimizza") && tipoMovimento.equals("CTBPORT") && tipoLancamento.equals("RECEBER") && contaDebito.equals(""))  {
						contaDebito = "PENDENTE";
					}


                    if (cpfCnpj == null || cpfCnpj.trim().length() == 0) {
                        cpfCnpj = cnpjIOPessoa;
                    }

                    //=============================================================================================
                    // VERIFICA SE CONTA CONTABIL EXISTE PLANO DE CONTAS DO CLIENTE.
                    //=============================================================================================
                    if (tipoLancamento.equals("PAGAR") && tipoMovimento.equals("CTB") && contaDebito != null && !contaDebito.equals("") && !contaDebito.toUpperCase().contains("T") && !contaDebito.toUpperCase().contains("P")) {
                        JSONArray recordConta = verificaPlanoContas(dbIOCont, codEmpresa, contaDebito);
                        if (!nomeContabilidade.equals("Escritoriogomes") && !nomeContabilidade.contains("Funcionalconsultoria")) {
                            if (recordConta == null || recordConta.length() < 1) contaDebito = "PENDENTE";
                        }
                    }
                    if (tipoLancamento.equals("RECEBER") && tipoMovimento.equals("CTB") && contaCredito != null && !contaCredito.equals("") && !contaCredito.toUpperCase().contains("T") && !contaCredito.toUpperCase().contains("P")) {
                        JSONArray recordConta = verificaPlanoContas(dbIOCont, codEmpresa, contaCredito);

                        if (!nomeContabilidade.equals("Escritoriogomes") && !nomeContabilidade.contains("Funcionalconsultoria")) {
                            if (recordConta == null || recordConta.length() < 1) contaCredito = "PENDENTE";
                        }
                    }


                    if (tipoLancamento.equals("PAGAR"))   msg.put("CONTADEBITO", contaDebito);
                    if (tipoLancamento.equals("RECEBER")) msg.put("CONTACREDITO", contaCredito);

					if (contaCredito.equals("PENDENTE")) msg.put("CONTACREDITO", contaCredito);
					if (contaDebito.equals("PENDENTE")) msg.put("CONTADEBITO", contaDebito);


                    msg.put("HISTORICO", historico);
                    msg.put("CPFCNPJ", cpfCnpj);
                    msg.put("STATUSMOVIMENTO", statusMovimento);

                    JSONObject record = findMovimentoPorChave(dbIOCont, chavePlanilha);

                    if (record != null)  {
                        try {

                            updateMovimento(dbIOCont, msg);
                            //filaInout.setStatusCode(InoutConstants.STATUS_SENT);
                            //filaInout.setStatusDesc("");
                        } catch (Exception eUpdateMovimento) {
                            //filaInout.setStatusCode(InoutConstants.STATUS_TRANSFORMATION_ERROR);
                            //filaInout.setStatusDesc(eUpdateMovimento.getMessage());
                            logger.logError("EndpointB: Erro ao Atualizar Movimento", eUpdateMovimento);
                        }
                    } else {
                        try {

                            insertMovimento(dbIOCont, msg);
                            //filaInout.setStatusCode(InoutConstants.STATUS_SENT);
                            //filaInout.setStatusDesc("");
                        } catch (Exception eInsertMovimento) {
                            //filaInout.setStatusCode(InoutConstants.STATUS_TRANSFORMATION_ERROR);
                            //filaInout.setStatusDesc(eInsertMovimento.getMessage());
                            logger.logError("EndpointB: Erro ao fazer insert no Movimento", eInsertMovimento);
                        }
                    }
                } // FIM - For da leitura dos arquivos na fila.
            }
            catch (Exception arq) {}



        }

		//==============================================//
		// PREPARA GERACAO ARQUIVO DE-PARA FORNECEDORES //
		//==============================================//
		if (!loteFila.equals("")) {
			String dt = DateUtil.dateToString(new Date(), "yyyyMMddHHmmss");
			String filename = deParaDirName + "/DeParaConta_" + loteFila + "_" + dt + "000.csv";
			String filenameH = deParaDirName + "/Processado/HistDePara_" + loteFila + ".csv";

			if (versaoPlataforma.equals("02_Conecta_Via_Portal_Ottimizza")) {
				boolean gerouArquivo = gravaArquivoDeParaVersaoPortal(dbIOCont, nomeContabilidade, codEmpresa, loteFila, filename, filenameH, geraTudoNoDePara, logger);
				
				///////////////////////////////////////////////////////////
				// GERA ARQUIVO PARA IMPORTACAO ///////////////////////////
				///////////////////////////////////////////////////////////
				if (!gerouArquivo) {
					File txtGeraArquivo = new File(String.format("%s\\contabil\\Ottimizza\\GeraArquivo\\Gera_%s.txt", RouteEngine.INOUT_HOME, nomeContabilidade));

					if(!txtGeraArquivo.exists()) {
						try {
							if (txtGeraArquivo.createNewFile()) {
								logger.logDebug(String.format("Sucessfully created file at '%s'...", txtGeraArquivo.getAbsolutePath()));

								FileWriter writer = new FileWriter(txtGeraArquivo.getAbsolutePath());
								writer.writeNewFile("NOME CONTABILIDADE : " + nomeContabilidade);

							} else {
								logger.logDebug(String.format("Something went wrong while trying to create file at '%s'...\nMake sure the specified path doesn't already exists!", txtGeraArquivo.getAbsolutePath()));
							}   
						} catch(Exception createFileException) {
							logger.logError(String.format("Error trying to create file '%s'", txtGeraArquivo.getAbsolutePath()), createFileException);
						}
					} else {
						logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", txtGeraArquivo.getAbsolutePath()));
					}
					String rotaGera = "Ottimizza.GeraArquivoParaImportacao";
					RouteEngine.execRoute(rotaGera);
				}
			}
		}
		JSONObject jStatus = new JSONObject();
		putStatus(deParaDirName, "", jStatus, logger);

		File txtGeraArquivo = new File(String.format("%s\\contabil\\Ottimizza\\GeraArquivo\\Gera_%s.txt", RouteEngine.INOUT_HOME, nomeContabilidade));

		if(!txtGeraArquivo.exists()) {
			try {
				if (txtGeraArquivo.createNewFile()) {
					logger.logDebug(String.format("Sucessfully created file at '%s'...", txtGeraArquivo.getAbsolutePath()));

					FileWriter writer = new FileWriter(txtGeraArquivo.getAbsolutePath());
					writer.writeNewFile("NOME CONTABILIDADE : " + nomeContabilidade);

				} else {
					logger.logDebug(String.format("Something went wrong while trying to create file at '%s'...\nMake sure the specified path doesn't already exists!", txtGeraArquivo.getAbsolutePath()));
				}   
			} catch(Exception createFileException) {
				logger.logError(String.format("Error trying to create file '%s'", txtGeraArquivo.getAbsolutePath()), createFileException);
			}
		} else {
			logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", txtGeraArquivo.getAbsolutePath()));
		}
		String rotaGera = "Ottimizza.GeraArquivoParaImportacao";
		RouteEngine.execRoute(rotaGera);

    } catch (Exception e) {
        logger.logError("EndpointB:", e);
    } finally {
        if (dbIOCont != null) {
            try {
                dbIOCont.closeConnection();
            } catch (Exception e) {}
        }

    }
	logger.logDebug("FINALIZOU " + nomeEmp);
	
	



}


//###############################################################################

/////////////////////////////////////////////////////////////////////////////////
// Extrai do ROUTE_ID o nome da Contabilidade
/////////////////////////////////////////////////////////////////////////////////
private String getNomeContabilidade() throws Exception {
    String contabilidade = INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf("."));

    return contabilidade;
}


private String getNomeContabilidadeDePara() {
    return INOUT_ROUTE_ID.substring(0, INOUT_ROUTE_ID.indexOf("DePara"));
}


//###############################################################################

/////////////////////////////////////////////////////////////////////////////////
// Extrai do ROUTE_ID o nome da Empresa
/////////////////////////////////////////////////////////////////////////////////
private String getNomeEmpresa() throws Exception {
    String empresa = INOUT_ROUTE_ID.substring(INOUT_ROUTE_ID.indexOf(".")+1);
    empresa = empresa.substring(0, empresa.indexOf("_")).toUpperCase();


    if (empresa.equals(getNomeContabilidade().toUpperCase())) {
        SysProperties prop = SysProperties.getInstance();
        prop.load("contabil/" + getNomeContabilidade() + "/empresa.properties");
        empresa = prop.get("NOME_EMPRESA").toUpperCase();
    }
    return empresa;
}

private String getNomeEmpresa2() {
    String empresa = INOUT_ROUTE_ID.substring(INOUT_ROUTE_ID.indexOf(".")+1);
    empresa = empresa.substring(0, empresa.indexOf("_")).toUpperCase();

    return empresa;
}


/////////////////////////////////////////////////////////////////////////////////
// Extrai do ROUTE_ID o nome da Empresa
/////////////////////////////////////////////////////////////////////////////////
private String getNomeContabilidadeEmpresaProperties() throws Exception {
    String empresa = INOUT_ROUTE_ID.substring(INOUT_ROUTE_ID.indexOf(".")+1);
	String contabilidade = getNomeContabilidade();
   /* empresa = empresa.substring(0, empresa.indexOf("_")).toUpperCase();


    if (empresa.equals(getNomeContabilidade().toUpperCase())) {
        SysProperties prop = SysProperties.getInstance();
        prop.load("contabil/" + getNomeContabilidade() + "/empresa.properties");
        empresa = prop.get("NOME_EMPRESA").toUpperCase();
        contabilidade = prop.get("NOME_CONTABILIDADE").toUpperCase();
    } */
    return contabilidade;
}


private String getNomeRota() {
    String rota = INOUT_ROUTE_ID.substring(INOUT_ROUTE_ID.indexOf(".")+1);
    rota = rota.substring(rota.indexOf("_")+1).toUpperCase();
    return rota;
}


/////////////////////////////////////////////////////////////////////////////////
//              Envia e-mail de lote NAOEXISTEROTA.                    //
/////////////////////////////////////////////////////////////////////////////////
public void enviaEmailNaoExisteRota(JSONObject jsNaoExiste,
                                    InoutLogger logger) throws Exception {

    String subject          = "";
    String sendToName       = "";
    String emailResponsavel = "";
    String tipoIntegracao   = "";
    String nomeArquivo      = "";
    String nomeEmpresa      = "";

    if(jsNaoExiste.has("SUBJECT")) subject = jsNaoExiste.optString("SUBJECT");
    if(jsNaoExiste.has("SENDTONAME")) sendToName = jsNaoExiste.optString("SENDTONAME");
    if(jsNaoExiste.has("EMAILRESPONSAVEL")) emailResponsavel = jsNaoExiste.optString("EMAILRESPONSAVEL");
    if(jsNaoExiste.has("TIPOINTEGRACAO")) tipoIntegracao = jsNaoExiste.optString("TIPOINTEGRACAO");
    if(jsNaoExiste.has("NOMEARQUIVO")) nomeArquivo = jsNaoExiste.optString("NOMEARQUIVO");
    if(jsNaoExiste.has("NOMEEMPRESA")) nomeEmpresa = jsNaoExiste.optString("NOMEEMPRESA");

    StringBuilder msg = new StringBuilder();
    msg.append("<html>\n");
    msg.append("<head>\n");
    msg.append("</head>\n");
    msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");

    msg.append("<p><font style=\"font-size: 10pt\"></font>Prezado cliente, </p>\n");
    msg.append("<p><font style=\"font-size: 10pt\"><b/>A empresa " + nomeEmpresa + " n&atilde;o possui integra&ccedil;&atilde;o de contas "+tipoIntegracao+".</b></font></p>\n\n");

    msg.append("<p><font style=\"font-size: 10pt\">Atenciosamente,</font></p>\n");
    msg.append("<p><strong>SUPORTE OTTIMIZZA AUTOMACAO CONTABIL</strong>\n");
    msg.append("<br/>Rua 2 de setembro, 3753, Blumenau-SC \n");
    msg.append("<br/>+55 (47) 3035-3765 \n");
    msg.append("<br/>suporte@ottimizza.com.br</p>\n");
    msg.append("</body>\n");
    msg.append("</html>\n");

    if (nomeArquivo.contains("OTTIMIZZA") && !nomeArquivo.contains("OTTIMIZZAAUTOMACAO")) emailResponsavel = "suporte@ottimizza.com.br";

    enviaEmail(subject, emailResponsavel, sendToName, msg.toString(), null, logger);

}
//###############################################################################

/////////////////////////////////////////////////////////////////////////////////
////////////////////  ////   WORKFLOW   ////  ////////////////////
/////////////////////////////////////////////////////////////////////////////////
public JSONArray runEndpointAWorkflow(InoutLogger logger) throws Exception {
    JSONArray records    = new JSONArray();
    SysProperties props  = SysProperties.getInstance();
    SysProperties props2 = SysProperties.getInstance();

    try {
		String contabilidade = getNomeContabilidade();
        String dirName = RouteEngine.INOUT_HOME + "/contabil/" + getNomeContabilidade() + "/";
        File file = new File(dirName);
        String[] rotasLO = file.list();

        String arquivoGrande = "";
        String jSdir = "";
        boolean rotasOk = false;
        String filename = "";
        String filenameCanal = "";
        String extensaoSuportada = ".csv.xlsx.txt.ofx.dat.pdf.prn.ofc.omc";
        String sendToName       = getNomeContabilidade() + " -- OTTIMIZZA Contabil";
        double sizeLimit = 4;               //tamanho maximo processavel                        //-
/*
		if (sizeLimit < 15 && getNomeContabilidade().toUpperCase().contains("IGNIS")) sizeLimit = 15;
		if (sizeLimit < 50 && getNomeContabilidade().toUpperCase().contains("TECOLMG")) sizeLimit = 50;
		if (sizeLimit < 5 && getNomeContabilidade().toUpperCase().contains("ESCOLBE")) sizeLimit = 5;
*/
        sizeLimit = sizeLimit * (Math.pow(1024,2)); //MiB                                       //-

        String extensaoArquivo  = "";

        // Carrega as propriedades
        props.load("contabil/" + getNomeContabilidade() + "/contabil.properties");
        props2.load("contabil/" + getNomeContabilidade() + "/empresa.properties");

        String oicContabil  = props.get("OIC_LIBERADO");
        String emailCanal   = props.get("EMAIL_CANAL");
        String codigoCanal  = props.get("CODIGO_CANAL");
		String versaoPlataforma = props.get("VERSAO_PLATAFORMA");
	    String versaoOtzWebApp = "02_Conecta_Via_Portal_Ottimizza";


        String emailOic     = emailCanal;
        String subject      = "";
        String empresa      = "";
        String operacao     = "";

        /*String horaWorkflow = DateUtil.dateToString(new Date(), "HHmm");
        String logWorkflow  = RouteEngine.INOUT_HOME +  "/logs/workflow/" + getNomeContabilidade() + ".log";
        FileWriter writerWorkflow = new FileWriter(logWorkflow);
        StringBuilder txtWorkflow = new StringBuilder();
        txtWorkflow.append(horaWorkflow);
        writerWorkflow.writeNewFile(txtWorkflow.toString());
		*/

        if (codigoCanal == null) codigoCanal = "Admin";

        if (rotasLO != null) {

            for (String nome : rotasLO) {

                try {

                    if (nome.contains("_#")) {
                        empresa = nome.substring(0,nome.indexOf("_#")).toUpperCase();

						logger.logDebug("LENDO EMPRESA = " + empresa);
						
                        String emailResponsavel = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_EMAIL_RESPONSAVEL");
                        String oicEmpresa = props.get(nome.substring(0,nome.indexOf("_#")).toUpperCase() + "_LIBERA_OIC");

                        ///////////////////////////////////////////////////////////
                        // DEPARA /////////////////////////////////////////////////
                        ///////////////////////////////////////////////////////////
                        operacao = "DePara";
						String diretorio = dirName + nome + "/DePara";
						File file2 = new File(diretorio);
                        File [] files = file2.listFiles();
                        try {
                            if (FileUtil.dirHasFiles(diretorio)) {
                                for (File fileDePara: files) {

                                    if(fileDePara.length() < sizeLimit || !fileDePara.getName().toUpperCase().endsWith(".XLSX")){

                                        if (fileDePara.isFile()){
                                            //DE PARA
                                            if(fileDePara.getName().startsWith("OK_DePara") && fileDePara.getName().toLowerCase().endsWith(".csv")){
                                                String rotaDePara = contabilidade+"DePara" + ".AtualizaPendenciasIOMovimento";
												if (versaoPlataforma.equals(versaoOtzWebApp)) {
													rotaDePara = "Ottimizza.AtualizaPendenciasIOMovimento";

													File txtImportaPlanoContas = new File(String.format("%s/contabil/Ottimizza/AtualizaPendenciaIOMovimento/Atualiza_%s.txt", RouteEngine.INOUT_HOME, nome));

													// Criar diretorio ottimizza/AtualizaPendenciaIOMovimento se não existe.
													if (!txtImportaPlanoContas.getParentFile().exists()) txtImportaPlanoContas.getParentFile().mkdirs();

													if (!txtImportaPlanoContas.exists()) {
														try {
															String txtIPCContent = "";

															txtIPCContent += String.format("NOME_CONTABILIDADE : %s%n", contabilidade);
															txtIPCContent += String.format("NOME_EMPRESA : %s%n", nome.substring(0, nome.indexOf("_#")));
															txtIPCContent += String.format("CODIGO_EMPRESA : %s%n", nome.substring(nome.indexOf("#") + 1));

															// Escrever texto no arquivo
															FileWriter writerDePara = new FileWriter(txtImportaPlanoContas.getAbsolutePath());
															writerDePara.writeNewFile(txtIPCContent);
														} catch(Exception createFileException) {
															logger.logError(String.format("Error trying to create file '%s'!", txtImportaPlanoContas.getAbsolutePath()), createFileException);
														}
													} else {
														logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", txtImportaPlanoContas.getAbsolutePath()));
													}
												}
                                                RouteEngine.execRoute(rotaDePara);
                                                rotasOk = true;

											}

											//participante
											if (fileDePara.getName().toUpperCase().contains("PARTICIPANTE") &&
												(fileDePara.getName().toUpperCase().endsWith(".CSV") )){
												File ImportaParticipante = new File(String.format("%s/contabil/Ottimizza/ImportaParticipante/Participante_%s.txt", RouteEngine.INOUT_HOME, nome));
												// Criar diretorio ottimizza/ImportaPlanoContas se n?o existe.
												if (!ImportaParticipante.getParentFile().exists()) ImportaParticipante.getParentFile().mkdirs();

												if (!ImportaParticipante.exists()) {
													try {
														if (ImportaParticipante.createNewFile()) {
															// String com conteudos do Arquivo '.txt' com os dados para importacao
															// do Plano de Contas da Empresa.
															String txtIPContent = "";
															txtIPContent += String.format("NOME_CONTABILIDADE : %s%n", contabilidade);
															txtIPContent += String.format("NOME_EMPRESA : %s%n", nome.substring(0, nome.indexOf("_#")));
															txtIPContent += String.format("CODIGO_EMPRESA : %s%n", nome.substring(nome.indexOf("#") + 1));
															// Escrever texto no arquivo
															FileWriter writerDePara = new FileWriter(ImportaParticipante.getAbsolutePath());
															writerDePara.writeNewFile(txtIPContent);
														} else {
															logger.logDebug(String.format("Something went wrong while trying to create file at '%s'...\nMake sure the specified path doesn't already exists!", ImportaParticipante.getAbsolutePath()));
														}
													} catch(Exception createFileException) {
														logger.logError(String.format("Error trying to create file '%s'!", ImportaParticipante.getAbsolutePath()), createFileException);
													}
												} else {
													logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", ImportaParticipante.getAbsolutePath()));
												}
												String rotaImportaPlano = "Ottimizza.Participante";
												RouteEngine.execRoute(rotaImportaPlano);
											}
											//PLANO CONTAS
											if (!fileDePara.getName().toUpperCase().contains("PARTICIPANTE") && (fileDePara.getName().toUpperCase().contains("PLANO") && 
												(fileDePara.getName().toUpperCase().endsWith(".XLSX") || fileDePara.getName().toUpperCase().endsWith(".LST")|| fileDePara.getName().toUpperCase().endsWith(".TXT")))){                    
												File txtImportaPlanoContas = new File(String.format("%s/contabil/Ottimizza/ImportaPlanoContas/PlanoContas_%s.txt", RouteEngine.INOUT_HOME, nome));

                                                // Criar diretorio ottimizza/ImportaPlanoContas se não existe.
                                                if (!txtImportaPlanoContas.getParentFile().exists()) txtImportaPlanoContas.getParentFile().mkdirs();

                                                if (!txtImportaPlanoContas.exists()) {
                                                    try {
                                                        if (txtImportaPlanoContas.createNewFile()) {
                                                            // String com conteudos do Arquivo '.txt' com os dados para importacao
                                                            // do Plano de Contas da Empresa.
                                                            String txtIPCContent = "";

                                                            txtIPCContent += String.format("NOME_CONTABILIDADE : %s%n", contabilidade);
                                                            txtIPCContent += String.format("NOME_EMPRESA : %s%n", nome.substring(0, nome.indexOf("_#")));
                                                            txtIPCContent += String.format("CODIGO_EMPRESA : %s%n", nome.substring(nome.indexOf("#") + 1));

                                                            // Escrever texto no arquivo
                                                            FileWriter writerDePara = new FileWriter(txtImportaPlanoContas.getAbsolutePath());
                                                            writerDePara.writeNewFile(txtIPCContent);
                                                        } else {
                                                            logger.logDebug(String.format("Something went wrong while trying to create file at '%s'...\nMake sure the specified path doesn't already exists!", txtImportaPlanoContas.getAbsolutePath()));
                                                        }
                                                    } catch(Exception createFileException) {
                                                        logger.logError(String.format("Error trying to create file '%s'!", txtImportaPlanoContas.getAbsolutePath()), createFileException);
                                                    }
                                                } else {
                                                    logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", txtImportaPlanoContas.getAbsolutePath()));
                                                }
                                                String rotaImportaPlano = "Ottimizza.ImportaPlanoContas";
                                                RouteEngine.execRoute(rotaImportaPlano);
                                            }
                                        }
                                    }else{                  // envia email e move pra processado

                                        subject = "ARQUIVO GRANDE ("+fileDePara.length()/1024/1024+" MiB) -" + getNomeContabilidade() + "-" + empresa + "-" + operacao;
                                        StringBuilder msg = new StringBuilder();
                                        msg.append("<html>\n");
                                        msg.append("<head>\n");
                                        msg.append("</head>\n");
                                        msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");
                                        msg.append("<p><font style=\"font-size: 10pt\">to big, max size (" + sizeLimit/1024/1024 + " MiB).</font></p>\n");
                                        msg.append("</body>\n");
                                        msg.append("</html>\n");

                                        enviaEmail(subject, "suporte@ottimizza.com.br", "TAMANHO ARQUIVO", msg.toString(), null, logger);

                                        filename = fileDePara.getAbsolutePath();
                                        filename = filename.replaceAll("\\\\", "/");
                                        FileUtil.moveToDir(filename, diretorio + "/Processado");

                                    }
                                }
                            }
                        } catch (Exception deParaException) {
                            logger.logError("Erro executando DePara " + diretorio, deParaException);
                        }

                        ///////////////////////////////////////////////////////////
                        // APAGAR /////////////////////////////////////////////////
                        ///////////////////////////////////////////////////////////
                        operacao = "APagar";
                        diretorio = dirName + nome + "/"+ operacao;
                        file2 = new File(diretorio);


						// renomeia arquivos com extensão .XLSX
                        File []  arquivosCaixaAlta = file2.listFiles();
                        if (FileUtil.dirHasFiles(diretorio)) {

                            for (File fl: arquivosCaixaAlta) {

                                if(fl.length() < sizeLimit || !fl.getName().toUpperCase().endsWith(".XLSX")){
								// if(fl.length() < sizeLimit) {                    // processar apenas arquivos MENORES que o limite
                                    try {
										String arquivoDestino = fl.getAbsolutePath().replaceAll("\\.XLSX","_\\.xlsx").toLowerCase();
										if (fl.getAbsolutePath().contains(".XLSX")) {

											File fileDestino = new File(arquivoDestino);
											FileUtil.copyFolder(fl, fileDestino);
											FileUtil.deleteFile(fl);
										}
									}
									catch (Exception xx) {}
								}
							}
						}


						// FINAL renomeia arquivos com extensão .XLSX


                        files = file2.listFiles();


                        if (FileUtil.dirHasFiles(diretorio)) {

                            if (FileUtil.dirHasFiles(diretorio)) {
                                for (File fl: files) {
                                    if(fl.length() >= sizeLimit && fl.getAbsolutePath().toUpperCase().contains(".XLSX")){                    // processar apenas arquivos MENORES que o limite
                                        arquivoGrande = fl.getName();
                                        // jogar um erro de planilha com o nome do arquivo que eh muito grande!!!!!
                                        jSdir = fl.getAbsolutePath();
                                        jSdir = jSdir.replaceAll("\\\\", "/");
                                        jSdir = cutString(jSdir, 0, jSdir.lastIndexOf("/"));
                                        arquivoGrande = "Arquivo-Grande" + arquivoGrande + "_PAGAR";
                                        // jStatus = new JSONObject();
                                        // putStatus(dirName, "", jStatus, logger);
                                        //    putStatus(jSdir, arquivoGrande/* .replaceAll(" ", "-") */ + ".err", jStatus, logger);
                                    }
                                }
                                for (File fl: files) {
                                    if (arquivoGrande.equals("")) {
                                        try {

										//renomear arquivo que nao possua extensao para (.txt)
										if(fl.isFile() && !fl.getName().contains(".")){
											String flStr = fl.getAbsolutePath()+".txt";
											File flTemp = new File(flStr);
											fl.renameTo(flTemp);
										}

										if (fl.isFile() && oicContabil.equals("NAO")) {

                                            //envia email CONTABILIDADE INATIVA (canal,machado)
                                            subject = "Contabilidade INATIVA com arquivos a serem processados";
                                            enviaEmailContabilidadeInativa(getNomeContabilidade(), fl.getName(), nome, subject, emailOic, sendToName, "CONTABILIDADE INATIVA", "APagar", logger);
                                            //mover para processado arquivo
                                            filename = fl.getAbsolutePath();
                                            filename = filename.replaceAll("\\\\", "/");
                                            FileUtil.moveToDir(filename, diretorio + "/Processado");

                                        }else if(fl.isFile() && oicContabil.equals("SIM")){

                                            extensaoArquivo = fl.getName().substring(fl.getName().lastIndexOf(".")).toLowerCase();
                                            if(oicEmpresa.equals("NAO")){

                                                //envia email EMPRESA INATIVA (canal,machado,fechamento)
                                                emailOic = emailOic + ", " + emailResponsavel;
                                                subject = "Empresa INATIVA com arquivos a serem processados";
                                                enviaEmailEmpresaInativa(getNomeContabilidade(), fl.getName(), nome, subject, emailOic, sendToName, "EMPRESA INATIVA", "APagar", logger);

                                                //mover para processado arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorio + "/Processado");

                                            }else if (extensaoSuportada.contains(extensaoArquivo) && !extensaoArquivo.equals(".xls")) {

                                                //executa a rota
                                                String nomeRota = getNomeContabilidade() + "." + nome.substring(0,nome.indexOf("_#")) + "_ContasPagas";
                                                try{
                                                    StringBuilder txt1 = new StringBuilder();
                                                    String empresaProperties = dirName + "empresa.properties";
													FileWriter writer = new FileWriter(empresaProperties);
                                                    txt1.append("NOME_EMPRESA = " + nome.substring(0,nome.indexOf("_#")));
                                                    txt1.append("\r\n");
													txt1.append("NOME_CONTABILIDADE = " + getNomeContabilidade());
                                                   writer.writeNewFile(txt1.toString());


                                                    File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + getNomeContabilidade() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
                                                    File eServidor  = new File("C:/inout/docs/processos/producao.txt");
													File arquivoOrigem  = new File(RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidade() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
                                                    if(eServidor.exists()) {
														FileUtil.copyFolder(arquivoDeploy, arquivoOrigem);
														arquivoOrigem = new File("C:/ottimizza/Dropbox/Deploy/routes/" + getNomeContabilidade() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
													}

                                                    arquivoOrigem  = new File(RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidade() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasPagasEndpointA.script");
													File arquivoDestino = new File(RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidade() + "/" + getNomeContabilidade() + "_ContasPagasEndpointA.script");
                                                    if (nome.substring(0,nome.indexOf("_#")).toUpperCase().contains("BUSSOLA")) arquivoDestino = new File(RouteEngine.INOUT_HOME + "/routes/OTWBussola/LeituraBalanceteEndpointA.script");

                                                    logger.logDebug("ORIGEM  " + arquivoOrigem.getName());
                                                    logger.logDebug("DESTINO " + arquivoDestino.getName());
													FileUtil.copyFolder(arquivoOrigem, arquivoDestino);

													int antesRodar =  files.length;

                                                    nomeRota = getNomeContabilidade() + "." + getNomeContabilidade() +  "_ContasPagas";
                                                    if (nome.substring(0,nome.indexOf("_#")).toUpperCase().contains("BUSSOLA")) nomeRota = "OTWBussola.LeituraBalancete";

                                                    RouteEngine.execRoute(nomeRota);
                                                    rotasOk = true;

													File fileDepoisLista = new File(diretorio);
													File [] filesDepois = fileDepoisLista.listFiles();
													int depoisRodar =  filesDepois.length;

													if (antesRodar == depoisRodar) {
														String planilhaErro = dirName + nome + "/DePara" + "/empresa_PAGAR.err";
														FileWriter writerErro = new FileWriter(planilhaErro);
														writerErro.writeNewFile(planilhaErro.toString());
														if(fl.exists()) {
															//fl.delete();
															filename = fl.getAbsolutePath();
															filename = filename.replaceAll("\\\\", "/");
															FileUtil.moveToDir(filename, diretorio + "/Processado");
														}
														antesRodar--;
													} 

                                                }catch(Exception aa){
                                                    subject = "Nao existe integracao de contas Pagas";

                                                    JSONObject jsNaoExiste = new JSONObject();
                                                    jsNaoExiste.put("NOMECONTABILIDADE", getNomeContabilidade());
                                                    jsNaoExiste.put("SENDTONAME", sendToName);
                                                    jsNaoExiste.put("SUBJECT", subject);
                                                    //jsNaoExiste.put("EMAILRESPONSAVEL", emailResponsavel+",suporte@ottimizza.com.br");
                                                    //if(filename.toUpperCase().contains("OTTIMIZZAF"))
                                                    jsNaoExiste.put("EMAILRESPONSAVEL", "suporte@ottimizza.com.br");
                                                    jsNaoExiste.put("NOMEARQUIVO", fl.getName());
                                                    jsNaoExiste.put("TIPOINTEGRACAO", "Pagas");
                                                    jsNaoExiste.put("NOMEEMPRESA", nome);

                                                    enviaEmailNaoExisteRota(jsNaoExiste, logger);

                                                    //mover
                                                    filename = fl.getAbsolutePath();
                                                    filename = filename.replaceAll("\\\\", "/");
                                                    FileUtil.moveToDir(filename, diretorio + "/Processado");

                                                }

                                            } else if(extensaoArquivo.equals(".xls")) {
                                                //emailArquivoErrado xls
                                                subject = "Arquivo .xls nao suportado por OTTIMIZZA Contabil";

                                                enviaAvisoSobreArquivoErrado(fl.getName(), nome, subject, emailResponsavel, sendToName, "XLS", "APagar", logger);

                                                //mover para processado qualquer arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorio + "/Processado");

                                            } else {
                                                //emailArquivoErrado outros arquivos
                                                subject = "Arquivo nao suportado por OTTIMIZZA Contabil";

                                                enviaAvisoSobreArquivoErrado(fl.getName(), nome, subject, emailResponsavel, sendToName, "OUTROS", "APagar", logger);

                                                //mover para processado qualquer arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorio + "/Processado");
                                            }
                                        }
                                    } catch (Exception eee) {
                                        logger.logError("Erro processando o arquivo " + fl.getAbsolutePath(), eee);
                                    }
                                }else{ // envia email e move pra processado
                                    //////////////////
                                    subject = "ARQUIVO GRANDE ("+fl.length()/1024/1024+" MiB) -" + getNomeContabilidade() + "-" + empresa + "-" + operacao;
                                    StringBuilder msg = new StringBuilder();
                                    msg.append("<html>\n");
                                    msg.append("<head>\n");
                                    msg.append("</head>\n");
                                    msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");
                                    msg.append("<p><font style=\"font-size: 10pt\">O arquivo \"" + arquivoGrande + "\" muito grande, tamanho maximo permitido para XLSX: (" + sizeLimit/1024/1024 + " Mb).</font></p>\n");
                                    msg.append("</body>\n");
                                    msg.append("</html>\n");

                                    enviaEmail(subject, "suporte@ottimizza.com.br", "TAMANHO ARQUIVO", msg.toString(), null, logger);

                                    filename = fl.getAbsolutePath();
                                    filename = filename.replaceAll("\\\\", "/");
                                    if (!filename.endsWith("/Processado"))
                                    FileUtil.moveToDir(filename, diretorio + "/Processado");

                                }
                            }
                        }
                    }

                        ///////////////////////////////////////////////////////////
                        // ARECEBER ///////////////////////////////////////////////
                        ///////////////////////////////////////////////////////////
                        operacao = "AReceber";
                        diretorio = dirName + nome + "/"+ operacao;
                        file2 = new File(diretorio);

						// renomeia arquivos com extensão .XLSX
                        arquivosCaixaAlta = file2.listFiles();
                        if (FileUtil.dirHasFiles(diretorio)) {

                            for (File fl: arquivosCaixaAlta) {

                                if(fl.length() < sizeLimit || !fl.getName().toUpperCase().endsWith(".XLSX")){
								//if(fl.length() < sizeLimit ) {                    // processar apenas arquivos MENORES que o limite
                                    try {
										String arquivoDestino = fl.getAbsolutePath().replaceAll("\\.XLSX","_\\.xlsx").toLowerCase();
										if (fl.getAbsolutePath().contains(".XLSX")) {

											File fileDestino = new File(arquivoDestino);
											FileUtil.copyFolder(fl, fileDestino);
											FileUtil.deleteFile(fl);
										}
									}
									catch (Exception xx) {}
								}
							}
						}

                        files = file2.listFiles();
                        emailOic = emailCanal;
                        if (FileUtil.dirHasFiles(diretorio)) {

                            if (FileUtil.dirHasFiles(diretorio)) {
                                for (File fl: files) {
                                    if(fl.length() >= sizeLimit && fl.getAbsolutePath().toUpperCase().contains(".XLSX")){                    // processar apenas arquivos MENORES que o limite
                                        arquivoGrande = fl.getName();
                                        // jogar um erro de planilha com o nome do arquivo que eh muito grande!!!!!
                                        jSdir = fl.getAbsolutePath();
                                        jSdir = jSdir.replaceAll("\\\\", "/");
                                        jSdir = cutString(jSdir, 0, jSdir.lastIndexOf("/"));
                                        arquivoGrande = "Arquivo-Grande" + arquivoGrande + "_PAGAR";
                                        // jStatus = new JSONObject();
                                        // putStatus(dirName, "", jStatus, logger);
                                        //     putStatus(jSdir, arquivoGrande/* .replaceAll(" ", "-") */ + ".err", jStatus, logger);
                                    }
                                }
                                for (File fl: files) {
                                    if (arquivoGrande.equals("")) {
                                        try {
										//renomear arquivo que nao possua extensao para (.txt)
										if(fl.isFile() && !fl.getName().contains(".")){
											String flStr = fl.getAbsolutePath()+".txt";
											File flTemp = new File(flStr);
											fl.renameTo(flTemp);
										}

                                        if (fl.isFile() && oicContabil.equals("NAO")) {

                                            //envia email CONTABILIDADE INATIVA (canal,machado)
                                            subject = "Contabilidade INATIVA com arquivos a serem processados";
                                            enviaEmailContabilidadeInativa(getNomeContabilidade(), fl.getName(), nome, subject, emailOic, sendToName, "CONTABILIDADE INATIVA", "AReceber", logger);
                                            //mover para processado arquivo
                                            filename = fl.getAbsolutePath();
                                            filename = filename.replaceAll("\\\\", "/");
                                            FileUtil.moveToDir(filename, diretorio + "/Processado");
                                        }
										else if(fl.isFile() && oicContabil.equals("SIM")){

                                            extensaoArquivo = fl.getName().substring(fl.getName().lastIndexOf(".")).toLowerCase();
                                            if(oicEmpresa.equals("NAO")){

                                                //envia email EMPRESA INATIVA (canal,machado,fechamento)
                                                subject = "Empresa INATIVA com arquivos a serem processados";
                                                emailOic = emailOic + ", " + emailResponsavel;
                                                enviaEmailEmpresaInativa(getNomeContabilidade(), fl.getName(), nome, subject, emailOic, sendToName, "EMPRESA INATIVA", "AReceber", logger);

                                                //mover para processado arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorio + "/Processado");
                                            }else if (extensaoSuportada.contains(extensaoArquivo) && !extensaoArquivo.equals(".xls")) {

                                                //executa a rota
                                                String nomeRota = getNomeContabilidade() + "." + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidas";
                                                try{
                                                    StringBuilder txt = new StringBuilder();
                                                    String empresaProperties = dirName + "empresa.properties";
                                                    FileWriter writer = new FileWriter(empresaProperties);
                                                    txt.append("NOME_EMPRESA = " + nome.substring(0,nome.indexOf("_#")));
                                                    txt.append("\r\n");
													txt.append("NOME_CONTABILIDADE = " + getNomeContabilidade());
                                                    writer.writeNewFile(txt.toString());

													File arquivoDeploy  = new File("C:/ottimizza/Dropbox/Deploy/routes/" + getNomeContabilidade() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
                                                    File eServidor  = new File("C:/inout/docs/processos/producao.txt");
													File arquivoOrigem  = new File(RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidade() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
                                                    if(eServidor.exists()) {
														FileUtil.copyFolder(arquivoDeploy, arquivoOrigem);
														arquivoOrigem = new File("C:/ottimizza/Dropbox/Deploy/routes/" + getNomeContabilidade() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
													}

                                                    arquivoOrigem  = new File(RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidade() + "/" + nome.substring(0,nome.indexOf("_#")) + "_ContasRecebidasEndpointA.script");
													File arquivoDestino = new File(RouteEngine.INOUT_HOME + "/routes/" + getNomeContabilidade() + "/" + getNomeContabilidade() + "_ContasRecebidasEndpointA.script");

													FileUtil.copyFolder(arquivoOrigem, arquivoDestino);
                                                    nomeRota = getNomeContabilidade() + "." + getNomeContabilidade() +  "_ContasRecebidas";

													int antesRodar =  files.length;
                                                    RouteEngine.execRoute(nomeRota);
                                                    rotasOk = true;

													File fileDepoisLista = new File(diretorio);
													File [] filesDepois = fileDepoisLista.listFiles();
													int depoisRodar =  filesDepois.length;

													if (antesRodar == depoisRodar) {
														String planilhaErro = dirName + nome + "/DePara" + "/empresa_RECEBER.err";
														FileWriter writerErro = new FileWriter(planilhaErro);
														writerErro.writeNewFile(planilhaErro.toString());
														if(fl.exists()) {
															//fl.delete();
															filename = fl.getAbsolutePath();
															filename = filename.replaceAll("\\\\", "/");
															FileUtil.moveToDir(filename, diretorio + "/Processado");
														}
														antesRodar--;
													}


                                                }catch(Exception aa){
                                                    subject = "Nao existe integracao de contas Recebidas";

                                                    JSONObject jsNaoExiste = new JSONObject();
                                                    jsNaoExiste.put("NOMECONTABILIDADE", getNomeContabilidade());
                                                    jsNaoExiste.put("SENDTONAME", sendToName);
                                                    jsNaoExiste.put("SUBJECT", subject);
                                                    //jsNaoExiste.put("EMAILRESPONSAVEL", emailResponsavel+",suporte@ottimizza.com.br");
                                                    //if(filename.toUpperCase().contains("OTTIMIZZAF"))
                                                    jsNaoExiste.put("EMAILRESPONSAVEL", "suporte@ottimizza.com.br");
                                                    jsNaoExiste.put("TIPOINTEGRACAO", "Recebidas");
                                                    jsNaoExiste.put("NOMEARQUIVO", fl.getName());
                                                    jsNaoExiste.put("NOMEEMPRESA", nome);

                                                    enviaEmailNaoExisteRota(jsNaoExiste, logger);
                                                    //mover
                                                    filename = fl.getAbsolutePath();
                                                    filename = filename.replaceAll("\\\\", "/");
                                                    FileUtil.moveToDir(filename, diretorio + "/Processado");
                                                }

                                            } else if (extensaoArquivo.equals(".xls")) {
                                                //enviaAvisoSobreArquivo xls
                                                subject = "Arquivo .xls nao suportado por OTTIMIZZA Contabil";
                                                enviaAvisoSobreArquivoErrado(fl.getName(), nome,  subject, emailResponsavel, sendToName, "XLS", "AReceber", logger);

                                                //mover para processado qualquer arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorio + "/Processado");

                                            } else {
                                                //enviaAvisoSobreArquivo outros arquivos
                                                subject = "Arquivo nao suportado por OTTIMIZZA Contabil";
                                                enviaAvisoSobreArquivoErrado(fl.getName(), nome,  subject, emailResponsavel, sendToName, "OUTROS", "AReceber", logger);

                                                //mover para processado qualquer arquivo
                                                filename = fl.getAbsolutePath();
                                                filename = filename.replaceAll("\\\\", "/");
                                                FileUtil.moveToDir(filename, diretorio + "/Processado");
                                            }
                                        }
                                    } catch (Exception eee) {
                                        logger.logError("Erro processando o arquivo " + fl.getAbsolutePath(), eee);
                                    }
                                }else{                  // envia email e move pra processado

                                    subject = "ARQUIVO GRANDE ("+fl.length()/1024/1024+" MiB) -" + getNomeContabilidade() + "-" + empresa + "-" + operacao;
                                    StringBuilder msg = new StringBuilder();
                                    msg.append("<html>\n");
                                    msg.append("<head>\n");
                                    msg.append("</head>\n");
                                    msg.append("<body lang=\"en-US\" dir=\"ltr\">\n");
                                    msg.append("<p><font style=\"font-size: 10pt\">O arquivo \"" + arquivoGrande + "\" muito grande, tamanho maximo permitido para XLSX: (" + sizeLimit/1024/1024 + " Mb).</font></p>\n");
                                    msg.append("</body>\n");
                                    msg.append("</html>\n");

                                    enviaEmail(subject, "suporte@ottimizza.com.br", "TAMANHO ARQUIVO", msg.toString(), null, logger);

                                    filename = fl.getAbsolutePath();
                                    filename = filename.replaceAll("\\\\", "/");
                                    if (!filename.endsWith("/Processado"))
                                        FileUtil.moveToDir(filename, diretorio + "/Processado");

                                }
                            }
                        }
                    }

                    }
                } catch (Exception ee) {
                    logger.logError(ee);
                }
            }

			/*
            ///////////////////////////////////////////////////////////
            // GERA ARQUIVO PARA IMPORTACAO ///////////////////////////
            ///////////////////////////////////////////////////////////
            if (rotasOk) {
                File txtGeraArquivo = new File(String.format("%s\\contabil\\Ottimizza\\GeraArquivo\\Gera_%s.txt", RouteEngine.INOUT_HOME, getNomeContabilidade()));

				String rotaGera = "Ottimizza.GeraArquivoParaImportacao";
				if (!getNomeContabilidade().toUpperCase().equals("ESCRILEX") && 
				    !getNomeContabilidade().toUpperCase().equals("DEPAULA") &&
					!getNomeContabilidade().toUpperCase().equals("RUICADETE")) {
					if(!txtGeraArquivo.exists()) {
						try {
							if (txtGeraArquivo.createNewFile()) {
								logger.logDebug(String.format("Sucessfully created file at '%s'...", txtGeraArquivo.getAbsolutePath()));

								FileWriter writer = new FileWriter(txtGeraArquivo.getAbsolutePath());
								writer.writeNewFile("NOME CONTABILIDADE : " + getNomeContabilidade());

							} else {
								logger.logDebug(String.format("Something went wrong while trying to create file at '%s'...\nMake sure the specified path doesn't already exists!", txtGeraArquivo.getAbsolutePath()));
							}
						} catch(Exception createFileException) {
							logger.logError(String.format("Error trying to create file '%s'", txtGeraArquivo.getAbsolutePath()), createFileException);
						}
					} else {
						logger.logDebug(String.format("File '%s' not created. \nThe file already exists!", txtGeraArquivo.getAbsolutePath()));
					}
				} else {
					rotaGera = toDisplayCase(getNomeContabilidade()) + ".GeraArquivoParaImportacao";
				}
				
                RouteEngine.execRoute(rotaGera);
                rotasOk = false;
            }
			*/
			
        }
    } catch (Exception e) {
        logger.logError(e);
    }

    return records;
}


public JSONObject runEndpointBWorkflow(Object dataIn, InoutLogger logger) throws Exception {
    List list = (List)dataIn;

    // Percorre a lista de objetos
    for (int i=0; i<list.size(); i++) {

        // Obtem objeto de FilaInout
        FilaInout filaInout = (FilaInout)list.get(i);
        String msg = filaInout.getMessage();
        JSONObject record = new JSONObject(msg);
        try {



        } catch (Exception e) {
            filaInout.setStatusCode(InoutConstants.STATUS_TRANSFORMATION_ERROR);
            filaInout.setStatusDesc(e.getMessage());
            logger.logError(e);
        }
    }

    return new JSONObject();
}

/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////enviaAvisoSobreArquivoErrado////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

private void enviaAvisoSobreArquivoErrado(String filename, String nome, String subject,
                                          String emailResponsavel, String sendToName, String tipoMsg,
                                          String tipo, InoutLogger logger) throws Exception {

    StringBuilder msg = new StringBuilder();
    msg.append("<html>\n")
    .append("<head>\n")
    .append("</head>\n")
    .append("<body lang=\"en-US\" dir=\"ltr\">\n")
    .append("<p><font style=\"font-size: 10pt\">\n")
    .append("<br/>O arquivo<b> ").append(filename)
    .append(" </b>copiado no diretorio<b> ").append(nome)
    .append("/").append(tipo).append("</b>\n")
    .append("<br/>nao pode ser importado pela OTTIMIZZA.");

    if (tipoMsg.equals("XLS")) {
        msg.append("<br/>Favor editar o arquivo e SALVAR COMO extensao .xlsx(planilha de trabalho Excel)\n")
        .append("<br/>Atencao: renomear o arquivo nao funcionara, deve-se edita-lo e salvar como.\n");


    } else if (tipoMsg.equals("OUTRO")) {
        msg.append("<br/>Favor verificar o tipo de arquivo salvo.\n")
        .append("<br/>Atencao: arquivos suportados '.txt', '.xlsx', '.csv', '.dat', '.ofx'\n");
    }

    msg.append("<br/><br/>Atenciosamente,")
    .append("<p><strong>SUPORTE OTTIMIZZA AUTOMACAO CONTABIL</strong>\n")
    .append("<br/>Rua 2 de setembro, 3753, Blumenau-SC \n")
    .append("<br/>+55 (47) 3035-3765 \n")
    .append("<br/>suporte@ottimizza.com.br</p>\n")
    .append("</body>\n")
    .append("</html>\n");

    if (filename.contains("OTTIMIZZA") && !nome.contains("OTTIMIZZAAUTOMACAO")) emailResponsavel = "suporte@ottimizza.com.br";
    enviaEmail(subject, emailResponsavel, sendToName, msg.toString(), null, logger);


}
////////////////////////////////////////////////////////////////////////
////////////////  email Contabilidade Inativa   ////////////////////////
////////////////////////////////////////////////////////////////////////
private void enviaEmailContabilidadeInativa(String contabilidade, String filename, String nome, String subject,
                                            String emailResponsavel, String sendToName, String tipoMsg,
                                            String tipo, InoutLogger logger) throws Exception {

    String emailCanal = emailResponsavel.substring(0,emailResponsavel.indexOf(","));

    StringBuilder msg = new StringBuilder();
    msg.append("<html>\n")
    .append("<head>\n")
    .append("</head>\n")
    .append("<body lang=\"en-US\" dir=\"ltr\">\n")
    .append("<p><font style=\"font-size: 10pt\">\n")
    .append("<br/>Prezado cliente, ")
    .append("<br/><br/>Detectamos que foi enviada planilha da empresa <b>").append(nome)
    .append("</b> para ser processada pela Ottimizza.")
    .append("<br/>No momento o serviço não encontra-se operante.")
    .append("<br/><br/>Pedimos que entre em contato com seu canal de atendimento, atraves do e-mail: ").append(emailCanal);

    msg.append("<br/><br/>Atenciosamente,")
    .append("<p><strong>SUPORTE OTTIMIZZA AUTOMACAO CONTABIL</strong>\n")
    .append("<br/>Rua 2 de setembro, 3753, Blumenau-SC \n")
    .append("<br/>+55 (47) 3035-3765 \n")
    .append("<br/>suporte@ottimizza.com.br</p>\n")
    .append("</body>\n")
    .append("</html>\n");

    enviaEmail(subject, emailResponsavel, sendToName, msg.toString(), null, logger);

}
////////////////////////////////////////////////////////////////////////
////////////////////  email Empresa Inativa   //////////////////////////
////////////////////////////////////////////////////////////////////////
private void enviaEmailEmpresaInativa(String contabilidade,String filename, String nome, String subject,
                                      String emailResponsavel, String sendToName, String tipoMsg,
                                      String tipo, InoutLogger logger) throws Exception {
    String emailCanal = emailResponsavel.substring(0,emailResponsavel.indexOf(","));

    StringBuilder msg = new StringBuilder();
    msg.append("<html>\n")
    .append("<head>\n")
    .append("</head>\n")
    .append("<body lang=\"en-US\" dir=\"ltr\">\n")
    .append("<p><font style=\"font-size: 10pt\">\n")
    .append("<br/>Prezado cliente, ")
    .append("<br/><br/>Detectamos que foi enviada planilha da empresa <b>").append(nome)
    .append("</b> para ser processada pela Ottimizza.")
    .append("<br/>Informamos que a ").append(nome).append(" encontra-se com situacao igual a <b>'inativo'</b> em nosso sistema.")
    .append("<br/><br/>Pedimos que entre em contato com seu canal de atendimento, atraves do e-mail: ").append(emailCanal);

    msg.append("<br/><br/>Atenciosamente,")
    .append("<p><strong>SUPORTE OTTIMIZZA AUTOMACAO CONTABIL</strong>\n")
    .append("<br/>Rua 2 de setembro, 3753, Blumenau-SC \n")
    .append("<br/>+55 (47) 3035-3765 \n")
    .append("<br/>suporte@ottimizza.com.br</p>\n")
    .append("</body>\n")
    .append("</html>\n");
    enviaEmail(subject, emailResponsavel, sendToName, msg.toString(), null, logger);


}
////////////////////////////////////////////////////////////////////////
////////////////////  gera Nome Continuo   /////////////////////////////
////////////////////////////////////////////////////////////////////////
public String geraNomeContinuo(String nomeNormal) throws Exception {

    String nomeContinuo = nomeNormal.toUpperCase();
    nomeContinuo = nomeContinuo.replaceAll("[^A-Z]*", "").trim();
    nomeContinuo = nomeContinuo.replaceAll("ME","");
    nomeContinuo = nomeContinuo.replaceAll("EPP","");
    nomeContinuo = nomeContinuo.replaceAll("LTDA","");
    nomeContinuo = nomeContinuo.replaceAll("EIRELI","");
    nomeContinuo = nomeContinuo.replaceAll("SA","");

    return nomeContinuo;

}


//###############################################################################
/////////////////////////////////////////////////////////////////////////////////
//                              TESTE DE LAYOUT
/////////////////////////////////////////////////////////////////////////////////
/*
valida (valorDocumento, nomeOrigem, contaPortador, dataMovimento, valorDocumento - valorJuros)
utilizada em rotas a Receber e a Pagar
*/

public String validaLayout(String contaMovimento, String nomeOrigem, String documento, String nomePortador,
                           String complemento01, String complemento02, String complemento03,
                           String nomeArquivo, String codCentroCusto, double valorDocumento, double valorDesconto, int cont,
                           String contaPortador, String dataMovimento, String linhasProblema, JSONObject roteiro) throws Exception {
							   							   
    String exemplo  = "";
    String texto    = "";
    String codigoErro = "";

    if(!nomeArquivo.toUpperCase().contains("OTTIMIZZA") || nomeArquivo.toUpperCase().contains("ROTEIRO")){
        if(roteiro.has("erroCabecalho")) codigoErro = roteiro.optString("erroCabecalho");

        if(!codigoErro.equals("06")){
            codigoErro = "";

            if((valorDocumento-valorDesconto) == 0){
                codigoErro      = "01";
                linhasProblema  = "IGNORAR";
            }
            if(valorDocumento   == 0){
                codigoErro      = "02";
                linhasProblema  = "IGNORAR";
            }
            if(nomeOrigem.equals("") && contaMovimento.equals("")){
                codigoErro      = "03";
                linhasProblema  = "";
            }
            if(contaPortador.equals("")){
                codigoErro      = "04";
                linhasProblema  = "IGNORAR";
            }
            if(dataMovimento.equals("") ){
                codigoErro      = "05";
                linhasProblema  = "IGNORAR";
            }

            if(!contaPortador.equals("") && contaPortador.equals(contaMovimento) ){
                codigoErro      = "07";
                linhasProblema  = "";
            }
        }
    }else if(nomeArquivo.toUpperCase().contains("OTTIMIZZA") && !nomeArquivo.toUpperCase().contains("ROTEIRO")){
        if(contaPortador.equals("")) contaPortador = "999333";
        if(contaMovimento.equals("")) contaMovimento = "999333";
    }
    if(codigoErro.equals("01")) texto = "O valor DESCONTO igual ao valor do DOCUMENTO. Exemplo: Linha " + cont + " Fornec/Cliente" + nomeOrigem + " Data " + dataMovimento + " Portador " + nomePortador + "/" + contaPortador;
    if(codigoErro.equals("02")) texto = "O campo VALOR DOCUMENTO = Zero. Exemplo: Linha " + cont + " Fornec/Cliente" + nomeOrigem + " Data " + dataMovimento + " Portador " + nomePortador + "/" + contaPortador;
    if(codigoErro.equals("03")) texto = "Campo FORNEC/CLIENTE em branco. Exemplo: Linha " + cont + ", Data " + dataMovimento + ", Valor " + valorDocumento + ", Portador " + nomePortador + "/" + contaPortador;
    if(codigoErro.equals("04")) texto = "O PORTADOR " + nomePortador + " nao teve conta contabil encontrada. Exemplo: Linha " + cont + " Fornec/Cliente " + nomeOrigem + ", Data " + dataMovimento + ", Valor " + valorDocumento;
    if(codigoErro.equals("05")) texto = "O campo DATA nao econtrado. Exemplo: Linha " + cont + ", Fornec/Cliente " + nomeOrigem + ", Valor " + valorDocumento + ", Portador " + nomePortador + "/" + contaPortador;
    if(codigoErro.equals("06")) {
        linhasProblema  = "IGNORAR";
        texto = "Planilha lida a partir do CABECALHO que nao foi encontrado";
    }
    if(codigoErro.equals("07")) texto = "ATENCAO! Ha lancamentos com conta de CREDITO igual a conta de DEBITO. Exemplo: Linha " + cont + " Fornec/Cliente " + nomeOrigem + " Data " + dataMovimento + " Portador " + nomePortador + "/" + contaPortador;

    exemplo = codigoErro +"|;"+ linhasProblema +"|;"+ texto;
	exemplo = "";	 // NAO e mais uma validacao util, apos o fim do ottimizzaFT. retornando vazio desde 04.10.18
	
    return exemplo;
}

public class ttLayout {
    public String lote;
    public String codErroString;
    public String linhasProblema;
    public String texto;
    public int qtdIgnoradas;
    public String tipoLancamento;

    public ttLayout(){}
    public ttLayout(ttLayout tt){
        lote=tt.lote;
        codErroString=tt.codErroString;
        linhasProblema=tt.linhasProblema;
        texto=tt.texto;
        qtdIgnoradas=tt.qtdIgnoradas;
        tipoLancamento=tt.tipoLancamento;
    }
}



public class ttPortador {
    public String nomePortador;
    public String contaPortador;

    public ttPortador(){}
    public ttPortador(ttPortador tt){
        nomePortador=tt.nomePortador;
        contaPortador=tt.contaPortador;
    }
}

public class ttDePara {
    public String nomeOrigem;
    public String complemento01;
    public String complemento02;
    public String complemento03;
    public String complemento04;
    public String complemento05;
    public String codCentroCusto;
    public String documento;

    public ttDePara(){}
    public ttDePara(ttDePara tt){
        nomeOrigem=tt.nomeOrigem;
        complemento01=tt.complemento01;
        complemento02=tt.complemento02;
        complemento03=tt.complemento03;
        complemento04=tt.complemento04;
        complemento05=tt.complemento05;
        codCentroCusto=tt.codCentroCusto;
        documento=tt.documento;
    }
}


public int getParcelaFinanciamento(String mesAnoAtual, String mesAnoBase, int parcelaInicial, int numeroParcelas) {
    int mesRef = 0;
    int anoRef = 0;
    if(mesAnoBase.charAt(2) == '/'){
        mesRef = Integer.parseInt(mesAnoBase.substring(0,2));
        anoRef = Integer.parseInt(mesAnoBase.substring(3));
    }
    String mesAnoRef = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);
    if (mesAnoRef.equals(mesAnoAtual)) return parcelaInicial;

    for (int xx = parcelaInicial + 1;xx <= numeroParcelas;xx++) {
        mesRef = mesRef + 1;
        if (mesRef == 13) {
            mesRef = 1;
            anoRef = anoRef + 1;
        }
        mesAnoRef = StringUtil.leftPad(String.valueOf(mesRef),2,"0") + "/" + String.valueOf(anoRef);

        if (mesAnoRef.equals(mesAnoAtual)) return xx;
    }

    return 0;
}

/**
 * Funcao para deletar extratos na tabela IO_EXTRATO pelo LOTE.
 * Retorna uma booleana verdadeira caso consiga apagar os registros.
 *
 * @param nomeArquivo Nome do Arquivo para apagar registros da Base de Dados.
 * @param dbIOCont    Base de Dados para deletar extratos.
 * @param logger      Logger do InoutManager para mostrar informacoes no log.
 *
 * @return            boolean True se conseguir deletar os registros com Lote igual ao nome do arquivo passado.
 */
public boolean limparIOExtrato(String nomeArquivo, DataBase dbIOCont, InoutLogger logger) throws Exception {
    try {
        dbIOCont.delete("IO_EXTRATO")
        .where("LOTE=?")
        .param(nomeArquivo.toUpperCase())
        .execute();
    } catch (Exception e) {
        logger.logError("\nError trying to delete IO_EXTRATO\n\t", e);
        return false;
    }

    return true;
}

/**
 * Funcao para deletar extratos na tabela IO_EXTRATO pelo CODIGO DA EMPRESA.
 * Retorna uma booleana verdadeira caso consiga apagar os registros.
 *
 * @param codEmpresa  Codigo da Empresa para apagar registros da Base de Dados.
 * @param dbIOCont    Base de Dados para deletar extratos.
 * @param logger      Logger do InoutManager para mostrar informacoes no log.
 *
 * @return            boolean True se conseguir deletar os registros com Lote igual ao nome do arquivo passado.
 */
public boolean limparIOExtratoPorEmpresa(String codEmpresa, DataBase dbIOCont, InoutLogger logger) throws Exception {
    try {
        dbIOCont.delete("IO_EXTRATO")
        .where("CODEMPRESA=?")
        .param(codEmpresa)
        .execute();
    } catch (Exception e) {
        logger.logError("\nError trying to delete IO_EXTRATO\n\t", e);
        return false;
    }

    return true;
}

/**
 * Funcao para retornar um Objeto ttMovimentoPadrao baseado nos dados de um Extrato.
 *
 * @param jDados       Dados para criacao do Objeto ttMovimento.
 * @param recMov       Dados do Extratos capturados do Banco de Dados
 * @param logger       InoutLogger.
 *
 * @return             Retorna um Objeto ttMovimento de um Extrato.
 */
public ttMovimentoPadrao getMovimentoExtrato(JSONObject recMov, InoutLogger logger) throws Exception {

    // Inicializacao de Variaveis
    String codEmpresa      = "";  // FORA ok
    String nomeEmpresa     = "";  // FORA ok
    String nomeArquivo     = "";  // FORA ok
    String tipoLancamento  = "";  // FORA ok
    String contaMovimento  = "";  // FORA ok
    String contaPortador   = "";  // FORA ok
    String contLinha       = "";  // FORA ok
	
	String documento       = "";
    String nomeOrigem      = "";  // INSIDE ok
    String nomePortador    = "";  // INSIDE ok
    String dataMovimento   = "";  // INSIDE ok
    double valorDocumento  = 0.0; // INSIDE ok
    String complemento02   = "";  // INSIDE ok
    String complemento03   = "";  // INSIDE ok
    String debitoCredito   = "";  // INSIDE ok
    String chaveExtrato    = "";  // INSIDE ok
    String arquivoOriginal = "";  // INSIDE ok

    String dataLote        = "";  // INSIDE ok
    String contLinhaTexto  = "";  // INSIDE ok
    String consolidaClass  = "";  // INSIDE ok
    String classificacao   = "";  // INSIDE ok
    String tipoPlanilha    = "";  // INSIDE ok
    String lote            = "";  // INSIDE ok
    String chave           = "";  // INSIDE ok
    String key             = "";  // INSIDE ok

    // Receber Variaveis Externas
    if(recMov.has("CODEMPRESA"))      codEmpresa     = recMov.optString("CODEMPRESA").trim();
    if(recMov.has("NOMEEMPRESA"))     nomeEmpresa    = recMov.optString("NOMEEMPRESA").trim();
    if(recMov.has("NOMEARQUIVO"))     nomeArquivo    = recMov.optString("NOMEARQUIVO").trim();
    if(recMov.has("TIPOLANCAMENTO"))  tipoLancamento = recMov.optString("TIPOLANCAMENTO").trim();
    if(recMov.has("CONTAMOVIMENTO"))  contaMovimento = recMov.optString("CONTAMOVIMENTO").trim();
    if(recMov.has("CONTAPORTADOR"))   contaPortador  = recMov.optString("CONTAPORTADOR").trim();
    if(recMov.has("CONTLINHATEXTO"))  contLinha      = recMov.optString("CONTLINHATEXTO").trim();
	
	if(recMov.has("DOCUMENTO"))       documento      = recMov.optString("DOCUMENTO").trim();//validação temporaria 

    // Receber JSONObject
    nomeOrigem      = recMov.optString("HISTORICO");
    nomePortador    = recMov.optString("PORTADOR");
    dataMovimento   = recMov.optString("DATAMOVIMENTO");
    valorDocumento  = recMov.optDouble("VALORDOCUMENTO");
    complemento02   = recMov.optString("COMPLEMENTO");
    debitoCredito   = recMov.optString("DEBITOCREDITO");
    chaveExtrato    = recMov.optString("CHAVE");
    arquivoOriginal = recMov.optString("LOTE");
    if (nomeArquivo.equals("")) nomeArquivo = arquivoOriginal;
	
	//2307-010554 adicionado para conseguir capturar a descricao dos lancamentos extra para o complemento03
	if (complemento02.contains("CP03:")) {
		complemento03 = cutString(complemento02, "CP03:");
		complemento02 = cutString(complemento02, 0, "CP03:");
	}

    contLinhaTexto  = StringUtil.leftPad(contLinha, 04, "0");
    consolidaClass  = contLinhaTexto;

    classificacao   = dataMovimento + "9" + consolidaClass;
	logger.logDebug("LENDO DATA EXTRATO "  + nomeOrigem + "<>" + dataMovimento);

    tipoPlanilha    = "EXTRATO-" + nomePortador.trim();
    Date dtLote     = DateUtil.stringToDate(dataMovimento,"dd/MM/yyyy");
    dataLote        = DateUtil.dateToString(dtLote,"yyyy-MM");

    lote  = nomeEmpresa + "_" + codEmpresa + "__" + nomeArquivo  + "__" + dataLote + "_" + tipoLancamento;

    chave = lote + "-EXTRATO-" + contLinha;

    if(chave.length() > 200)  chave = chave.substring(0, 199);

    key  = chave  + "-CTB";

    ttMovimentoPadrao ttMovExtrato = new ttMovimentoPadrao();

    ttMovExtrato.lote              = lote;
    ttMovExtrato.documento         = documento;
    ttMovExtrato.codEmpresa        = codEmpresa;
    ttMovExtrato.nomeEmpresa       = nomeEmpresa;
    ttMovExtrato.dataMovimento     = dataMovimento;
    ttMovExtrato.tipoMovimento     = "CTB";
    ttMovExtrato.tipoLancamento    = tipoLancamento;
    ttMovExtrato.historico         = "";
    ttMovExtrato.valorDocumento    = valorDocumento;
    ttMovExtrato.valorDesconto     = 0;
    ttMovExtrato.valorMulta        = 0;
    ttMovExtrato.valorJuros        = 0;
    ttMovExtrato.contaJuros        = "";
    ttMovExtrato.contaMulta        = "";
    ttMovExtrato.contaDesconto     = "";
    ttMovExtrato.nomePortador      = nomePortador;
    ttMovExtrato.centroCusto       = "";
    ttMovExtrato.nomeOrigem        = nomeOrigem;
    ttMovExtrato.cpfCnpj           = "";
    ttMovExtrato.chave             = chave + "-CTB";
    ttMovExtrato.classificacao     = classificacao;
    ttMovExtrato.codFilial         = "";

    ttMovExtrato.complemento01     = nomePortador;
    ttMovExtrato.complemento02     = complemento02;
    ttMovExtrato.complemento03     = complemento03;
    ttMovExtrato.complemento04     = nomeOrigem;
    ttMovExtrato.complemento05     = "";
    ttMovExtrato.complemento06     = "";
    ttMovExtrato.complemento07     = "";
    ttMovExtrato.complemento08     = "";
    ttMovExtrato.complemento09     = "";
    ttMovExtrato.complemento10     = "";
    ttMovExtrato.nomeArquivo       = arquivoOriginal;
    ttMovExtrato.tipoPlanilha      = tipoPlanilha;
    ttMovExtrato.chaveExtrato      = chaveExtrato;
    ttMovExtrato.debitoCredito     = debitoCredito;
    ttMovExtrato.historicoMulta    = "";
    ttMovExtrato.historicoJuros    = "";
    ttMovExtrato.historicoDesconto = "";

    if(tipoLancamento.contains("PAGAR")){
        ttMovExtrato.naturezaContabil  = "D";
        ttMovExtrato.contaDebito       = contaMovimento;
        ttMovExtrato.contaCredito      = contaPortador;
    }

    if(tipoLancamento.contains("RECEBER")){
        ttMovExtrato.naturezaContabil  = "C";
        ttMovExtrato.contaDebito       = contaPortador;
        ttMovExtrato.contaCredito      = contaMovimento;
    }

    ttMovExtrato.contador = 0;
	return ttMovExtrato;
}

/**
 * Funcao para busca de Extratos no Banco de Dados pelo codigo da empresa. Retorna um JSONArray com os Extratos obtidos.
 *
 * @param codEmpresa Codigo da Empresa para busca na table IO_EXTRATO do DataBase.
 * @param dbIOCont   DataBase para realizar a busca de Extratos.
 * @param logger     InoutLogger.
 *
 * @return           JSONArray com Extratos da Empresa passada, caso encontrados. Caso nao encontrando retorna null.
 */
public JSONArray getExtratosEmpresa(String codEmpresa, DataBase dbIOCont, InoutLogger logger) throws Exception {
    JSONArray extratoEmpresa = new JSONArray();

    try {
        extratoEmpresa = dbIOCont.sql("SELECT CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO FROM IO_EXTRATO WHERE DATAMOVIMENTO <> '' AND CODEMPRESA = ?")
        .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
        .param(codEmpresa)
        .query();
    } catch(Exception e) {
		logger.logInfo("NAO ENCONTROU IO_EXTRATOS");
        logger.logInfo("Error: " + e.getMessage());
        return null;
    }
	
	//logger.logInfo("LEUEXT " + codEmpresa + " | " + extratoEmpresa.toString());

    return extratoEmpresa;
}



/* ##################################################################################################### @EXTRATO-OFX ##
Leitura de Planilha Padrão EXTRATO - OFX
## ################################################################################################################## */
public boolean readOFXDefault(MemoryFile memFile, JSONObject jDados, DataBase dbIOCont,  InoutLogger logger) throws Exception {


    JSONObject extratoEmpresa = new JSONObject();

    // Inicializacao de Variaveis
    String codEmpresa        = "";
    String nomeArquivo       = "";
    String chaveExtrato      = "";
    String nomeEmpresa       = "";

    String documento         = "";
    String nomeOrigem        = "";
    String nomePortador      = "";
    String dataMovimento     = "";
    String dataLote          = "";
    String complemento01     = "";
    String complemento02     = "";
    String complemento03     = "";
    String complemento04     = "";
    String complemento05     = "";
    String complemento06     = "";
    String complemento07     = "";
    String complemento08     = "";
    String complemento09     = "";
    String complemento10     = "";
    String debitoCredito     = "";
    String cpfCnpj           = "";
    String historico         = "";

    String strValorDocumento = "";
    String contLinhaExtrato  = "";
	String auxDebitoCredito  = "";

    double valorDocumento    = 0.0;
    double valorJuros        = 0.0;
    double valorDesconto     = 0.0;
    double valorMulta        = 0.0;
    double valorPagamento    = 0.0;

	boolean leDocumento = false;
	boolean leDocumentoFitId = false;
    if(jDados.has("CODEMPRESA"))   codEmpresa   = jDados.optString("CODEMPRESA").trim();
    if(jDados.has("NOMEARQUIVO"))  nomeArquivo  = jDados.optString("NOMEARQUIVO").trim();
	if(jDados.has("NOMEEMPRESA"))  nomeEmpresa  = jDados.optString("NOMEEMPRESA").trim();
    if(jDados.has("CHECKNUM"))     leDocumento = true;
    if(jDados.has("FITID"))     leDocumentoFitId = true;

    while (memFile.hasNextLine()) {
        try {
            String line = memFile.nextLine();
			// logger.logInfo("LINHA 1 | = "+line);
			line = line.replace("&#234;", "E").replace("&#202;", "E").replace("&#201;", "E").replace("&#243;", "O");
            line = StringUtil.removeSpecialCharsToUC(line);
			// logger.logInfo("LINHA 2 | = "+line);
			line = stringNormalizer(line, true);
			// logger.logDebug("Line -> "+line);

            // Limpa todas as variaveis
            if (line.contains("<STMTTRN>")) {
                complemento02   = "";
                complemento03   = "";
                complemento04   = "";
                complemento05   = "";

                complemento06   = "";
                complemento07   = "";
                complemento08   = "";
                complemento09   = "";
                complemento10   = "";

                cpfCnpj         = "";

                nomeOrigem      = "";
                documento       = "";
                historico       = "";

                valorDocumento  = 0;
                valorJuros      = 0;
                valorDesconto   = 0;
                valorMulta      = 0;
                valorPagamento  = 0;
            }

            // Retorna nomePortador
            //     complemento01 = nomePortador
            if (line.contains("<ACCTID>")) {
                nomePortador  = line.substring(line.indexOf("<ACCTID>")+8);
                nomePortador  = nomePortador.replaceAll("</ACCTID>","");
                complemento01 = nomePortador;
            }

            // Retorna String data -> "dd/MM/yyyy|MM-yyyy".
            //     Pega dataMovimento e dataLote
            if (line.contains("<DTPOSTED>")) {
                String dtPosted = line.substring(line.indexOf("<DTPOSTED>")+10);
                dataMovimento   = dtPosted.substring(6,8) + "/" +  dtPosted.substring(4,6) + "/" + dtPosted.substring(0,4);

                try {
                    Date dt       = DateUtil.stringToDate(dataMovimento, "dd/MM/yyyy");
                    dataMovimento = DateUtil.dateToString(dt, "dd/MM/yyyy");
                    dataLote      = DateUtil.dateToString(dt, "yyyy-MM");
                } catch (Exception dt1) {
                    dataMovimento = "";
                }
            }
			// logger.logDebug("OTT -> " + " |DM=" + dataMovimento);
            // Retorna String ValorDocumento -> "1234.56|EXTRATO-????" -> ???? = Credito/Debito.
            //     Pega Valor Documento e debitoCredito
            //     complemento02 = debitoCredito
			if(line.contains("<TRNTYPE>")){
				auxDebitoCredito = line.substring(line.indexOf("<TRNTYPE>")+9);
				auxDebitoCredito = auxDebitoCredito.replaceAll("<TRNTYPE>", "");
			}
			
			
			
            if (line.contains("<TRNAMT>")) {
                strValorDocumento = line.substring(line.indexOf("<TRNAMT>")+8);
                strValorDocumento = strValorDocumento.replaceAll("</TRNAMT>","");
                try {
                    valorDocumento = DecimalUtil.toDecimal(strValorDocumento);
                } catch(Exception e) {
                    valorDocumento = 0;
                }

                // if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                // if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
				// if(valorDocumento > 0 && auxDebitoCredito.contains("DEBIT")) debitoCredito = "EXTRATO-DEBITO";
				
				if(valorDocumento < 0) debitoCredito = "EXTRATO-DEBITO";
                if(valorDocumento > 0) debitoCredito = "EXTRATO-CREDITO";
				if(valorDocumento > 0 && auxDebitoCredito.contains("DEBIT") ||
                valorDocumento > 0 && auxDebitoCredito.contains("PAYMENT")) debitoCredito = "EXTRATO-DEBITO";
				

                valorDocumento = Math.abs(valorDocumento);
            }
			// logger.logInfo("OTTVD -> " + line + " |VD=" + valorDocumento + " | " + debitoCredito);
			
			try {
				if(line.contains("<REFNUM>")){
					String documentoAux 		= line.substring(line.indexOf("<REFNUM>")+8);
					documentoAux       = documentoAux.replaceAll("</REFNUM>", "");
					documentoAux      = cutString(documentoAux, 0, 80);
					if(!documentoAux.trim().equals(""))documento = documentoAux;
				}
				
				if(line.contains("<CHECKNUM>")){
					String documentoAux 		= line.substring(line.indexOf("<CHECKNUM>")+10);
					documentoAux       = documentoAux.replaceAll("</CHECKNUM>", "");
					documentoAux       = cutString(documentoAux, 0, 80);
					if(!documentoAux.trim().equals(""))documento = documentoAux;
				}
				line = line.replaceAll("REFNUM", "CHECKNUM");

			} catch (Exception xx) {}
			
			
			
			 if (leDocumento && line.contains("<CHECKNUM>")) {
				complemento01   = line.substring(line.indexOf("<CHECKNUM>")+10);
                complemento01   = complemento01.replaceAll("</CHECKNUM>","");
			}else if (leDocumento && line.contains("<REFNUM>")) {
				complemento01   = line.substring(line.indexOf("<REFNUM>")+8);
                complemento01   = complemento01.replaceAll("</REFNUM>","");
			}

			if (leDocumentoFitId && line.contains("<FITID>")) {
				//complemento01   = line.substring(line.indexOf("<FITID>")+7);
				complemento01   = cutString(line, "<FITID>");
                complemento01   = complemento01.replaceAll("</FITID>","");
			}			
			
			 // Retorna Nome Origem
            if (line.contains("<MEMO>")) {
                nomeOrigem   = nomeOrigem + " " + line.substring(line.indexOf("<MEMO>")+6);
                nomeOrigem   = nomeOrigem.replaceAll("</MEMO>","");
            }
			
			// logger.logDebug("OTT -> " + line);
			if (line.contains("<MEMO>") && line.contains("</MEMO>")) {
				// gera ofx
			}			
			//#2306-007686
			if(line.contains("<NAME>") && !nomeOrigem.equals("")){ 
				nomeOrigem = nomeOrigem + " " + cutString(line, "<NAME>", "</NAME>");
			} 
			else if (!line.contains("</STMTTRN>")) continue;
						
			if(valorDocumento == 0){continue;}
			
			if(codEmpresa.equals("8") && nomeEmpresa.contains("Institutoelo") &&
			(nomeOrigem.contains("CHEQUE")||nomeOrigem.contains("PAG") && nomeOrigem.contains("BOLETO")))
				nomeOrigem = nomeOrigem + " " + complemento01;
            
            contLinhaExtrato = StringUtil.leftPad(String.valueOf(memFile.getCurrentIndex()), 05, "0");
			
			nomeOrigem = nomeOrigem.trim();
			nomeOrigem = nomeOrigem.replaceAll("EAMP;","&").replaceAll("\t"," ").replaceAll(";","").replace("'","").replace("!","").replace("\\","").replaceAll("AMP","").trim();
			nomeOrigem = stringNormalizer(nomeOrigem, true);
			nomeOrigem = StringUtil.removeSpecialCharsToUC(nomeOrigem);

            //#2312-024085 By Leal - Looping feito pois replace/replaceAll nao removiam todos os pipes
			try{
				for (int j = 0; j < nomeOrigem.length(); j++) {
					if (nomeOrigem.contains("|")) nomeOrigem = nomeOrigem.replaceAll("\\|", "");
					else break;
				}
			}catch (Exception e) {logger.logInfo("Problema nomeOrigem " + e.getMessage());}
			
			//#2312-024085 By Leal
			nomeOrigem = nomeOrigem.trim().replace("  ", " ");

            // Gerar Chave Extrato;
            chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador + "-" + contLinhaExtrato;
			logger.logDebug("DATA E VALOR EXTRATO " + valorDocumento + " | " + dataMovimento + " | " + chaveExtrato);

            // Buscar Extrato por Chave na Tabela IO_EXTRATO.
            extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
            .fields("CHAVE")
            .param(chaveExtrato)
            .queryUnique();

            // Inserir caso Chave nao encontrada.
            if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
                try {
					// logger.logDebug("IO_EXTRATO PASSOU");
                    dbIOCont.insert("IO_EXTRATO")
                    .fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
                    .param(chaveExtrato)
                    .param(codEmpresa)
                    .param(dataMovimento)
					.param(documento)
                    .param(nomePortador)
                    .param(nomeOrigem)
                    .param(nomeArquivo.toUpperCase())
                    .param(complemento01)
                    .param(valorDocumento)
                    .param(debitoCredito)
                    .param(0)
                    .execute();
                } catch(Exception e) {
                    logger.logError("Error inserting to IO_EXTRATO", e);
                    continue;
                }
                // Atualizar Chave caso encontrada.
            } else {
                try {
                    dbIOCont.update("IO_EXTRATO")
                    .fields("EXTRATOLIDO")
                    .where("CHAVE = ? ")
                    .param(0)
                    .param(chaveExtrato)
                    .execute();
                } catch(Exception e1) {	
                    logger.logError("Error updating IO_EXTRATO", e1);
                    continue;
                }
            }
			valorDocumento = 0;
        } catch(Exception e) {
            logger.logError("ERRO: ", e);
        }
    }

    return true;
}

public boolean insertIOExtrato(JSONObject jDados, DataBase dbIOCont, InoutLogger logger) throws Exception {

    // Inicializacao de Variaveis
    String codEmpresa        = jDados.optString("EMPRESA");
    String nomeArquivo       = jDados.optString("NOMEARQUIVO");
    String nomePortador      = jDados.optString("PORTADOR");
    String nomeOrigem        = jDados.optString("NOMEORIGEM");
    String dataMovimento     = jDados.optString("DATAMOVIMENTO");
	String documento         = "";
	if(jDados.has("DOCUMENTO")){
		documento = jDados.optString("DOCUMENTO");
	}
    double valorDocumento    = jDados.optDouble("VALORDOCUMENTO");
    String complemento01     = jDados.optString("COMPLEMENTO01");
    String debitoCredito     = jDados.optString("DEBITO-CREDITO");
	String contLinhaExtrato    = jDados.optString("CONT");

	complemento01 = cutString(complemento01, 0, 199);
	
            // Gerar Chave Extrato;
    String chaveExtrato = codEmpresa + "-" +  dataMovimento + "-" + debitoCredito + "-" + String.format("%.2f", valorDocumento) + "-" + nomePortador.toLowerCase() + "-" + contLinhaExtrato;
	
	// Buscar Extrato por Chave na Tabela IO_EXTRATO.
	JSONObject extratoEmpresa = dbIOCont.sql("SELECT CHAVE FROM IO_EXTRATO WHERE CHAVE = ?")
	.fields("CHAVE")
	.param(chaveExtrato)
	.queryUnique();

	// Inserir caso Chave nao encontrada.
	if (extratoEmpresa == null || !extratoEmpresa.has("CHAVE")) {
		try {
			dbIOCont.insert("IO_EXTRATO")
			.fields("CHAVE,CODEMPRESA, DATAMOVIMENTO, DOCUMENTO, PORTADOR, HISTORICO, LOTE, COMPLEMENTO, VALORDOCUMENTO, DEBITOCREDITO, EXTRATOLIDO")
			.param(chaveExtrato)
			.param(codEmpresa)
			.param(dataMovimento)
			.param(documento)
			.param(nomePortador.toUpperCase())
			.param(nomeOrigem)
			.param(nomeArquivo)
			.param(complemento01)
			.param(valorDocumento)
			.param(debitoCredito)
			.param(0)
			.execute();
		} catch(Exception e) {
			logger.logError("Error inserting to IO_EXTRATO", e);
		}
		// Atualizar Chave caso encontrada.
	} else {
		try {
			dbIOCont.update("IO_EXTRATO")
			.fields("EXTRATOLIDO")
			.where("CHAVE = ? ")
			.param(0)
			.param(chaveExtrato)
			.execute();
		} catch(Exception e1) {
			logger.logError("Error updating IO_EXTRATO", e1);
		}
	}

	return true;

}


class ttMovimentoPadrao {
    public String lote = "";
	public String classificacao = "";
	public String dataMovimento = "";
	public String documento = "";
	public int    parcelaDoc;
	public String codEmpresa = "";
	public String nomeEmpresa = "";
	public String nomeOrigem = "";
	public String contaJuros = "";
	public String contaMulta = "";
	public String contaDesconto = "";
	public String contaDebito = "";
	public String contaCredito = "";
	public String historico = "";
	public String historicoJuros = "";
	public String historicoDesconto = "";
	public String historicoMulta = "";
	public double valorDocumento;
	public double valorDesconto;
	public double valorJuros;
	public double valorMulta;
	public String nomePortador = "";
	public String centroCusto = "";
	public String naturezaContabil = "";
	public String tipoMovimento = "";
	public String tipoLancamento = "";
	public String cpfCnpj = "";
	public String serie = "";
	public String statusMovimento = "";
	public String chave = "";
	public int    contador;
	public String complemento01 = "";
	public String complemento02 = "";
	public String complemento03 = "";
	public String complemento04 = "";
	public String complemento05 = "";
	public String complemento06 = "";
	public String complemento07 = "";
	public String complemento08 = "";
	public String complemento09 = "";
	public String complemento10 = "";
	public String nomeArquivo   = "";
	public String mesAnoAtual   = "";
	public String mesAnoAnterior = "";
	public String mesAnoAnterior2 = "";
	public String tipoPlanilha  = "";
	public String codFilial     = "";
	public String chaveExtrato  = "";
	public String debitoCredito = "";
	public String abaPlanilha   = "";
	public String contLinha		= "2";


	public ttMovimentoPadrao(){}
	public ttMovimentoPadrao(ttMovimentoPadrao tt){

		lote=tt.lote;
		classificacao=tt.classificacao;
		dataMovimento=tt.dataMovimento;
		documento=tt.documento;
		parcelaDoc=tt.parcelaDoc;
		codEmpresa=tt.codEmpresa;
		nomeEmpresa=tt.nomeEmpresa;
		nomeOrigem=tt.nomeOrigem;
		contaJuros=tt.contaJuros;
		contaMulta=tt.contaMulta;
		contaDesconto=tt.contaDesconto;
		contaDebito=tt.contaDebito;
		contaCredito=tt.contaCredito;
		historico=tt.historico;
		historicoJuros=tt.historicoJuros;
		historicoDesconto=tt.historicoDesconto;
		historicoMulta=tt.historicoMulta;
		valorDocumento=tt.valorDocumento;
		valorDesconto=tt.valorDesconto;
		valorJuros=tt.valorJuros;
		valorMulta=tt.valorMulta;
		nomePortador=tt.nomePortador;
		centroCusto=tt.centroCusto;
		naturezaContabil=tt.naturezaContabil;
		tipoMovimento=tt.tipoMovimento;
		tipoLancamento=tt.tipoLancamento;
		cpfCnpj=tt.cpfCnpj;
		documento=tt.documento;
		serie=tt.serie;
		statusMovimento=tt.statusMovimento;
		chave=tt.chave;
		contador=tt.contador;
		complemento01=tt.complemento01;
		complemento02=tt.complemento02;
		complemento03=tt.complemento03;
		complemento04=tt.complemento04;
		complemento05=tt.complemento05;
		complemento06=tt.complemento06;
		complemento07=tt.complemento07;
		complemento08=tt.complemento08;
		complemento09=tt.complemento09;
		complemento10=tt.complemento10;
		nomeArquivo=tt.nomeArquivo;
		mesAnoAtual=tt.mesAnoAtual;
		mesAnoAnterior=tt.mesAnoAnterior;
		mesAnoAnterior2=tt.mesAnoAnterior2;
		tipoPlanilha=tt.tipoPlanilha;
		codFilial=tt.codFilial;
		chaveExtrato=tt.chaveExtrato;
		debitoCredito=tt.debitoCredito;
		abaPlanilha=tt.abaPlanilha;
		contLinha=tt.contLinha;

	}
}

class ttParcelaDominio {
    public String documento;
	public int ultimaParcela;
    public ttParcelaDominio(){}

    public ttParcelaDominio(ttParcelaDominio ttP){
        documento = ttP.documento;
		ultimaParcela = ttP.ultimaParcela;
    }
}

 